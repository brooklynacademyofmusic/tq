// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Session session
//
// swagger:model Session
type Session struct {

	// business facing
	BusinessFacing bool `json:"BusinessFacing,omitempty"`

	// cart info
	CartInfo *CartInfo `json:"CartInfo,omitempty"`

	// checkout status
	CheckoutStatus *CheckoutStatus `json:"CheckoutStatus,omitempty"`

	// has locked seats
	HasLockedSeats bool `json:"HasLockedSeats,omitempty"`

	// is guest
	IsGuest bool `json:"IsGuest,omitempty"`

	// is logged in
	IsLoggedIn bool `json:"IsLoggedIn,omitempty"`

	// login info
	LoginInfo *SessionLoginInfo `json:"LoginInfo,omitempty"`

	// mode of sale Id
	ModeOfSaleID int32 `json:"ModeOfSaleId,omitempty"`

	// order Id
	OrderID int32 `json:"OrderId,omitempty"`

	// original mode of sale Id
	OriginalModeOfSaleID int32 `json:"OriginalModeOfSaleId,omitempty"`

	// seats expired
	SeatsExpired bool `json:"SeatsExpired,omitempty"`

	// source Id
	SourceID int32 `json:"SourceId,omitempty"`
}

// Validate validates this session
func (m *Session) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCartInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckoutStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Session) validateCartInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CartInfo) { // not required
		return nil
	}

	if m.CartInfo != nil {
		if err := m.CartInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CartInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CartInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Session) validateCheckoutStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckoutStatus) { // not required
		return nil
	}

	if m.CheckoutStatus != nil {
		if err := m.CheckoutStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CheckoutStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CheckoutStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Session) validateLoginInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginInfo) { // not required
		return nil
	}

	if m.LoginInfo != nil {
		if err := m.LoginInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LoginInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LoginInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this session based on the context it is used
func (m *Session) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCartInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCheckoutStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Session) contextValidateCartInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CartInfo != nil {

		if swag.IsZero(m.CartInfo) { // not required
			return nil
		}

		if err := m.CartInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CartInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CartInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Session) contextValidateCheckoutStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.CheckoutStatus != nil {

		if swag.IsZero(m.CheckoutStatus) { // not required
			return nil
		}

		if err := m.CheckoutStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CheckoutStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CheckoutStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Session) contextValidateLoginInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginInfo != nil {

		if swag.IsZero(m.LoginInfo) { // not required
			return nil
		}

		if err := m.LoginInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LoginInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LoginInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Session) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Session) UnmarshalBinary(b []byte) error {
	var res Session
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
