// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContextInformation context information
//
// swagger:model ContextInformation
type ContextInformation struct {

	// default batch type Id
	DefaultBatchTypeID int32 `json:"DefaultBatchTypeId,omitempty"`

	// default control group Id
	DefaultControlGroupID int32 `json:"DefaultControlGroupId,omitempty"`

	// default mode of sale Id
	DefaultModeOfSaleID int32 `json:"DefaultModeOfSaleId,omitempty"`

	// organization Id
	OrganizationID int32 `json:"OrganizationId,omitempty"`

	// organization name
	OrganizationName string `json:"OrganizationName,omitempty"`

	// p2 pe only
	P2PeOnly bool `json:"P2PeOnly,omitempty"`

	// user
	User *User `json:"User,omitempty"`

	// user group
	UserGroup *UserGroupSummary `json:"UserGroup,omitempty"`

	// worker constituent Id
	WorkerConstituentID int32 `json:"WorkerConstituentId,omitempty"`
}

// Validate validates this context information
func (m *ContextInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContextInformation) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

func (m *ContextInformation) validateUserGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroup) { // not required
		return nil
	}

	if m.UserGroup != nil {
		if err := m.UserGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserGroup")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this context information based on the context it is used
func (m *ContextInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContextInformation) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

func (m *ContextInformation) contextValidateUserGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.UserGroup != nil {

		if swag.IsZero(m.UserGroup) { // not required
			return nil
		}

		if err := m.UserGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContextInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContextInformation) UnmarshalBinary(b []byte) error {
	var res ContextInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
