// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Worker worker
//
// swagger:model Worker
type Worker struct {

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// constituent inactive
	ConstituentInactive *ConstituentInactiveSummary `json:"ConstituentInactive,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// first name
	FirstName string `json:"FirstName,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// last name
	LastName string `json:"LastName,omitempty"`

	// prefix
	Prefix *PrefixSummary `json:"Prefix,omitempty"`

	// short display name
	ShortDisplayName string `json:"ShortDisplayName,omitempty"`

	// sort name
	SortName string `json:"SortName,omitempty"`

	// suffix
	Suffix *SuffixSummary `json:"Suffix,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// worker type
	WorkerType *WorkerTypeSummary `json:"WorkerType,omitempty"`
}

// Validate validates this worker
func (m *Worker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstituentInactive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Worker) validateConstituentInactive(formats strfmt.Registry) error {
	if swag.IsZero(m.ConstituentInactive) { // not required
		return nil
	}

	if m.ConstituentInactive != nil {
		if err := m.ConstituentInactive.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConstituentInactive")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConstituentInactive")
			}
			return err
		}
	}

	return nil
}

func (m *Worker) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validatePrefix(formats strfmt.Registry) error {
	if swag.IsZero(m.Prefix) { // not required
		return nil
	}

	if m.Prefix != nil {
		if err := m.Prefix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Prefix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Prefix")
			}
			return err
		}
	}

	return nil
}

func (m *Worker) validateSuffix(formats strfmt.Registry) error {
	if swag.IsZero(m.Suffix) { // not required
		return nil
	}

	if m.Suffix != nil {
		if err := m.Suffix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Suffix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Suffix")
			}
			return err
		}
	}

	return nil
}

func (m *Worker) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validateWorkerType(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkerType) { // not required
		return nil
	}

	if m.WorkerType != nil {
		if err := m.WorkerType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WorkerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WorkerType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this worker based on the context it is used
func (m *Worker) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstituentInactive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrefix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuffix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkerType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Worker) contextValidateConstituentInactive(ctx context.Context, formats strfmt.Registry) error {

	if m.ConstituentInactive != nil {

		if swag.IsZero(m.ConstituentInactive) { // not required
			return nil
		}

		if err := m.ConstituentInactive.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConstituentInactive")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConstituentInactive")
			}
			return err
		}
	}

	return nil
}

func (m *Worker) contextValidatePrefix(ctx context.Context, formats strfmt.Registry) error {

	if m.Prefix != nil {

		if swag.IsZero(m.Prefix) { // not required
			return nil
		}

		if err := m.Prefix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Prefix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Prefix")
			}
			return err
		}
	}

	return nil
}

func (m *Worker) contextValidateSuffix(ctx context.Context, formats strfmt.Registry) error {

	if m.Suffix != nil {

		if swag.IsZero(m.Suffix) { // not required
			return nil
		}

		if err := m.Suffix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Suffix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Suffix")
			}
			return err
		}
	}

	return nil
}

func (m *Worker) contextValidateWorkerType(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkerType != nil {

		if swag.IsZero(m.WorkerType) { // not required
			return nil
		}

		if err := m.WorkerType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WorkerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WorkerType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Worker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Worker) UnmarshalBinary(b []byte) error {
	var res Worker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
