// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformancePriceAuditEntry performance price audit entry
//
// swagger:model PerformancePriceAuditEntry
type PerformancePriceAuditEntry struct {

	// action
	Action string `json:"Action,omitempty"`

	// date
	// Format: date-time
	Date strfmt.DateTime `json:"Date,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// enabled
	Enabled bool `json:"Enabled,omitempty"`

	// end date time
	// Format: date-time
	EndDateTime strfmt.DateTime `json:"EndDateTime,omitempty"`

	// event date time
	// Format: date-time
	EventDateTime strfmt.DateTime `json:"EventDateTime,omitempty"`

	// location
	Location string `json:"Location,omitempty"`

	// min price
	MinPrice float64 `json:"MinPrice,omitempty"`

	// performance code
	PerformanceCode string `json:"PerformanceCode,omitempty"`

	// performance Id
	PerformanceID int32 `json:"PerformanceId,omitempty"`

	// performance price type Id
	PerformancePriceTypeID int32 `json:"PerformancePriceTypeId,omitempty"`

	// price
	Price float64 `json:"Price,omitempty"`

	// price layer Id
	PriceLayerID int32 `json:"PriceLayerId,omitempty"`

	// price layer type description
	PriceLayerTypeDescription string `json:"PriceLayerTypeDescription,omitempty"`

	// price type description
	PriceTypeDescription string `json:"PriceTypeDescription,omitempty"`

	// price type Id
	PriceTypeID int32 `json:"PriceTypeId,omitempty"`

	// start date time
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"StartDateTime,omitempty"`

	// user
	User string `json:"User,omitempty"`

	// zone description
	ZoneDescription string `json:"ZoneDescription,omitempty"`

	// zone Id
	ZoneID int32 `json:"ZoneId,omitempty"`
}

// Validate validates this performance price audit entry
func (m *PerformancePriceAuditEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformancePriceAuditEntry) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("Date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PerformancePriceAuditEntry) validateEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PerformancePriceAuditEntry) validateEventDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EventDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EventDateTime", "body", "date-time", m.EventDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PerformancePriceAuditEntry) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this performance price audit entry based on context it is used
func (m *PerformancePriceAuditEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PerformancePriceAuditEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformancePriceAuditEntry) UnmarshalBinary(b []byte) error {
	var res PerformancePriceAuditEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
