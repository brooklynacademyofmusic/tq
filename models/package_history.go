// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PackageHistory package history
//
// swagger:model PackageHistory
type PackageHistory struct {

	// amount
	Amount float64 `json:"Amount,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// locations
	Locations string `json:"Locations,omitempty"`

	// mode of sale
	ModeOfSale *ModeOfSaleSummary `json:"ModeOfSale,omitempty"`

	// number of seats
	NumberOfSeats int32 `json:"NumberOfSeats,omitempty"`

	// order
	Order *HistoryOrderSummary `json:"Order,omitempty"`

	// package
	Package *HistoryPackageSummary `json:"Package,omitempty"`

	// performance count
	PerformanceCount int32 `json:"PerformanceCount,omitempty"`

	// price type
	PriceType *EntitySummary `json:"PriceType,omitempty"`

	// role
	Role string `json:"Role,omitempty"`

	// season
	Season *SeasonSummary `json:"Season,omitempty"`

	// zone
	Zone *ZoneSummary `json:"Zone,omitempty"`
}

// Validate validates this package history
func (m *PackageHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModeOfSale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageHistory) validateModeOfSale(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeOfSale) { // not required
		return nil
	}

	if m.ModeOfSale != nil {
		if err := m.ModeOfSale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ModeOfSale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ModeOfSale")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) validateOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if m.Order != nil {
		if err := m.Order.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Order")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Order")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) validatePriceType(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceType) { // not required
		return nil
	}

	if m.PriceType != nil {
		if err := m.PriceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceType")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) validateSeason(formats strfmt.Registry) error {
	if swag.IsZero(m.Season) { // not required
		return nil
	}

	if m.Season != nil {
		if err := m.Season.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) validateZone(formats strfmt.Registry) error {
	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Zone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Zone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this package history based on the context it is used
func (m *PackageHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModeOfSale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageHistory) contextValidateModeOfSale(ctx context.Context, formats strfmt.Registry) error {

	if m.ModeOfSale != nil {

		if swag.IsZero(m.ModeOfSale) { // not required
			return nil
		}

		if err := m.ModeOfSale.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ModeOfSale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ModeOfSale")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) contextValidateOrder(ctx context.Context, formats strfmt.Registry) error {

	if m.Order != nil {

		if swag.IsZero(m.Order) { // not required
			return nil
		}

		if err := m.Order.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Order")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Order")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {

		if swag.IsZero(m.Package) { // not required
			return nil
		}

		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) contextValidatePriceType(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceType != nil {

		if swag.IsZero(m.PriceType) { // not required
			return nil
		}

		if err := m.PriceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceType")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) contextValidateSeason(ctx context.Context, formats strfmt.Registry) error {

	if m.Season != nil {

		if swag.IsZero(m.Season) { // not required
			return nil
		}

		if err := m.Season.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *PackageHistory) contextValidateZone(ctx context.Context, formats strfmt.Registry) error {

	if m.Zone != nil {

		if swag.IsZero(m.Zone) { // not required
			return nil
		}

		if err := m.Zone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Zone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageHistory) UnmarshalBinary(b []byte) error {
	var res PackageHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
