// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageSearchResponse package search response
//
// swagger:model PackageSearchResponse
type PackageSearchResponse struct {

	// constituent interest weight
	ConstituentInterestWeight int32 `json:"ConstituentInterestWeight,omitempty"`

	// facility
	Facility *EntitySummary `json:"Facility,omitempty"`

	// facility description
	FacilityDescription string `json:"FacilityDescription,omitempty"`

	// first performance date time
	// Format: date-time
	FirstPerformanceDateTime strfmt.DateTime `json:"FirstPerformanceDateTime,omitempty"`

	// fixed seat indicator
	FixedSeatIndicator bool `json:"FixedSeatIndicator,omitempty"`

	// flex indicator
	FlexIndicator bool `json:"FlexIndicator,omitempty"`

	// last performance date time
	// Format: date-time
	LastPerformanceDateTime strfmt.DateTime `json:"LastPerformanceDateTime,omitempty"`

	// maximum performances
	MaximumPerformances int32 `json:"MaximumPerformances,omitempty"`

	// minimum performances
	MinimumPerformances int32 `json:"MinimumPerformances,omitempty"`

	// mode of sale
	ModeOfSale *EntitySummary `json:"ModeOfSale,omitempty"`

	// mode of sale description
	ModeOfSaleDescription string `json:"ModeOfSaleDescription,omitempty"`

	// mode of sale end date
	// Format: date-time
	ModeOfSaleEndDate strfmt.DateTime `json:"ModeOfSaleEndDate,omitempty"`

	// mode of sale start date
	// Format: date-time
	ModeOfSaleStartDate strfmt.DateTime `json:"ModeOfSaleStartDate,omitempty"`

	// package code
	PackageCode string `json:"PackageCode,omitempty"`

	// package date time
	// Format: date-time
	PackageDateTime strfmt.DateTime `json:"PackageDateTime,omitempty"`

	// package description
	PackageDescription string `json:"PackageDescription,omitempty"`

	// package Id
	PackageID int32 `json:"PackageId,omitempty"`

	// package type
	PackageType *PackageTypeSummary `json:"PackageType,omitempty"`

	// rank type
	RankType *EntitySummary `json:"RankType,omitempty"`

	// rank type description
	RankTypeDescription string `json:"RankTypeDescription,omitempty"`

	// season
	Season *SeasonSummary `json:"Season,omitempty"`

	// super package indicator
	SuperPackageIndicator bool `json:"SuperPackageIndicator,omitempty"`

	// text1
	Text1 string `json:"Text1,omitempty"`

	// text2
	Text2 string `json:"Text2,omitempty"`

	// text3
	Text3 string `json:"Text3,omitempty"`

	// text4
	Text4 string `json:"Text4,omitempty"`

	// zone map
	ZoneMap *EntitySummary `json:"ZoneMap,omitempty"`

	// zone map description
	ZoneMapDescription string `json:"ZoneMapDescription,omitempty"`
}

// Validate validates this package search response
func (m *PackageSearchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstPerformanceDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPerformanceDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeOfSale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeOfSaleEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeOfSaleStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageSearchResponse) validateFacility(formats strfmt.Registry) error {
	if swag.IsZero(m.Facility) { // not required
		return nil
	}

	if m.Facility != nil {
		if err := m.Facility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Facility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Facility")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) validateFirstPerformanceDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstPerformanceDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("FirstPerformanceDateTime", "body", "date-time", m.FirstPerformanceDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchResponse) validateLastPerformanceDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastPerformanceDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastPerformanceDateTime", "body", "date-time", m.LastPerformanceDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchResponse) validateModeOfSale(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeOfSale) { // not required
		return nil
	}

	if m.ModeOfSale != nil {
		if err := m.ModeOfSale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ModeOfSale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ModeOfSale")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) validateModeOfSaleEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeOfSaleEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ModeOfSaleEndDate", "body", "date-time", m.ModeOfSaleEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchResponse) validateModeOfSaleStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeOfSaleStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ModeOfSaleStartDate", "body", "date-time", m.ModeOfSaleStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchResponse) validatePackageDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageDateTime", "body", "date-time", m.PackageDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchResponse) validatePackageType(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageType) { // not required
		return nil
	}

	if m.PackageType != nil {
		if err := m.PackageType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PackageType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PackageType")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) validateRankType(formats strfmt.Registry) error {
	if swag.IsZero(m.RankType) { // not required
		return nil
	}

	if m.RankType != nil {
		if err := m.RankType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RankType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RankType")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) validateSeason(formats strfmt.Registry) error {
	if swag.IsZero(m.Season) { // not required
		return nil
	}

	if m.Season != nil {
		if err := m.Season.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) validateZoneMap(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneMap) { // not required
		return nil
	}

	if m.ZoneMap != nil {
		if err := m.ZoneMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ZoneMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ZoneMap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this package search response based on the context it is used
func (m *PackageSearchResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFacility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModeOfSale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRankType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageSearchResponse) contextValidateFacility(ctx context.Context, formats strfmt.Registry) error {

	if m.Facility != nil {

		if swag.IsZero(m.Facility) { // not required
			return nil
		}

		if err := m.Facility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Facility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Facility")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) contextValidateModeOfSale(ctx context.Context, formats strfmt.Registry) error {

	if m.ModeOfSale != nil {

		if swag.IsZero(m.ModeOfSale) { // not required
			return nil
		}

		if err := m.ModeOfSale.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ModeOfSale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ModeOfSale")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) contextValidatePackageType(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageType != nil {

		if swag.IsZero(m.PackageType) { // not required
			return nil
		}

		if err := m.PackageType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PackageType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PackageType")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) contextValidateRankType(ctx context.Context, formats strfmt.Registry) error {

	if m.RankType != nil {

		if swag.IsZero(m.RankType) { // not required
			return nil
		}

		if err := m.RankType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RankType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RankType")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) contextValidateSeason(ctx context.Context, formats strfmt.Registry) error {

	if m.Season != nil {

		if swag.IsZero(m.Season) { // not required
			return nil
		}

		if err := m.Season.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchResponse) contextValidateZoneMap(ctx context.Context, formats strfmt.Registry) error {

	if m.ZoneMap != nil {

		if swag.IsZero(m.ZoneMap) { // not required
			return nil
		}

		if err := m.ZoneMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ZoneMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ZoneMap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageSearchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageSearchResponse) UnmarshalBinary(b []byte) error {
	var res PackageSearchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
