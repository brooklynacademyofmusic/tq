// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductDescribeResponse product describe response
//
// swagger:model ProductDescribeResponse
type ProductDescribeResponse struct {

	// product code
	ProductCode string `json:"ProductCode,omitempty"`

	// product date
	// Format: date-time
	ProductDate *strfmt.DateTime `json:"ProductDate,omitempty"`

	// product description
	ProductDescription string `json:"ProductDescription,omitempty"`

	// product Id
	ProductID int32 `json:"ProductId,omitempty"`

	// product type Id
	ProductTypeID int32 `json:"ProductTypeId,omitempty"`

	// season description
	SeasonDescription string `json:"SeasonDescription,omitempty"`

	// season Id
	SeasonID int32 `json:"SeasonId,omitempty"`
}

// Validate validates this product describe response
func (m *ProductDescribeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductDescribeResponse) validateProductDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ProductDate", "body", "date-time", m.ProductDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product describe response based on context it is used
func (m *ProductDescribeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductDescribeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductDescribeResponse) UnmarshalBinary(b []byte) error {
	var res ProductDescribeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
