// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PlanSummary plan summary
//
// swagger:model PlanSummary
type PlanSummary struct {

	// campaign
	Campaign *CampaignSummary `json:"Campaign,omitempty"`

	// constituent
	Constituent *ConstituentDisplaySummary `json:"Constituent,omitempty"`

	// contribution designation
	ContributionDesignation *ContributionDesignationSummary `json:"ContributionDesignation,omitempty"`

	// fund
	Fund *FundSummary `json:"Fund,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`
}

// Validate validates this plan summary
func (m *PlanSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContributionDesignation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFund(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanSummary) validateCampaign(formats strfmt.Registry) error {
	if swag.IsZero(m.Campaign) { // not required
		return nil
	}

	if m.Campaign != nil {
		if err := m.Campaign.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

func (m *PlanSummary) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *PlanSummary) validateContributionDesignation(formats strfmt.Registry) error {
	if swag.IsZero(m.ContributionDesignation) { // not required
		return nil
	}

	if m.ContributionDesignation != nil {
		if err := m.ContributionDesignation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContributionDesignation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContributionDesignation")
			}
			return err
		}
	}

	return nil
}

func (m *PlanSummary) validateFund(formats strfmt.Registry) error {
	if swag.IsZero(m.Fund) { // not required
		return nil
	}

	if m.Fund != nil {
		if err := m.Fund.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fund")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Fund")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this plan summary based on the context it is used
func (m *PlanSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCampaign(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContributionDesignation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFund(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanSummary) contextValidateCampaign(ctx context.Context, formats strfmt.Registry) error {

	if m.Campaign != nil {

		if swag.IsZero(m.Campaign) { // not required
			return nil
		}

		if err := m.Campaign.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

func (m *PlanSummary) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *PlanSummary) contextValidateContributionDesignation(ctx context.Context, formats strfmt.Registry) error {

	if m.ContributionDesignation != nil {

		if swag.IsZero(m.ContributionDesignation) { // not required
			return nil
		}

		if err := m.ContributionDesignation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContributionDesignation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContributionDesignation")
			}
			return err
		}
	}

	return nil
}

func (m *PlanSummary) contextValidateFund(ctx context.Context, formats strfmt.Registry) error {

	if m.Fund != nil {

		if swag.IsZero(m.Fund) { // not required
			return nil
		}

		if err := m.Fund.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fund")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Fund")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlanSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlanSummary) UnmarshalBinary(b []byte) error {
	var res PlanSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
