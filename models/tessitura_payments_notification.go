// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TessituraPaymentsNotification tessitura payments notification
//
// swagger:model TessituraPaymentsNotification
type TessituraPaymentsNotification struct {

	// additional data
	AdditionalData []*NameValue `json:"AdditionalData"`

	// amount
	Amount int32 `json:"Amount,omitempty"`

	// currency type
	CurrencyType string `json:"CurrencyType,omitempty"`

	// event code
	EventCode string `json:"EventCode,omitempty"`

	// event date
	// Format: date-time
	EventDate *strfmt.DateTime `json:"EventDate,omitempty"`

	// expiration
	Expiration string `json:"Expiration,omitempty"`

	// merchant account code
	MerchantAccountCode string `json:"MerchantAccountCode,omitempty"`

	// merchant reference
	MerchantReference string `json:"MerchantReference,omitempty"`

	// original reference
	OriginalReference string `json:"OriginalReference,omitempty"`

	// payment method
	PaymentMethod string `json:"PaymentMethod,omitempty"`

	// psp reference
	PspReference string `json:"PspReference,omitempty"`

	// reason
	Reason string `json:"Reason,omitempty"`

	// success
	Success bool `json:"Success,omitempty"`
}

// Validate validates this tessitura payments notification
func (m *TessituraPaymentsNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TessituraPaymentsNotification) validateAdditionalData(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalData) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalData); i++ {
		if swag.IsZero(m.AdditionalData[i]) { // not required
			continue
		}

		if m.AdditionalData[i] != nil {
			if err := m.AdditionalData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AdditionalData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AdditionalData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TessituraPaymentsNotification) validateEventDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EventDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EventDate", "body", "date-time", m.EventDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tessitura payments notification based on the context it is used
func (m *TessituraPaymentsNotification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TessituraPaymentsNotification) contextValidateAdditionalData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalData); i++ {

		if m.AdditionalData[i] != nil {

			if swag.IsZero(m.AdditionalData[i]) { // not required
				return nil
			}

			if err := m.AdditionalData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AdditionalData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AdditionalData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TessituraPaymentsNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TessituraPaymentsNotification) UnmarshalBinary(b []byte) error {
	var res TessituraPaymentsNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
