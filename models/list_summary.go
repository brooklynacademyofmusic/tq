// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListSummary list summary
//
// swagger:model ListSummary
type ListSummary struct {

	// category
	Category *ListCategorySummary `json:"Category,omitempty"`

	// constituent count
	ConstituentCount int32 `json:"ConstituentCount,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// edit mode
	EditMode string `json:"EditMode,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// is dynamic
	IsDynamic bool `json:"IsDynamic,omitempty"`

	// last used date time
	// Format: date-time
	LastUsedDateTime strfmt.DateTime `json:"LastUsedDateTime,omitempty"`
}

// Validate validates this list summary
func (m *ListSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUsedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListSummary) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

func (m *ListSummary) validateLastUsedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUsedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastUsedDateTime", "body", "date-time", m.LastUsedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list summary based on the context it is used
func (m *ListSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListSummary) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListSummary) UnmarshalBinary(b []byte) error {
	var res ListSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
