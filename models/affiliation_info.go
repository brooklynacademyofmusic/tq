// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AffiliationInfo affiliation info
//
// swagger:model AffiliationInfo
type AffiliationInfo struct {

	// affiliation type
	AffiliationType *AffiliationTypeSummary `json:"AffiliationType,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"EndDate,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// is allowed to transact
	IsAllowedToTransact bool `json:"IsAllowedToTransact,omitempty"`

	// is included in search results
	IsIncludedInSearchResults bool `json:"IsIncludedInSearchResults,omitempty"`

	// name indicator
	NameIndicator int32 `json:"NameIndicator,omitempty"`

	// note
	Note string `json:"Note,omitempty"`

	// primary indicator
	PrimaryIndicator bool `json:"PrimaryIndicator,omitempty"`

	// protection type
	ProtectionType *ConstituentProtectionTypeSummary `json:"ProtectionType,omitempty"`

	// rank
	Rank int32 `json:"Rank,omitempty"`

	// related constituent first name
	RelatedConstituentFirstName string `json:"RelatedConstituentFirstName,omitempty"`

	// related constituent gender
	RelatedConstituentGender *GenderSummary `json:"RelatedConstituentGender,omitempty"`

	// related constituent Id
	RelatedConstituentID int32 `json:"RelatedConstituentId,omitempty"`

	// related constituent inactive
	RelatedConstituentInactive bool `json:"RelatedConstituentInactive,omitempty"`

	// related constituent last name
	RelatedConstituentLastName string `json:"RelatedConstituentLastName,omitempty"`

	// related constituent middle name
	RelatedConstituentMiddleName string `json:"RelatedConstituentMiddleName,omitempty"`

	// related constituent name status description
	RelatedConstituentNameStatusDescription string `json:"RelatedConstituentNameStatusDescription,omitempty"`

	// related constituent name status Id
	RelatedConstituentNameStatusID int32 `json:"RelatedConstituentNameStatusId,omitempty"`

	// related constituent prefix
	RelatedConstituentPrefix *PrefixSummary `json:"RelatedConstituentPrefix,omitempty"`

	// related constituent short display name
	RelatedConstituentShortDisplayName string `json:"RelatedConstituentShortDisplayName,omitempty"`

	// related constituent sort name
	RelatedConstituentSortName string `json:"RelatedConstituentSortName,omitempty"`

	// related constituent suffix
	RelatedConstituentSuffix *SuffixSummary `json:"RelatedConstituentSuffix,omitempty"`

	// related constituent type
	RelatedConstituentType *ConstituentTypeSummary `json:"RelatedConstituentType,omitempty"`

	// salary
	Salary float64 `json:"Salary,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"StartDate,omitempty"`

	// title
	Title string `json:"Title,omitempty"`
}

// Validate validates this affiliation info
func (m *AffiliationInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedConstituentGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedConstituentPrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedConstituentSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedConstituentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffiliationInfo) validateAffiliationType(formats strfmt.Registry) error {
	if swag.IsZero(m.AffiliationType) { // not required
		return nil
	}

	if m.AffiliationType != nil {
		if err := m.AffiliationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AffiliationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AffiliationType")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AffiliationInfo) validateProtectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	if m.ProtectionType != nil {
		if err := m.ProtectionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProtectionType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProtectionType")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) validateRelatedConstituentGender(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedConstituentGender) { // not required
		return nil
	}

	if m.RelatedConstituentGender != nil {
		if err := m.RelatedConstituentGender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelatedConstituentGender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelatedConstituentGender")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) validateRelatedConstituentPrefix(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedConstituentPrefix) { // not required
		return nil
	}

	if m.RelatedConstituentPrefix != nil {
		if err := m.RelatedConstituentPrefix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelatedConstituentPrefix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelatedConstituentPrefix")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) validateRelatedConstituentSuffix(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedConstituentSuffix) { // not required
		return nil
	}

	if m.RelatedConstituentSuffix != nil {
		if err := m.RelatedConstituentSuffix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelatedConstituentSuffix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelatedConstituentSuffix")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) validateRelatedConstituentType(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedConstituentType) { // not required
		return nil
	}

	if m.RelatedConstituentType != nil {
		if err := m.RelatedConstituentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelatedConstituentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelatedConstituentType")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this affiliation info based on the context it is used
func (m *AffiliationInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedConstituentGender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedConstituentPrefix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedConstituentSuffix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedConstituentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffiliationInfo) contextValidateAffiliationType(ctx context.Context, formats strfmt.Registry) error {

	if m.AffiliationType != nil {

		if swag.IsZero(m.AffiliationType) { // not required
			return nil
		}

		if err := m.AffiliationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AffiliationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AffiliationType")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) contextValidateProtectionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionType != nil {

		if swag.IsZero(m.ProtectionType) { // not required
			return nil
		}

		if err := m.ProtectionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProtectionType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProtectionType")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) contextValidateRelatedConstituentGender(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedConstituentGender != nil {

		if swag.IsZero(m.RelatedConstituentGender) { // not required
			return nil
		}

		if err := m.RelatedConstituentGender.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelatedConstituentGender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelatedConstituentGender")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) contextValidateRelatedConstituentPrefix(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedConstituentPrefix != nil {

		if swag.IsZero(m.RelatedConstituentPrefix) { // not required
			return nil
		}

		if err := m.RelatedConstituentPrefix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelatedConstituentPrefix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelatedConstituentPrefix")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) contextValidateRelatedConstituentSuffix(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedConstituentSuffix != nil {

		if swag.IsZero(m.RelatedConstituentSuffix) { // not required
			return nil
		}

		if err := m.RelatedConstituentSuffix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelatedConstituentSuffix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelatedConstituentSuffix")
			}
			return err
		}
	}

	return nil
}

func (m *AffiliationInfo) contextValidateRelatedConstituentType(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedConstituentType != nil {

		if swag.IsZero(m.RelatedConstituentType) { // not required
			return nil
		}

		if err := m.RelatedConstituentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelatedConstituentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelatedConstituentType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AffiliationInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AffiliationInfo) UnmarshalBinary(b []byte) error {
	var res AffiliationInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
