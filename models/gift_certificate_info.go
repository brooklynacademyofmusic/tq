// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GiftCertificateInfo gift certificate info
//
// swagger:model GiftCertificateInfo
type GiftCertificateInfo struct {

	// balance
	Balance float64 `json:"Balance,omitempty"`

	// batch Id
	BatchID int32 `json:"BatchId,omitempty"`

	// gift certificate number
	GiftCertificateNumber string `json:"GiftCertificateNumber,omitempty"`

	// last print date
	// Format: date-time
	LastPrintDate *strfmt.DateTime `json:"LastPrintDate,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// original amount
	OriginalAmount float64 `json:"OriginalAmount,omitempty"`

	// original date
	// Format: date-time
	OriginalDate *strfmt.DateTime `json:"OriginalDate,omitempty"`

	// print count
	PrintCount int32 `json:"PrintCount,omitempty"`

	// recipient name
	RecipientName string `json:"RecipientName,omitempty"`

	// session key
	SessionKey string `json:"SessionKey,omitempty"`

	// used amount
	UsedAmount float64 `json:"UsedAmount,omitempty"`
}

// Validate validates this gift certificate info
func (m *GiftCertificateInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastPrintDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GiftCertificateInfo) validateLastPrintDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastPrintDate) { // not required
		return nil
	}

	if err := validate.FormatOf("LastPrintDate", "body", "date-time", m.LastPrintDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GiftCertificateInfo) validateOriginalDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalDate) { // not required
		return nil
	}

	if err := validate.FormatOf("OriginalDate", "body", "date-time", m.OriginalDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gift certificate info based on context it is used
func (m *GiftCertificateInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GiftCertificateInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GiftCertificateInfo) UnmarshalBinary(b []byte) error {
	var res GiftCertificateInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
