// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddressDetail address detail
//
// swagger:model AddressDetail
type AddressDetail struct {

	// address type
	AddressType *AddressTypeSummary `json:"AddressType,omitempty"`

	// affiliated constituent
	AffiliatedConstituent *Entity `json:"AffiliatedConstituent,omitempty"`

	// allow telemarketing1
	AllowTelemarketing1 bool `json:"AllowTelemarketing1,omitempty"`

	// allow telemarketing2
	AllowTelemarketing2 bool `json:"AllowTelemarketing2,omitempty"`

	// allow telemarketing3
	AllowTelemarketing3 bool `json:"AllowTelemarketing3,omitempty"`

	// alt salutation type
	AltSalutationType *SalutationTypeSummary `json:"AltSalutationType,omitempty"`

	// city
	City string `json:"City,omitempty"`

	// constituent
	Constituent *Entity `json:"Constituent,omitempty"`

	// country
	Country *CountrySummary `json:"Country,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// day evening indicator1
	DayEveningIndicator1 string `json:"DayEveningIndicator1,omitempty"`

	// day evening indicator2
	DayEveningIndicator2 string `json:"DayEveningIndicator2,omitempty"`

	// day evening indicator3
	DayEveningIndicator3 string `json:"DayEveningIndicator3,omitempty"`

	// delivery point
	DeliveryPoint string `json:"DeliveryPoint,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// edit indicator1
	EditIndicator1 bool `json:"EditIndicator1,omitempty"`

	// edit indicator2
	EditIndicator2 bool `json:"EditIndicator2,omitempty"`

	// edit indicator3
	EditIndicator3 bool `json:"EditIndicator3,omitempty"`

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"EndDate,omitempty"`

	// geo area
	GeoArea int32 `json:"GeoArea,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// label
	Label bool `json:"Label,omitempty"`

	// months
	Months string `json:"Months,omitempty"`

	// ncoa action
	NcoaAction int32 `json:"NcoaAction,omitempty"`

	// ncoa session
	NcoaSession int32 `json:"NcoaSession,omitempty"`

	// phone id1
	PhoneId1 int32 `json:"PhoneId1,omitempty"`

	// phone id2
	PhoneId2 int32 `json:"PhoneId2,omitempty"`

	// phone id3
	PhoneId3 int32 `json:"PhoneId3,omitempty"`

	// phone number1
	PhoneNumber1 string `json:"PhoneNumber1,omitempty"`

	// phone number1 formatted
	PhoneNumber1Formatted string `json:"PhoneNumber1Formatted,omitempty"`

	// phone number2
	PhoneNumber2 string `json:"PhoneNumber2,omitempty"`

	// phone number2 formatted
	PhoneNumber2Formatted string `json:"PhoneNumber2Formatted,omitempty"`

	// phone number3
	PhoneNumber3 string `json:"PhoneNumber3,omitempty"`

	// phone number3 formatted
	PhoneNumber3Formatted string `json:"PhoneNumber3Formatted,omitempty"`

	// phone search1
	PhoneSearch1 string `json:"PhoneSearch1,omitempty"`

	// phone search2
	PhoneSearch2 string `json:"PhoneSearch2,omitempty"`

	// phone search3
	PhoneSearch3 string `json:"PhoneSearch3,omitempty"`

	// postal code
	PostalCode string `json:"PostalCode,omitempty"`

	// postal code formatted
	PostalCodeFormatted string `json:"PostalCodeFormatted,omitempty"`

	// primary indicator
	PrimaryIndicator bool `json:"PrimaryIndicator,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"StartDate,omitempty"`

	// state
	State *StateSummary `json:"State,omitempty"`

	// street1
	Street1 string `json:"Street1,omitempty"`

	// street2
	Street2 string `json:"Street2,omitempty"`

	// street3
	Street3 string `json:"Street3,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// updated date time1
	// Format: date-time
	UpdatedDateTime1 strfmt.DateTime `json:"UpdatedDateTime1,omitempty"`

	// updated date time2
	// Format: date-time
	UpdatedDateTime2 strfmt.DateTime `json:"UpdatedDateTime2,omitempty"`

	// updated date time3
	// Format: date-time
	UpdatedDateTime3 strfmt.DateTime `json:"UpdatedDateTime3,omitempty"`
}

// Validate validates this address detail
func (m *AddressDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffiliatedConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAltSalutationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressDetail) validateAddressType(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressType) { // not required
		return nil
	}

	if m.AddressType != nil {
		if err := m.AddressType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AddressType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AddressType")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) validateAffiliatedConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.AffiliatedConstituent) { // not required
		return nil
	}

	if m.AffiliatedConstituent != nil {
		if err := m.AffiliatedConstituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AffiliatedConstituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AffiliatedConstituent")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) validateAltSalutationType(formats strfmt.Registry) error {
	if swag.IsZero(m.AltSalutationType) { // not required
		return nil
	}

	if m.AltSalutationType != nil {
		if err := m.AltSalutationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AltSalutationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AltSalutationType")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if m.Country != nil {
		if err := m.Country.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Country")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Country")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressDetail) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressDetail) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressDetail) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("State")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("State")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressDetail) validateUpdatedDateTime1(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime1) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime1", "body", "date-time", m.UpdatedDateTime1.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressDetail) validateUpdatedDateTime2(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime2) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime2", "body", "date-time", m.UpdatedDateTime2.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressDetail) validateUpdatedDateTime3(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime3) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime3", "body", "date-time", m.UpdatedDateTime3.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this address detail based on the context it is used
func (m *AddressDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAffiliatedConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAltSalutationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressDetail) contextValidateAddressType(ctx context.Context, formats strfmt.Registry) error {

	if m.AddressType != nil {

		if swag.IsZero(m.AddressType) { // not required
			return nil
		}

		if err := m.AddressType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AddressType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AddressType")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) contextValidateAffiliatedConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.AffiliatedConstituent != nil {

		if swag.IsZero(m.AffiliatedConstituent) { // not required
			return nil
		}

		if err := m.AffiliatedConstituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AffiliatedConstituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AffiliatedConstituent")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) contextValidateAltSalutationType(ctx context.Context, formats strfmt.Registry) error {

	if m.AltSalutationType != nil {

		if swag.IsZero(m.AltSalutationType) { // not required
			return nil
		}

		if err := m.AltSalutationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AltSalutationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AltSalutationType")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) contextValidateCountry(ctx context.Context, formats strfmt.Registry) error {

	if m.Country != nil {

		if swag.IsZero(m.Country) { // not required
			return nil
		}

		if err := m.Country.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Country")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Country")
			}
			return err
		}
	}

	return nil
}

func (m *AddressDetail) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if swag.IsZero(m.State) { // not required
			return nil
		}

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("State")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("State")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddressDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressDetail) UnmarshalBinary(b []byte) error {
	var res AddressDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
