// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisterConstituent register constituent
//
// swagger:model RegisterConstituent
type RegisterConstituent struct {

	// address
	Address *RegisterAddress `json:"Address,omitempty"`

	// affiliates
	Affiliates []*RegisterAffiliate `json:"Affiliates"`

	// constituent type Id
	ConstituentTypeID int32 `json:"ConstituentTypeId,omitempty"`

	// electronic address
	ElectronicAddress *RegisterElectronicAddress `json:"ElectronicAddress,omitempty"`

	// emarket indicator Id
	EmarketIndicatorID int32 `json:"EmarketIndicatorId,omitempty"`

	// first name
	FirstName string `json:"FirstName,omitempty"`

	// gender Id
	GenderID int32 `json:"GenderId,omitempty"`

	// last name
	LastName string `json:"LastName,omitempty"`

	// mail indicator Id
	MailIndicatorID int32 `json:"MailIndicatorId,omitempty"`

	// middle name
	MiddleName string `json:"MiddleName,omitempty"`

	// name status Id
	NameStatusID int32 `json:"NameStatusId,omitempty"`

	// original source Id
	OriginalSourceID int32 `json:"OriginalSourceId,omitempty"`

	// phone indicator Id
	PhoneIndicatorID int32 `json:"PhoneIndicatorId,omitempty"`

	// phones
	Phones []*RegisterPhone `json:"Phones"`

	// prefix Id
	PrefixID int32 `json:"PrefixId,omitempty"`

	// salutation
	Salutation *RegisterSalutationRequest `json:"Salutation,omitempty"`

	// sort name
	SortName string `json:"SortName,omitempty"`

	// source Id
	SourceID int32 `json:"SourceId,omitempty"`

	// suffix Id
	SuffixID int32 `json:"SuffixId,omitempty"`

	// web login
	WebLogin *RegisterWebLogin `json:"WebLogin,omitempty"`
}

// Validate validates this register constituent
func (m *RegisterConstituent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffiliates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElectronicAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalutation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebLogin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterConstituent) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Address")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterConstituent) validateAffiliates(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliates) { // not required
		return nil
	}

	for i := 0; i < len(m.Affiliates); i++ {
		if swag.IsZero(m.Affiliates[i]) { // not required
			continue
		}

		if m.Affiliates[i] != nil {
			if err := m.Affiliates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Affiliates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Affiliates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterConstituent) validateElectronicAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.ElectronicAddress) { // not required
		return nil
	}

	if m.ElectronicAddress != nil {
		if err := m.ElectronicAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ElectronicAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ElectronicAddress")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterConstituent) validatePhones(formats strfmt.Registry) error {
	if swag.IsZero(m.Phones) { // not required
		return nil
	}

	for i := 0; i < len(m.Phones); i++ {
		if swag.IsZero(m.Phones[i]) { // not required
			continue
		}

		if m.Phones[i] != nil {
			if err := m.Phones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Phones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Phones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterConstituent) validateSalutation(formats strfmt.Registry) error {
	if swag.IsZero(m.Salutation) { // not required
		return nil
	}

	if m.Salutation != nil {
		if err := m.Salutation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Salutation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Salutation")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterConstituent) validateWebLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.WebLogin) { // not required
		return nil
	}

	if m.WebLogin != nil {
		if err := m.WebLogin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WebLogin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WebLogin")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this register constituent based on the context it is used
func (m *RegisterConstituent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAffiliates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElectronicAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSalutation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebLogin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterConstituent) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Address")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterConstituent) contextValidateAffiliates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Affiliates); i++ {

		if m.Affiliates[i] != nil {

			if swag.IsZero(m.Affiliates[i]) { // not required
				return nil
			}

			if err := m.Affiliates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Affiliates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Affiliates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterConstituent) contextValidateElectronicAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ElectronicAddress != nil {

		if swag.IsZero(m.ElectronicAddress) { // not required
			return nil
		}

		if err := m.ElectronicAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ElectronicAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ElectronicAddress")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterConstituent) contextValidatePhones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Phones); i++ {

		if m.Phones[i] != nil {

			if swag.IsZero(m.Phones[i]) { // not required
				return nil
			}

			if err := m.Phones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Phones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Phones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterConstituent) contextValidateSalutation(ctx context.Context, formats strfmt.Registry) error {

	if m.Salutation != nil {

		if swag.IsZero(m.Salutation) { // not required
			return nil
		}

		if err := m.Salutation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Salutation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Salutation")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterConstituent) contextValidateWebLogin(ctx context.Context, formats strfmt.Registry) error {

	if m.WebLogin != nil {

		if swag.IsZero(m.WebLogin) { // not required
			return nil
		}

		if err := m.WebLogin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WebLogin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WebLogin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterConstituent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterConstituent) UnmarshalBinary(b []byte) error {
	var res RegisterConstituent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
