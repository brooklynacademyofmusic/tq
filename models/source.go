// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Source source
//
// swagger:model Source
type Source struct {

	// acquisition cost
	AcquisitionCost float64 `json:"AcquisitionCost,omitempty"`

	// acquisition date time
	// Format: date-time
	AcquisitionDateTime *strfmt.DateTime `json:"AcquisitionDateTime,omitempty"`

	// appeal
	Appeal *AppealSummary `json:"Appeal,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// delivery cost
	DeliveryCost float64 `json:"DeliveryCost,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// end date time
	// Format: date-time
	EndDateTime *strfmt.DateTime `json:"EndDateTime,omitempty"`

	// fulfill cost
	FulfillCost float64 `json:"FulfillCost,omitempty"`

	// hotlist status
	HotlistStatus string `json:"HotlistStatus,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// list
	List *ListSummary `json:"List,omitempty"`

	// media type
	MediaType *MediaTypeSummary `json:"MediaType,omitempty"`

	// num contacts
	NumContacts int32 `json:"NumContacts,omitempty"`

	// num success constituents
	NumSuccessConstituents int32 `json:"NumSuccessConstituents,omitempty"`

	// promotion status
	PromotionStatus int32 `json:"PromotionStatus,omitempty"`

	// provider
	Provider string `json:"Provider,omitempty"`

	// restricted usage
	RestrictedUsage string `json:"RestrictedUsage,omitempty"`

	// segment
	Segment string `json:"Segment,omitempty"`

	// source group
	SourceGroup *SourceGroupSummary `json:"SourceGroup,omitempty"`

	// source type
	SourceType string `json:"SourceType,omitempty"`

	// start date time
	// Format: date-time
	StartDateTime *strfmt.DateTime `json:"StartDateTime,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this source
func (m *Source) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcquisitionDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppeal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Source) validateAcquisitionDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.AcquisitionDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("AcquisitionDateTime", "body", "date-time", m.AcquisitionDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Source) validateAppeal(formats strfmt.Registry) error {
	if swag.IsZero(m.Appeal) { // not required
		return nil
	}

	if m.Appeal != nil {
		if err := m.Appeal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Appeal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Appeal")
			}
			return err
		}
	}

	return nil
}

func (m *Source) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Source) validateEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Source) validateList(formats strfmt.Registry) error {
	if swag.IsZero(m.List) { // not required
		return nil
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("List")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("List")
			}
			return err
		}
	}

	return nil
}

func (m *Source) validateMediaType(formats strfmt.Registry) error {
	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	if m.MediaType != nil {
		if err := m.MediaType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MediaType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MediaType")
			}
			return err
		}
	}

	return nil
}

func (m *Source) validateSourceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceGroup) { // not required
		return nil
	}

	if m.SourceGroup != nil {
		if err := m.SourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *Source) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Source) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this source based on the context it is used
func (m *Source) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppeal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMediaType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Source) contextValidateAppeal(ctx context.Context, formats strfmt.Registry) error {

	if m.Appeal != nil {

		if swag.IsZero(m.Appeal) { // not required
			return nil
		}

		if err := m.Appeal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Appeal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Appeal")
			}
			return err
		}
	}

	return nil
}

func (m *Source) contextValidateList(ctx context.Context, formats strfmt.Registry) error {

	if m.List != nil {

		if swag.IsZero(m.List) { // not required
			return nil
		}

		if err := m.List.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("List")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("List")
			}
			return err
		}
	}

	return nil
}

func (m *Source) contextValidateMediaType(ctx context.Context, formats strfmt.Registry) error {

	if m.MediaType != nil {

		if swag.IsZero(m.MediaType) { // not required
			return nil
		}

		if err := m.MediaType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MediaType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MediaType")
			}
			return err
		}
	}

	return nil
}

func (m *Source) contextValidateSourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceGroup != nil {

		if swag.IsZero(m.SourceGroup) { // not required
			return nil
		}

		if err := m.SourceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SourceGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Source) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Source) UnmarshalBinary(b []byte) error {
	var res Source
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
