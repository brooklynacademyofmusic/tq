// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrderProductViewSubLineItem order product view sub line item
//
// swagger:model OrderProductViewSubLineItem
type OrderProductViewSubLineItem struct {

	// composite ticket number
	CompositeTicketNumber int32 `json:"CompositeTicketNumber,omitempty"`

	// due amount
	DueAmount float64 `json:"DueAmount,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// original price type
	OriginalPriceType *OrderProductViewPriceType `json:"OriginalPriceType,omitempty"`

	// paid amount
	PaidAmount float64 `json:"PaidAmount,omitempty"`

	// price type
	PriceType *OrderProductViewPriceType `json:"PriceType,omitempty"`

	// pricing rule
	PricingRule *OrderPricingRuleSummary `json:"PricingRule,omitempty"`

	// recipient
	Recipient *ConstituentDisplaySummary `json:"Recipient,omitempty"`

	// rule indicator
	RuleIndicator string `json:"RuleIndicator,omitempty"`

	// seat
	Seat *OrderProductViewSeat `json:"Seat,omitempty"`

	// status Id
	StatusID int32 `json:"StatusId,omitempty"`

	// sub line item details
	SubLineItemDetails []*OrderProductViewSubLineItemDetail `json:"SubLineItemDetails"`

	// sub line item fees
	SubLineItemFees []*OrderProductViewFeeDetail `json:"SubLineItemFees"`

	// ticket number
	TicketNumber int32 `json:"TicketNumber,omitempty"`

	// zone
	Zone *OrderProductViewZone `json:"Zone,omitempty"`
}

// Validate validates this order product view sub line item
func (m *OrderProductViewSubLineItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginalPriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubLineItemDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubLineItemFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderProductViewSubLineItem) validateOriginalPriceType(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalPriceType) { // not required
		return nil
	}

	if m.OriginalPriceType != nil {
		if err := m.OriginalPriceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OriginalPriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OriginalPriceType")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) validatePriceType(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceType) { // not required
		return nil
	}

	if m.PriceType != nil {
		if err := m.PriceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceType")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) validatePricingRule(formats strfmt.Registry) error {
	if swag.IsZero(m.PricingRule) { // not required
		return nil
	}

	if m.PricingRule != nil {
		if err := m.PricingRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PricingRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PricingRule")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) validateRecipient(formats strfmt.Registry) error {
	if swag.IsZero(m.Recipient) { // not required
		return nil
	}

	if m.Recipient != nil {
		if err := m.Recipient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Recipient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Recipient")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) validateSeat(formats strfmt.Registry) error {
	if swag.IsZero(m.Seat) { // not required
		return nil
	}

	if m.Seat != nil {
		if err := m.Seat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Seat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Seat")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) validateSubLineItemDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.SubLineItemDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.SubLineItemDetails); i++ {
		if swag.IsZero(m.SubLineItemDetails[i]) { // not required
			continue
		}

		if m.SubLineItemDetails[i] != nil {
			if err := m.SubLineItemDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItemDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItemDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductViewSubLineItem) validateSubLineItemFees(formats strfmt.Registry) error {
	if swag.IsZero(m.SubLineItemFees) { // not required
		return nil
	}

	for i := 0; i < len(m.SubLineItemFees); i++ {
		if swag.IsZero(m.SubLineItemFees[i]) { // not required
			continue
		}

		if m.SubLineItemFees[i] != nil {
			if err := m.SubLineItemFees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItemFees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItemFees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductViewSubLineItem) validateZone(formats strfmt.Registry) error {
	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Zone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Zone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order product view sub line item based on the context it is used
func (m *OrderProductViewSubLineItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOriginalPriceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePricingRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecipient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubLineItemDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubLineItemFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderProductViewSubLineItem) contextValidateOriginalPriceType(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalPriceType != nil {

		if swag.IsZero(m.OriginalPriceType) { // not required
			return nil
		}

		if err := m.OriginalPriceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OriginalPriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OriginalPriceType")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) contextValidatePriceType(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceType != nil {

		if swag.IsZero(m.PriceType) { // not required
			return nil
		}

		if err := m.PriceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceType")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) contextValidatePricingRule(ctx context.Context, formats strfmt.Registry) error {

	if m.PricingRule != nil {

		if swag.IsZero(m.PricingRule) { // not required
			return nil
		}

		if err := m.PricingRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PricingRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PricingRule")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) contextValidateRecipient(ctx context.Context, formats strfmt.Registry) error {

	if m.Recipient != nil {

		if swag.IsZero(m.Recipient) { // not required
			return nil
		}

		if err := m.Recipient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Recipient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Recipient")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) contextValidateSeat(ctx context.Context, formats strfmt.Registry) error {

	if m.Seat != nil {

		if swag.IsZero(m.Seat) { // not required
			return nil
		}

		if err := m.Seat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Seat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Seat")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductViewSubLineItem) contextValidateSubLineItemDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubLineItemDetails); i++ {

		if m.SubLineItemDetails[i] != nil {

			if swag.IsZero(m.SubLineItemDetails[i]) { // not required
				return nil
			}

			if err := m.SubLineItemDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItemDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItemDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductViewSubLineItem) contextValidateSubLineItemFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubLineItemFees); i++ {

		if m.SubLineItemFees[i] != nil {

			if swag.IsZero(m.SubLineItemFees[i]) { // not required
				return nil
			}

			if err := m.SubLineItemFees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItemFees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItemFees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductViewSubLineItem) contextValidateZone(ctx context.Context, formats strfmt.Registry) error {

	if m.Zone != nil {

		if swag.IsZero(m.Zone) { // not required
			return nil
		}

		if err := m.Zone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Zone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderProductViewSubLineItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderProductViewSubLineItem) UnmarshalBinary(b []byte) error {
	var res OrderProductViewSubLineItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
