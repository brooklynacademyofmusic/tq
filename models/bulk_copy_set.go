// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkCopySet bulk copy set
//
// swagger:model BulkCopySet
type BulkCopySet struct {

	// available for sale indicator
	AvailableForSaleIndicator bool `json:"AvailableForSaleIndicator,omitempty"`

	// control group
	ControlGroup *ControlGroup `json:"ControlGroup,omitempty"`

	// copy credits
	CopyCredits bool `json:"CopyCredits,omitempty"`

	// copy notes
	CopyNotes bool `json:"CopyNotes,omitempty"`

	// copy offers
	CopyOffers bool `json:"CopyOffers,omitempty"`

	// copy price events
	CopyPriceEvents bool `json:"CopyPriceEvents,omitempty"`

	// copy prices
	CopyPrices bool `json:"CopyPrices,omitempty"`

	// create friday
	CreateFriday bool `json:"CreateFriday,omitempty"`

	// create from date time
	// Format: date-time
	CreateFromDateTime *strfmt.DateTime `json:"CreateFromDateTime,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// create mode
	CreateMode string `json:"CreateMode,omitempty"`

	// create monday
	CreateMonday bool `json:"CreateMonday,omitempty"`

	// create saturday
	CreateSaturday bool `json:"CreateSaturday,omitempty"`

	// create sunday
	CreateSunday bool `json:"CreateSunday,omitempty"`

	// create thursday
	CreateThursday bool `json:"CreateThursday,omitempty"`

	// create to date time
	// Format: date-time
	CreateToDateTime *strfmt.DateTime `json:"CreateToDateTime,omitempty"`

	// create tuesday
	CreateTuesday bool `json:"CreateTuesday,omitempty"`

	// create wednesday
	CreateWednesday bool `json:"CreateWednesday,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// default relative dates
	DefaultRelativeDates string `json:"DefaultRelativeDates,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// override on sale
	OverrideOnSale bool `json:"OverrideOnSale,omitempty"`

	// package code
	PackageCode string `json:"PackageCode,omitempty"`

	// package code seed
	PackageCodeSeed int32 `json:"PackageCodeSeed,omitempty"`

	// package mode of sale relative dates
	PackageModeOfSaleRelativeDates string `json:"PackageModeOfSaleRelativeDates,omitempty"`

	// performance code
	PerformanceCode string `json:"PerformanceCode,omitempty"`

	// performance code seed
	PerformanceCodeSeed int32 `json:"PerformanceCodeSeed,omitempty"`

	// performance description
	PerformanceDescription string `json:"PerformanceDescription,omitempty"`

	// performance mode of sale relative dates
	PerformanceModeOfSaleRelativeDates string `json:"PerformanceModeOfSaleRelativeDates,omitempty"`

	// performance status
	PerformanceStatus *PerformanceStatus `json:"PerformanceStatus,omitempty"`

	// performance time
	PerformanceTime string `json:"PerformanceTime,omitempty"`

	// performance type
	PerformanceType *PerformanceType `json:"PerformanceType,omitempty"`

	// price event relative dates
	PriceEventRelativeDates string `json:"PriceEventRelativeDates,omitempty"`

	// price type relative dates
	PriceTypeRelativeDates string `json:"PriceTypeRelativeDates,omitempty"`

	// production season
	ProductionSeason *ProductionSeasonSummary `json:"ProductionSeason,omitempty"`

	// publish relative dates
	PublishRelativeDates string `json:"PublishRelativeDates,omitempty"`

	// reference day
	// Format: date-time
	ReferenceDay *strfmt.DateTime `json:"ReferenceDay,omitempty"`

	// reference performance Id
	ReferencePerformanceID int32 `json:"ReferencePerformanceId,omitempty"`

	// reference season string
	ReferenceSeasonString string `json:"ReferenceSeasonString,omitempty"`

	// set description
	SetDescription string `json:"SetDescription,omitempty"`

	// set type
	SetType int32 `json:"SetType,omitempty"`

	// short name
	ShortName string `json:"ShortName,omitempty"`

	// time slot
	TimeSlot *TimeSlot `json:"TimeSlot,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this bulk copy set
func (m *BulkCopySet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControlGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateFromDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateToDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductionSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSlot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkCopySet) validateControlGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlGroup) { // not required
		return nil
	}

	if m.ControlGroup != nil {
		if err := m.ControlGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ControlGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ControlGroup")
			}
			return err
		}
	}

	return nil
}

func (m *BulkCopySet) validateCreateFromDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateFromDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreateFromDateTime", "body", "date-time", m.CreateFromDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BulkCopySet) validateCreateToDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateToDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreateToDateTime", "body", "date-time", m.CreateToDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BulkCopySet) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BulkCopySet) validatePerformanceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceStatus) { // not required
		return nil
	}

	if m.PerformanceStatus != nil {
		if err := m.PerformanceStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PerformanceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PerformanceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BulkCopySet) validatePerformanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceType) { // not required
		return nil
	}

	if m.PerformanceType != nil {
		if err := m.PerformanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PerformanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PerformanceType")
			}
			return err
		}
	}

	return nil
}

func (m *BulkCopySet) validateProductionSeason(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductionSeason) { // not required
		return nil
	}

	if m.ProductionSeason != nil {
		if err := m.ProductionSeason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductionSeason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductionSeason")
			}
			return err
		}
	}

	return nil
}

func (m *BulkCopySet) validateReferenceDay(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferenceDay) { // not required
		return nil
	}

	if err := validate.FormatOf("ReferenceDay", "body", "date-time", m.ReferenceDay.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BulkCopySet) validateTimeSlot(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeSlot) { // not required
		return nil
	}

	if m.TimeSlot != nil {
		if err := m.TimeSlot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TimeSlot")
			}
			return err
		}
	}

	return nil
}

func (m *BulkCopySet) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bulk copy set based on the context it is used
func (m *BulkCopySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControlGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformanceStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformanceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductionSeason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeSlot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkCopySet) contextValidateControlGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ControlGroup != nil {

		if swag.IsZero(m.ControlGroup) { // not required
			return nil
		}

		if err := m.ControlGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ControlGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ControlGroup")
			}
			return err
		}
	}

	return nil
}

func (m *BulkCopySet) contextValidatePerformanceStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformanceStatus != nil {

		if swag.IsZero(m.PerformanceStatus) { // not required
			return nil
		}

		if err := m.PerformanceStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PerformanceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PerformanceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BulkCopySet) contextValidatePerformanceType(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformanceType != nil {

		if swag.IsZero(m.PerformanceType) { // not required
			return nil
		}

		if err := m.PerformanceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PerformanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PerformanceType")
			}
			return err
		}
	}

	return nil
}

func (m *BulkCopySet) contextValidateProductionSeason(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductionSeason != nil {

		if swag.IsZero(m.ProductionSeason) { // not required
			return nil
		}

		if err := m.ProductionSeason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductionSeason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductionSeason")
			}
			return err
		}
	}

	return nil
}

func (m *BulkCopySet) contextValidateTimeSlot(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeSlot != nil {

		if swag.IsZero(m.TimeSlot) { // not required
			return nil
		}

		if err := m.TimeSlot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TimeSlot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkCopySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkCopySet) UnmarshalBinary(b []byte) error {
	var res BulkCopySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
