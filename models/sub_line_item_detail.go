// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubLineItemDetail sub line item detail
//
// swagger:model SubLineItemDetail
type SubLineItemDetail struct {

	// benevolent indicator
	BenevolentIndicator bool `json:"BenevolentIndicator,omitempty"`

	// campaign Id
	CampaignID int32 `json:"CampaignId,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// discount type Id
	DiscountTypeID int32 `json:"DiscountTypeId,omitempty"`

	// due amount
	DueAmount float64 `json:"DueAmount,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// non discount price
	NonDiscountPrice float64 `json:"NonDiscountPrice,omitempty"`

	// paid amount
	PaidAmount float64 `json:"PaidAmount,omitempty"`

	// performance price type Id
	PerformancePriceTypeID int32 `json:"PerformancePriceTypeId,omitempty"`

	// sub line item Id
	SubLineItemID int32 `json:"SubLineItemId,omitempty"`
}

// Validate validates this sub line item detail
func (m *SubLineItemDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubLineItemDetail) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sub line item detail based on context it is used
func (m *SubLineItemDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubLineItemDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubLineItemDetail) UnmarshalBinary(b []byte) error {
	var res SubLineItemDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
