// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contribution contribution
//
// swagger:model Contribution
type Contribution struct {

	// account Id
	AccountID int32 `json:"AccountId,omitempty"`

	// appeal Id
	AppealID int32 `json:"AppealId,omitempty"`

	// batch Id
	BatchID int32 `json:"BatchId,omitempty"`

	// billing account
	BillingAccount string `json:"BillingAccount,omitempty"`

	// billing type Id
	BillingTypeID int32 `json:"BillingTypeId,omitempty"`

	// business unit Id
	BusinessUnitID int32 `json:"BusinessUnitId,omitempty"`

	// campaign
	Campaign *CampaignSummary `json:"Campaign,omitempty"`

	// cancel
	Cancel string `json:"Cancel,omitempty"`

	// channel
	Channel *SalesChannelSummary `json:"Channel,omitempty"`

	// constituent
	Constituent *ConstituentDisplaySummary `json:"Constituent,omitempty"`

	// contribution amount
	ContributionAmount float64 `json:"ContributionAmount,omitempty"`

	// contribution date time
	// Format: date-time
	ContributionDateTime strfmt.DateTime `json:"ContributionDateTime,omitempty"`

	// contribution designation
	ContributionDesignation int32 `json:"ContributionDesignation,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// custom0
	Custom0 string `json:"Custom0,omitempty"`

	// custom1
	Custom1 string `json:"Custom1,omitempty"`

	// custom2
	Custom2 string `json:"Custom2,omitempty"`

	// custom3
	Custom3 string `json:"Custom3,omitempty"`

	// custom4
	Custom4 string `json:"Custom4,omitempty"`

	// custom5
	Custom5 string `json:"Custom5,omitempty"`

	// custom6
	Custom6 string `json:"Custom6,omitempty"`

	// custom7
	Custom7 string `json:"Custom7,omitempty"`

	// custom8
	Custom8 string `json:"Custom8,omitempty"`

	// custom9
	Custom9 string `json:"Custom9,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// fund
	Fund *FundSummary `json:"Fund,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// initiator
	Initiator *ConstituentDisplaySummary `json:"Initiator,omitempty"`

	// kind gift description
	KindGiftDescription string `json:"KindGiftDescription,omitempty"`

	// kind gift transfer date time
	// Format: date-time
	KindGiftTransferDateTime strfmt.DateTime `json:"KindGiftTransferDateTime,omitempty"`

	// match indicator
	MatchIndicator string `json:"MatchIndicator,omitempty"`

	// matching contribution Id
	MatchingContributionID int32 `json:"MatchingContributionId,omitempty"`

	// media type
	MediaType *MediaTypeSummary `json:"MediaType,omitempty"`

	// mirror lock
	MirrorLock int32 `json:"MirrorLock,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// payment end date time
	// Format: date-time
	PaymentEndDateTime strfmt.DateTime `json:"PaymentEndDateTime,omitempty"`

	// payment start date time
	// Format: date-time
	PaymentStartDateTime strfmt.DateTime `json:"PaymentStartDateTime,omitempty"`

	// plan
	Plan *PlanSummary `json:"Plan,omitempty"`

	// pledge status Id
	PledgeStatusID int32 `json:"PledgeStatusId,omitempty"`

	// received amount
	ReceivedAmount float64 `json:"ReceivedAmount,omitempty"`

	// solicitor
	Solicitor string `json:"Solicitor,omitempty"`

	// source Id
	SourceID int32 `json:"SourceId,omitempty"`

	// type
	Type string `json:"Type,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this contribution
func (m *Contribution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContributionDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFund(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKindGiftTransferDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contribution) validateCampaign(formats strfmt.Registry) error {
	if swag.IsZero(m.Campaign) { // not required
		return nil
	}

	if m.Campaign != nil {
		if err := m.Campaign.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) validateChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.Channel) { // not required
		return nil
	}

	if m.Channel != nil {
		if err := m.Channel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Channel")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) validateContributionDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ContributionDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ContributionDateTime", "body", "date-time", m.ContributionDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contribution) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contribution) validateFund(formats strfmt.Registry) error {
	if swag.IsZero(m.Fund) { // not required
		return nil
	}

	if m.Fund != nil {
		if err := m.Fund.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fund")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Fund")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	if m.Initiator != nil {
		if err := m.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiator")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) validateKindGiftTransferDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.KindGiftTransferDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("KindGiftTransferDateTime", "body", "date-time", m.KindGiftTransferDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contribution) validateMediaType(formats strfmt.Registry) error {
	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	if m.MediaType != nil {
		if err := m.MediaType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MediaType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MediaType")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) validatePaymentEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentEndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PaymentEndDateTime", "body", "date-time", m.PaymentEndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contribution) validatePaymentStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentStartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PaymentStartDateTime", "body", "date-time", m.PaymentStartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contribution) validatePlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Plan")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this contribution based on the context it is used
func (m *Contribution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCampaign(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFund(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMediaType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contribution) contextValidateCampaign(ctx context.Context, formats strfmt.Registry) error {

	if m.Campaign != nil {

		if swag.IsZero(m.Campaign) { // not required
			return nil
		}

		if err := m.Campaign.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) contextValidateChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.Channel != nil {

		if swag.IsZero(m.Channel) { // not required
			return nil
		}

		if err := m.Channel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Channel")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) contextValidateFund(ctx context.Context, formats strfmt.Registry) error {

	if m.Fund != nil {

		if swag.IsZero(m.Fund) { // not required
			return nil
		}

		if err := m.Fund.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fund")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Fund")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if m.Initiator != nil {

		if swag.IsZero(m.Initiator) { // not required
			return nil
		}

		if err := m.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiator")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) contextValidateMediaType(ctx context.Context, formats strfmt.Registry) error {

	if m.MediaType != nil {

		if swag.IsZero(m.MediaType) { // not required
			return nil
		}

		if err := m.MediaType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MediaType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MediaType")
			}
			return err
		}
	}

	return nil
}

func (m *Contribution) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Plan != nil {

		if swag.IsZero(m.Plan) { // not required
			return nil
		}

		if err := m.Plan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Contribution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contribution) UnmarshalBinary(b []byte) error {
	var res Contribution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
