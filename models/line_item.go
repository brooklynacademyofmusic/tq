// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LineItem line item
//
// swagger:model LineItem
type LineItem struct {

	// alt upgrade indicator
	AltUpgradeIndicator string `json:"AltUpgradeIndicator,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// mirror lock
	MirrorLock int32 `json:"MirrorLock,omitempty"`

	// order Id
	OrderID int32 `json:"OrderId,omitempty"`

	// package
	Package *LineItemPackage `json:"Package,omitempty"`

	// package line item Id
	PackageLineItemID int32 `json:"PackageLineItemId,omitempty"`

	// performance
	Performance *LineItemPerformance `json:"Performance,omitempty"`

	// performance group Id
	PerformanceGroupID int32 `json:"PerformanceGroupId,omitempty"`

	// primary indicator
	PrimaryIndicator bool `json:"PrimaryIndicator,omitempty"`

	// primary line item Id
	PrimaryLineItemID int32 `json:"PrimaryLineItemId,omitempty"`

	// priority
	Priority int32 `json:"Priority,omitempty"`

	// source
	Source *LineItemSource `json:"Source,omitempty"`

	// sub line items
	SubLineItems []*SubLineItem `json:"SubLineItems"`

	// super package
	SuperPackage *LineItemPackage `json:"SuperPackage,omitempty"`

	// total due
	TotalDue float64 `json:"TotalDue,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this line item
func (m *LineItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubLineItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperPackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LineItem) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LineItem) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *LineItem) validatePerformance(formats strfmt.Registry) error {
	if swag.IsZero(m.Performance) { // not required
		return nil
	}

	if m.Performance != nil {
		if err := m.Performance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Performance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Performance")
			}
			return err
		}
	}

	return nil
}

func (m *LineItem) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

func (m *LineItem) validateSubLineItems(formats strfmt.Registry) error {
	if swag.IsZero(m.SubLineItems) { // not required
		return nil
	}

	for i := 0; i < len(m.SubLineItems); i++ {
		if swag.IsZero(m.SubLineItems[i]) { // not required
			continue
		}

		if m.SubLineItems[i] != nil {
			if err := m.SubLineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LineItem) validateSuperPackage(formats strfmt.Registry) error {
	if swag.IsZero(m.SuperPackage) { // not required
		return nil
	}

	if m.SuperPackage != nil {
		if err := m.SuperPackage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SuperPackage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SuperPackage")
			}
			return err
		}
	}

	return nil
}

func (m *LineItem) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this line item based on the context it is used
func (m *LineItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubLineItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuperPackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LineItem) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {

		if swag.IsZero(m.Package) { // not required
			return nil
		}

		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *LineItem) contextValidatePerformance(ctx context.Context, formats strfmt.Registry) error {

	if m.Performance != nil {

		if swag.IsZero(m.Performance) { // not required
			return nil
		}

		if err := m.Performance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Performance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Performance")
			}
			return err
		}
	}

	return nil
}

func (m *LineItem) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

func (m *LineItem) contextValidateSubLineItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubLineItems); i++ {

		if m.SubLineItems[i] != nil {

			if swag.IsZero(m.SubLineItems[i]) { // not required
				return nil
			}

			if err := m.SubLineItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LineItem) contextValidateSuperPackage(ctx context.Context, formats strfmt.Registry) error {

	if m.SuperPackage != nil {

		if swag.IsZero(m.SuperPackage) { // not required
			return nil
		}

		if err := m.SuperPackage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SuperPackage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SuperPackage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LineItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LineItem) UnmarshalBinary(b []byte) error {
	var res LineItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
