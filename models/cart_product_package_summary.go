// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CartProductPackageSummary cart product package summary
//
// swagger:model CartProductPackageSummary
type CartProductPackageSummary struct {

	// fixed package
	FixedPackage bool `json:"FixedPackage,omitempty"`

	// line item Id
	LineItemID int32 `json:"LineItemId,omitempty"`

	// n f s package
	NFSPackage bool `json:"NFSPackage,omitempty"`

	// package code
	PackageCode string `json:"PackageCode,omitempty"`

	// package date time
	// Format: date-time
	PackageDateTime *strfmt.DateTime `json:"PackageDateTime,omitempty"`

	// package description
	PackageDescription string `json:"PackageDescription,omitempty"`

	// package Id
	PackageID int32 `json:"PackageId,omitempty"`

	// performances
	Performances []*CartProductPerformanceSummary `json:"Performances"`

	// source
	Source *EntitySummary `json:"Source,omitempty"`

	// sub package
	SubPackage bool `json:"SubPackage,omitempty"`

	// super package
	SuperPackage bool `json:"SuperPackage,omitempty"`

	// total amount
	TotalAmount float64 `json:"TotalAmount,omitempty"`
}

// Validate validates this cart product package summary
func (m *CartProductPackageSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartProductPackageSummary) validatePackageDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageDateTime", "body", "date-time", m.PackageDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CartProductPackageSummary) validatePerformances(formats strfmt.Registry) error {
	if swag.IsZero(m.Performances) { // not required
		return nil
	}

	for i := 0; i < len(m.Performances); i++ {
		if swag.IsZero(m.Performances[i]) { // not required
			continue
		}

		if m.Performances[i] != nil {
			if err := m.Performances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Performances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Performances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartProductPackageSummary) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cart product package summary based on the context it is used
func (m *CartProductPackageSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePerformances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartProductPackageSummary) contextValidatePerformances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Performances); i++ {

		if m.Performances[i] != nil {

			if swag.IsZero(m.Performances[i]) { // not required
				return nil
			}

			if err := m.Performances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Performances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Performances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartProductPackageSummary) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CartProductPackageSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartProductPackageSummary) UnmarshalBinary(b []byte) error {
	var res CartProductPackageSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
