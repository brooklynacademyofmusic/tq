// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CartLineItem cart line item
//
// swagger:model CartLineItem
type CartLineItem struct {

	// alternate line items
	AlternateLineItems []*AlternateLineItem `json:"AlternateLineItems"`

	// alternate upgrade
	AlternateUpgrade string `json:"AlternateUpgrade,omitempty"`

	// db status
	DbStatus int32 `json:"DbStatus,omitempty"`

	// due amount
	DueAmount float64 `json:"DueAmount,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// line item group Id
	LineItemGroupID int32 `json:"LineItemGroupId,omitempty"`

	// package
	Package *CartPackage `json:"Package,omitempty"`

	// package line item Id
	PackageLineItemID int32 `json:"PackageLineItemId,omitempty"`

	// performance
	Performance *CartPerformance `json:"Performance,omitempty"`

	// performance group
	PerformanceGroup *CartPerformanceGroup `json:"PerformanceGroup,omitempty"`

	// primary
	Primary bool `json:"Primary,omitempty"`

	// source
	Source *EntitySummary `json:"Source,omitempty"`

	// special request
	SpecialRequest *SpecialRequest `json:"SpecialRequest,omitempty"`

	// sub line items
	SubLineItems []*CartSubLineItem `json:"SubLineItems"`

	// super package Id
	SuperPackageID int32 `json:"SuperPackageId,omitempty"`

	// total due
	TotalDue float64 `json:"TotalDue,omitempty"`
}

// Validate validates this cart line item
func (m *CartLineItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecialRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubLineItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartLineItem) validateAlternateLineItems(formats strfmt.Registry) error {
	if swag.IsZero(m.AlternateLineItems) { // not required
		return nil
	}

	for i := 0; i < len(m.AlternateLineItems); i++ {
		if swag.IsZero(m.AlternateLineItems[i]) { // not required
			continue
		}

		if m.AlternateLineItems[i] != nil {
			if err := m.AlternateLineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AlternateLineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AlternateLineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartLineItem) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) validatePerformance(formats strfmt.Registry) error {
	if swag.IsZero(m.Performance) { // not required
		return nil
	}

	if m.Performance != nil {
		if err := m.Performance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Performance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Performance")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) validatePerformanceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceGroup) { // not required
		return nil
	}

	if m.PerformanceGroup != nil {
		if err := m.PerformanceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PerformanceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PerformanceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) validateSpecialRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.SpecialRequest) { // not required
		return nil
	}

	if m.SpecialRequest != nil {
		if err := m.SpecialRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SpecialRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SpecialRequest")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) validateSubLineItems(formats strfmt.Registry) error {
	if swag.IsZero(m.SubLineItems) { // not required
		return nil
	}

	for i := 0; i < len(m.SubLineItems); i++ {
		if swag.IsZero(m.SubLineItems[i]) { // not required
			continue
		}

		if m.SubLineItems[i] != nil {
			if err := m.SubLineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cart line item based on the context it is used
func (m *CartLineItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlternateLineItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformanceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpecialRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubLineItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartLineItem) contextValidateAlternateLineItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AlternateLineItems); i++ {

		if m.AlternateLineItems[i] != nil {

			if swag.IsZero(m.AlternateLineItems[i]) { // not required
				return nil
			}

			if err := m.AlternateLineItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AlternateLineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AlternateLineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartLineItem) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {

		if swag.IsZero(m.Package) { // not required
			return nil
		}

		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) contextValidatePerformance(ctx context.Context, formats strfmt.Registry) error {

	if m.Performance != nil {

		if swag.IsZero(m.Performance) { // not required
			return nil
		}

		if err := m.Performance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Performance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Performance")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) contextValidatePerformanceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformanceGroup != nil {

		if swag.IsZero(m.PerformanceGroup) { // not required
			return nil
		}

		if err := m.PerformanceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PerformanceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PerformanceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) contextValidateSpecialRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.SpecialRequest != nil {

		if swag.IsZero(m.SpecialRequest) { // not required
			return nil
		}

		if err := m.SpecialRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SpecialRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SpecialRequest")
			}
			return err
		}
	}

	return nil
}

func (m *CartLineItem) contextValidateSubLineItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubLineItems); i++ {

		if m.SubLineItems[i] != nil {

			if swag.IsZero(m.SubLineItems[i]) { // not required
				return nil
			}

			if err := m.SubLineItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CartLineItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartLineItem) UnmarshalBinary(b []byte) error {
	var res CartLineItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
