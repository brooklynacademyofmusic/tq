// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceSummary performance summary
//
// swagger:model PerformanceSummary
type PerformanceSummary struct {

	// code
	Code string `json:"Code,omitempty"`

	// default end sale date time
	// Format: date-time
	DefaultEndSaleDateTime *strfmt.DateTime `json:"DefaultEndSaleDateTime,omitempty"`

	// default start sale date time
	// Format: date-time
	DefaultStartSaleDateTime *strfmt.DateTime `json:"DefaultStartSaleDateTime,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// duration
	Duration int32 `json:"Duration,omitempty"`

	// facility Id
	FacilityID int32 `json:"FacilityId,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// performance date time
	// Format: date-time
	PerformanceDateTime *strfmt.DateTime `json:"PerformanceDateTime,omitempty"`

	// production season
	ProductionSeason *Entity `json:"ProductionSeason,omitempty"`

	// season
	Season *SeasonSummary `json:"Season,omitempty"`

	// time slot
	TimeSlot *TimeSlotSummary `json:"TimeSlot,omitempty"`

	// zone map Id
	ZoneMapID int32 `json:"ZoneMapId,omitempty"`
}

// Validate validates this performance summary
func (m *PerformanceSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultEndSaleDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultStartSaleDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductionSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSlot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSummary) validateDefaultEndSaleDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultEndSaleDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("DefaultEndSaleDateTime", "body", "date-time", m.DefaultEndSaleDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSummary) validateDefaultStartSaleDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultStartSaleDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("DefaultStartSaleDateTime", "body", "date-time", m.DefaultStartSaleDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSummary) validatePerformanceDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PerformanceDateTime", "body", "date-time", m.PerformanceDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSummary) validateProductionSeason(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductionSeason) { // not required
		return nil
	}

	if m.ProductionSeason != nil {
		if err := m.ProductionSeason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductionSeason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductionSeason")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSummary) validateSeason(formats strfmt.Registry) error {
	if swag.IsZero(m.Season) { // not required
		return nil
	}

	if m.Season != nil {
		if err := m.Season.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSummary) validateTimeSlot(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeSlot) { // not required
		return nil
	}

	if m.TimeSlot != nil {
		if err := m.TimeSlot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TimeSlot")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance summary based on the context it is used
func (m *PerformanceSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProductionSeason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeSlot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSummary) contextValidateProductionSeason(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductionSeason != nil {

		if swag.IsZero(m.ProductionSeason) { // not required
			return nil
		}

		if err := m.ProductionSeason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductionSeason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductionSeason")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSummary) contextValidateSeason(ctx context.Context, formats strfmt.Registry) error {

	if m.Season != nil {

		if swag.IsZero(m.Season) { // not required
			return nil
		}

		if err := m.Season.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSummary) contextValidateTimeSlot(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeSlot != nil {

		if swag.IsZero(m.TimeSlot) { // not required
			return nil
		}

		if err := m.TimeSlot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TimeSlot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSummary) UnmarshalBinary(b []byte) error {
	var res PerformanceSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
