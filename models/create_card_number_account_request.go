// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateCardNumberAccountRequest create card number account request
//
// swagger:model CreateCardNumberAccountRequest
type CreateCardNumberAccountRequest struct {

	// account number
	AccountNumber string `json:"AccountNumber,omitempty"`

	// card expiry month
	CardExpiryMonth int32 `json:"CardExpiryMonth,omitempty"`

	// card expiry year
	CardExpiryYear int32 `json:"CardExpiryYear,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// exclusive to controlled batch Id
	ExclusiveToControlledBatchID int32 `json:"ExclusiveToControlledBatchId,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// payment method group Id
	PaymentMethodGroupID int32 `json:"PaymentMethodGroupId,omitempty"`

	// return account if account exists
	ReturnAccountIfAccountExists bool `json:"ReturnAccountIfAccountExists,omitempty"`

	// transaction origin
	TransactionOrigin string `json:"TransactionOrigin,omitempty"`

	// vantiv encrypted card
	VantivEncryptedCard *VantivEncryptedCard `json:"VantivEncryptedCard,omitempty"`
}

// Validate validates this create card number account request
func (m *CreateCardNumberAccountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVantivEncryptedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCardNumberAccountRequest) validateVantivEncryptedCard(formats strfmt.Registry) error {
	if swag.IsZero(m.VantivEncryptedCard) { // not required
		return nil
	}

	if m.VantivEncryptedCard != nil {
		if err := m.VantivEncryptedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VantivEncryptedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VantivEncryptedCard")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create card number account request based on the context it is used
func (m *CreateCardNumberAccountRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVantivEncryptedCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCardNumberAccountRequest) contextValidateVantivEncryptedCard(ctx context.Context, formats strfmt.Registry) error {

	if m.VantivEncryptedCard != nil {

		if swag.IsZero(m.VantivEncryptedCard) { // not required
			return nil
		}

		if err := m.VantivEncryptedCard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VantivEncryptedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VantivEncryptedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCardNumberAccountRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCardNumberAccountRequest) UnmarshalBinary(b []byte) error {
	var res CreateCardNumberAccountRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
