// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageSearchRequest package search request
//
// swagger:model PackageSearchRequest
type PackageSearchRequest struct {

	// artist ids
	ArtistIds string `json:"ArtistIds,omitempty"`

	// business unit Id
	BusinessUnitID int32 `json:"BusinessUnitId,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// full text search
	FullTextSearch string `json:"FullTextSearch,omitempty"`

	// match all performances
	MatchAllPerformances bool `json:"MatchAllPerformances,omitempty"`

	// mode of sale Id
	ModeOfSaleID int32 `json:"ModeOfSaleId,omitempty"`

	// package end date
	// Format: date-time
	PackageEndDate *strfmt.DateTime `json:"PackageEndDate,omitempty"`

	// package facility ids
	PackageFacilityIds string `json:"PackageFacilityIds,omitempty"`

	// package keyword and or
	PackageKeywordAndOr string `json:"PackageKeywordAndOr,omitempty"`

	// package keyword ids
	PackageKeywordIds string `json:"PackageKeywordIds,omitempty"`

	// package start date
	// Format: date-time
	PackageStartDate *strfmt.DateTime `json:"PackageStartDate,omitempty"`

	// package type ids
	PackageTypeIds string `json:"PackageTypeIds,omitempty"`

	// performance end date
	// Format: date-time
	PerformanceEndDate *strfmt.DateTime `json:"PerformanceEndDate,omitempty"`

	// performance facility ids
	PerformanceFacilityIds string `json:"PerformanceFacilityIds,omitempty"`

	// performance keyword and or
	PerformanceKeywordAndOr string `json:"PerformanceKeywordAndOr,omitempty"`

	// performance keyword ids
	PerformanceKeywordIds string `json:"PerformanceKeywordIds,omitempty"`

	// performance start date
	// Format: date-time
	PerformanceStartDate *strfmt.DateTime `json:"PerformanceStartDate,omitempty"`

	// season ids
	SeasonIds string `json:"SeasonIds,omitempty"`
}

// Validate validates this package search request
func (m *PackageSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageSearchRequest) validatePackageEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageEndDate", "body", "date-time", m.PackageEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchRequest) validatePackageStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageStartDate", "body", "date-time", m.PackageStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchRequest) validatePerformanceEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PerformanceEndDate", "body", "date-time", m.PerformanceEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchRequest) validatePerformanceStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PerformanceStartDate", "body", "date-time", m.PerformanceStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this package search request based on context it is used
func (m *PackageSearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PackageSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageSearchRequest) UnmarshalBinary(b []byte) error {
	var res PackageSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
