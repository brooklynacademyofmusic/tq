// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Screen screen
//
// swagger:model Screen
type Screen struct {

	// column count
	ColumnCount int32 `json:"ColumnCount,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// house map rectangles
	HouseMapRectangles []*HouseMapRectangle `json:"HouseMapRectangles"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// row count
	RowCount int32 `json:"RowCount,omitempty"`

	// screen down
	ScreenDown int32 `json:"ScreenDown,omitempty"`

	// screen left
	ScreenLeft int32 `json:"ScreenLeft,omitempty"`

	// screen right
	ScreenRight int32 `json:"ScreenRight,omitempty"`

	// screen up
	ScreenUp int32 `json:"ScreenUp,omitempty"`
}

// Validate validates this screen
func (m *Screen) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHouseMapRectangles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Screen) validateHouseMapRectangles(formats strfmt.Registry) error {
	if swag.IsZero(m.HouseMapRectangles) { // not required
		return nil
	}

	for i := 0; i < len(m.HouseMapRectangles); i++ {
		if swag.IsZero(m.HouseMapRectangles[i]) { // not required
			continue
		}

		if m.HouseMapRectangles[i] != nil {
			if err := m.HouseMapRectangles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("HouseMapRectangles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("HouseMapRectangles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this screen based on the context it is used
func (m *Screen) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHouseMapRectangles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Screen) contextValidateHouseMapRectangles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HouseMapRectangles); i++ {

		if m.HouseMapRectangles[i] != nil {

			if swag.IsZero(m.HouseMapRectangles[i]) { // not required
				return nil
			}

			if err := m.HouseMapRectangles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("HouseMapRectangles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("HouseMapRectangles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Screen) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Screen) UnmarshalBinary(b []byte) error {
	var res Screen
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
