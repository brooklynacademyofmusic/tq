// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionLoginInfo session login info
//
// swagger:model SessionLoginInfo
type SessionLoginInfo struct {

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// electronic address
	ElectronicAddress string `json:"ElectronicAddress,omitempty"`

	// failed attempts
	FailedAttempts int32 `json:"FailedAttempts,omitempty"`

	// locked date
	// Format: date-time
	LockedDate strfmt.DateTime `json:"LockedDate,omitempty"`

	// original constituent Id
	OriginalConstituentID int32 `json:"OriginalConstituentId,omitempty"`

	// status
	Status string `json:"Status,omitempty"`

	// user Id
	UserID string `json:"UserId,omitempty"`
}

// Validate validates this session login info
func (m *SessionLoginInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLockedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionLoginInfo) validateLockedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LockedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("LockedDate", "body", "date-time", m.LockedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this session login info based on context it is used
func (m *SessionLoginInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SessionLoginInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionLoginInfo) UnmarshalBinary(b []byte) error {
	var res SessionLoginInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
