// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContactPoint contact point
//
// swagger:model ContactPoint
type ContactPoint struct {

	// address
	Address *AddressContactPoint `json:"Address,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// contact point category Id
	ContactPointCategoryID int32 `json:"ContactPointCategoryId,omitempty"`

	// electronic address
	ElectronicAddress *ElectronicAddressContactPoint `json:"ElectronicAddress,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// phone
	Phone *PhoneContactPoint `json:"Phone,omitempty"`

	// type
	Type *EntitySummary `json:"Type,omitempty"`
}

// Validate validates this contact point
func (m *ContactPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElectronicAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactPoint) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Address")
			}
			return err
		}
	}

	return nil
}

func (m *ContactPoint) validateElectronicAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.ElectronicAddress) { // not required
		return nil
	}

	if m.ElectronicAddress != nil {
		if err := m.ElectronicAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ElectronicAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ElectronicAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ContactPoint) validatePhone(formats strfmt.Registry) error {
	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if m.Phone != nil {
		if err := m.Phone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Phone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Phone")
			}
			return err
		}
	}

	return nil
}

func (m *ContactPoint) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this contact point based on the context it is used
func (m *ContactPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElectronicAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactPoint) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Address")
			}
			return err
		}
	}

	return nil
}

func (m *ContactPoint) contextValidateElectronicAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ElectronicAddress != nil {

		if swag.IsZero(m.ElectronicAddress) { // not required
			return nil
		}

		if err := m.ElectronicAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ElectronicAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ElectronicAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ContactPoint) contextValidatePhone(ctx context.Context, formats strfmt.Registry) error {

	if m.Phone != nil {

		if swag.IsZero(m.Phone) { // not required
			return nil
		}

		if err := m.Phone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Phone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Phone")
			}
			return err
		}
	}

	return nil
}

func (m *ContactPoint) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactPoint) UnmarshalBinary(b []byte) error {
	var res ContactPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
