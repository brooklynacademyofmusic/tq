// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CartMembership cart membership
//
// swagger:model CartMembership
type CartMembership struct {

	// amount
	Amount float64 `json:"Amount,omitempty"`

	// custom data items
	CustomDataItems []*CustomDataItem `json:"CustomDataItems"`

	// db status
	DbStatus int32 `json:"DbStatus,omitempty"`

	// fund
	Fund *EntitySummary `json:"Fund,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// membership level
	MembershipLevel *EntitySummary `json:"MembershipLevel,omitempty"`

	// membership organization
	MembershipOrganization *EntitySummary `json:"MembershipOrganization,omitempty"`

	// on account payment method Id
	OnAccountPaymentMethodID int32 `json:"OnAccountPaymentMethodId,omitempty"`
}

// Validate validates this cart membership
func (m *CartMembership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomDataItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFund(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembershipLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembershipOrganization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartMembership) validateCustomDataItems(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomDataItems) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomDataItems); i++ {
		if swag.IsZero(m.CustomDataItems[i]) { // not required
			continue
		}

		if m.CustomDataItems[i] != nil {
			if err := m.CustomDataItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomDataItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CustomDataItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartMembership) validateFund(formats strfmt.Registry) error {
	if swag.IsZero(m.Fund) { // not required
		return nil
	}

	if m.Fund != nil {
		if err := m.Fund.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fund")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Fund")
			}
			return err
		}
	}

	return nil
}

func (m *CartMembership) validateMembershipLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.MembershipLevel) { // not required
		return nil
	}

	if m.MembershipLevel != nil {
		if err := m.MembershipLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipLevel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipLevel")
			}
			return err
		}
	}

	return nil
}

func (m *CartMembership) validateMembershipOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.MembershipOrganization) { // not required
		return nil
	}

	if m.MembershipOrganization != nil {
		if err := m.MembershipOrganization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipOrganization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipOrganization")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cart membership based on the context it is used
func (m *CartMembership) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomDataItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFund(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembershipLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembershipOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartMembership) contextValidateCustomDataItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomDataItems); i++ {

		if m.CustomDataItems[i] != nil {

			if swag.IsZero(m.CustomDataItems[i]) { // not required
				return nil
			}

			if err := m.CustomDataItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomDataItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CustomDataItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartMembership) contextValidateFund(ctx context.Context, formats strfmt.Registry) error {

	if m.Fund != nil {

		if swag.IsZero(m.Fund) { // not required
			return nil
		}

		if err := m.Fund.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fund")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Fund")
			}
			return err
		}
	}

	return nil
}

func (m *CartMembership) contextValidateMembershipLevel(ctx context.Context, formats strfmt.Registry) error {

	if m.MembershipLevel != nil {

		if swag.IsZero(m.MembershipLevel) { // not required
			return nil
		}

		if err := m.MembershipLevel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipLevel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipLevel")
			}
			return err
		}
	}

	return nil
}

func (m *CartMembership) contextValidateMembershipOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.MembershipOrganization != nil {

		if swag.IsZero(m.MembershipOrganization) { // not required
			return nil
		}

		if err := m.MembershipOrganization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipOrganization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipOrganization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CartMembership) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartMembership) UnmarshalBinary(b []byte) error {
	var res CartMembership
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
