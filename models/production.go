// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Production production
//
// swagger:model Production
type Production struct {

	// cost
	Cost float64 `json:"Cost,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// duration
	Duration int32 `json:"Duration,omitempty"`

	// fulltext
	Fulltext string `json:"Fulltext,omitempty"`

	// fulltext complete date time
	// Format: date-time
	FulltextCompleteDateTime strfmt.DateTime `json:"FulltextCompleteDateTime,omitempty"`

	// fulltext request date time
	// Format: date-time
	FulltextRequestDateTime strfmt.DateTime `json:"FulltextRequestDateTime,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inventory type
	InventoryType string `json:"InventoryType,omitempty"`

	// language
	Language *LanguageSummary `json:"Language,omitempty"`

	// number of acts
	NumberOfActs int32 `json:"NumberOfActs,omitempty"`

	// short name
	ShortName string `json:"ShortName,omitempty"`

	// synopsis
	Synopsis string `json:"Synopsis,omitempty"`

	// text1
	Text1 string `json:"Text1,omitempty"`

	// text2
	Text2 string `json:"Text2,omitempty"`

	// text3
	Text3 string `json:"Text3,omitempty"`

	// text4
	Text4 string `json:"Text4,omitempty"`

	// title
	Title *TitleSummary `json:"Title,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this production
func (m *Production) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulltextCompleteDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulltextRequestDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Production) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Production) validateFulltextCompleteDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FulltextCompleteDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("FulltextCompleteDateTime", "body", "date-time", m.FulltextCompleteDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Production) validateFulltextRequestDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FulltextRequestDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("FulltextRequestDateTime", "body", "date-time", m.FulltextRequestDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Production) validateLanguage(formats strfmt.Registry) error {
	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if m.Language != nil {
		if err := m.Language.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Language")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Language")
			}
			return err
		}
	}

	return nil
}

func (m *Production) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if m.Title != nil {
		if err := m.Title.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Title")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Title")
			}
			return err
		}
	}

	return nil
}

func (m *Production) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this production based on the context it is used
func (m *Production) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLanguage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Production) contextValidateLanguage(ctx context.Context, formats strfmt.Registry) error {

	if m.Language != nil {

		if swag.IsZero(m.Language) { // not required
			return nil
		}

		if err := m.Language.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Language")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Language")
			}
			return err
		}
	}

	return nil
}

func (m *Production) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if m.Title != nil {

		if swag.IsZero(m.Title) { // not required
			return nil
		}

		if err := m.Title.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Title")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Title")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Production) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Production) UnmarshalBinary(b []byte) error {
	var res Production
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
