// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// List list
//
// swagger:model List
type List struct {

	// affiliated individuals
	AffiliatedIndividuals int32 `json:"AffiliatedIndividuals,omitempty"`

	// analytics indicator
	AnalyticsIndicator bool `json:"AnalyticsIndicator,omitempty"`

	// category
	Category *ListCategorySummary `json:"Category,omitempty"`

	// constituent count
	ConstituentCount int32 `json:"ConstituentCount,omitempty"`

	// control group
	ControlGroup *ControlGroupSummary `json:"ControlGroup,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// criteria
	Criteria []*ListCriteria `json:"Criteria"`

	// description
	Description string `json:"Description,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// edit mode
	EditMode string `json:"EditMode,omitempty"`

	// generate
	Generate bool `json:"Generate,omitempty"`

	// households
	Households int32 `json:"Households,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// individuals
	Individuals int32 `json:"Individuals,omitempty"`

	// is dynamic
	IsDynamic bool `json:"IsDynamic,omitempty"`

	// last used date time
	// Format: date-time
	LastUsedDateTime *strfmt.DateTime `json:"LastUsedDateTime,omitempty"`

	// list Sql
	ListSQL string `json:"ListSql,omitempty"`

	// organizations
	Organizations int32 `json:"Organizations,omitempty"`

	// output set
	OutputSet *OutputSetSummary `json:"OutputSet,omitempty"`

	// relationship options
	RelationshipOptions *ListRelationshipOptions `json:"RelationshipOptions,omitempty"`

	// t m s indicator
	TMSIndicator bool `json:"TMSIndicator,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this list
func (m *List) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUsedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationshipOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *List) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

func (m *List) validateControlGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlGroup) { // not required
		return nil
	}

	if m.ControlGroup != nil {
		if err := m.ControlGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ControlGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ControlGroup")
			}
			return err
		}
	}

	return nil
}

func (m *List) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *List) validateCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.Criteria) { // not required
		return nil
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *List) validateLastUsedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUsedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastUsedDateTime", "body", "date-time", m.LastUsedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *List) validateOutputSet(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputSet) { // not required
		return nil
	}

	if m.OutputSet != nil {
		if err := m.OutputSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OutputSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OutputSet")
			}
			return err
		}
	}

	return nil
}

func (m *List) validateRelationshipOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.RelationshipOptions) { // not required
		return nil
	}

	if m.RelationshipOptions != nil {
		if err := m.RelationshipOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelationshipOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelationshipOptions")
			}
			return err
		}
	}

	return nil
}

func (m *List) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list based on the context it is used
func (m *List) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControlGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationshipOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *List) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

func (m *List) contextValidateControlGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ControlGroup != nil {

		if swag.IsZero(m.ControlGroup) { // not required
			return nil
		}

		if err := m.ControlGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ControlGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ControlGroup")
			}
			return err
		}
	}

	return nil
}

func (m *List) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criteria); i++ {

		if m.Criteria[i] != nil {

			if swag.IsZero(m.Criteria[i]) { // not required
				return nil
			}

			if err := m.Criteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *List) contextValidateOutputSet(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputSet != nil {

		if swag.IsZero(m.OutputSet) { // not required
			return nil
		}

		if err := m.OutputSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OutputSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OutputSet")
			}
			return err
		}
	}

	return nil
}

func (m *List) contextValidateRelationshipOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.RelationshipOptions != nil {

		if swag.IsZero(m.RelationshipOptions) { // not required
			return nil
		}

		if err := m.RelationshipOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RelationshipOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RelationshipOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *List) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *List) UnmarshalBinary(b []byte) error {
	var res List
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
