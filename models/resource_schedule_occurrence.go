// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceScheduleOccurrence resource schedule occurrence
//
// swagger:model ResourceScheduleOccurrence
type ResourceScheduleOccurrence struct {

	// booking
	Booking *EntitySummary `json:"Booking,omitempty"`

	// booking assignment Id
	BookingAssignmentID int32 `json:"BookingAssignmentId,omitempty"`

	// count
	Count int32 `json:"Count,omitempty"`

	// end date time
	// Format: date-time
	EndDateTime *strfmt.DateTime `json:"EndDateTime,omitempty"`

	// is shared
	IsShared bool `json:"IsShared,omitempty"`

	// recurrence pattern
	RecurrencePattern int32 `json:"RecurrencePattern,omitempty"`

	// schedule description
	ScheduleDescription string `json:"ScheduleDescription,omitempty"`

	// schedule Id
	ScheduleID int32 `json:"ScheduleId,omitempty"`

	// schedule type Id
	ScheduleTypeID int32 `json:"ScheduleTypeId,omitempty"`

	// start date time
	// Format: date-time
	StartDateTime *strfmt.DateTime `json:"StartDateTime,omitempty"`
}

// Validate validates this resource schedule occurrence
func (m *ResourceScheduleOccurrence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBooking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceScheduleOccurrence) validateBooking(formats strfmt.Registry) error {
	if swag.IsZero(m.Booking) { // not required
		return nil
	}

	if m.Booking != nil {
		if err := m.Booking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Booking")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Booking")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceScheduleOccurrence) validateEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResourceScheduleOccurrence) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this resource schedule occurrence based on the context it is used
func (m *ResourceScheduleOccurrence) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBooking(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceScheduleOccurrence) contextValidateBooking(ctx context.Context, formats strfmt.Registry) error {

	if m.Booking != nil {

		if swag.IsZero(m.Booking) { // not required
			return nil
		}

		if err := m.Booking.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Booking")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Booking")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceScheduleOccurrence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceScheduleOccurrence) UnmarshalBinary(b []byte) error {
	var res ResourceScheduleOccurrence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
