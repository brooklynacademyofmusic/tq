// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EMVAuthorizationResponse e m v authorization response
//
// swagger:model EMVAuthorizationResponse
type EMVAuthorizationResponse struct {

	// authorization response
	AuthorizationResponse *AuthorizationResponse `json:"AuthorizationResponse,omitempty"`

	// e m v status
	EMVStatus *EMVStatus `json:"EMVStatus,omitempty"`
}

// Validate validates this e m v authorization response
func (m *EMVAuthorizationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEMVStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EMVAuthorizationResponse) validateAuthorizationResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationResponse) { // not required
		return nil
	}

	if m.AuthorizationResponse != nil {
		if err := m.AuthorizationResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AuthorizationResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AuthorizationResponse")
			}
			return err
		}
	}

	return nil
}

func (m *EMVAuthorizationResponse) validateEMVStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EMVStatus) { // not required
		return nil
	}

	if m.EMVStatus != nil {
		if err := m.EMVStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EMVStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EMVStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this e m v authorization response based on the context it is used
func (m *EMVAuthorizationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorizationResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEMVStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EMVAuthorizationResponse) contextValidateAuthorizationResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthorizationResponse != nil {

		if swag.IsZero(m.AuthorizationResponse) { // not required
			return nil
		}

		if err := m.AuthorizationResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AuthorizationResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AuthorizationResponse")
			}
			return err
		}
	}

	return nil
}

func (m *EMVAuthorizationResponse) contextValidateEMVStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EMVStatus != nil {

		if swag.IsZero(m.EMVStatus) { // not required
			return nil
		}

		if err := m.EMVStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EMVStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EMVStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EMVAuthorizationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EMVAuthorizationResponse) UnmarshalBinary(b []byte) error {
	var res EMVAuthorizationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
