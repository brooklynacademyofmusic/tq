// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductSearchResponse product search response
//
// swagger:model ProductSearchResponse
type ProductSearchResponse struct {

	// availability by constituent
	AvailabilityByConstituent int32 `json:"AvailabilityByConstituent,omitempty"`

	// business unit Id
	BusinessUnitID int32 `json:"BusinessUnitId,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// end date time
	// Format: date-time
	EndDateTime strfmt.DateTime `json:"EndDateTime,omitempty"`

	// facility Id
	FacilityID int32 `json:"FacilityId,omitempty"`

	// first date time
	// Format: date-time
	FirstDateTime strfmt.DateTime `json:"FirstDateTime,omitempty"`

	// gross availability
	GrossAvailability int32 `json:"GrossAvailability,omitempty"`

	// is fixed seat package
	IsFixedSeatPackage bool `json:"IsFixedSeatPackage,omitempty"`

	// is flex package
	IsFlexPackage bool `json:"IsFlexPackage,omitempty"`

	// is on sale
	IsOnSale bool `json:"IsOnSale,omitempty"`

	// is super package
	IsSuperPackage bool `json:"IsSuperPackage,omitempty"`

	// last date time
	// Format: date-time
	LastDateTime strfmt.DateTime `json:"LastDateTime,omitempty"`

	// package code
	PackageCode string `json:"PackageCode,omitempty"`

	// package date time
	// Format: date-time
	PackageDateTime strfmt.DateTime `json:"PackageDateTime,omitempty"`

	// package Id
	PackageID int32 `json:"PackageId,omitempty"`

	// performance code
	PerformanceCode string `json:"PerformanceCode,omitempty"`

	// performance date
	// Format: date-time
	PerformanceDate strfmt.DateTime `json:"PerformanceDate,omitempty"`

	// performance Id
	PerformanceID int32 `json:"PerformanceId,omitempty"`

	// performance status Id
	PerformanceStatusID int32 `json:"PerformanceStatusId,omitempty"`

	// product short description
	ProductShortDescription string `json:"ProductShortDescription,omitempty"`

	// product type description
	ProductTypeDescription string `json:"ProductTypeDescription,omitempty"`

	// product type Id
	ProductTypeID int32 `json:"ProductTypeId,omitempty"`

	// production season description
	ProductionSeasonDescription string `json:"ProductionSeasonDescription,omitempty"`

	// production season Id
	ProductionSeasonID int32 `json:"ProductionSeasonId,omitempty"`

	// search relevance
	SearchRelevance int32 `json:"SearchRelevance,omitempty"`

	// search weight
	SearchWeight int32 `json:"SearchWeight,omitempty"`

	// season description
	SeasonDescription string `json:"SeasonDescription,omitempty"`

	// season Id
	SeasonID int32 `json:"SeasonId,omitempty"`

	// start date time
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"StartDateTime,omitempty"`

	// time slot Id
	TimeSlotID int32 `json:"TimeSlotId,omitempty"`

	// zone map Id
	ZoneMapID int32 `json:"ZoneMapId,omitempty"`
}

// Validate validates this product search response
func (m *ProductSearchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductSearchResponse) validateEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductSearchResponse) validateFirstDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("FirstDateTime", "body", "date-time", m.FirstDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductSearchResponse) validateLastDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastDateTime", "body", "date-time", m.LastDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductSearchResponse) validatePackageDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageDateTime", "body", "date-time", m.PackageDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductSearchResponse) validatePerformanceDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PerformanceDate", "body", "date-time", m.PerformanceDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductSearchResponse) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product search response based on context it is used
func (m *ProductSearchResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductSearchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductSearchResponse) UnmarshalBinary(b []byte) error {
	var res ProductSearchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
