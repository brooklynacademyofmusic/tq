// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Step step
//
// swagger:model Step
type Step struct {

	// associate
	Associate *ConstituentDisplaySummary `json:"Associate,omitempty"`

	// completed on date time
	// Format: date-time
	CompletedOnDateTime strfmt.DateTime `json:"CompletedOnDateTime,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// due date time
	// Format: date-time
	DueDateTime strfmt.DateTime `json:"DueDateTime,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// new value
	NewValue string `json:"NewValue,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// old value
	OldValue string `json:"OldValue,omitempty"`

	// plan
	Plan *PlanSummary `json:"Plan,omitempty"`

	// priority
	Priority int32 `json:"Priority,omitempty"`

	// step date time
	// Format: date-time
	StepDateTime strfmt.DateTime `json:"StepDateTime,omitempty"`

	// type
	Type *StepTypeSummary `json:"Type,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// warning days
	WarningDays int32 `json:"WarningDays,omitempty"`

	// worker
	Worker *ConstituentShortDisplayNameSummary `json:"Worker,omitempty"`
}

// Validate validates this step
func (m *Step) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletedOnDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDueDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorker(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Step) validateAssociate(formats strfmt.Registry) error {
	if swag.IsZero(m.Associate) { // not required
		return nil
	}

	if m.Associate != nil {
		if err := m.Associate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Associate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Associate")
			}
			return err
		}
	}

	return nil
}

func (m *Step) validateCompletedOnDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletedOnDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CompletedOnDateTime", "body", "date-time", m.CompletedOnDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Step) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Step) validateDueDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DueDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("DueDateTime", "body", "date-time", m.DueDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Step) validatePlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Plan")
			}
			return err
		}
	}

	return nil
}

func (m *Step) validateStepDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StepDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StepDateTime", "body", "date-time", m.StepDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Step) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

func (m *Step) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Step) validateWorker(formats strfmt.Registry) error {
	if swag.IsZero(m.Worker) { // not required
		return nil
	}

	if m.Worker != nil {
		if err := m.Worker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Worker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Worker")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this step based on the context it is used
func (m *Step) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssociate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Step) contextValidateAssociate(ctx context.Context, formats strfmt.Registry) error {

	if m.Associate != nil {

		if swag.IsZero(m.Associate) { // not required
			return nil
		}

		if err := m.Associate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Associate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Associate")
			}
			return err
		}
	}

	return nil
}

func (m *Step) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Plan != nil {

		if swag.IsZero(m.Plan) { // not required
			return nil
		}

		if err := m.Plan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Plan")
			}
			return err
		}
	}

	return nil
}

func (m *Step) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

func (m *Step) contextValidateWorker(ctx context.Context, formats strfmt.Registry) error {

	if m.Worker != nil {

		if swag.IsZero(m.Worker) { // not required
			return nil
		}

		if err := m.Worker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Worker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Worker")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Step) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Step) UnmarshalBinary(b []byte) error {
	var res Step
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
