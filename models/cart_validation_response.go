// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CartValidationResponse cart validation response
//
// swagger:model CartValidationResponse
type CartValidationResponse struct {

	// f s package errors
	FSPackageErrors []*FSPackageError `json:"FSPackageErrors"`

	// n f s package errors
	NFSPackageErrors []*NFSPackageError `json:"NFSPackageErrors"`

	// payment plan error
	PaymentPlanError *PaymentPlanError `json:"PaymentPlanError,omitempty"`

	// super package errors
	SuperPackageErrors []*SuperPackageError `json:"SuperPackageErrors"`
}

// Validate validates this cart validation response
func (m *CartValidationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFSPackageErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNFSPackageErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentPlanError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperPackageErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartValidationResponse) validateFSPackageErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.FSPackageErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.FSPackageErrors); i++ {
		if swag.IsZero(m.FSPackageErrors[i]) { // not required
			continue
		}

		if m.FSPackageErrors[i] != nil {
			if err := m.FSPackageErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FSPackageErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FSPackageErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartValidationResponse) validateNFSPackageErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.NFSPackageErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.NFSPackageErrors); i++ {
		if swag.IsZero(m.NFSPackageErrors[i]) { // not required
			continue
		}

		if m.NFSPackageErrors[i] != nil {
			if err := m.NFSPackageErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NFSPackageErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NFSPackageErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartValidationResponse) validatePaymentPlanError(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentPlanError) { // not required
		return nil
	}

	if m.PaymentPlanError != nil {
		if err := m.PaymentPlanError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PaymentPlanError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PaymentPlanError")
			}
			return err
		}
	}

	return nil
}

func (m *CartValidationResponse) validateSuperPackageErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.SuperPackageErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.SuperPackageErrors); i++ {
		if swag.IsZero(m.SuperPackageErrors[i]) { // not required
			continue
		}

		if m.SuperPackageErrors[i] != nil {
			if err := m.SuperPackageErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SuperPackageErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SuperPackageErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cart validation response based on the context it is used
func (m *CartValidationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFSPackageErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNFSPackageErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentPlanError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuperPackageErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartValidationResponse) contextValidateFSPackageErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FSPackageErrors); i++ {

		if m.FSPackageErrors[i] != nil {

			if swag.IsZero(m.FSPackageErrors[i]) { // not required
				return nil
			}

			if err := m.FSPackageErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FSPackageErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FSPackageErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartValidationResponse) contextValidateNFSPackageErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NFSPackageErrors); i++ {

		if m.NFSPackageErrors[i] != nil {

			if swag.IsZero(m.NFSPackageErrors[i]) { // not required
				return nil
			}

			if err := m.NFSPackageErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NFSPackageErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NFSPackageErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartValidationResponse) contextValidatePaymentPlanError(ctx context.Context, formats strfmt.Registry) error {

	if m.PaymentPlanError != nil {

		if swag.IsZero(m.PaymentPlanError) { // not required
			return nil
		}

		if err := m.PaymentPlanError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PaymentPlanError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PaymentPlanError")
			}
			return err
		}
	}

	return nil
}

func (m *CartValidationResponse) contextValidateSuperPackageErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SuperPackageErrors); i++ {

		if m.SuperPackageErrors[i] != nil {

			if swag.IsZero(m.SuperPackageErrors[i]) { // not required
				return nil
			}

			if err := m.SuperPackageErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SuperPackageErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SuperPackageErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CartValidationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartValidationResponse) UnmarshalBinary(b []byte) error {
	var res CartValidationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
