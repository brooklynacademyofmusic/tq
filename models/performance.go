// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Performance performance
//
// swagger:model Performance
type Performance struct {

	// avail sale indicator
	AvailSaleIndicator bool `json:"AvailSaleIndicator,omitempty"`

	// best seat map
	BestSeatMap *BestSeatMapSummary `json:"BestSeatMap,omitempty"`

	// budget amount
	BudgetAmount float64 `json:"BudgetAmount,omitempty"`

	// campaign
	Campaign *Campaign `json:"Campaign,omitempty"`

	// code
	Code string `json:"Code,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// date
	// Format: date-time
	Date strfmt.DateTime `json:"Date,omitempty"`

	// default end sale date time
	// Format: date-time
	DefaultEndSaleDateTime strfmt.DateTime `json:"DefaultEndSaleDateTime,omitempty"`

	// default start sale date time
	// Format: date-time
	DefaultStartSaleDateTime strfmt.DateTime `json:"DefaultStartSaleDateTime,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// doors close
	// Format: date-time
	DoorsClose strfmt.DateTime `json:"DoorsClose,omitempty"`

	// doors open
	// Format: date-time
	DoorsOpen strfmt.DateTime `json:"DoorsOpen,omitempty"`

	// duration
	Duration int32 `json:"Duration,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// facility
	Facility *FacilitySummary `json:"Facility,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// production season
	ProductionSeason *ProductionSeasonSummary `json:"ProductionSeason,omitempty"`

	// publish client end date
	// Format: date-time
	PublishClientEndDate strfmt.DateTime `json:"PublishClientEndDate,omitempty"`

	// publish client start date
	// Format: date-time
	PublishClientStartDate strfmt.DateTime `json:"PublishClientStartDate,omitempty"`

	// publish web Api end date
	// Format: date-time
	PublishWebAPIEndDate strfmt.DateTime `json:"PublishWebApiEndDate,omitempty"`

	// publish web Api start date
	// Format: date-time
	PublishWebAPIStartDate strfmt.DateTime `json:"PublishWebApiStartDate,omitempty"`

	// rank type
	RankType *RankTypeSummary `json:"RankType,omitempty"`

	// sales notes
	SalesNotes string `json:"SalesNotes,omitempty"`

	// sales notes required
	SalesNotesRequired bool `json:"SalesNotesRequired,omitempty"`

	// season
	Season *SeasonSummary `json:"Season,omitempty"`

	// short name
	ShortName string `json:"ShortName,omitempty"`

	// status
	Status *PerformanceStatusSummary `json:"Status,omitempty"`

	// text1
	Text1 string `json:"Text1,omitempty"`

	// text2
	Text2 string `json:"Text2,omitempty"`

	// text3
	Text3 string `json:"Text3,omitempty"`

	// text4
	Text4 string `json:"Text4,omitempty"`

	// time slot
	TimeSlot *TimeSlotSummary `json:"TimeSlot,omitempty"`

	// tv indicator
	TvIndicator bool `json:"TvIndicator,omitempty"`

	// type
	Type *PerformanceTypeSummary `json:"Type,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// zone map
	ZoneMap *ZoneMapSummary `json:"ZoneMap,omitempty"`
}

// Validate validates this performance
func (m *Performance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBestSeatMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultEndSaleDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultStartSaleDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoorsClose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoorsOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductionSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishClientEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishClientStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishWebAPIEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishWebAPIStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSlot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Performance) validateBestSeatMap(formats strfmt.Registry) error {
	if swag.IsZero(m.BestSeatMap) { // not required
		return nil
	}

	if m.BestSeatMap != nil {
		if err := m.BestSeatMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BestSeatMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BestSeatMap")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateCampaign(formats strfmt.Registry) error {
	if swag.IsZero(m.Campaign) { // not required
		return nil
	}

	if m.Campaign != nil {
		if err := m.Campaign.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("Date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validateDefaultEndSaleDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultEndSaleDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("DefaultEndSaleDateTime", "body", "date-time", m.DefaultEndSaleDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validateDefaultStartSaleDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultStartSaleDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("DefaultStartSaleDateTime", "body", "date-time", m.DefaultStartSaleDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validateDoorsClose(formats strfmt.Registry) error {
	if swag.IsZero(m.DoorsClose) { // not required
		return nil
	}

	if err := validate.FormatOf("DoorsClose", "body", "date-time", m.DoorsClose.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validateDoorsOpen(formats strfmt.Registry) error {
	if swag.IsZero(m.DoorsOpen) { // not required
		return nil
	}

	if err := validate.FormatOf("DoorsOpen", "body", "date-time", m.DoorsOpen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validateFacility(formats strfmt.Registry) error {
	if swag.IsZero(m.Facility) { // not required
		return nil
	}

	if m.Facility != nil {
		if err := m.Facility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Facility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Facility")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateProductionSeason(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductionSeason) { // not required
		return nil
	}

	if m.ProductionSeason != nil {
		if err := m.ProductionSeason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductionSeason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductionSeason")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validatePublishClientEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishClientEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PublishClientEndDate", "body", "date-time", m.PublishClientEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validatePublishClientStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishClientStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PublishClientStartDate", "body", "date-time", m.PublishClientStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validatePublishWebAPIEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishWebAPIEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PublishWebApiEndDate", "body", "date-time", m.PublishWebAPIEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validatePublishWebAPIStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishWebAPIStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PublishWebApiStartDate", "body", "date-time", m.PublishWebAPIStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validateRankType(formats strfmt.Registry) error {
	if swag.IsZero(m.RankType) { // not required
		return nil
	}

	if m.RankType != nil {
		if err := m.RankType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RankType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RankType")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateSeason(formats strfmt.Registry) error {
	if swag.IsZero(m.Season) { // not required
		return nil
	}

	if m.Season != nil {
		if err := m.Season.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateTimeSlot(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeSlot) { // not required
		return nil
	}

	if m.TimeSlot != nil {
		if err := m.TimeSlot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TimeSlot")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Performance) validateZoneMap(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneMap) { // not required
		return nil
	}

	if m.ZoneMap != nil {
		if err := m.ZoneMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ZoneMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ZoneMap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance based on the context it is used
func (m *Performance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBestSeatMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCampaign(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFacility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductionSeason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRankType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeSlot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Performance) contextValidateBestSeatMap(ctx context.Context, formats strfmt.Registry) error {

	if m.BestSeatMap != nil {

		if swag.IsZero(m.BestSeatMap) { // not required
			return nil
		}

		if err := m.BestSeatMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BestSeatMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BestSeatMap")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) contextValidateCampaign(ctx context.Context, formats strfmt.Registry) error {

	if m.Campaign != nil {

		if swag.IsZero(m.Campaign) { // not required
			return nil
		}

		if err := m.Campaign.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) contextValidateFacility(ctx context.Context, formats strfmt.Registry) error {

	if m.Facility != nil {

		if swag.IsZero(m.Facility) { // not required
			return nil
		}

		if err := m.Facility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Facility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Facility")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) contextValidateProductionSeason(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductionSeason != nil {

		if swag.IsZero(m.ProductionSeason) { // not required
			return nil
		}

		if err := m.ProductionSeason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductionSeason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductionSeason")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) contextValidateRankType(ctx context.Context, formats strfmt.Registry) error {

	if m.RankType != nil {

		if swag.IsZero(m.RankType) { // not required
			return nil
		}

		if err := m.RankType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RankType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RankType")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) contextValidateSeason(ctx context.Context, formats strfmt.Registry) error {

	if m.Season != nil {

		if swag.IsZero(m.Season) { // not required
			return nil
		}

		if err := m.Season.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) contextValidateTimeSlot(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeSlot != nil {

		if swag.IsZero(m.TimeSlot) { // not required
			return nil
		}

		if err := m.TimeSlot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TimeSlot")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) contextValidateZoneMap(ctx context.Context, formats strfmt.Registry) error {

	if m.ZoneMap != nil {

		if swag.IsZero(m.ZoneMap) { // not required
			return nil
		}

		if err := m.ZoneMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ZoneMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ZoneMap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Performance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Performance) UnmarshalBinary(b []byte) error {
	var res Performance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
