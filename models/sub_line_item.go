// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubLineItem sub line item
//
// swagger:model SubLineItem
type SubLineItem struct {

	// applied rule
	AppliedRule *SubLineItemPricingRule `json:"AppliedRule,omitempty"`

	// apply pricing
	ApplyPricing bool `json:"ApplyPricing,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// line item Id
	LineItemID int32 `json:"LineItemId,omitempty"`

	// order Id
	OrderID int32 `json:"OrderId,omitempty"`

	// original price type Id
	OriginalPriceTypeID int32 `json:"OriginalPriceTypeId,omitempty"`

	// price type Id
	PriceTypeID int32 `json:"PriceTypeId,omitempty"`

	// price type reason Id
	PriceTypeReasonID int32 `json:"PriceTypeReasonId,omitempty"`

	// recipient Id
	RecipientID int32 `json:"RecipientId,omitempty"`

	// return parent sub line item Id
	ReturnParentSubLineItemID int32 `json:"ReturnParentSubLineItemId,omitempty"`

	// rule indicator
	RuleIndicator string `json:"RuleIndicator,omitempty"`

	// seat Id
	SeatID int32 `json:"SeatId,omitempty"`

	// status Id
	StatusID int32 `json:"StatusId,omitempty"`

	// sub line item details
	SubLineItemDetails []*SubLineItemDetail `json:"SubLineItemDetails"`

	// ticket number
	TicketNumber int32 `json:"TicketNumber,omitempty"`

	// total due
	TotalDue float64 `json:"TotalDue,omitempty"`

	// un allocated discount
	UnAllocatedDiscount float64 `json:"UnAllocatedDiscount,omitempty"`

	// unseatable reason Id
	UnseatableReasonID int32 `json:"UnseatableReasonId,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// zone Id
	ZoneID int32 `json:"ZoneId,omitempty"`
}

// Validate validates this sub line item
func (m *SubLineItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubLineItemDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubLineItem) validateAppliedRule(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedRule) { // not required
		return nil
	}

	if m.AppliedRule != nil {
		if err := m.AppliedRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AppliedRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AppliedRule")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItem) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubLineItem) validateSubLineItemDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.SubLineItemDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.SubLineItemDetails); i++ {
		if swag.IsZero(m.SubLineItemDetails[i]) { // not required
			continue
		}

		if m.SubLineItemDetails[i] != nil {
			if err := m.SubLineItemDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItemDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItemDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubLineItem) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sub line item based on the context it is used
func (m *SubLineItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppliedRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubLineItemDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubLineItem) contextValidateAppliedRule(ctx context.Context, formats strfmt.Registry) error {

	if m.AppliedRule != nil {

		if swag.IsZero(m.AppliedRule) { // not required
			return nil
		}

		if err := m.AppliedRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AppliedRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AppliedRule")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItem) contextValidateSubLineItemDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubLineItemDetails); i++ {

		if m.SubLineItemDetails[i] != nil {

			if swag.IsZero(m.SubLineItemDetails[i]) { // not required
				return nil
			}

			if err := m.SubLineItemDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubLineItemDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubLineItemDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubLineItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubLineItem) UnmarshalBinary(b []byte) error {
	var res SubLineItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
