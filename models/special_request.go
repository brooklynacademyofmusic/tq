// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SpecialRequest special request
//
// swagger:model SpecialRequest
type SpecialRequest struct {

	// aisle seat
	AisleSeat string `json:"AisleSeat,omitempty"`

	// category
	Category *EntitySummary `json:"Category,omitempty"`

	// contiguous seats
	ContiguousSeats int32 `json:"ContiguousSeats,omitempty"`

	// end price
	EndPrice float64 `json:"EndPrice,omitempty"`

	// ending row
	EndingRow string `json:"EndingRow,omitempty"`

	// ending seat
	EndingSeat string `json:"EndingSeat,omitempty"`

	// hold code
	HoldCode int32 `json:"HoldCode,omitempty"`

	// leave single seats
	LeaveSingleSeats bool `json:"LeaveSingleSeats,omitempty"`

	// no stairs
	NoStairs bool `json:"NoStairs,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// start price
	StartPrice float64 `json:"StartPrice,omitempty"`

	// starting row
	StartingRow string `json:"StartingRow,omitempty"`

	// starting seat
	StartingSeat string `json:"StartingSeat,omitempty"`

	// wheelchair seats
	WheelchairSeats int32 `json:"WheelchairSeats,omitempty"`
}

// Validate validates this special request
func (m *SpecialRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpecialRequest) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this special request based on the context it is used
func (m *SpecialRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpecialRequest) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SpecialRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SpecialRequest) UnmarshalBinary(b []byte) error {
	var res SpecialRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
