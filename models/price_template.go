// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PriceTemplate price template
//
// swagger:model PriceTemplate
type PriceTemplate struct {

	// control group
	ControlGroup *ControlGroupSummary `json:"ControlGroup,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// default designation code
	DefaultDesignationCode *DesignationCodeSummary `json:"DefaultDesignationCode,omitempty"`

	// default gl account
	DefaultGlAccount *GlAccountSummary `json:"DefaultGlAccount,omitempty"`

	// default price layer type
	DefaultPriceLayerType *PriceLayerTypeSummary `json:"DefaultPriceLayerType,omitempty"`

	// default resale account
	DefaultResaleAccount *GlAccountSummary `json:"DefaultResaleAccount,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// price category
	PriceCategory *PriceCategorySummary `json:"PriceCategory,omitempty"`

	// template price types
	TemplatePriceTypes []*TemplatePriceType `json:"TemplatePriceTypes"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// zone map
	ZoneMap *ZoneMapSummary `json:"ZoneMap,omitempty"`
}

// Validate validates this price template
func (m *PriceTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControlGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultDesignationCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultGlAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultPriceLayerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultResaleAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplatePriceTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceTemplate) validateControlGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlGroup) { // not required
		return nil
	}

	if m.ControlGroup != nil {
		if err := m.ControlGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ControlGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ControlGroup")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PriceTemplate) validateDefaultDesignationCode(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultDesignationCode) { // not required
		return nil
	}

	if m.DefaultDesignationCode != nil {
		if err := m.DefaultDesignationCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefaultDesignationCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DefaultDesignationCode")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) validateDefaultGlAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultGlAccount) { // not required
		return nil
	}

	if m.DefaultGlAccount != nil {
		if err := m.DefaultGlAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefaultGlAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DefaultGlAccount")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) validateDefaultPriceLayerType(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultPriceLayerType) { // not required
		return nil
	}

	if m.DefaultPriceLayerType != nil {
		if err := m.DefaultPriceLayerType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefaultPriceLayerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DefaultPriceLayerType")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) validateDefaultResaleAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultResaleAccount) { // not required
		return nil
	}

	if m.DefaultResaleAccount != nil {
		if err := m.DefaultResaleAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefaultResaleAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DefaultResaleAccount")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) validatePriceCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceCategory) { // not required
		return nil
	}

	if m.PriceCategory != nil {
		if err := m.PriceCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceCategory")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) validateTemplatePriceTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.TemplatePriceTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.TemplatePriceTypes); i++ {
		if swag.IsZero(m.TemplatePriceTypes[i]) { // not required
			continue
		}

		if m.TemplatePriceTypes[i] != nil {
			if err := m.TemplatePriceTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TemplatePriceTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TemplatePriceTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceTemplate) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PriceTemplate) validateZoneMap(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneMap) { // not required
		return nil
	}

	if m.ZoneMap != nil {
		if err := m.ZoneMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ZoneMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ZoneMap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this price template based on the context it is used
func (m *PriceTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControlGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultDesignationCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultGlAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultPriceLayerType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultResaleAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplatePriceTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceTemplate) contextValidateControlGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ControlGroup != nil {

		if swag.IsZero(m.ControlGroup) { // not required
			return nil
		}

		if err := m.ControlGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ControlGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ControlGroup")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) contextValidateDefaultDesignationCode(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultDesignationCode != nil {

		if swag.IsZero(m.DefaultDesignationCode) { // not required
			return nil
		}

		if err := m.DefaultDesignationCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefaultDesignationCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DefaultDesignationCode")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) contextValidateDefaultGlAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultGlAccount != nil {

		if swag.IsZero(m.DefaultGlAccount) { // not required
			return nil
		}

		if err := m.DefaultGlAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefaultGlAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DefaultGlAccount")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) contextValidateDefaultPriceLayerType(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultPriceLayerType != nil {

		if swag.IsZero(m.DefaultPriceLayerType) { // not required
			return nil
		}

		if err := m.DefaultPriceLayerType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefaultPriceLayerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DefaultPriceLayerType")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) contextValidateDefaultResaleAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultResaleAccount != nil {

		if swag.IsZero(m.DefaultResaleAccount) { // not required
			return nil
		}

		if err := m.DefaultResaleAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DefaultResaleAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DefaultResaleAccount")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) contextValidatePriceCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceCategory != nil {

		if swag.IsZero(m.PriceCategory) { // not required
			return nil
		}

		if err := m.PriceCategory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceCategory")
			}
			return err
		}
	}

	return nil
}

func (m *PriceTemplate) contextValidateTemplatePriceTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TemplatePriceTypes); i++ {

		if m.TemplatePriceTypes[i] != nil {

			if swag.IsZero(m.TemplatePriceTypes[i]) { // not required
				return nil
			}

			if err := m.TemplatePriceTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TemplatePriceTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TemplatePriceTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceTemplate) contextValidateZoneMap(ctx context.Context, formats strfmt.Registry) error {

	if m.ZoneMap != nil {

		if swag.IsZero(m.ZoneMap) { // not required
			return nil
		}

		if err := m.ZoneMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ZoneMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ZoneMap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PriceTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PriceTemplate) UnmarshalBinary(b []byte) error {
	var res PriceTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
