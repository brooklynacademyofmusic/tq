// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebPromoCode web promo code
//
// swagger:model WebPromoCode
type WebPromoCode struct {

	// mode of sale Id
	ModeOfSaleID int32 `json:"ModeOfSaleId,omitempty"`

	// override rank indicator
	OverrideRankIndicator string `json:"OverrideRankIndicator,omitempty"`

	// promo code
	PromoCode string `json:"PromoCode,omitempty"`

	// promotion date
	// Format: date-time
	PromotionDate strfmt.DateTime `json:"PromotionDate,omitempty"`

	// source
	Source *SourceSummary `json:"Source,omitempty"`

	// text1
	Text1 string `json:"Text1,omitempty"`

	// text2
	Text2 string `json:"Text2,omitempty"`

	// text3
	Text3 string `json:"Text3,omitempty"`

	// text4
	Text4 string `json:"Text4,omitempty"`

	// text5
	Text5 string `json:"Text5,omitempty"`

	// text6
	Text6 string `json:"Text6,omitempty"`
}

// Validate validates this web promo code
func (m *WebPromoCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePromotionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebPromoCode) validatePromotionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PromotionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PromotionDate", "body", "date-time", m.PromotionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebPromoCode) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this web promo code based on the context it is used
func (m *WebPromoCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebPromoCode) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebPromoCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebPromoCode) UnmarshalBinary(b []byte) error {
	var res WebPromoCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
