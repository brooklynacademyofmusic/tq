// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountTokenRequest account token request
//
// swagger:model AccountTokenRequest
type AccountTokenRequest struct {

	// card
	Card *CardData `json:"Card,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// date used
	// Format: date-time
	DateUsed *strfmt.DateTime `json:"DateUsed,omitempty"`

	// is e commerce
	IsECommerce bool `json:"IsECommerce,omitempty"`

	// network transaction Id
	NetworkTransactionID string `json:"NetworkTransactionId,omitempty"`

	// payment method group Id
	PaymentMethodGroupID int32 `json:"PaymentMethodGroupId,omitempty"`

	// shopper reference
	ShopperReference string `json:"ShopperReference,omitempty"`

	// token
	Token string `json:"Token,omitempty"`
}

// Validate validates this account token request
func (m *AccountTokenRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateUsed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountTokenRequest) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Card")
			}
			return err
		}
	}

	return nil
}

func (m *AccountTokenRequest) validateDateUsed(formats strfmt.Registry) error {
	if swag.IsZero(m.DateUsed) { // not required
		return nil
	}

	if err := validate.FormatOf("DateUsed", "body", "date-time", m.DateUsed.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this account token request based on the context it is used
func (m *AccountTokenRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountTokenRequest) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if m.Card != nil {

		if swag.IsZero(m.Card) { // not required
			return nil
		}

		if err := m.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountTokenRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountTokenRequest) UnmarshalBinary(b []byte) error {
	var res AccountTokenRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
