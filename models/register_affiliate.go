// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisterAffiliate register affiliate
//
// swagger:model RegisterAffiliate
type RegisterAffiliate struct {

	// affiliation type Id
	AffiliationTypeID int32 `json:"AffiliationTypeId,omitempty"`

	// constituent type Id
	ConstituentTypeID int32 `json:"ConstituentTypeId,omitempty"`

	// first name
	FirstName string `json:"FirstName,omitempty"`

	// gender
	Gender *GenderSummary `json:"Gender,omitempty"`

	// last name
	LastName string `json:"LastName,omitempty"`

	// middle name
	MiddleName string `json:"MiddleName,omitempty"`

	// name indicator
	NameIndicator int32 `json:"NameIndicator,omitempty"`

	// name status Id
	NameStatusID int32 `json:"NameStatusId,omitempty"`

	// note
	Note string `json:"Note,omitempty"`

	// prefix
	Prefix *PrefixSummary `json:"Prefix,omitempty"`

	// sort name
	SortName string `json:"SortName,omitempty"`

	// suffix
	Suffix *SuffixSummary `json:"Suffix,omitempty"`

	// title
	Title string `json:"Title,omitempty"`
}

// Validate validates this register affiliate
func (m *RegisterAffiliate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuffix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterAffiliate) validateGender(formats strfmt.Registry) error {
	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	if m.Gender != nil {
		if err := m.Gender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Gender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Gender")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterAffiliate) validatePrefix(formats strfmt.Registry) error {
	if swag.IsZero(m.Prefix) { // not required
		return nil
	}

	if m.Prefix != nil {
		if err := m.Prefix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Prefix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Prefix")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterAffiliate) validateSuffix(formats strfmt.Registry) error {
	if swag.IsZero(m.Suffix) { // not required
		return nil
	}

	if m.Suffix != nil {
		if err := m.Suffix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Suffix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Suffix")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this register affiliate based on the context it is used
func (m *RegisterAffiliate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrefix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuffix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterAffiliate) contextValidateGender(ctx context.Context, formats strfmt.Registry) error {

	if m.Gender != nil {

		if swag.IsZero(m.Gender) { // not required
			return nil
		}

		if err := m.Gender.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Gender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Gender")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterAffiliate) contextValidatePrefix(ctx context.Context, formats strfmt.Registry) error {

	if m.Prefix != nil {

		if swag.IsZero(m.Prefix) { // not required
			return nil
		}

		if err := m.Prefix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Prefix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Prefix")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterAffiliate) contextValidateSuffix(ctx context.Context, formats strfmt.Registry) error {

	if m.Suffix != nil {

		if swag.IsZero(m.Suffix) { // not required
			return nil
		}

		if err := m.Suffix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Suffix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Suffix")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterAffiliate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterAffiliate) UnmarshalBinary(b []byte) error {
	var res RegisterAffiliate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
