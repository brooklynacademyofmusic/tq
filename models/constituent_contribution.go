// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConstituentContribution constituent contribution
//
// swagger:model ConstituentContribution
type ConstituentContribution struct {

	// account Id
	AccountID int32 `json:"AccountId,omitempty"`

	// appeal
	Appeal *EntitySummary `json:"Appeal,omitempty"`

	// balance amount
	BalanceAmount float64 `json:"BalanceAmount,omitempty"`

	// bill account number
	BillAccountNumber string `json:"BillAccountNumber,omitempty"`

	// billing type
	BillingType *EntitySummary `json:"BillingType,omitempty"`

	// campaign
	Campaign *EntitySummary `json:"Campaign,omitempty"`

	// channel
	Channel *EntitySummary `json:"Channel,omitempty"`

	// constituent
	Constituent *ConstituentDisplaySummary `json:"Constituent,omitempty"`

	// contribution amount
	ContributionAmount float64 `json:"ContributionAmount,omitempty"`

	// contribution date
	// Format: date-time
	ContributionDate *strfmt.DateTime `json:"ContributionDate,omitempty"`

	// contribution type
	ContributionType string `json:"ContributionType,omitempty"`

	// credited amount
	CreditedAmount float64 `json:"CreditedAmount,omitempty"`

	// creditee
	Creditee *ConstituentDisplaySummary `json:"Creditee,omitempty"`

	// creditee type Id
	CrediteeTypeID int32 `json:"CrediteeTypeId,omitempty"`

	// current constituent Id
	CurrentConstituentID int32 `json:"CurrentConstituentId,omitempty"`

	// designation
	Designation *EntitySummary `json:"Designation,omitempty"`

	// fund
	Fund *EntitySummary `json:"Fund,omitempty"`

	// initiator
	Initiator *ConstituentDisplaySummary `json:"Initiator,omitempty"`

	// is editable
	IsEditable bool `json:"IsEditable,omitempty"`

	// is matching gift
	IsMatchingGift bool `json:"IsMatchingGift,omitempty"`

	// match reference number
	MatchReferenceNumber int32 `json:"MatchReferenceNumber,omitempty"`

	// media type
	MediaType *EntitySummary `json:"MediaType,omitempty"`

	// mirror lock
	MirrorLock int32 `json:"MirrorLock,omitempty"`

	// note indicator
	NoteIndicator string `json:"NoteIndicator,omitempty"`

	// owner
	Owner *ConstituentDisplaySummary `json:"Owner,omitempty"`

	// plan
	Plan *EntitySummary `json:"Plan,omitempty"`

	// received amount
	ReceivedAmount float64 `json:"ReceivedAmount,omitempty"`

	// reference number
	ReferenceNumber int32 `json:"ReferenceNumber,omitempty"`

	// sort order
	SortOrder int32 `json:"SortOrder,omitempty"`

	// source
	Source *EntitySummary `json:"Source,omitempty"`

	// worker
	Worker *ConstituentDisplaySummary `json:"Worker,omitempty"`
}

// Validate validates this constituent contribution
func (m *ConstituentContribution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppeal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContributionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesignation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFund(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorker(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConstituentContribution) validateAppeal(formats strfmt.Registry) error {
	if swag.IsZero(m.Appeal) { // not required
		return nil
	}

	if m.Appeal != nil {
		if err := m.Appeal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Appeal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Appeal")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateBillingType(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingType) { // not required
		return nil
	}

	if m.BillingType != nil {
		if err := m.BillingType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BillingType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BillingType")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateCampaign(formats strfmt.Registry) error {
	if swag.IsZero(m.Campaign) { // not required
		return nil
	}

	if m.Campaign != nil {
		if err := m.Campaign.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.Channel) { // not required
		return nil
	}

	if m.Channel != nil {
		if err := m.Channel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Channel")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateContributionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ContributionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ContributionDate", "body", "date-time", m.ContributionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConstituentContribution) validateCreditee(formats strfmt.Registry) error {
	if swag.IsZero(m.Creditee) { // not required
		return nil
	}

	if m.Creditee != nil {
		if err := m.Creditee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Creditee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Creditee")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateDesignation(formats strfmt.Registry) error {
	if swag.IsZero(m.Designation) { // not required
		return nil
	}

	if m.Designation != nil {
		if err := m.Designation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Designation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Designation")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateFund(formats strfmt.Registry) error {
	if swag.IsZero(m.Fund) { // not required
		return nil
	}

	if m.Fund != nil {
		if err := m.Fund.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fund")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Fund")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	if m.Initiator != nil {
		if err := m.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiator")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateMediaType(formats strfmt.Registry) error {
	if swag.IsZero(m.MediaType) { // not required
		return nil
	}

	if m.MediaType != nil {
		if err := m.MediaType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MediaType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MediaType")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Owner")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validatePlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Plan")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) validateWorker(formats strfmt.Registry) error {
	if swag.IsZero(m.Worker) { // not required
		return nil
	}

	if m.Worker != nil {
		if err := m.Worker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Worker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Worker")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this constituent contribution based on the context it is used
func (m *ConstituentContribution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppeal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCampaign(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreditee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDesignation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFund(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMediaType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConstituentContribution) contextValidateAppeal(ctx context.Context, formats strfmt.Registry) error {

	if m.Appeal != nil {

		if swag.IsZero(m.Appeal) { // not required
			return nil
		}

		if err := m.Appeal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Appeal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Appeal")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateBillingType(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingType != nil {

		if swag.IsZero(m.BillingType) { // not required
			return nil
		}

		if err := m.BillingType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BillingType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BillingType")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateCampaign(ctx context.Context, formats strfmt.Registry) error {

	if m.Campaign != nil {

		if swag.IsZero(m.Campaign) { // not required
			return nil
		}

		if err := m.Campaign.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.Channel != nil {

		if swag.IsZero(m.Channel) { // not required
			return nil
		}

		if err := m.Channel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Channel")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateCreditee(ctx context.Context, formats strfmt.Registry) error {

	if m.Creditee != nil {

		if swag.IsZero(m.Creditee) { // not required
			return nil
		}

		if err := m.Creditee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Creditee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Creditee")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateDesignation(ctx context.Context, formats strfmt.Registry) error {

	if m.Designation != nil {

		if swag.IsZero(m.Designation) { // not required
			return nil
		}

		if err := m.Designation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Designation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Designation")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateFund(ctx context.Context, formats strfmt.Registry) error {

	if m.Fund != nil {

		if swag.IsZero(m.Fund) { // not required
			return nil
		}

		if err := m.Fund.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fund")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Fund")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if m.Initiator != nil {

		if swag.IsZero(m.Initiator) { // not required
			return nil
		}

		if err := m.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiator")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateMediaType(ctx context.Context, formats strfmt.Registry) error {

	if m.MediaType != nil {

		if swag.IsZero(m.MediaType) { // not required
			return nil
		}

		if err := m.MediaType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MediaType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MediaType")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Owner")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Plan != nil {

		if swag.IsZero(m.Plan) { // not required
			return nil
		}

		if err := m.Plan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Plan")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

func (m *ConstituentContribution) contextValidateWorker(ctx context.Context, formats strfmt.Registry) error {

	if m.Worker != nil {

		if swag.IsZero(m.Worker) { // not required
			return nil
		}

		if err := m.Worker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Worker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Worker")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConstituentContribution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConstituentContribution) UnmarshalBinary(b []byte) error {
	var res ConstituentContribution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
