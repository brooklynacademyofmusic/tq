// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CartProduct cart product
//
// swagger:model CartProduct
type CartProduct struct {

	// contribution
	Contribution *CartContribution `json:"Contribution,omitempty"`

	// gift certificate
	GiftCertificate *CartGiftCertificate `json:"GiftCertificate,omitempty"`

	// membership
	Membership *CartMembership `json:"Membership,omitempty"`

	// package
	Package *CartProductPackage `json:"Package,omitempty"`

	// performance
	Performance *CartProductPerformance `json:"Performance,omitempty"`

	// product class
	ProductClass *EntitySummary `json:"ProductClass,omitempty"`

	// product grouping
	ProductGrouping string `json:"ProductGrouping,omitempty"`

	// user defined fee
	UserDefinedFee *CartFeeDetail `json:"UserDefinedFee,omitempty"`
}

// Validate validates this cart product
func (m *CartProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGiftCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembership(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDefinedFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartProduct) validateContribution(formats strfmt.Registry) error {
	if swag.IsZero(m.Contribution) { // not required
		return nil
	}

	if m.Contribution != nil {
		if err := m.Contribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Contribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Contribution")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) validateGiftCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.GiftCertificate) { // not required
		return nil
	}

	if m.GiftCertificate != nil {
		if err := m.GiftCertificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GiftCertificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GiftCertificate")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) validateMembership(formats strfmt.Registry) error {
	if swag.IsZero(m.Membership) { // not required
		return nil
	}

	if m.Membership != nil {
		if err := m.Membership.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Membership")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Membership")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) validatePerformance(formats strfmt.Registry) error {
	if swag.IsZero(m.Performance) { // not required
		return nil
	}

	if m.Performance != nil {
		if err := m.Performance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Performance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Performance")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) validateProductClass(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductClass) { // not required
		return nil
	}

	if m.ProductClass != nil {
		if err := m.ProductClass.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductClass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductClass")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) validateUserDefinedFee(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDefinedFee) { // not required
		return nil
	}

	if m.UserDefinedFee != nil {
		if err := m.UserDefinedFee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDefinedFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDefinedFee")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cart product based on the context it is used
func (m *CartProduct) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContribution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGiftCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembership(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductClass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDefinedFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartProduct) contextValidateContribution(ctx context.Context, formats strfmt.Registry) error {

	if m.Contribution != nil {

		if swag.IsZero(m.Contribution) { // not required
			return nil
		}

		if err := m.Contribution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Contribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Contribution")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) contextValidateGiftCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.GiftCertificate != nil {

		if swag.IsZero(m.GiftCertificate) { // not required
			return nil
		}

		if err := m.GiftCertificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GiftCertificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GiftCertificate")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) contextValidateMembership(ctx context.Context, formats strfmt.Registry) error {

	if m.Membership != nil {

		if swag.IsZero(m.Membership) { // not required
			return nil
		}

		if err := m.Membership.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Membership")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Membership")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {

		if swag.IsZero(m.Package) { // not required
			return nil
		}

		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) contextValidatePerformance(ctx context.Context, formats strfmt.Registry) error {

	if m.Performance != nil {

		if swag.IsZero(m.Performance) { // not required
			return nil
		}

		if err := m.Performance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Performance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Performance")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) contextValidateProductClass(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductClass != nil {

		if swag.IsZero(m.ProductClass) { // not required
			return nil
		}

		if err := m.ProductClass.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductClass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductClass")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) contextValidateUserDefinedFee(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDefinedFee != nil {

		if swag.IsZero(m.UserDefinedFee) { // not required
			return nil
		}

		if err := m.UserDefinedFee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDefinedFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDefinedFee")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CartProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartProduct) UnmarshalBinary(b []byte) error {
	var res CartProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
