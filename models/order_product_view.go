// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderProductView order product view
//
// swagger:model OrderProductView
type OrderProductView struct {

	// address Id
	AddressID int32 `json:"AddressId,omitempty"`

	// appeal
	Appeal *EntitySummary `json:"Appeal,omitempty"`

	// batch Id
	BatchID int32 `json:"BatchId,omitempty"`

	// booking Id
	BookingID int32 `json:"BookingId,omitempty"`

	// business unit
	BusinessUnit *EntitySummary `json:"BusinessUnit,omitempty"`

	// category
	Category *EntitySummary `json:"Category,omitempty"`

	// constituent
	Constituent *ConstituentDisplaySummary `json:"Constituent,omitempty"`

	// custom data items
	CustomDataItems []*CustomDataItem `json:"CustomDataItems"`

	// delivery method
	DeliveryMethod *EntitySummary `json:"DeliveryMethod,omitempty"`

	// electronic address Id
	ElectronicAddressID int32 `json:"ElectronicAddressId,omitempty"`

	// hold until date time
	// Format: date-time
	HoldUntilDateTime strfmt.DateTime `json:"HoldUntilDateTime,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// initiator
	Initiator *ConstituentDisplaySummary `json:"Initiator,omitempty"`

	// messages
	Messages []*PricingRuleMessage `json:"Messages"`

	// mode of sale
	ModeOfSale *EntitySummary `json:"ModeOfSale,omitempty"`

	// order date time
	// Format: date-time
	OrderDateTime strfmt.DateTime `json:"OrderDateTime,omitempty"`

	// order fees
	OrderFees []*OrderProductViewFeeDetail `json:"OrderFees"`

	// order notes
	OrderNotes string `json:"OrderNotes,omitempty"`

	// payment plans
	PaymentPlans []*OrderProductViewPaymentPlan `json:"PaymentPlans"`

	// payments
	Payments []*OrderProductViewPayment `json:"Payments"`

	// phone Id
	PhoneID int32 `json:"PhoneId,omitempty"`

	// products
	Products []*OrderProductViewProduct `json:"Products"`

	// solicitor
	Solicitor string `json:"Solicitor,omitempty"`

	// source
	Source *EntitySummary `json:"Source,omitempty"`

	// total contribution amount
	TotalContributionAmount float64 `json:"TotalContributionAmount,omitempty"`

	// total contribution paid amount
	TotalContributionPaidAmount float64 `json:"TotalContributionPaidAmount,omitempty"`

	// total due amount
	TotalDueAmount float64 `json:"TotalDueAmount,omitempty"`

	// total fee amount
	TotalFeeAmount float64 `json:"TotalFeeAmount,omitempty"`

	// total fee paid amount
	TotalFeePaidAmount float64 `json:"TotalFeePaidAmount,omitempty"`

	// total paid amount
	TotalPaidAmount float64 `json:"TotalPaidAmount,omitempty"`

	// total purchase amount
	TotalPurchaseAmount float64 `json:"TotalPurchaseAmount,omitempty"`

	// total return amount
	TotalReturnAmount float64 `json:"TotalReturnAmount,omitempty"`
}

// Validate validates this order product view
func (m *OrderProductView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppeal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomDataItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHoldUntilDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeOfSale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentPlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderProductView) validateAppeal(formats strfmt.Registry) error {
	if swag.IsZero(m.Appeal) { // not required
		return nil
	}

	if m.Appeal != nil {
		if err := m.Appeal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Appeal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Appeal")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) validateBusinessUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessUnit) { // not required
		return nil
	}

	if m.BusinessUnit != nil {
		if err := m.BusinessUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BusinessUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BusinessUnit")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) validateCustomDataItems(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomDataItems) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomDataItems); i++ {
		if swag.IsZero(m.CustomDataItems[i]) { // not required
			continue
		}

		if m.CustomDataItems[i] != nil {
			if err := m.CustomDataItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomDataItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CustomDataItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) validateDeliveryMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryMethod) { // not required
		return nil
	}

	if m.DeliveryMethod != nil {
		if err := m.DeliveryMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeliveryMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DeliveryMethod")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) validateHoldUntilDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.HoldUntilDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("HoldUntilDateTime", "body", "date-time", m.HoldUntilDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderProductView) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	if m.Initiator != nil {
		if err := m.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiator")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) validateModeOfSale(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeOfSale) { // not required
		return nil
	}

	if m.ModeOfSale != nil {
		if err := m.ModeOfSale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ModeOfSale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ModeOfSale")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) validateOrderDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderDateTime", "body", "date-time", m.OrderDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderProductView) validateOrderFees(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderFees) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderFees); i++ {
		if swag.IsZero(m.OrderFees[i]) { // not required
			continue
		}

		if m.OrderFees[i] != nil {
			if err := m.OrderFees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OrderFees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OrderFees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) validatePaymentPlans(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentPlans) { // not required
		return nil
	}

	for i := 0; i < len(m.PaymentPlans); i++ {
		if swag.IsZero(m.PaymentPlans[i]) { // not required
			continue
		}

		if m.PaymentPlans[i] != nil {
			if err := m.PaymentPlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PaymentPlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PaymentPlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) validatePayments(formats strfmt.Registry) error {
	if swag.IsZero(m.Payments) { // not required
		return nil
	}

	for i := 0; i < len(m.Payments); i++ {
		if swag.IsZero(m.Payments[i]) { // not required
			continue
		}

		if m.Payments[i] != nil {
			if err := m.Payments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Payments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Payments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order product view based on the context it is used
func (m *OrderProductView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppeal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBusinessUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomDataItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeliveryMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModeOfSale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentPlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderProductView) contextValidateAppeal(ctx context.Context, formats strfmt.Registry) error {

	if m.Appeal != nil {

		if swag.IsZero(m.Appeal) { // not required
			return nil
		}

		if err := m.Appeal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Appeal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Appeal")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) contextValidateBusinessUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.BusinessUnit != nil {

		if swag.IsZero(m.BusinessUnit) { // not required
			return nil
		}

		if err := m.BusinessUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BusinessUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BusinessUnit")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) contextValidateCustomDataItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomDataItems); i++ {

		if m.CustomDataItems[i] != nil {

			if swag.IsZero(m.CustomDataItems[i]) { // not required
				return nil
			}

			if err := m.CustomDataItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomDataItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CustomDataItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) contextValidateDeliveryMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.DeliveryMethod != nil {

		if swag.IsZero(m.DeliveryMethod) { // not required
			return nil
		}

		if err := m.DeliveryMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeliveryMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DeliveryMethod")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if m.Initiator != nil {

		if swag.IsZero(m.Initiator) { // not required
			return nil
		}

		if err := m.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiator")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {

			if swag.IsZero(m.Messages[i]) { // not required
				return nil
			}

			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) contextValidateModeOfSale(ctx context.Context, formats strfmt.Registry) error {

	if m.ModeOfSale != nil {

		if swag.IsZero(m.ModeOfSale) { // not required
			return nil
		}

		if err := m.ModeOfSale.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ModeOfSale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ModeOfSale")
			}
			return err
		}
	}

	return nil
}

func (m *OrderProductView) contextValidateOrderFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrderFees); i++ {

		if m.OrderFees[i] != nil {

			if swag.IsZero(m.OrderFees[i]) { // not required
				return nil
			}

			if err := m.OrderFees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OrderFees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OrderFees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) contextValidatePaymentPlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PaymentPlans); i++ {

		if m.PaymentPlans[i] != nil {

			if swag.IsZero(m.PaymentPlans[i]) { // not required
				return nil
			}

			if err := m.PaymentPlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PaymentPlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PaymentPlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) contextValidatePayments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Payments); i++ {

		if m.Payments[i] != nil {

			if swag.IsZero(m.Payments[i]) { // not required
				return nil
			}

			if err := m.Payments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Payments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Payments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Products); i++ {

		if m.Products[i] != nil {

			if swag.IsZero(m.Products[i]) { // not required
				return nil
			}

			if err := m.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderProductView) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderProductView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderProductView) UnmarshalBinary(b []byte) error {
	var res OrderProductView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
