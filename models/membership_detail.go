// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MembershipDetail membership detail
//
// swagger:model MembershipDetail
type MembershipDetail struct {

	// benefit providing constituent Id
	BenefitProvidingConstituentID int32 `json:"BenefitProvidingConstituentId,omitempty"`

	// constituent
	Constituent *ConstituentDisplaySummary `json:"Constituent,omitempty"`

	// current status
	CurrentStatus *EntitySummary `json:"CurrentStatus,omitempty"`

	// declined benefits
	DeclinedBenefits bool `json:"DeclinedBenefits,omitempty"`

	// expiration date
	// Format: date-time
	ExpirationDate *strfmt.DateTime `json:"ExpirationDate,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inception date
	// Format: date-time
	InceptionDate *strfmt.DateTime `json:"InceptionDate,omitempty"`

	// initiation date
	// Format: date-time
	InitiationDate *strfmt.DateTime `json:"InitiationDate,omitempty"`

	// is current
	IsCurrent bool `json:"IsCurrent,omitempty"`

	// is default
	IsDefault bool `json:"IsDefault,omitempty"`

	// lapse date
	// Format: date-time
	LapseDate *strfmt.DateTime `json:"LapseDate,omitempty"`

	// macro trend
	MacroTrend string `json:"MacroTrend,omitempty"`

	// membership level
	MembershipLevel *MembershipLevelSummary `json:"MembershipLevel,omitempty"`

	// micro trend
	MicroTrend string `json:"MicroTrend,omitempty"`

	// renewal date
	// Format: date-time
	RenewalDate *strfmt.DateTime `json:"RenewalDate,omitempty"`
}

// Validate validates this membership detail
func (m *MembershipDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInceptionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLapseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembershipLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenewalDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MembershipDetail) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipDetail) validateCurrentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentStatus) { // not required
		return nil
	}

	if m.CurrentStatus != nil {
		if err := m.CurrentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipDetail) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MembershipDetail) validateInceptionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InceptionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("InceptionDate", "body", "date-time", m.InceptionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MembershipDetail) validateInitiationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InitiationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("InitiationDate", "body", "date-time", m.InitiationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MembershipDetail) validateLapseDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LapseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("LapseDate", "body", "date-time", m.LapseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MembershipDetail) validateMembershipLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.MembershipLevel) { // not required
		return nil
	}

	if m.MembershipLevel != nil {
		if err := m.MembershipLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipLevel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipLevel")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipDetail) validateRenewalDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RenewalDate) { // not required
		return nil
	}

	if err := validate.FormatOf("RenewalDate", "body", "date-time", m.RenewalDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this membership detail based on the context it is used
func (m *MembershipDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembershipLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MembershipDetail) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipDetail) contextValidateCurrentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentStatus != nil {

		if swag.IsZero(m.CurrentStatus) { // not required
			return nil
		}

		if err := m.CurrentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipDetail) contextValidateMembershipLevel(ctx context.Context, formats strfmt.Registry) error {

	if m.MembershipLevel != nil {

		if swag.IsZero(m.MembershipLevel) { // not required
			return nil
		}

		if err := m.MembershipLevel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipLevel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipLevel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MembershipDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MembershipDetail) UnmarshalBinary(b []byte) error {
	var res MembershipDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
