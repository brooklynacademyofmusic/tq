// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PricingRule pricing rule
//
// swagger:model PricingRule
type PricingRule struct {

	// appeals
	Appeals string `json:"Appeals,omitempty"`

	// apply once per order
	ApplyOncePerOrder bool `json:"ApplyOncePerOrder,omitempty"`

	// apply to lowest common number of seats
	ApplyToLowestCommonNumberOfSeats bool `json:"ApplyToLowestCommonNumberOfSeats,omitempty"`

	// constituencies
	Constituencies string `json:"Constituencies,omitempty"`

	// constituent attribute
	ConstituentAttribute int32 `json:"ConstituentAttribute,omitempty"`

	// constituent attribute operator
	ConstituentAttributeOperator *CriterionOperatorSummary `json:"ConstituentAttributeOperator,omitempty"`

	// constituent attribute value1
	ConstituentAttributeValue1 string `json:"ConstituentAttributeValue1,omitempty"`

	// constituent attribute value2
	ConstituentAttributeValue2 string `json:"ConstituentAttributeValue2,omitempty"`

	// constituent exclusion list Id
	ConstituentExclusionListID int32 `json:"ConstituentExclusionListId,omitempty"`

	// constituent list Id
	ConstituentListID int32 `json:"ConstituentListId,omitempty"`

	// constituent rank type
	ConstituentRankType int32 `json:"ConstituentRankType,omitempty"`

	// constituent ranking operator
	ConstituentRankingOperator *CriterionOperatorSummary `json:"ConstituentRankingOperator,omitempty"`

	// constituent ranking value1
	ConstituentRankingValue1 int32 `json:"ConstituentRankingValue1,omitempty"`

	// constituent ranking value2
	ConstituentRankingValue2 int32 `json:"ConstituentRankingValue2,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// discount amount
	DiscountAmount float64 `json:"DiscountAmount,omitempty"`

	// discount is percent
	DiscountIsPercent bool `json:"DiscountIsPercent,omitempty"`

	// discount percent round
	DiscountPercentRound int32 `json:"DiscountPercentRound,omitempty"`

	// discount price type Id
	DiscountPriceTypeID int32 `json:"DiscountPriceTypeId,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// end date time
	// Format: date-time
	EndDateTime strfmt.DateTime `json:"EndDateTime,omitempty"`

	// exclude general public
	ExcludeGeneralPublic bool `json:"ExcludeGeneralPublic,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// max seats
	MaxSeats int32 `json:"MaxSeats,omitempty"`

	// messages
	Messages []*PricingRuleMessage `json:"Messages"`

	// over the limit date time
	// Format: date-time
	OverTheLimitDateTime strfmt.DateTime `json:"OverTheLimitDateTime,omitempty"`

	// promoted appeals
	PromotedAppeals string `json:"PromotedAppeals,omitempty"`

	// promoted sources
	PromotedSources string `json:"PromotedSources,omitempty"`

	// qualifying package
	QualifyingPackage string `json:"QualifyingPackage,omitempty"`

	// qualifying performance
	QualifyingPerformance string `json:"QualifyingPerformance,omitempty"`

	// qualifying price type1
	QualifyingPriceType1 string `json:"QualifyingPriceType1,omitempty"`

	// qualifying price type2
	QualifyingPriceType2 string `json:"QualifyingPriceType2,omitempty"`

	// qualifying production season
	QualifyingProductionSeason string `json:"QualifyingProductionSeason,omitempty"`

	// qualifying season package type
	QualifyingSeasonPackageType string `json:"QualifyingSeasonPackageType,omitempty"`

	// qualifying seat count1 value1
	QualifyingSeatCount1Value1 int32 `json:"QualifyingSeatCount1Value1,omitempty"`

	// qualifying seat count1 value2
	QualifyingSeatCount1Value2 int32 `json:"QualifyingSeatCount1Value2,omitempty"`

	// qualifying seat count2 value1
	QualifyingSeatCount2Value1 int32 `json:"QualifyingSeatCount2Value1,omitempty"`

	// qualifying seat count2 value2
	QualifyingSeatCount2Value2 int32 `json:"QualifyingSeatCount2Value2,omitempty"`

	// qualifying zone
	QualifyingZone string `json:"QualifyingZone,omitempty"`

	// respect minimum price
	RespectMinimumPrice bool `json:"RespectMinimumPrice,omitempty"`

	// result maximum seats
	ResultMaximumSeats int32 `json:"ResultMaximumSeats,omitempty"`

	// result maximum seats2
	ResultMaximumSeats2 int32 `json:"ResultMaximumSeats2,omitempty"`

	// result package
	ResultPackage string `json:"ResultPackage,omitempty"`

	// result performance
	ResultPerformance string `json:"ResultPerformance,omitempty"`

	// result price type
	ResultPriceType string `json:"ResultPriceType,omitempty"`

	// result production season
	ResultProductionSeason string `json:"ResultProductionSeason,omitempty"`

	// result season package type
	ResultSeasonPackageType string `json:"ResultSeasonPackageType,omitempty"`

	// result seat count
	ResultSeatCount int32 `json:"ResultSeatCount,omitempty"`

	// result zone
	ResultZone string `json:"ResultZone,omitempty"`

	// rule action
	RuleAction int32 `json:"RuleAction,omitempty"`

	// rule category
	RuleCategory *PricingRuleCategorySummary `json:"RuleCategory,omitempty"`

	// rule type
	RuleType *PricingRuleTypeSummary `json:"RuleType,omitempty"`

	// sources
	Sources string `json:"Sources,omitempty"`

	// start date time
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"StartDateTime,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this pricing rule
func (m *PricingRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstituentAttributeOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituentRankingOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverTheLimitDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PricingRule) validateConstituentAttributeOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.ConstituentAttributeOperator) { // not required
		return nil
	}

	if m.ConstituentAttributeOperator != nil {
		if err := m.ConstituentAttributeOperator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConstituentAttributeOperator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConstituentAttributeOperator")
			}
			return err
		}
	}

	return nil
}

func (m *PricingRule) validateConstituentRankingOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.ConstituentRankingOperator) { // not required
		return nil
	}

	if m.ConstituentRankingOperator != nil {
		if err := m.ConstituentRankingOperator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConstituentRankingOperator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConstituentRankingOperator")
			}
			return err
		}
	}

	return nil
}

func (m *PricingRule) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PricingRule) validateEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PricingRule) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PricingRule) validateOverTheLimitDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.OverTheLimitDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("OverTheLimitDateTime", "body", "date-time", m.OverTheLimitDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PricingRule) validateRuleCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleCategory) { // not required
		return nil
	}

	if m.RuleCategory != nil {
		if err := m.RuleCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RuleCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RuleCategory")
			}
			return err
		}
	}

	return nil
}

func (m *PricingRule) validateRuleType(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleType) { // not required
		return nil
	}

	if m.RuleType != nil {
		if err := m.RuleType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RuleType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RuleType")
			}
			return err
		}
	}

	return nil
}

func (m *PricingRule) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PricingRule) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pricing rule based on the context it is used
func (m *PricingRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstituentAttributeOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstituentRankingOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuleCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuleType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PricingRule) contextValidateConstituentAttributeOperator(ctx context.Context, formats strfmt.Registry) error {

	if m.ConstituentAttributeOperator != nil {

		if swag.IsZero(m.ConstituentAttributeOperator) { // not required
			return nil
		}

		if err := m.ConstituentAttributeOperator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConstituentAttributeOperator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConstituentAttributeOperator")
			}
			return err
		}
	}

	return nil
}

func (m *PricingRule) contextValidateConstituentRankingOperator(ctx context.Context, formats strfmt.Registry) error {

	if m.ConstituentRankingOperator != nil {

		if swag.IsZero(m.ConstituentRankingOperator) { // not required
			return nil
		}

		if err := m.ConstituentRankingOperator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConstituentRankingOperator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConstituentRankingOperator")
			}
			return err
		}
	}

	return nil
}

func (m *PricingRule) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {

			if swag.IsZero(m.Messages[i]) { // not required
				return nil
			}

			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PricingRule) contextValidateRuleCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.RuleCategory != nil {

		if swag.IsZero(m.RuleCategory) { // not required
			return nil
		}

		if err := m.RuleCategory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RuleCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RuleCategory")
			}
			return err
		}
	}

	return nil
}

func (m *PricingRule) contextValidateRuleType(ctx context.Context, formats strfmt.Registry) error {

	if m.RuleType != nil {

		if swag.IsZero(m.RuleType) { // not required
			return nil
		}

		if err := m.RuleType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RuleType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RuleType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PricingRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PricingRule) UnmarshalBinary(b []byte) error {
	var res PricingRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
