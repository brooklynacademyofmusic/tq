// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformancePriceDetail performance price detail
//
// swagger:model PerformancePriceDetail
type PerformancePriceDetail struct {

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// effective date time
	// Format: date-time
	EffectiveDateTime strfmt.DateTime `json:"EffectiveDateTime,omitempty"`

	// enabled
	Enabled bool `json:"Enabled,omitempty"`

	// has events
	HasEvents bool `json:"HasEvents,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// is price based on current event
	IsPriceBasedOnCurrentEvent bool `json:"IsPriceBasedOnCurrentEvent,omitempty"`

	// min price
	MinPrice float64 `json:"MinPrice,omitempty"`

	// performance price type
	PerformancePriceType int32 `json:"PerformancePriceType,omitempty"`

	// price
	Price float64 `json:"Price,omitempty"`

	// price events
	PriceEvents []*PriceEvent `json:"PriceEvents"`

	// zone
	Zone int32 `json:"Zone,omitempty"`
}

// Validate validates this performance price detail
func (m *PerformancePriceDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEffectiveDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformancePriceDetail) validateEffectiveDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EffectiveDateTime", "body", "date-time", m.EffectiveDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PerformancePriceDetail) validatePriceEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceEvents); i++ {
		if swag.IsZero(m.PriceEvents[i]) { // not required
			continue
		}

		if m.PriceEvents[i] != nil {
			if err := m.PriceEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PriceEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PriceEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this performance price detail based on the context it is used
func (m *PerformancePriceDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePriceEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformancePriceDetail) contextValidatePriceEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PriceEvents); i++ {

		if m.PriceEvents[i] != nil {

			if swag.IsZero(m.PriceEvents[i]) { // not required
				return nil
			}

			if err := m.PriceEvents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PriceEvents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PriceEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformancePriceDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformancePriceDetail) UnmarshalBinary(b []byte) error {
	var res PerformancePriceDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
