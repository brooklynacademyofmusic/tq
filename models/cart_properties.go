// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CartProperties cart properties
//
// swagger:model CartProperties
type CartProperties struct {

	// address Id
	AddressID int32 `json:"AddressId,omitempty"`

	// category Id
	CategoryID int32 `json:"CategoryId,omitempty"`

	// channel Id
	ChannelID int32 `json:"ChannelId,omitempty"`

	// delivery method Id
	DeliveryMethodID int32 `json:"DeliveryMethodId,omitempty"`

	// electronic address Id
	ElectronicAddressID int32 `json:"ElectronicAddressId,omitempty"`

	// hold until date time
	// Format: date-time
	HoldUntilDateTime *strfmt.DateTime `json:"HoldUntilDateTime,omitempty"`

	// initiator Id
	InitiatorID int32 `json:"InitiatorId,omitempty"`

	// mode of sale Id
	ModeOfSaleID int32 `json:"ModeOfSaleId,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// order date time
	// Format: date-time
	OrderDateTime *strfmt.DateTime `json:"OrderDateTime,omitempty"`

	// phone Id
	PhoneID int32 `json:"PhoneId,omitempty"`

	// solicitor
	Solicitor string `json:"Solicitor,omitempty"`

	// source Id
	SourceID int32 `json:"SourceId,omitempty"`
}

// Validate validates this cart properties
func (m *CartProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHoldUntilDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartProperties) validateHoldUntilDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.HoldUntilDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("HoldUntilDateTime", "body", "date-time", m.HoldUntilDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CartProperties) validateOrderDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderDateTime", "body", "date-time", m.OrderDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cart properties based on context it is used
func (m *CartProperties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CartProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartProperties) UnmarshalBinary(b []byte) error {
	var res CartProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
