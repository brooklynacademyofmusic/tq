// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CalculatedMembership calculated membership
//
// swagger:model CalculatedMembership
type CalculatedMembership struct {

	// a v c amount
	AVCAmount float64 `json:"AVCAmount,omitempty"`

	// campaign Id
	CampaignID int32 `json:"CampaignId,omitempty"`

	// contribution amount
	ContributionAmount float64 `json:"ContributionAmount,omitempty"`

	// current membership amount
	CurrentMembershipAmount float64 `json:"CurrentMembershipAmount,omitempty"`

	// current record
	CurrentRecord string `json:"CurrentRecord,omitempty"`

	// current status
	CurrentStatus *EntitySummary `json:"CurrentStatus,omitempty"`

	// decline benefits
	DeclineBenefits string `json:"DeclineBenefits,omitempty"`

	// expiration date
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"ExpirationDate,omitempty"`

	// inception date
	// Format: date-time
	InceptionDate strfmt.DateTime `json:"InceptionDate,omitempty"`

	// initial date
	// Format: date-time
	InitialDate strfmt.DateTime `json:"InitialDate,omitempty"`

	// macro trend
	MacroTrend int32 `json:"MacroTrend,omitempty"`

	// membership amount
	MembershipAmount float64 `json:"MembershipAmount,omitempty"`

	// membership level
	MembershipLevel string `json:"MembershipLevel,omitempty"`

	// membership level Id
	MembershipLevelID int32 `json:"MembershipLevelId,omitempty"`

	// membership mode
	MembershipMode int32 `json:"MembershipMode,omitempty"`

	// n r r status
	NRRStatus string `json:"NRRStatus,omitempty"`

	// parent constituent membership Id
	ParentConstituentMembershipID int32 `json:"ParentConstituentMembershipId,omitempty"`

	// renew upgrade override
	RenewUpgradeOverride string `json:"RenewUpgradeOverride,omitempty"`

	// trend
	Trend int32 `json:"Trend,omitempty"`
}

// Validate validates this calculated membership
func (m *CalculatedMembership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInceptionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CalculatedMembership) validateCurrentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentStatus) { // not required
		return nil
	}

	if m.CurrentStatus != nil {
		if err := m.CurrentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *CalculatedMembership) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CalculatedMembership) validateInceptionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InceptionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("InceptionDate", "body", "date-time", m.InceptionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CalculatedMembership) validateInitialDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InitialDate) { // not required
		return nil
	}

	if err := validate.FormatOf("InitialDate", "body", "date-time", m.InitialDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this calculated membership based on the context it is used
func (m *CalculatedMembership) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CalculatedMembership) contextValidateCurrentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentStatus != nil {

		if swag.IsZero(m.CurrentStatus) { // not required
			return nil
		}

		if err := m.CurrentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CalculatedMembership) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CalculatedMembership) UnmarshalBinary(b []byte) error {
	var res CalculatedMembership
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
