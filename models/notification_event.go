// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationEvent notification event
//
// swagger:model NotificationEvent
type NotificationEvent struct {

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// event type
	EventType string `json:"EventType,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// payload
	Payload string `json:"Payload,omitempty"`

	// processed date
	// Format: date-time
	ProcessedDate strfmt.DateTime `json:"ProcessedDate,omitempty"`

	// received date
	// Format: date-time
	ReceivedDate strfmt.DateTime `json:"ReceivedDate,omitempty"`

	// reference
	Reference string `json:"Reference,omitempty"`

	// topic
	Topic string `json:"Topic,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this notification event
func (m *NotificationEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationEvent) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NotificationEvent) validateProcessedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ProcessedDate", "body", "date-time", m.ProcessedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NotificationEvent) validateReceivedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceivedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ReceivedDate", "body", "date-time", m.ReceivedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NotificationEvent) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notification event based on context it is used
func (m *NotificationEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationEvent) UnmarshalBinary(b []byte) error {
	var res NotificationEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
