// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CartSubLineItemDetail cart sub line item detail
//
// swagger:model CartSubLineItemDetail
type CartSubLineItemDetail struct {

	// benevolent indicator
	BenevolentIndicator bool `json:"BenevolentIndicator,omitempty"`

	// campaign Id
	CampaignID int32 `json:"CampaignId,omitempty"`

	// discount type
	DiscountType *EntitySummary `json:"DiscountType,omitempty"`

	// due amount
	DueAmount float64 `json:"DueAmount,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// original price
	OriginalPrice float64 `json:"OriginalPrice,omitempty"`

	// paid amount
	PaidAmount float64 `json:"PaidAmount,omitempty"`

	// performance price type layer Id
	PerformancePriceTypeLayerID int32 `json:"PerformancePriceTypeLayerId,omitempty"`
}

// Validate validates this cart sub line item detail
func (m *CartSubLineItemDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscountType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartSubLineItemDetail) validateDiscountType(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscountType) { // not required
		return nil
	}

	if m.DiscountType != nil {
		if err := m.DiscountType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DiscountType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DiscountType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cart sub line item detail based on the context it is used
func (m *CartSubLineItemDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscountType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartSubLineItemDetail) contextValidateDiscountType(ctx context.Context, formats strfmt.Registry) error {

	if m.DiscountType != nil {

		if swag.IsZero(m.DiscountType) { // not required
			return nil
		}

		if err := m.DiscountType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DiscountType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DiscountType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CartSubLineItemDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartSubLineItemDetail) UnmarshalBinary(b []byte) error {
	var res CartSubLineItemDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
