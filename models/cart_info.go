// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CartInfo cart info
//
// swagger:model CartInfo
type CartInfo struct {

	// contribution count
	ContributionCount int32 `json:"ContributionCount,omitempty"`

	// first seat added date time
	// Format: date-time
	FirstSeatAddedDateTime strfmt.DateTime `json:"FirstSeatAddedDateTime,omitempty"`

	// gift certificate count
	GiftCertificateCount int32 `json:"GiftCertificateCount,omitempty"`

	// membership count
	MembershipCount int32 `json:"MembershipCount,omitempty"`

	// package count
	PackageCount int32 `json:"PackageCount,omitempty"`

	// payment count
	PaymentCount int32 `json:"PaymentCount,omitempty"`

	// performance count
	PerformanceCount int32 `json:"PerformanceCount,omitempty"`

	// user defined fee count
	UserDefinedFeeCount int32 `json:"UserDefinedFeeCount,omitempty"`
}

// Validate validates this cart info
func (m *CartInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstSeatAddedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartInfo) validateFirstSeatAddedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstSeatAddedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("FirstSeatAddedDateTime", "body", "date-time", m.FirstSeatAddedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cart info based on context it is used
func (m *CartInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CartInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartInfo) UnmarshalBinary(b []byte) error {
	var res CartInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
