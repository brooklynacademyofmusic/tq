// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceDetail resource detail
//
// swagger:model ResourceDetail
type ResourceDetail struct {

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// qualifications
	Qualifications []*EntitySummary `json:"Qualifications"`

	// resource category
	ResourceCategory *EntitySummary `json:"ResourceCategory,omitempty"`

	// resource type
	ResourceType *EntitySummary `json:"ResourceType,omitempty"`

	// schedule occurrences
	ScheduleOccurrences []*ResourceScheduleOccurrence `json:"ScheduleOccurrences"`
}

// Validate validates this resource detail
func (m *ResourceDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQualifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleOccurrences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceDetail) validateQualifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Qualifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Qualifications); i++ {
		if swag.IsZero(m.Qualifications[i]) { // not required
			continue
		}

		if m.Qualifications[i] != nil {
			if err := m.Qualifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Qualifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Qualifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceDetail) validateResourceCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceCategory) { // not required
		return nil
	}

	if m.ResourceCategory != nil {
		if err := m.ResourceCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceCategory")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceDetail) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	if m.ResourceType != nil {
		if err := m.ResourceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceType")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceDetail) validateScheduleOccurrences(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleOccurrences) { // not required
		return nil
	}

	for i := 0; i < len(m.ScheduleOccurrences); i++ {
		if swag.IsZero(m.ScheduleOccurrences[i]) { // not required
			continue
		}

		if m.ScheduleOccurrences[i] != nil {
			if err := m.ScheduleOccurrences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ScheduleOccurrences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ScheduleOccurrences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this resource detail based on the context it is used
func (m *ResourceDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQualifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduleOccurrences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceDetail) contextValidateQualifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Qualifications); i++ {

		if m.Qualifications[i] != nil {

			if swag.IsZero(m.Qualifications[i]) { // not required
				return nil
			}

			if err := m.Qualifications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Qualifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Qualifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceDetail) contextValidateResourceCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceCategory != nil {

		if swag.IsZero(m.ResourceCategory) { // not required
			return nil
		}

		if err := m.ResourceCategory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceCategory")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceDetail) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceType != nil {

		if swag.IsZero(m.ResourceType) { // not required
			return nil
		}

		if err := m.ResourceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceType")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceDetail) contextValidateScheduleOccurrences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScheduleOccurrences); i++ {

		if m.ScheduleOccurrences[i] != nil {

			if swag.IsZero(m.ScheduleOccurrences[i]) { // not required
				return nil
			}

			if err := m.ScheduleOccurrences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ScheduleOccurrences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ScheduleOccurrences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceDetail) UnmarshalBinary(b []byte) error {
	var res ResourceDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
