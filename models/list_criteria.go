// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListCriteria list criteria
//
// swagger:model ListCriteria
type ListCriteria struct {

	// condition
	Condition string `json:"Condition,omitempty"`

	// extraction flag
	ExtractionFlag string `json:"ExtractionFlag,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// include primary affiliation
	IncludePrimaryAffiliation string `json:"IncludePrimaryAffiliation,omitempty"`

	// is top
	IsTop string `json:"IsTop,omitempty"`

	// items
	Items []*KeywordDataItem `json:"Items"`

	// keyword
	Keyword *KeywordSummary `json:"Keyword,omitempty"`

	// keyword Id
	KeywordID int32 `json:"KeywordId,omitempty"`

	// operator
	Operator string `json:"Operator,omitempty"`

	// value1
	Value1 string `json:"Value1,omitempty"`

	// value2
	Value2 string `json:"Value2,omitempty"`
}

// Validate validates this list criteria
func (m *ListCriteria) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListCriteria) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListCriteria) validateKeyword(formats strfmt.Registry) error {
	if swag.IsZero(m.Keyword) { // not required
		return nil
	}

	if m.Keyword != nil {
		if err := m.Keyword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Keyword")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Keyword")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list criteria based on the context it is used
func (m *ListCriteria) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListCriteria) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {

			if swag.IsZero(m.Items[i]) { // not required
				return nil
			}

			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListCriteria) contextValidateKeyword(ctx context.Context, formats strfmt.Registry) error {

	if m.Keyword != nil {

		if swag.IsZero(m.Keyword) { // not required
			return nil
		}

		if err := m.Keyword.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Keyword")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Keyword")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListCriteria) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListCriteria) UnmarshalBinary(b []byte) error {
	var res ListCriteria
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
