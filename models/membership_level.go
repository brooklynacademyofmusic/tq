// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MembershipLevel membership level
//
// swagger:model MembershipLevel
type MembershipLevel struct {

	// cancel
	Cancel int32 `json:"Cancel,omitempty"`

	// category
	Category *MembershipLevelCategory `json:"Category,omitempty"`

	// code
	Code string `json:"Code,omitempty"`

	// constituency type
	ConstituencyType *ConstituencyType `json:"ConstituencyType,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// end amount
	EndAmount float64 `json:"EndAmount,omitempty"`

	// expires end of month
	ExpiresEndOfMonth string `json:"ExpiresEndOfMonth,omitempty"`

	// expiry
	Expiry int32 `json:"Expiry,omitempty"`

	// goods and services value
	GoodsAndServicesValue float64 `json:"GoodsAndServicesValue,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// initiation
	Initiation string `json:"Initiation,omitempty"`

	// lapse suspended
	LapseSuspended int32 `json:"LapseSuspended,omitempty"`

	// membership organization
	MembershipOrganization *MembershipOrganizationSummary `json:"MembershipOrganization,omitempty"`

	// minimum payment amount
	MinimumPaymentAmount float64 `json:"MinimumPaymentAmount,omitempty"`

	// number of issues
	NumberOfIssues int32 `json:"NumberOfIssues,omitempty"`

	// rank
	Rank int32 `json:"Rank,omitempty"`

	// reinstate
	Reinstate int32 `json:"Reinstate,omitempty"`

	// renewal
	Renewal int32 `json:"Renewal,omitempty"`

	// start amount
	StartAmount float64 `json:"StartAmount,omitempty"`

	// start date time
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"StartDateTime,omitempty"`

	// suspend
	Suspend int32 `json:"Suspend,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this membership level
func (m *MembershipLevel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituencyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembershipOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MembershipLevel) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipLevel) validateConstituencyType(formats strfmt.Registry) error {
	if swag.IsZero(m.ConstituencyType) { // not required
		return nil
	}

	if m.ConstituencyType != nil {
		if err := m.ConstituencyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConstituencyType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConstituencyType")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipLevel) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MembershipLevel) validateMembershipOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.MembershipOrganization) { // not required
		return nil
	}

	if m.MembershipOrganization != nil {
		if err := m.MembershipOrganization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipOrganization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipOrganization")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipLevel) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MembershipLevel) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this membership level based on the context it is used
func (m *MembershipLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstituencyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembershipOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MembershipLevel) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Category")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipLevel) contextValidateConstituencyType(ctx context.Context, formats strfmt.Registry) error {

	if m.ConstituencyType != nil {

		if swag.IsZero(m.ConstituencyType) { // not required
			return nil
		}

		if err := m.ConstituencyType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConstituencyType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConstituencyType")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipLevel) contextValidateMembershipOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.MembershipOrganization != nil {

		if swag.IsZero(m.MembershipOrganization) { // not required
			return nil
		}

		if err := m.MembershipOrganization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipOrganization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipOrganization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MembershipLevel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MembershipLevel) UnmarshalBinary(b []byte) error {
	var res MembershipLevel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
