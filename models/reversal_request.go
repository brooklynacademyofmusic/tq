// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReversalRequest reversal request
//
// swagger:model ReversalRequest
type ReversalRequest struct {

	// amount
	Amount float64 `json:"Amount,omitempty"`

	// card
	Card *CardData `json:"Card,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// is e commerce
	IsECommerce bool `json:"IsECommerce,omitempty"`

	// is element debit
	IsElementDebit bool `json:"IsElementDebit,omitempty"`

	// is swiped
	IsSwiped bool `json:"IsSwiped,omitempty"`

	// payment Id
	PaymentID int32 `json:"PaymentId,omitempty"`

	// payment method Id
	PaymentMethodID int32 `json:"PaymentMethodId,omitempty"`

	// transaction origin
	TransactionOrigin string `json:"TransactionOrigin,omitempty"`

	// user data
	UserData string `json:"UserData,omitempty"`
}

// Validate validates this reversal request
func (m *ReversalRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReversalRequest) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Card")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reversal request based on the context it is used
func (m *ReversalRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReversalRequest) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if m.Card != nil {

		if swag.IsZero(m.Card) { // not required
			return nil
		}

		if err := m.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReversalRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReversalRequest) UnmarshalBinary(b []byte) error {
	var res ReversalRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
