// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TemplatePriceType template price type
//
// swagger:model TemplatePriceType
type TemplatePriceType struct {

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// designation code
	DesignationCode *DesignationCodeSummary `json:"DesignationCode,omitempty"`

	// gl account
	GlAccount *GlAccountSummary `json:"GlAccount,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// price template
	PriceTemplate *PriceTemplateSummary `json:"PriceTemplate,omitempty"`

	// price type
	PriceType *PriceTypeSummary `json:"PriceType,omitempty"`

	// resale account
	ResaleAccount *GlAccountSummary `json:"ResaleAccount,omitempty"`

	// template prices
	TemplatePrices []*TemplatePrice `json:"TemplatePrices"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this template price type
func (m *TemplatePriceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesignationCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResaleAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplatePrices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplatePriceType) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TemplatePriceType) validateDesignationCode(formats strfmt.Registry) error {
	if swag.IsZero(m.DesignationCode) { // not required
		return nil
	}

	if m.DesignationCode != nil {
		if err := m.DesignationCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DesignationCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DesignationCode")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) validateGlAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.GlAccount) { // not required
		return nil
	}

	if m.GlAccount != nil {
		if err := m.GlAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GlAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GlAccount")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) validatePriceTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceTemplate) { // not required
		return nil
	}

	if m.PriceTemplate != nil {
		if err := m.PriceTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) validatePriceType(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceType) { // not required
		return nil
	}

	if m.PriceType != nil {
		if err := m.PriceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceType")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) validateResaleAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.ResaleAccount) { // not required
		return nil
	}

	if m.ResaleAccount != nil {
		if err := m.ResaleAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResaleAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResaleAccount")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) validateTemplatePrices(formats strfmt.Registry) error {
	if swag.IsZero(m.TemplatePrices) { // not required
		return nil
	}

	for i := 0; i < len(m.TemplatePrices); i++ {
		if swag.IsZero(m.TemplatePrices[i]) { // not required
			continue
		}

		if m.TemplatePrices[i] != nil {
			if err := m.TemplatePrices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TemplatePrices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TemplatePrices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TemplatePriceType) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this template price type based on the context it is used
func (m *TemplatePriceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDesignationCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResaleAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplatePrices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplatePriceType) contextValidateDesignationCode(ctx context.Context, formats strfmt.Registry) error {

	if m.DesignationCode != nil {

		if swag.IsZero(m.DesignationCode) { // not required
			return nil
		}

		if err := m.DesignationCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DesignationCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DesignationCode")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) contextValidateGlAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.GlAccount != nil {

		if swag.IsZero(m.GlAccount) { // not required
			return nil
		}

		if err := m.GlAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GlAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GlAccount")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) contextValidatePriceTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceTemplate != nil {

		if swag.IsZero(m.PriceTemplate) { // not required
			return nil
		}

		if err := m.PriceTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) contextValidatePriceType(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceType != nil {

		if swag.IsZero(m.PriceType) { // not required
			return nil
		}

		if err := m.PriceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceType")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) contextValidateResaleAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.ResaleAccount != nil {

		if swag.IsZero(m.ResaleAccount) { // not required
			return nil
		}

		if err := m.ResaleAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResaleAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResaleAccount")
			}
			return err
		}
	}

	return nil
}

func (m *TemplatePriceType) contextValidateTemplatePrices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TemplatePrices); i++ {

		if m.TemplatePrices[i] != nil {

			if swag.IsZero(m.TemplatePrices[i]) { // not required
				return nil
			}

			if err := m.TemplatePrices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TemplatePrices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TemplatePrices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TemplatePriceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemplatePriceType) UnmarshalBinary(b []byte) error {
	var res TemplatePriceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
