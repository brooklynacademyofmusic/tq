// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReferenceTableUserGroupSummary reference table user group summary
//
// swagger:model ReferenceTableUserGroupSummary
type ReferenceTableUserGroupSummary struct {

	// can edit
	CanEdit bool `json:"CanEdit,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// reference table
	ReferenceTable *ReferenceTableSummary `json:"ReferenceTable,omitempty"`

	// user group Id
	UserGroupID string `json:"UserGroupId,omitempty"`
}

// Validate validates this reference table user group summary
func (m *ReferenceTableUserGroupSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReferenceTable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReferenceTableUserGroupSummary) validateReferenceTable(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferenceTable) { // not required
		return nil
	}

	if m.ReferenceTable != nil {
		if err := m.ReferenceTable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReferenceTable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ReferenceTable")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reference table user group summary based on the context it is used
func (m *ReferenceTableUserGroupSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReferenceTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReferenceTableUserGroupSummary) contextValidateReferenceTable(ctx context.Context, formats strfmt.Registry) error {

	if m.ReferenceTable != nil {

		if swag.IsZero(m.ReferenceTable) { // not required
			return nil
		}

		if err := m.ReferenceTable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReferenceTable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ReferenceTable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReferenceTableUserGroupSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReferenceTableUserGroupSummary) UnmarshalBinary(b []byte) error {
	var res ReferenceTableUserGroupSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
