// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhilanthropyEntry philanthropy entry
//
// swagger:model PhilanthropyEntry
type PhilanthropyEntry struct {

	// activity
	Activity string `json:"Activity,omitempty"`

	// amount
	Amount float64 `json:"Amount,omitempty"`

	// constituent
	Constituent *ConstituentDisplaySummary `json:"Constituent,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// donated to
	DonatedTo string `json:"DonatedTo,omitempty"`

	// donated to constituent
	DonatedToConstituent *ConstituentDisplaySummary `json:"DonatedToConstituent,omitempty"`

	// donation date time
	// Format: date-time
	DonationDateTime strfmt.DateTime `json:"DonationDateTime,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// philanthropy type
	PhilanthropyType *PhilanthropyTypeSummary `json:"PhilanthropyType,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this philanthropy entry
func (m *PhilanthropyEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDonatedToConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDonationDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhilanthropyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhilanthropyEntry) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *PhilanthropyEntry) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PhilanthropyEntry) validateDonatedToConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.DonatedToConstituent) { // not required
		return nil
	}

	if m.DonatedToConstituent != nil {
		if err := m.DonatedToConstituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DonatedToConstituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DonatedToConstituent")
			}
			return err
		}
	}

	return nil
}

func (m *PhilanthropyEntry) validateDonationDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DonationDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("DonationDateTime", "body", "date-time", m.DonationDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PhilanthropyEntry) validatePhilanthropyType(formats strfmt.Registry) error {
	if swag.IsZero(m.PhilanthropyType) { // not required
		return nil
	}

	if m.PhilanthropyType != nil {
		if err := m.PhilanthropyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PhilanthropyType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PhilanthropyType")
			}
			return err
		}
	}

	return nil
}

func (m *PhilanthropyEntry) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this philanthropy entry based on the context it is used
func (m *PhilanthropyEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDonatedToConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhilanthropyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhilanthropyEntry) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *PhilanthropyEntry) contextValidateDonatedToConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.DonatedToConstituent != nil {

		if swag.IsZero(m.DonatedToConstituent) { // not required
			return nil
		}

		if err := m.DonatedToConstituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DonatedToConstituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DonatedToConstituent")
			}
			return err
		}
	}

	return nil
}

func (m *PhilanthropyEntry) contextValidatePhilanthropyType(ctx context.Context, formats strfmt.Registry) error {

	if m.PhilanthropyType != nil {

		if swag.IsZero(m.PhilanthropyType) { // not required
			return nil
		}

		if err := m.PhilanthropyType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PhilanthropyType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PhilanthropyType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhilanthropyEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhilanthropyEntry) UnmarshalBinary(b []byte) error {
	var res PhilanthropyEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
