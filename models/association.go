// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Association association
//
// swagger:model Association
type Association struct {

	// associated constituent
	AssociatedConstituent *Entity `json:"AssociatedConstituent,omitempty"`

	// associated name
	AssociatedName string `json:"AssociatedName,omitempty"`

	// association type
	AssociationType *AssociationTypeSummary `json:"AssociationType,omitempty"`

	// birth date
	// Format: date-time
	BirthDate *strfmt.DateTime `json:"BirthDate,omitempty"`

	// constituent
	Constituent *Entity `json:"Constituent,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// end date
	// Format: date-time
	EndDate *strfmt.DateTime `json:"EndDate,omitempty"`

	// gender
	Gender *GenderSummary `json:"Gender,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// is included in search results
	IsIncludedInSearchResults bool `json:"IsIncludedInSearchResults,omitempty"`

	// note
	Note string `json:"Note,omitempty"`

	// reciprocal association
	ReciprocalAssociation *Entity `json:"ReciprocalAssociation,omitempty"`

	// start date
	// Format: date-time
	StartDate *strfmt.DateTime `json:"StartDate,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this association
func (m *Association) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociatedConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReciprocalAssociation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Association) validateAssociatedConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedConstituent) { // not required
		return nil
	}

	if m.AssociatedConstituent != nil {
		if err := m.AssociatedConstituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AssociatedConstituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AssociatedConstituent")
			}
			return err
		}
	}

	return nil
}

func (m *Association) validateAssociationType(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociationType) { // not required
		return nil
	}

	if m.AssociationType != nil {
		if err := m.AssociationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AssociationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AssociationType")
			}
			return err
		}
	}

	return nil
}

func (m *Association) validateBirthDate(formats strfmt.Registry) error {
	if swag.IsZero(m.BirthDate) { // not required
		return nil
	}

	if err := validate.FormatOf("BirthDate", "body", "date-time", m.BirthDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Association) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *Association) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Association) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Association) validateGender(formats strfmt.Registry) error {
	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	if m.Gender != nil {
		if err := m.Gender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Gender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Gender")
			}
			return err
		}
	}

	return nil
}

func (m *Association) validateReciprocalAssociation(formats strfmt.Registry) error {
	if swag.IsZero(m.ReciprocalAssociation) { // not required
		return nil
	}

	if m.ReciprocalAssociation != nil {
		if err := m.ReciprocalAssociation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReciprocalAssociation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ReciprocalAssociation")
			}
			return err
		}
	}

	return nil
}

func (m *Association) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Association) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this association based on the context it is used
func (m *Association) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssociatedConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReciprocalAssociation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Association) contextValidateAssociatedConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.AssociatedConstituent != nil {

		if swag.IsZero(m.AssociatedConstituent) { // not required
			return nil
		}

		if err := m.AssociatedConstituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AssociatedConstituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AssociatedConstituent")
			}
			return err
		}
	}

	return nil
}

func (m *Association) contextValidateAssociationType(ctx context.Context, formats strfmt.Registry) error {

	if m.AssociationType != nil {

		if swag.IsZero(m.AssociationType) { // not required
			return nil
		}

		if err := m.AssociationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AssociationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AssociationType")
			}
			return err
		}
	}

	return nil
}

func (m *Association) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *Association) contextValidateGender(ctx context.Context, formats strfmt.Registry) error {

	if m.Gender != nil {

		if swag.IsZero(m.Gender) { // not required
			return nil
		}

		if err := m.Gender.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Gender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Gender")
			}
			return err
		}
	}

	return nil
}

func (m *Association) contextValidateReciprocalAssociation(ctx context.Context, formats strfmt.Registry) error {

	if m.ReciprocalAssociation != nil {

		if swag.IsZero(m.ReciprocalAssociation) { // not required
			return nil
		}

		if err := m.ReciprocalAssociation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReciprocalAssociation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ReciprocalAssociation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Association) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Association) UnmarshalBinary(b []byte) error {
	var res Association
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
