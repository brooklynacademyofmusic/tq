// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentGatewayActivity payment gateway activity
//
// swagger:model PaymentGatewayActivity
type PaymentGatewayActivity struct {

	// account Id
	AccountID int32 `json:"AccountId,omitempty"`

	// account number
	AccountNumber string `json:"AccountNumber,omitempty"`

	// activity data
	ActivityData string `json:"ActivityData,omitempty"`

	// amount
	Amount float64 `json:"Amount,omitempty"`

	// auth code
	AuthCode string `json:"AuthCode,omitempty"`

	// avs address
	AvsAddress string `json:"AvsAddress,omitempty"`

	// avs postalcode
	AvsPostalcode string `json:"AvsPostalcode,omitempty"`

	// avs result code
	AvsResultCode string `json:"AvsResultCode,omitempty"`

	// balance amount
	BalanceAmount float64 `json:"BalanceAmount,omitempty"`

	// balance currency code
	BalanceCurrencyCode string `json:"BalanceCurrencyCode,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// cvv result code
	CvvResultCode string `json:"CvvResultCode,omitempty"`

	// ecommerce indicator
	EcommerceIndicator string `json:"EcommerceIndicator,omitempty"`

	// emv application identifier
	EmvApplicationIdentifier string `json:"EmvApplicationIdentifier,omitempty"`

	// emv application name
	EmvApplicationName string `json:"EmvApplicationName,omitempty"`

	// emv cryptogram
	EmvCryptogram string `json:"EmvCryptogram,omitempty"`

	// emv host response code
	EmvHostResponseCode string `json:"EmvHostResponseCode,omitempty"`

	// emv host response message
	EmvHostResponseMessage string `json:"EmvHostResponseMessage,omitempty"`

	// emv pin verified
	EmvPinVerified string `json:"EmvPinVerified,omitempty"`

	// entry method
	EntryMethod string `json:"EntryMethod,omitempty"`

	// expiration date
	ExpirationDate string `json:"ExpirationDate,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// merchant Id
	MerchantID string `json:"MerchantId,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// network transaction Id
	NetworkTransactionID string `json:"NetworkTransactionId,omitempty"`

	// origin
	Origin string `json:"Origin,omitempty"`

	// payment gateway transaction type
	PaymentGatewayTransactionType *PaymentGatewayTransactionType `json:"PaymentGatewayTransactionType,omitempty"`

	// payment Id
	PaymentID int32 `json:"PaymentId,omitempty"`

	// payment method group Id
	PaymentMethodGroupID int32 `json:"PaymentMethodGroupId,omitempty"`

	// payment method Id
	PaymentMethodID int32 `json:"PaymentMethodId,omitempty"`

	// provider communication duration ms
	ProviderCommunicationDurationMs int32 `json:"ProviderCommunicationDurationMs,omitempty"`

	// provider transaction date time
	// Format: date-time
	ProviderTransactionDateTime *strfmt.DateTime `json:"ProviderTransactionDateTime,omitempty"`

	// reference number
	ReferenceNumber string `json:"ReferenceNumber,omitempty"`

	// response code
	ResponseCode string `json:"ResponseCode,omitempty"`

	// response message
	ResponseMessage string `json:"ResponseMessage,omitempty"`

	// success
	Success string `json:"Success,omitempty"`

	// terminal identifier
	TerminalIdentifier string `json:"TerminalIdentifier,omitempty"`

	// total duration ms
	TotalDurationMs int32 `json:"TotalDurationMs,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// user data
	UserData string `json:"UserData,omitempty"`
}

// Validate validates this payment gateway activity
func (m *PaymentGatewayActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentGatewayTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderTransactionDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentGatewayActivity) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentGatewayActivity) validatePaymentGatewayTransactionType(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentGatewayTransactionType) { // not required
		return nil
	}

	if m.PaymentGatewayTransactionType != nil {
		if err := m.PaymentGatewayTransactionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PaymentGatewayTransactionType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PaymentGatewayTransactionType")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentGatewayActivity) validateProviderTransactionDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ProviderTransactionDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ProviderTransactionDateTime", "body", "date-time", m.ProviderTransactionDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentGatewayActivity) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this payment gateway activity based on the context it is used
func (m *PaymentGatewayActivity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaymentGatewayTransactionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentGatewayActivity) contextValidatePaymentGatewayTransactionType(ctx context.Context, formats strfmt.Registry) error {

	if m.PaymentGatewayTransactionType != nil {

		if swag.IsZero(m.PaymentGatewayTransactionType) { // not required
			return nil
		}

		if err := m.PaymentGatewayTransactionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PaymentGatewayTransactionType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PaymentGatewayTransactionType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentGatewayActivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentGatewayActivity) UnmarshalBinary(b []byte) error {
	var res PaymentGatewayActivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
