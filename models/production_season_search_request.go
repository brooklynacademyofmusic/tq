// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductionSeasonSearchRequest production season search request
//
// swagger:model ProductionSeasonSearchRequest
type ProductionSeasonSearchRequest struct {

	// artist ids
	ArtistIds string `json:"ArtistIds,omitempty"`

	// business unit Id
	BusinessUnitID int32 `json:"BusinessUnitId,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// facility ids
	FacilityIds string `json:"FacilityIds,omitempty"`

	// full text search
	FullTextSearch string `json:"FullTextSearch,omitempty"`

	// keyword and or
	KeywordAndOr string `json:"KeywordAndOr,omitempty"`

	// keyword ids
	KeywordIds string `json:"KeywordIds,omitempty"`

	// match all performances
	MatchAllPerformances bool `json:"MatchAllPerformances,omitempty"`

	// mode of sale Id
	ModeOfSaleID int32 `json:"ModeOfSaleId,omitempty"`

	// performance end date
	// Format: date-time
	PerformanceEndDate strfmt.DateTime `json:"PerformanceEndDate,omitempty"`

	// performance start date
	// Format: date-time
	PerformanceStartDate strfmt.DateTime `json:"PerformanceStartDate,omitempty"`

	// season ids
	SeasonIds string `json:"SeasonIds,omitempty"`
}

// Validate validates this production season search request
func (m *ProductionSeasonSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePerformanceEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductionSeasonSearchRequest) validatePerformanceEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PerformanceEndDate", "body", "date-time", m.PerformanceEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductionSeasonSearchRequest) validatePerformanceStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PerformanceStartDate", "body", "date-time", m.PerformanceStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this production season search request based on context it is used
func (m *ProductionSeasonSearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductionSeasonSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductionSeasonSearchRequest) UnmarshalBinary(b []byte) error {
	var res ProductionSeasonSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
