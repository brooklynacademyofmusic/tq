// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentGatewayConfiguration payment gateway configuration
//
// swagger:model PaymentGatewayConfiguration
type PaymentGatewayConfiguration struct {

	// bypass expiry date validation for tokens
	BypassExpiryDateValidationForTokens bool `json:"BypassExpiryDateValidationForTokens,omitempty"`

	// can force auth
	CanForceAuth bool `json:"CanForceAuth,omitempty"`

	// can refund by reference
	CanRefundByReference bool `json:"CanRefundByReference,omitempty"`

	// can refund e m v by reference
	CanRefundEMVByReference bool `json:"CanRefundEMVByReference,omitempty"`

	// can refund using card details
	CanRefundUsingCardDetails bool `json:"CanRefundUsingCardDetails,omitempty"`

	// can reverse card reader payments
	CanReverseCardReaderPayments bool `json:"CanReverseCardReaderPayments,omitempty"`

	// can reverse credit by reference
	CanReverseCreditByReference bool `json:"CanReverseCreditByReference,omitempty"`

	// can reverse payment by reference
	CanReversePaymentByReference bool `json:"CanReversePaymentByReference,omitempty"`

	// can tokenize
	CanTokenize bool `json:"CanTokenize,omitempty"`

	// delete duplicate tokens
	DeleteDuplicateTokens bool `json:"DeleteDuplicateTokens,omitempty"`

	// emv requires specific moto mode
	EmvRequiresSpecificMotoMode bool `json:"EmvRequiresSpecificMotoMode,omitempty"`

	// has encrypted swiper
	HasEncryptedSwiper bool `json:"HasEncryptedSwiper,omitempty"`

	// has multiple accounts
	HasMultipleAccounts bool `json:"HasMultipleAccounts,omitempty"`

	// has tessitura merchant services configured
	HasTessituraMerchantServicesConfigured bool `json:"HasTessituraMerchantServicesConfigured,omitempty"`

	// is production
	IsProduction bool `json:"IsProduction,omitempty"`

	// must filter tokens
	MustFilterTokens bool `json:"MustFilterTokens,omitempty"`

	// p2 pe only
	P2PeOnly bool `json:"P2PeOnly,omitempty"`

	// provider
	// Enum: [0,1,2,3,4,5,6]
	Provider int32 `json:"Provider,omitempty"`

	// require token shopper reference
	RequireTokenShopperReference bool `json:"RequireTokenShopperReference,omitempty"`

	// store credit card option
	// Enum: [0,1,2]
	StoreCreditCardOption int32 `json:"StoreCreditCardOption,omitempty"`

	// supports pay by link
	SupportsPayByLink bool `json:"SupportsPayByLink,omitempty"`

	// tokenize cards
	TokenizeCards bool `json:"TokenizeCards,omitempty"`
}

// Validate validates this payment gateway configuration
func (m *PaymentGatewayConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreCreditCardOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var paymentGatewayConfigurationTypeProviderPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4,5,6]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentGatewayConfigurationTypeProviderPropEnum = append(paymentGatewayConfigurationTypeProviderPropEnum, v)
	}
}

// prop value enum
func (m *PaymentGatewayConfiguration) validateProviderEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, paymentGatewayConfigurationTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentGatewayConfiguration) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("Provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

var paymentGatewayConfigurationTypeStoreCreditCardOptionPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentGatewayConfigurationTypeStoreCreditCardOptionPropEnum = append(paymentGatewayConfigurationTypeStoreCreditCardOptionPropEnum, v)
	}
}

// prop value enum
func (m *PaymentGatewayConfiguration) validateStoreCreditCardOptionEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, paymentGatewayConfigurationTypeStoreCreditCardOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentGatewayConfiguration) validateStoreCreditCardOption(formats strfmt.Registry) error {
	if swag.IsZero(m.StoreCreditCardOption) { // not required
		return nil
	}

	// value enum
	if err := m.validateStoreCreditCardOptionEnum("StoreCreditCardOption", "body", m.StoreCreditCardOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this payment gateway configuration based on context it is used
func (m *PaymentGatewayConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentGatewayConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentGatewayConfiguration) UnmarshalBinary(b []byte) error {
	var res PaymentGatewayConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
