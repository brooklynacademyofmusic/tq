// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConstituentHeader constituent header
//
// swagger:model ConstituentHeader
type ConstituentHeader struct {

	// all constituencies
	AllConstituencies string `json:"AllConstituencies,omitempty"`

	// constituent group Id
	ConstituentGroupID int32 `json:"ConstituentGroupId,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// constituent type Id
	ConstituentTypeID int32 `json:"ConstituentTypeId,omitempty"`

	// full name1
	FullName1 string `json:"FullName1,omitempty"`

	// full name2
	FullName2 string `json:"FullName2,omitempty"`

	// header element values
	HeaderElementValues []*HeaderElementValue `json:"HeaderElementValues"`

	// inactive
	Inactive string `json:"Inactive,omitempty"`

	// worker indicator
	WorkerIndicator bool `json:"WorkerIndicator,omitempty"`
}

// Validate validates this constituent header
func (m *ConstituentHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeaderElementValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConstituentHeader) validateHeaderElementValues(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderElementValues) { // not required
		return nil
	}

	for i := 0; i < len(m.HeaderElementValues); i++ {
		if swag.IsZero(m.HeaderElementValues[i]) { // not required
			continue
		}

		if m.HeaderElementValues[i] != nil {
			if err := m.HeaderElementValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("HeaderElementValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("HeaderElementValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this constituent header based on the context it is used
func (m *ConstituentHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeaderElementValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConstituentHeader) contextValidateHeaderElementValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HeaderElementValues); i++ {

		if m.HeaderElementValues[i] != nil {

			if swag.IsZero(m.HeaderElementValues[i]) { // not required
				return nil
			}

			if err := m.HeaderElementValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("HeaderElementValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("HeaderElementValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConstituentHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConstituentHeader) UnmarshalBinary(b []byte) error {
	var res ConstituentHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
