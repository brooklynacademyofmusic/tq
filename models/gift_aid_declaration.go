// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GiftAidDeclaration gift aid declaration
//
// swagger:model GiftAidDeclaration
type GiftAidDeclaration struct {

	// confirm date time
	// Format: date-time
	ConfirmDateTime *strfmt.DateTime `json:"ConfirmDateTime,omitempty"`

	// constituent
	Constituent *Entity `json:"Constituent,omitempty"`

	// contact method
	ContactMethod *GiftAidContactMethodSummary `json:"ContactMethod,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// document status
	DocumentStatus *GiftAidDocumentStatusSummary `json:"DocumentStatus,omitempty"`

	// eligible indicator
	EligibleIndicator bool `json:"EligibleIndicator,omitempty"`

	// end date time
	// Format: date-time
	EndDateTime *strfmt.DateTime `json:"EndDateTime,omitempty"`

	// gift aid type
	GiftAidType *GiftAidTypeSummary `json:"GiftAidType,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// ineligible reason
	IneligibleReason *GiftAidIneligibleReasonSummary `json:"IneligibleReason,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// received date time
	// Format: date-time
	ReceivedDateTime *strfmt.DateTime `json:"ReceivedDateTime,omitempty"`

	// start date time
	// Format: date-time
	StartDateTime *strfmt.DateTime `json:"StartDateTime,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this gift aid declaration
func (m *GiftAidDeclaration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGiftAidType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIneligibleReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GiftAidDeclaration) validateConfirmDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfirmDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ConfirmDateTime", "body", "date-time", m.ConfirmDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GiftAidDeclaration) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *GiftAidDeclaration) validateContactMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactMethod) { // not required
		return nil
	}

	if m.ContactMethod != nil {
		if err := m.ContactMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContactMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContactMethod")
			}
			return err
		}
	}

	return nil
}

func (m *GiftAidDeclaration) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GiftAidDeclaration) validateDocumentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.DocumentStatus) { // not required
		return nil
	}

	if m.DocumentStatus != nil {
		if err := m.DocumentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DocumentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DocumentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GiftAidDeclaration) validateEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GiftAidDeclaration) validateGiftAidType(formats strfmt.Registry) error {
	if swag.IsZero(m.GiftAidType) { // not required
		return nil
	}

	if m.GiftAidType != nil {
		if err := m.GiftAidType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GiftAidType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GiftAidType")
			}
			return err
		}
	}

	return nil
}

func (m *GiftAidDeclaration) validateIneligibleReason(formats strfmt.Registry) error {
	if swag.IsZero(m.IneligibleReason) { // not required
		return nil
	}

	if m.IneligibleReason != nil {
		if err := m.IneligibleReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IneligibleReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IneligibleReason")
			}
			return err
		}
	}

	return nil
}

func (m *GiftAidDeclaration) validateReceivedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceivedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ReceivedDateTime", "body", "date-time", m.ReceivedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GiftAidDeclaration) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GiftAidDeclaration) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this gift aid declaration based on the context it is used
func (m *GiftAidDeclaration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContactMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocumentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGiftAidType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIneligibleReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GiftAidDeclaration) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *GiftAidDeclaration) contextValidateContactMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactMethod != nil {

		if swag.IsZero(m.ContactMethod) { // not required
			return nil
		}

		if err := m.ContactMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContactMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContactMethod")
			}
			return err
		}
	}

	return nil
}

func (m *GiftAidDeclaration) contextValidateDocumentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.DocumentStatus != nil {

		if swag.IsZero(m.DocumentStatus) { // not required
			return nil
		}

		if err := m.DocumentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DocumentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DocumentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GiftAidDeclaration) contextValidateGiftAidType(ctx context.Context, formats strfmt.Registry) error {

	if m.GiftAidType != nil {

		if swag.IsZero(m.GiftAidType) { // not required
			return nil
		}

		if err := m.GiftAidType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GiftAidType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GiftAidType")
			}
			return err
		}
	}

	return nil
}

func (m *GiftAidDeclaration) contextValidateIneligibleReason(ctx context.Context, formats strfmt.Registry) error {

	if m.IneligibleReason != nil {

		if swag.IsZero(m.IneligibleReason) { // not required
			return nil
		}

		if err := m.IneligibleReason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IneligibleReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IneligibleReason")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GiftAidDeclaration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GiftAidDeclaration) UnmarshalBinary(b []byte) error {
	var res GiftAidDeclaration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
