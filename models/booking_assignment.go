// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BookingAssignment booking assignment
//
// swagger:model BookingAssignment
type BookingAssignment struct {

	// booking Id
	BookingID int32 `json:"BookingId,omitempty"`

	// confirmation text
	ConfirmationText string `json:"ConfirmationText,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// ignore schedule conflicts
	IgnoreScheduleConflicts bool `json:"IgnoreScheduleConflicts,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// overridden by
	OverriddenBy string `json:"OverriddenBy,omitempty"`

	// override date time
	// Format: date-time
	OverrideDateTime *strfmt.DateTime `json:"OverrideDateTime,omitempty"`

	// qualifications
	Qualifications []int32 `json:"Qualifications"`

	// resource
	Resource *ResourceSummary `json:"Resource,omitempty"`

	// resource type
	ResourceType *ResourceTypeSummary `json:"ResourceType,omitempty"`

	// schedule
	Schedule *ResourceSchedule `json:"Schedule,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// view indicator
	ViewIndicator bool `json:"ViewIndicator,omitempty"`
}

// Validate validates this booking assignment
func (m *BookingAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BookingAssignment) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BookingAssignment) validateOverrideDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.OverrideDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("OverrideDateTime", "body", "date-time", m.OverrideDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BookingAssignment) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

func (m *BookingAssignment) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	if m.ResourceType != nil {
		if err := m.ResourceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceType")
			}
			return err
		}
	}

	return nil
}

func (m *BookingAssignment) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Schedule")
			}
			return err
		}
	}

	return nil
}

func (m *BookingAssignment) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this booking assignment based on the context it is used
func (m *BookingAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BookingAssignment) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if m.Resource != nil {

		if swag.IsZero(m.Resource) { // not required
			return nil
		}

		if err := m.Resource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

func (m *BookingAssignment) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceType != nil {

		if swag.IsZero(m.ResourceType) { // not required
			return nil
		}

		if err := m.ResourceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceType")
			}
			return err
		}
	}

	return nil
}

func (m *BookingAssignment) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {

		if swag.IsZero(m.Schedule) { // not required
			return nil
		}

		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BookingAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BookingAssignment) UnmarshalBinary(b []byte) error {
	var res BookingAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
