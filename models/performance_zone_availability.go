// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PerformanceZoneAvailability performance zone availability
//
// swagger:model PerformanceZoneAvailability
type PerformanceZoneAvailability struct {

	// available count
	AvailableCount int32 `json:"AvailableCount,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// performance Id
	PerformanceID int32 `json:"PerformanceId,omitempty"`

	// section summaries
	SectionSummaries []*SectionSummary `json:"SectionSummaries"`

	// zone
	Zone *ZoneSummary `json:"Zone,omitempty"`
}

// Validate validates this performance zone availability
func (m *PerformanceZoneAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSectionSummaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceZoneAvailability) validateSectionSummaries(formats strfmt.Registry) error {
	if swag.IsZero(m.SectionSummaries) { // not required
		return nil
	}

	for i := 0; i < len(m.SectionSummaries); i++ {
		if swag.IsZero(m.SectionSummaries[i]) { // not required
			continue
		}

		if m.SectionSummaries[i] != nil {
			if err := m.SectionSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SectionSummaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SectionSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformanceZoneAvailability) validateZone(formats strfmt.Registry) error {
	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Zone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Zone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance zone availability based on the context it is used
func (m *PerformanceZoneAvailability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSectionSummaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceZoneAvailability) contextValidateSectionSummaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SectionSummaries); i++ {

		if m.SectionSummaries[i] != nil {

			if swag.IsZero(m.SectionSummaries[i]) { // not required
				return nil
			}

			if err := m.SectionSummaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SectionSummaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SectionSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformanceZoneAvailability) contextValidateZone(ctx context.Context, formats strfmt.Registry) error {

	if m.Zone != nil {

		if swag.IsZero(m.Zone) { // not required
			return nil
		}

		if err := m.Zone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Zone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceZoneAvailability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceZoneAvailability) UnmarshalBinary(b []byte) error {
	var res PerformanceZoneAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
