// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Lane lane
//
// swagger:model Lane
type Lane struct {

	// application version1
	ApplicationVersion1 string `json:"ApplicationVersion1,omitempty"`

	// application version2
	ApplicationVersion2 string `json:"ApplicationVersion2,omitempty"`

	// connection status
	ConnectionStatus *ConnectionStatus `json:"ConnectionStatus,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// emv kernel version
	EmvKernelVersion string `json:"EmvKernelVersion,omitempty"`

	// lane Id
	LaneID string `json:"LaneId,omitempty"`

	// links
	Links []*APILink `json:"Links"`

	// model number
	ModelNumber string `json:"ModelNumber,omitempty"`

	// operating system version
	OperatingSystemVersion string `json:"OperatingSystemVersion,omitempty"`

	// profile
	Profile *Profile `json:"Profile,omitempty"`

	// raw device information
	RawDeviceInformation string `json:"RawDeviceInformation,omitempty"`

	// security version
	SecurityVersion string `json:"SecurityVersion,omitempty"`

	// serial number
	SerialNumber string `json:"SerialNumber,omitempty"`

	// terminal Id
	TerminalID string `json:"TerminalId,omitempty"`
}

// Validate validates this lane
func (m *Lane) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lane) validateConnectionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	if m.ConnectionStatus != nil {
		if err := m.ConnectionStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConnectionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConnectionStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Lane) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Lane) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Profile")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this lane based on the context it is used
func (m *Lane) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectionStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lane) contextValidateConnectionStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectionStatus != nil {

		if swag.IsZero(m.ConnectionStatus) { // not required
			return nil
		}

		if err := m.ConnectionStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConnectionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConnectionStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Lane) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {

			if swag.IsZero(m.Links[i]) { // not required
				return nil
			}

			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Lane) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.Profile != nil {

		if swag.IsZero(m.Profile) { // not required
			return nil
		}

		if err := m.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Profile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Lane) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Lane) UnmarshalBinary(b []byte) error {
	var res Lane
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
