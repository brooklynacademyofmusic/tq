// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArtistSummary artist summary
//
// swagger:model ArtistSummary
type ArtistSummary struct {

	// biography
	Biography string `json:"Biography,omitempty"`

	// first name
	FirstName string `json:"FirstName,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// last name
	LastName string `json:"LastName,omitempty"`

	// middle name
	MiddleName string `json:"MiddleName,omitempty"`

	// voice
	Voice *EntitySummary `json:"Voice,omitempty"`
}

// Validate validates this artist summary
func (m *ArtistSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVoice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtistSummary) validateVoice(formats strfmt.Registry) error {
	if swag.IsZero(m.Voice) { // not required
		return nil
	}

	if m.Voice != nil {
		if err := m.Voice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Voice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Voice")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this artist summary based on the context it is used
func (m *ArtistSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVoice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtistSummary) contextValidateVoice(ctx context.Context, formats strfmt.Registry) error {

	if m.Voice != nil {

		if swag.IsZero(m.Voice) { // not required
			return nil
		}

		if err := m.Voice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Voice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Voice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtistSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtistSummary) UnmarshalBinary(b []byte) error {
	var res ArtistSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
