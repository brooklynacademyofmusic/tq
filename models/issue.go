// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Issue issue
//
// swagger:model Issue
type Issue struct {

	// activity type
	ActivityType *ActivityTypeSummary `json:"ActivityType,omitempty"`

	// constituent
	Constituent *Entity `json:"Constituent,omitempty"`

	// contact type
	ContactType *ContactTypeSummary `json:"ContactType,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// has reminder
	HasReminder bool `json:"HasReminder,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// issue date
	// Format: date-time
	IssueDate strfmt.DateTime `json:"IssueDate,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// origin
	Origin *OriginSummary `json:"Origin,omitempty"`

	// package Id
	PackageID int32 `json:"PackageId,omitempty"`

	// performance Id
	PerformanceID int32 `json:"PerformanceId,omitempty"`

	// resolved indicator
	ResolvedIndicator bool `json:"ResolvedIndicator,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// urgent indicator
	UrgentIndicator bool `json:"UrgentIndicator,omitempty"`
}

// Validate validates this issue
func (m *Issue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Issue) validateActivityType(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivityType) { // not required
		return nil
	}

	if m.ActivityType != nil {
		if err := m.ActivityType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActivityType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ActivityType")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateContactType(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactType) { // not required
		return nil
	}

	if m.ContactType != nil {
		if err := m.ContactType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContactType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContactType")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Issue) validateIssueDate(formats strfmt.Registry) error {
	if swag.IsZero(m.IssueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("IssueDate", "body", "date-time", m.IssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Issue) validateOrigin(formats strfmt.Registry) error {
	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	if m.Origin != nil {
		if err := m.Origin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Origin")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this issue based on the context it is used
func (m *Issue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivityType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContactType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrigin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Issue) contextValidateActivityType(ctx context.Context, formats strfmt.Registry) error {

	if m.ActivityType != nil {

		if swag.IsZero(m.ActivityType) { // not required
			return nil
		}

		if err := m.ActivityType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActivityType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ActivityType")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) contextValidateContactType(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactType != nil {

		if swag.IsZero(m.ContactType) { // not required
			return nil
		}

		if err := m.ContactType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContactType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContactType")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) contextValidateOrigin(ctx context.Context, formats strfmt.Registry) error {

	if m.Origin != nil {

		if swag.IsZero(m.Origin) { // not required
			return nil
		}

		if err := m.Origin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Origin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Issue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Issue) UnmarshalBinary(b []byte) error {
	var res Issue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
