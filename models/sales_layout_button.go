// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesLayoutButton sales layout button
//
// swagger:model SalesLayoutButton
type SalesLayoutButton struct {

	// background color
	BackgroundColor int32 `json:"BackgroundColor,omitempty"`

	// button type
	ButtonType *SalesLayoutButtonTypeSummary `json:"ButtonType,omitempty"`

	// caption1
	Caption1 string `json:"Caption1,omitempty"`

	// caption2
	Caption2 string `json:"Caption2,omitempty"`

	// caption3
	Caption3 string `json:"Caption3,omitempty"`

	// caption4
	Caption4 string `json:"Caption4,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime *strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// foreground color
	ForegroundColor int32 `json:"ForegroundColor,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// item amount
	ItemAmount float64 `json:"ItemAmount,omitempty"`

	// item business unit
	ItemBusinessUnit int32 `json:"ItemBusinessUnit,omitempty"`

	// item description
	ItemDescription string `json:"ItemDescription,omitempty"`

	// item edit indicator
	ItemEditIndicator string `json:"ItemEditIndicator,omitempty"`

	// item Id
	ItemID int32 `json:"ItemId,omitempty"`

	// item other Id
	ItemOtherID int32 `json:"ItemOtherId,omitempty"`

	// item parent Id
	ItemParentID int32 `json:"ItemParentId,omitempty"`

	// item sub Id
	ItemSubID int32 `json:"ItemSubId,omitempty"`

	// product end date time
	// Format: date-time
	ProductEndDateTime *strfmt.DateTime `json:"ProductEndDateTime,omitempty"`

	// product end day add
	ProductEndDayAdd int32 `json:"ProductEndDayAdd,omitempty"`

	// product end mode
	ProductEndMode int32 `json:"ProductEndMode,omitempty"`

	// product sequence
	ProductSequence int32 `json:"ProductSequence,omitempty"`

	// product start date time
	// Format: date-time
	ProductStartDateTime *strfmt.DateTime `json:"ProductStartDateTime,omitempty"`

	// product start day add
	ProductStartDayAdd int32 `json:"ProductStartDayAdd,omitempty"`

	// product start mode
	ProductStartMode int32 `json:"ProductStartMode,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime *strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// xpos
	Xpos int32 `json:"Xpos,omitempty"`

	// ypos
	Ypos int32 `json:"Ypos,omitempty"`

	// zone mode
	ZoneMode int32 `json:"ZoneMode,omitempty"`

	// zone sequence
	ZoneSequence int32 `json:"ZoneSequence,omitempty"`
}

// Validate validates this sales layout button
func (m *SalesLayoutButton) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateButtonType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesLayoutButton) validateButtonType(formats strfmt.Registry) error {
	if swag.IsZero(m.ButtonType) { // not required
		return nil
	}

	if m.ButtonType != nil {
		if err := m.ButtonType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ButtonType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ButtonType")
			}
			return err
		}
	}

	return nil
}

func (m *SalesLayoutButton) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SalesLayoutButton) validateProductEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductEndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ProductEndDateTime", "body", "date-time", m.ProductEndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SalesLayoutButton) validateProductStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductStartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ProductStartDateTime", "body", "date-time", m.ProductStartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SalesLayoutButton) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sales layout button based on the context it is used
func (m *SalesLayoutButton) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateButtonType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesLayoutButton) contextValidateButtonType(ctx context.Context, formats strfmt.Registry) error {

	if m.ButtonType != nil {

		if swag.IsZero(m.ButtonType) { // not required
			return nil
		}

		if err := m.ButtonType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ButtonType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ButtonType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesLayoutButton) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesLayoutButton) UnmarshalBinary(b []byte) error {
	var res SalesLayoutButton
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
