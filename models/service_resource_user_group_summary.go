// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceResourceUserGroupSummary service resource user group summary
//
// swagger:model ServiceResourceUserGroupSummary
type ServiceResourceUserGroupSummary struct {

	// can create
	CanCreate bool `json:"CanCreate,omitempty"`

	// can delete
	CanDelete bool `json:"CanDelete,omitempty"`

	// can read
	CanRead bool `json:"CanRead,omitempty"`

	// can update
	CanUpdate bool `json:"CanUpdate,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// service resource
	ServiceResource *ServiceResourceSummary `json:"ServiceResource,omitempty"`

	// user group Id
	UserGroupID string `json:"UserGroupId,omitempty"`
}

// Validate validates this service resource user group summary
func (m *ServiceResourceUserGroupSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceResourceUserGroupSummary) validateServiceResource(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceResource) { // not required
		return nil
	}

	if m.ServiceResource != nil {
		if err := m.ServiceResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServiceResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ServiceResource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service resource user group summary based on the context it is used
func (m *ServiceResourceUserGroupSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceResourceUserGroupSummary) contextValidateServiceResource(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceResource != nil {

		if swag.IsZero(m.ServiceResource) { // not required
			return nil
		}

		if err := m.ServiceResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServiceResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ServiceResource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceResourceUserGroupSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceResourceUserGroupSummary) UnmarshalBinary(b []byte) error {
	var res ServiceResourceUserGroupSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
