// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PriceEvent price event
//
// swagger:model PriceEvent
type PriceEvent struct {

	// change Id
	ChangeID int32 `json:"ChangeId,omitempty"`

	// enabled
	Enabled bool `json:"Enabled,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// min price
	MinPrice float64 `json:"MinPrice,omitempty"`

	// performance Id
	PerformanceID int32 `json:"PerformanceId,omitempty"`

	// performance price Id
	PerformancePriceID int32 `json:"PerformancePriceId,omitempty"`

	// price
	Price float64 `json:"Price,omitempty"`

	// start date time
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"StartDateTime,omitempty"`
}

// Validate validates this price event
func (m *PriceEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceEvent) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this price event based on context it is used
func (m *PriceEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PriceEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PriceEvent) UnmarshalBinary(b []byte) error {
	var res PriceEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
