// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceRescheduleRequest performance reschedule request
//
// swagger:model PerformanceRescheduleRequest
type PerformanceRescheduleRequest struct {

	// campaign
	Campaign *Campaign `json:"Campaign,omitempty"`

	// code
	Code string `json:"Code,omitempty"`

	// date time
	// Format: date-time
	DateTime *strfmt.DateTime `json:"DateTime,omitempty"`

	// default sale date option
	// Enum: [0,1,2,3]
	DefaultSaleDateOption int32 `json:"DefaultSaleDateOption,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// mode of sale date option
	// Enum: [0,1,2,3]
	ModeOfSaleDateOption int32 `json:"ModeOfSaleDateOption,omitempty"`

	// offers date option
	// Enum: [0,1,2,3]
	OffersDateOption int32 `json:"OffersDateOption,omitempty"`

	// price event date option
	// Enum: [0,1]
	PriceEventDateOption int32 `json:"PriceEventDateOption,omitempty"`

	// price type date option
	// Enum: [0,1,2,3]
	PriceTypeDateOption int32 `json:"PriceTypeDateOption,omitempty"`

	// production season Id
	ProductionSeasonID int32 `json:"ProductionSeasonId,omitempty"`

	// publish date option
	// Enum: [0,1,2,3]
	PublishDateOption int32 `json:"PublishDateOption,omitempty"`

	// time slot Id
	TimeSlotID int32 `json:"TimeSlotId,omitempty"`
}

// Validate validates this performance reschedule request
func (m *PerformanceRescheduleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultSaleDateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeOfSaleDateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffersDateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceEventDateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceTypeDateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishDateOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceRescheduleRequest) validateCampaign(formats strfmt.Registry) error {
	if swag.IsZero(m.Campaign) { // not required
		return nil
	}

	if m.Campaign != nil {
		if err := m.Campaign.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceRescheduleRequest) validateDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("DateTime", "body", "date-time", m.DateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var performanceRescheduleRequestTypeDefaultSaleDateOptionPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceRescheduleRequestTypeDefaultSaleDateOptionPropEnum = append(performanceRescheduleRequestTypeDefaultSaleDateOptionPropEnum, v)
	}
}

// prop value enum
func (m *PerformanceRescheduleRequest) validateDefaultSaleDateOptionEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, performanceRescheduleRequestTypeDefaultSaleDateOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceRescheduleRequest) validateDefaultSaleDateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultSaleDateOption) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultSaleDateOptionEnum("DefaultSaleDateOption", "body", m.DefaultSaleDateOption); err != nil {
		return err
	}

	return nil
}

var performanceRescheduleRequestTypeModeOfSaleDateOptionPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceRescheduleRequestTypeModeOfSaleDateOptionPropEnum = append(performanceRescheduleRequestTypeModeOfSaleDateOptionPropEnum, v)
	}
}

// prop value enum
func (m *PerformanceRescheduleRequest) validateModeOfSaleDateOptionEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, performanceRescheduleRequestTypeModeOfSaleDateOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceRescheduleRequest) validateModeOfSaleDateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeOfSaleDateOption) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeOfSaleDateOptionEnum("ModeOfSaleDateOption", "body", m.ModeOfSaleDateOption); err != nil {
		return err
	}

	return nil
}

var performanceRescheduleRequestTypeOffersDateOptionPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceRescheduleRequestTypeOffersDateOptionPropEnum = append(performanceRescheduleRequestTypeOffersDateOptionPropEnum, v)
	}
}

// prop value enum
func (m *PerformanceRescheduleRequest) validateOffersDateOptionEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, performanceRescheduleRequestTypeOffersDateOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceRescheduleRequest) validateOffersDateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.OffersDateOption) { // not required
		return nil
	}

	// value enum
	if err := m.validateOffersDateOptionEnum("OffersDateOption", "body", m.OffersDateOption); err != nil {
		return err
	}

	return nil
}

var performanceRescheduleRequestTypePriceEventDateOptionPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceRescheduleRequestTypePriceEventDateOptionPropEnum = append(performanceRescheduleRequestTypePriceEventDateOptionPropEnum, v)
	}
}

// prop value enum
func (m *PerformanceRescheduleRequest) validatePriceEventDateOptionEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, performanceRescheduleRequestTypePriceEventDateOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceRescheduleRequest) validatePriceEventDateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceEventDateOption) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriceEventDateOptionEnum("PriceEventDateOption", "body", m.PriceEventDateOption); err != nil {
		return err
	}

	return nil
}

var performanceRescheduleRequestTypePriceTypeDateOptionPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceRescheduleRequestTypePriceTypeDateOptionPropEnum = append(performanceRescheduleRequestTypePriceTypeDateOptionPropEnum, v)
	}
}

// prop value enum
func (m *PerformanceRescheduleRequest) validatePriceTypeDateOptionEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, performanceRescheduleRequestTypePriceTypeDateOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceRescheduleRequest) validatePriceTypeDateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceTypeDateOption) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriceTypeDateOptionEnum("PriceTypeDateOption", "body", m.PriceTypeDateOption); err != nil {
		return err
	}

	return nil
}

var performanceRescheduleRequestTypePublishDateOptionPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceRescheduleRequestTypePublishDateOptionPropEnum = append(performanceRescheduleRequestTypePublishDateOptionPropEnum, v)
	}
}

// prop value enum
func (m *PerformanceRescheduleRequest) validatePublishDateOptionEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, performanceRescheduleRequestTypePublishDateOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceRescheduleRequest) validatePublishDateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishDateOption) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublishDateOptionEnum("PublishDateOption", "body", m.PublishDateOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this performance reschedule request based on the context it is used
func (m *PerformanceRescheduleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCampaign(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceRescheduleRequest) contextValidateCampaign(ctx context.Context, formats strfmt.Registry) error {

	if m.Campaign != nil {

		if swag.IsZero(m.Campaign) { // not required
			return nil
		}

		if err := m.Campaign.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Campaign")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceRescheduleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceRescheduleRequest) UnmarshalBinary(b []byte) error {
	var res PerformanceRescheduleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
