// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubLineItemSummary sub line item summary
//
// swagger:model SubLineItemSummary
type SubLineItemSummary struct {

	// due amount
	DueAmount float64 `json:"DueAmount,omitempty"`

	// facility
	Facility *EntitySummary `json:"Facility,omitempty"`

	// initiator
	Initiator *ConstituentDisplaySummary `json:"Initiator,omitempty"`

	// line item category
	LineItemCategory *EntitySummary `json:"LineItemCategory,omitempty"`

	// line item Id
	LineItemID int32 `json:"LineItemId,omitempty"`

	// mode of sale Id
	ModeOfSaleID int32 `json:"ModeOfSaleId,omitempty"`

	// order date
	// Format: date-time
	OrderDate *strfmt.DateTime `json:"OrderDate,omitempty"`

	// order Id
	OrderID int32 `json:"OrderId,omitempty"`

	// owner
	Owner *ConstituentDisplaySummary `json:"Owner,omitempty"`

	// package
	Package *EntitySummary `json:"Package,omitempty"`

	// package line item Id
	PackageLineItemID int32 `json:"PackageLineItemId,omitempty"`

	// paid amount decimal
	PaidAmountDecimal float64 `json:"PaidAmountDecimal,omitempty"`

	// performance
	Performance *SLIPerformanceSummary `json:"Performance,omitempty"`

	// price type
	PriceType *EntitySummary `json:"PriceType,omitempty"`

	// recipient
	Recipient *ConstituentDisplaySummary `json:"Recipient,omitempty"`

	// season
	Season *EntitySummary `json:"Season,omitempty"`

	// seat
	Seat *SLISeatSummary `json:"Seat,omitempty"`

	// seat status
	SeatStatus *EntitySummary `json:"SeatStatus,omitempty"`

	// sub line item Id
	SubLineItemID int32 `json:"SubLineItemId,omitempty"`

	// sub line item status
	SubLineItemStatus *EntitySummary `json:"SubLineItemStatus,omitempty"`

	// ticket number
	TicketNumber int32 `json:"TicketNumber,omitempty"`
}

// Validate validates this sub line item summary
func (m *SubLineItemSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineItemCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeatStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubLineItemStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubLineItemSummary) validateFacility(formats strfmt.Registry) error {
	if swag.IsZero(m.Facility) { // not required
		return nil
	}

	if m.Facility != nil {
		if err := m.Facility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Facility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Facility")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	if m.Initiator != nil {
		if err := m.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiator")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validateLineItemCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.LineItemCategory) { // not required
		return nil
	}

	if m.LineItemCategory != nil {
		if err := m.LineItemCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LineItemCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LineItemCategory")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validateOrderDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDate) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderDate", "body", "date-time", m.OrderDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubLineItemSummary) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Owner")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validatePerformance(formats strfmt.Registry) error {
	if swag.IsZero(m.Performance) { // not required
		return nil
	}

	if m.Performance != nil {
		if err := m.Performance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Performance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Performance")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validatePriceType(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceType) { // not required
		return nil
	}

	if m.PriceType != nil {
		if err := m.PriceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceType")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validateRecipient(formats strfmt.Registry) error {
	if swag.IsZero(m.Recipient) { // not required
		return nil
	}

	if m.Recipient != nil {
		if err := m.Recipient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Recipient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Recipient")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validateSeason(formats strfmt.Registry) error {
	if swag.IsZero(m.Season) { // not required
		return nil
	}

	if m.Season != nil {
		if err := m.Season.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validateSeat(formats strfmt.Registry) error {
	if swag.IsZero(m.Seat) { // not required
		return nil
	}

	if m.Seat != nil {
		if err := m.Seat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Seat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Seat")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validateSeatStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SeatStatus) { // not required
		return nil
	}

	if m.SeatStatus != nil {
		if err := m.SeatStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SeatStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SeatStatus")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) validateSubLineItemStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SubLineItemStatus) { // not required
		return nil
	}

	if m.SubLineItemStatus != nil {
		if err := m.SubLineItemStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubLineItemStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SubLineItemStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sub line item summary based on the context it is used
func (m *SubLineItemSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFacility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLineItemCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecipient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeatStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubLineItemStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubLineItemSummary) contextValidateFacility(ctx context.Context, formats strfmt.Registry) error {

	if m.Facility != nil {

		if swag.IsZero(m.Facility) { // not required
			return nil
		}

		if err := m.Facility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Facility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Facility")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if m.Initiator != nil {

		if swag.IsZero(m.Initiator) { // not required
			return nil
		}

		if err := m.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiator")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidateLineItemCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.LineItemCategory != nil {

		if swag.IsZero(m.LineItemCategory) { // not required
			return nil
		}

		if err := m.LineItemCategory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LineItemCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LineItemCategory")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Owner")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {

		if swag.IsZero(m.Package) { // not required
			return nil
		}

		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Package")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidatePerformance(ctx context.Context, formats strfmt.Registry) error {

	if m.Performance != nil {

		if swag.IsZero(m.Performance) { // not required
			return nil
		}

		if err := m.Performance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Performance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Performance")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidatePriceType(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceType != nil {

		if swag.IsZero(m.PriceType) { // not required
			return nil
		}

		if err := m.PriceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceType")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidateRecipient(ctx context.Context, formats strfmt.Registry) error {

	if m.Recipient != nil {

		if swag.IsZero(m.Recipient) { // not required
			return nil
		}

		if err := m.Recipient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Recipient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Recipient")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidateSeason(ctx context.Context, formats strfmt.Registry) error {

	if m.Season != nil {

		if swag.IsZero(m.Season) { // not required
			return nil
		}

		if err := m.Season.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Season")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Season")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidateSeat(ctx context.Context, formats strfmt.Registry) error {

	if m.Seat != nil {

		if swag.IsZero(m.Seat) { // not required
			return nil
		}

		if err := m.Seat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Seat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Seat")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidateSeatStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.SeatStatus != nil {

		if swag.IsZero(m.SeatStatus) { // not required
			return nil
		}

		if err := m.SeatStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SeatStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SeatStatus")
			}
			return err
		}
	}

	return nil
}

func (m *SubLineItemSummary) contextValidateSubLineItemStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.SubLineItemStatus != nil {

		if swag.IsZero(m.SubLineItemStatus) { // not required
			return nil
		}

		if err := m.SubLineItemStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubLineItemStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SubLineItemStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubLineItemSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubLineItemSummary) UnmarshalBinary(b []byte) error {
	var res SubLineItemSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
