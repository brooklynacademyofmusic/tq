// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrentMembership current membership
//
// swagger:model CurrentMembership
type CurrentMembership struct {

	// constituent membership Id
	ConstituentMembershipID int32 `json:"ConstituentMembershipId,omitempty"`

	// create date
	// Format: date-time
	CreateDate strfmt.DateTime `json:"CreateDate,omitempty"`

	// current record
	CurrentRecord string `json:"CurrentRecord,omitempty"`

	// current status
	CurrentStatus *EntitySummary `json:"CurrentStatus,omitempty"`

	// expiration date
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"ExpirationDate,omitempty"`

	// initial date
	// Format: date-time
	InitialDate strfmt.DateTime `json:"InitialDate,omitempty"`

	// membership level
	MembershipLevel *CurrentMembershipLevelSummary `json:"MembershipLevel,omitempty"`

	// membership org
	MembershipOrg *EntitySummary `json:"MembershipOrg,omitempty"`
}

// Validate validates this current membership
func (m *CurrentMembership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembershipLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembershipOrg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrentMembership) validateCreateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("CreateDate", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CurrentMembership) validateCurrentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentStatus) { // not required
		return nil
	}

	if m.CurrentStatus != nil {
		if err := m.CurrentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentMembership) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CurrentMembership) validateInitialDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InitialDate) { // not required
		return nil
	}

	if err := validate.FormatOf("InitialDate", "body", "date-time", m.InitialDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CurrentMembership) validateMembershipLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.MembershipLevel) { // not required
		return nil
	}

	if m.MembershipLevel != nil {
		if err := m.MembershipLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipLevel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipLevel")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentMembership) validateMembershipOrg(formats strfmt.Registry) error {
	if swag.IsZero(m.MembershipOrg) { // not required
		return nil
	}

	if m.MembershipOrg != nil {
		if err := m.MembershipOrg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipOrg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipOrg")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this current membership based on the context it is used
func (m *CurrentMembership) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembershipLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembershipOrg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrentMembership) contextValidateCurrentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentStatus != nil {

		if swag.IsZero(m.CurrentStatus) { // not required
			return nil
		}

		if err := m.CurrentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentMembership) contextValidateMembershipLevel(ctx context.Context, formats strfmt.Registry) error {

	if m.MembershipLevel != nil {

		if swag.IsZero(m.MembershipLevel) { // not required
			return nil
		}

		if err := m.MembershipLevel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipLevel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipLevel")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentMembership) contextValidateMembershipOrg(ctx context.Context, formats strfmt.Registry) error {

	if m.MembershipOrg != nil {

		if swag.IsZero(m.MembershipOrg) { // not required
			return nil
		}

		if err := m.MembershipOrg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MembershipOrg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MembershipOrg")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CurrentMembership) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentMembership) UnmarshalBinary(b []byte) error {
	var res CurrentMembership
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
