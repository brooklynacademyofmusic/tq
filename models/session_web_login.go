// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionWebLogin session web login
//
// swagger:model SessionWebLogin
type SessionWebLogin struct {

	// constituent
	Constituent *Entity `json:"Constituent,omitempty"`

	// constituent update date
	// Format: date-time
	ConstituentUpdateDate strfmt.DateTime `json:"ConstituentUpdateDate,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// edit indicator
	EditIndicator bool `json:"EditIndicator,omitempty"`

	// email
	Email *Entity `json:"Email,omitempty"`

	// failed attempts
	FailedAttempts int32 `json:"FailedAttempts,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// inactive
	Inactive bool `json:"Inactive,omitempty"`

	// last login date
	// Format: date-time
	LastLoginDate strfmt.DateTime `json:"LastLoginDate,omitempty"`

	// locked date
	// Format: date-time
	LockedDate strfmt.DateTime `json:"LockedDate,omitempty"`

	// login
	Login string `json:"Login,omitempty"`

	// login type
	LoginType *LoginTypeSummary `json:"LoginType,omitempty"`

	// password
	Password string `json:"Password,omitempty"`

	// primary indicator
	PrimaryIndicator bool `json:"PrimaryIndicator,omitempty"`

	// temporary indicator
	TemporaryIndicator bool `json:"TemporaryIndicator,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this session web login
func (m *SessionWebLogin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstituent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstituentUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionWebLogin) validateConstituent(formats strfmt.Registry) error {
	if swag.IsZero(m.Constituent) { // not required
		return nil
	}

	if m.Constituent != nil {
		if err := m.Constituent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *SessionWebLogin) validateConstituentUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ConstituentUpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ConstituentUpdateDate", "body", "date-time", m.ConstituentUpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionWebLogin) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionWebLogin) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if m.Email != nil {
		if err := m.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Email")
			}
			return err
		}
	}

	return nil
}

func (m *SessionWebLogin) validateLastLoginDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastLoginDate) { // not required
		return nil
	}

	if err := validate.FormatOf("LastLoginDate", "body", "date-time", m.LastLoginDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionWebLogin) validateLockedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LockedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("LockedDate", "body", "date-time", m.LockedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionWebLogin) validateLoginType(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginType) { // not required
		return nil
	}

	if m.LoginType != nil {
		if err := m.LoginType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LoginType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LoginType")
			}
			return err
		}
	}

	return nil
}

func (m *SessionWebLogin) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this session web login based on the context it is used
func (m *SessionWebLogin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstituent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionWebLogin) contextValidateConstituent(ctx context.Context, formats strfmt.Registry) error {

	if m.Constituent != nil {

		if swag.IsZero(m.Constituent) { // not required
			return nil
		}

		if err := m.Constituent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Constituent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Constituent")
			}
			return err
		}
	}

	return nil
}

func (m *SessionWebLogin) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if m.Email != nil {

		if swag.IsZero(m.Email) { // not required
			return nil
		}

		if err := m.Email.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Email")
			}
			return err
		}
	}

	return nil
}

func (m *SessionWebLogin) contextValidateLoginType(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginType != nil {

		if swag.IsZero(m.LoginType) { // not required
			return nil
		}

		if err := m.LoginType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LoginType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LoginType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionWebLogin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionWebLogin) UnmarshalBinary(b []byte) error {
	var res SessionWebLogin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
