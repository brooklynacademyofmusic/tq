// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Design design
//
// swagger:model Design
type Design struct {

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// design category
	DesignCategory string `json:"DesignCategory,omitempty"`

	// design type
	DesignType string `json:"DesignType,omitempty"`

	// digital design number
	DigitalDesignNumber int32 `json:"DigitalDesignNumber,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// max col
	MaxCol int32 `json:"MaxCol,omitempty"`

	// max row
	MaxRow int32 `json:"MaxRow,omitempty"`

	// printer
	Printer *PrinterSummary `json:"Printer,omitempty"`

	// template Id
	TemplateID int32 `json:"TemplateId,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// x2val
	X2val int32 `json:"X2val,omitempty"`

	// y2val
	Y2val int32 `json:"Y2val,omitempty"`

	// zebra design number
	ZebraDesignNumber int32 `json:"ZebraDesignNumber,omitempty"`
}

// Validate validates this design
func (m *Design) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrinter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Design) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Design) validatePrinter(formats strfmt.Registry) error {
	if swag.IsZero(m.Printer) { // not required
		return nil
	}

	if m.Printer != nil {
		if err := m.Printer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Printer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Printer")
			}
			return err
		}
	}

	return nil
}

func (m *Design) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this design based on the context it is used
func (m *Design) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrinter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Design) contextValidatePrinter(ctx context.Context, formats strfmt.Registry) error {

	if m.Printer != nil {

		if swag.IsZero(m.Printer) { // not required
			return nil
		}

		if err := m.Printer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Printer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Printer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Design) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Design) UnmarshalBinary(b []byte) error {
	var res Design
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
