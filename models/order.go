// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
//
// swagger:model Order
type Order struct {

	// accepting rollovers
	AcceptingRollovers bool `json:"AcceptingRollovers,omitempty"`

	// account Id
	AccountID int32 `json:"AccountId,omitempty"`

	// alt address Id
	AltAddressID int32 `json:"AltAddressId,omitempty"`

	// alt electronic address Id
	AltElectronicAddressID int32 `json:"AltElectronicAddressId,omitempty"`

	// appeal Id
	AppealID int32 `json:"AppealId,omitempty"`

	// applied message rules
	AppliedMessageRules string `json:"AppliedMessageRules,omitempty"`

	// batch Id
	BatchID int32 `json:"BatchId,omitempty"`

	// business unit Id
	BusinessUnitID int32 `json:"BusinessUnitId,omitempty"`

	// category Id
	CategoryID int32 `json:"CategoryId,omitempty"`

	// channel Id
	ChannelID int32 `json:"ChannelId,omitempty"`

	// constituent Id
	ConstituentID int32 `json:"ConstituentId,omitempty"`

	// create location
	CreateLocation string `json:"CreateLocation,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// custom0
	Custom0 string `json:"Custom0,omitempty"`

	// custom1
	Custom1 string `json:"Custom1,omitempty"`

	// custom2
	Custom2 string `json:"Custom2,omitempty"`

	// custom3
	Custom3 string `json:"Custom3,omitempty"`

	// custom4
	Custom4 string `json:"Custom4,omitempty"`

	// custom5
	Custom5 string `json:"Custom5,omitempty"`

	// custom6
	Custom6 string `json:"Custom6,omitempty"`

	// custom7
	Custom7 string `json:"Custom7,omitempty"`

	// custom8
	Custom8 string `json:"Custom8,omitempty"`

	// custom9
	Custom9 string `json:"Custom9,omitempty"`

	// delivery date
	// Format: date-time
	DeliveryDate strfmt.DateTime `json:"DeliveryDate,omitempty"`

	// delivery method Id
	DeliveryMethodID int32 `json:"DeliveryMethodId,omitempty"`

	// hold until date time
	// Format: date-time
	HoldUntilDateTime strfmt.DateTime `json:"HoldUntilDateTime,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// initiator Id
	InitiatorID int32 `json:"InitiatorId,omitempty"`

	// line items
	LineItems []*LineItem `json:"LineItems"`

	// messages
	Messages []*PricingRuleMessageSummary `json:"Messages"`

	// mirror lock
	MirrorLock int32 `json:"MirrorLock,omitempty"`

	// mode of sale Id
	ModeOfSaleID int32 `json:"ModeOfSaleId,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// order date time
	// Format: date-time
	OrderDateTime strfmt.DateTime `json:"OrderDateTime,omitempty"`

	// reload pricing rules
	ReloadPricingRules bool `json:"ReloadPricingRules,omitempty"`

	// solicitor
	Solicitor string `json:"Solicitor,omitempty"`

	// source Id
	SourceID int32 `json:"SourceId,omitempty"`

	// total due
	TotalDue float64 `json:"TotalDue,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`

	// virtual constituencies
	VirtualConstituencies string `json:"VirtualConstituencies,omitempty"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHoldUntilDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("DeliveryDate", "body", "date-time", m.DeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateHoldUntilDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.HoldUntilDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("HoldUntilDateTime", "body", "date-time", m.HoldUntilDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateLineItems(formats strfmt.Registry) error {
	if swag.IsZero(m.LineItems) { // not required
		return nil
	}

	for i := 0; i < len(m.LineItems); i++ {
		if swag.IsZero(m.LineItems[i]) { // not required
			continue
		}

		if m.LineItems[i] != nil {
			if err := m.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("LineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateOrderDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderDateTime", "body", "date-time", m.OrderDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order based on the context it is used
func (m *Order) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLineItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) contextValidateLineItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LineItems); i++ {

		if m.LineItems[i] != nil {

			if swag.IsZero(m.LineItems[i]) { // not required
				return nil
			}

			if err := m.LineItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("LineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {

			if swag.IsZero(m.Messages[i]) { // not required
				return nil
			}

			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
