// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentPlanScheduleRequest payment plan schedule request
//
// swagger:model PaymentPlanScheduleRequest
type PaymentPlanScheduleRequest struct {

	// account Id
	AccountID int32 `json:"AccountId,omitempty"`

	// billing schedule Id
	BillingScheduleID int32 `json:"BillingScheduleId,omitempty"`

	// billing type Id
	BillingTypeID int32 `json:"BillingTypeId,omitempty"`

	// card
	Card *PaymentPlanCard `json:"Card,omitempty"`

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"EndDate,omitempty"`

	// override amount to schedule
	OverrideAmountToSchedule float64 `json:"OverrideAmountToSchedule,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"StartDate,omitempty"`
}

// Validate validates this payment plan schedule request
func (m *PaymentPlanScheduleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentPlanScheduleRequest) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Card")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentPlanScheduleRequest) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentPlanScheduleRequest) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this payment plan schedule request based on the context it is used
func (m *PaymentPlanScheduleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentPlanScheduleRequest) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if m.Card != nil {

		if swag.IsZero(m.Card) { // not required
			return nil
		}

		if err := m.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentPlanScheduleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentPlanScheduleRequest) UnmarshalBinary(b []byte) error {
	var res PaymentPlanScheduleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
