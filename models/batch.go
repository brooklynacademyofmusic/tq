// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Batch batch
//
// swagger:model Batch
type Batch struct {

	// amt posted
	AmtPosted float64 `json:"AmtPosted,omitempty"`

	// batch type
	BatchType *BatchTypeSummary `json:"BatchType,omitempty"`

	// close date time
	// Format: date-time
	CloseDateTime strfmt.DateTime `json:"CloseDateTime,omitempty"`

	// closed by
	ClosedBy string `json:"ClosedBy,omitempty"`

	// cntl indicator
	CntlIndicator string `json:"CntlIndicator,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// created date time
	// Format: date-time
	CreatedDateTime strfmt.DateTime `json:"CreatedDateTime,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// num acc cc
	NumAccCc int32 `json:"NumAccCc,omitempty"`

	// num rej cc
	NumRejCc int32 `json:"NumRejCc,omitempty"`

	// open loc
	OpenLoc string `json:"OpenLoc,omitempty"`

	// owner
	Owner string `json:"Owner,omitempty"`

	// post Id
	PostID int32 `json:"PostId,omitempty"`

	// posted by
	PostedBy string `json:"PostedBy,omitempty"`

	// posted date time
	// Format: date-time
	PostedDateTime strfmt.DateTime `json:"PostedDateTime,omitempty"`

	// status
	Status string `json:"Status,omitempty"`

	// tally pl amount
	TallyPlAmount float64 `json:"TallyPlAmount,omitempty"`

	// tally re amount
	TallyReAmount float64 `json:"TallyReAmount,omitempty"`

	// unique tag
	UniqueTag string `json:"UniqueTag,omitempty"`

	// updated by
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// updated date time
	// Format: date-time
	UpdatedDateTime strfmt.DateTime `json:"UpdatedDateTime,omitempty"`
}

// Validate validates this batch
func (m *Batch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloseDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Batch) validateBatchType(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchType) { // not required
		return nil
	}

	if m.BatchType != nil {
		if err := m.BatchType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BatchType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BatchType")
			}
			return err
		}
	}

	return nil
}

func (m *Batch) validateCloseDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CloseDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CloseDateTime", "body", "date-time", m.CloseDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Batch) validateCreatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDateTime", "body", "date-time", m.CreatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Batch) validatePostedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PostedDateTime", "body", "date-time", m.PostedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Batch) validateUpdatedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedDateTime", "body", "date-time", m.UpdatedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this batch based on the context it is used
func (m *Batch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Batch) contextValidateBatchType(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchType != nil {

		if swag.IsZero(m.BatchType) { // not required
			return nil
		}

		if err := m.BatchType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BatchType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BatchType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Batch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Batch) UnmarshalBinary(b []byte) error {
	var res Batch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
