// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new g e t API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for g e t API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AccountTypesGet(params *AccountTypesGetParams, opts ...ClientOption) (*AccountTypesGetOK, error)

	AccountTypesGetAll(params *AccountTypesGetAllParams, opts ...ClientOption) (*AccountTypesGetAllOK, error)

	AccountTypesGetSummaries(params *AccountTypesGetSummariesParams, opts ...ClientOption) (*AccountTypesGetSummariesOK, error)

	AccountsGet(params *AccountsGetParams, opts ...ClientOption) (*AccountsGetOK, error)

	AccountsGetAll(params *AccountsGetAllParams, opts ...ClientOption) (*AccountsGetAllOK, error)

	ActionTypesGet(params *ActionTypesGetParams, opts ...ClientOption) (*ActionTypesGetOK, error)

	ActionTypesGetAll(params *ActionTypesGetAllParams, opts ...ClientOption) (*ActionTypesGetAllOK, error)

	ActionTypesGetSummaries(params *ActionTypesGetSummariesParams, opts ...ClientOption) (*ActionTypesGetSummariesOK, error)

	ActionsGet(params *ActionsGetParams, opts ...ClientOption) (*ActionsGetOK, error)

	ActionsGetAll(params *ActionsGetAllParams, opts ...ClientOption) (*ActionsGetAllOK, error)

	ActivityCategoriesGet(params *ActivityCategoriesGetParams, opts ...ClientOption) (*ActivityCategoriesGetOK, error)

	ActivityCategoriesGetAll(params *ActivityCategoriesGetAllParams, opts ...ClientOption) (*ActivityCategoriesGetAllOK, error)

	ActivityCategoriesGetSummaries(params *ActivityCategoriesGetSummariesParams, opts ...ClientOption) (*ActivityCategoriesGetSummariesOK, error)

	ActivityTypesGet(params *ActivityTypesGetParams, opts ...ClientOption) (*ActivityTypesGetOK, error)

	ActivityTypesGetAll(params *ActivityTypesGetAllParams, opts ...ClientOption) (*ActivityTypesGetAllOK, error)

	ActivityTypesGetSummaries(params *ActivityTypesGetSummariesParams, opts ...ClientOption) (*ActivityTypesGetSummariesOK, error)

	AddressTypesGet(params *AddressTypesGetParams, opts ...ClientOption) (*AddressTypesGetOK, error)

	AddressTypesGetAll(params *AddressTypesGetAllParams, opts ...ClientOption) (*AddressTypesGetAllOK, error)

	AddressTypesGetSummaries(params *AddressTypesGetSummariesParams, opts ...ClientOption) (*AddressTypesGetSummariesOK, error)

	AddressesGet(params *AddressesGetParams, opts ...ClientOption) (*AddressesGetOK, error)

	AddressesGetAll(params *AddressesGetAllParams, opts ...ClientOption) (*AddressesGetAllOK, error)

	AffiliationTypesGet(params *AffiliationTypesGetParams, opts ...ClientOption) (*AffiliationTypesGetOK, error)

	AffiliationTypesGetAll(params *AffiliationTypesGetAllParams, opts ...ClientOption) (*AffiliationTypesGetAllOK, error)

	AffiliationTypesGetSummaries(params *AffiliationTypesGetSummariesParams, opts ...ClientOption) (*AffiliationTypesGetSummariesOK, error)

	AffiliationsGet(params *AffiliationsGetParams, opts ...ClientOption) (*AffiliationsGetOK, error)

	AffiliationsGetAll(params *AffiliationsGetAllParams, opts ...ClientOption) (*AffiliationsGetAllOK, error)

	AliasTypesGet(params *AliasTypesGetParams, opts ...ClientOption) (*AliasTypesGetOK, error)

	AliasTypesGetAll(params *AliasTypesGetAllParams, opts ...ClientOption) (*AliasTypesGetAllOK, error)

	AliasTypesGetSummaries(params *AliasTypesGetSummariesParams, opts ...ClientOption) (*AliasTypesGetSummariesOK, error)

	AliasesGet(params *AliasesGetParams, opts ...ClientOption) (*AliasesGetOK, error)

	AliasesGetAll(params *AliasesGetAllParams, opts ...ClientOption) (*AliasesGetAllOK, error)

	AnalyticsCubesGet(params *AnalyticsCubesGetParams, opts ...ClientOption) (*AnalyticsCubesGetOK, error)

	AnalyticsCubesGetAll(params *AnalyticsCubesGetAllParams, opts ...ClientOption) (*AnalyticsCubesGetAllOK, error)

	AnalyticsReportsGet(params *AnalyticsReportsGetParams, opts ...ClientOption) (*AnalyticsReportsGetOK, error)

	AnalyticsReportsGetAll(params *AnalyticsReportsGetAllParams, opts ...ClientOption) (*AnalyticsReportsGetAllOK, error)

	AppScreenTextsGet(params *AppScreenTextsGetParams, opts ...ClientOption) (*AppScreenTextsGetOK, error)

	AppScreenTextsGetAll(params *AppScreenTextsGetAllParams, opts ...ClientOption) (*AppScreenTextsGetAllOK, error)

	AppScreenTextsGetSummaries(params *AppScreenTextsGetSummariesParams, opts ...ClientOption) (*AppScreenTextsGetSummariesOK, error)

	AppealCategoriesGet(params *AppealCategoriesGetParams, opts ...ClientOption) (*AppealCategoriesGetOK, error)

	AppealCategoriesGetAll(params *AppealCategoriesGetAllParams, opts ...ClientOption) (*AppealCategoriesGetAllOK, error)

	AppealCategoriesGetSummaries(params *AppealCategoriesGetSummariesParams, opts ...ClientOption) (*AppealCategoriesGetSummariesOK, error)

	AppealsGet(params *AppealsGetParams, opts ...ClientOption) (*AppealsGetOK, error)

	AppealsGetSummaries(params *AppealsGetSummariesParams, opts ...ClientOption) (*AppealsGetSummariesOK, error)

	ApplicationObjectsGetAll(params *ApplicationObjectsGetAllParams, opts ...ClientOption) (*ApplicationObjectsGetAllOK, error)

	ArtistsGet(params *ArtistsGetParams, opts ...ClientOption) (*ArtistsGetOK, error)

	ArtistsGetAll(params *ArtistsGetAllParams, opts ...ClientOption) (*ArtistsGetAllOK, error)

	AssetTypesGet(params *AssetTypesGetParams, opts ...ClientOption) (*AssetTypesGetOK, error)

	AssetTypesGetAll(params *AssetTypesGetAllParams, opts ...ClientOption) (*AssetTypesGetAllOK, error)

	AssetTypesGetSummaries(params *AssetTypesGetSummariesParams, opts ...ClientOption) (*AssetTypesGetSummariesOK, error)

	AssetsGet(params *AssetsGetParams, opts ...ClientOption) (*AssetsGetOK, error)

	AssetsGetAll(params *AssetsGetAllParams, opts ...ClientOption) (*AssetsGetAllOK, error)

	AssociationTypesGet(params *AssociationTypesGetParams, opts ...ClientOption) (*AssociationTypesGetOK, error)

	AssociationTypesGetAll(params *AssociationTypesGetAllParams, opts ...ClientOption) (*AssociationTypesGetAllOK, error)

	AssociationTypesGetSummaries(params *AssociationTypesGetSummariesParams, opts ...ClientOption) (*AssociationTypesGetSummariesOK, error)

	AssociationsGet(params *AssociationsGetParams, opts ...ClientOption) (*AssociationsGetOK, error)

	AssociationsGetAll(params *AssociationsGetAllParams, opts ...ClientOption) (*AssociationsGetAllOK, error)

	AttendanceHistoryGetAll(params *AttendanceHistoryGetAllParams, opts ...ClientOption) (*AttendanceHistoryGetAllOK, error)

	AttributesGet(params *AttributesGetParams, opts ...ClientOption) (*AttributesGetOK, error)

	AttributesGetAll(params *AttributesGetAllParams, opts ...ClientOption) (*AttributesGetAllOK, error)

	AuditLogsGet(params *AuditLogsGetParams, opts ...ClientOption) (*AuditLogsGetOK, error)

	AuditLogsGetAll(params *AuditLogsGetAllParams, opts ...ClientOption) (*AuditLogsGetAllOK, error)

	AuditLogsGetDetails(params *AuditLogsGetDetailsParams, opts ...ClientOption) (*AuditLogsGetDetailsOK, error)

	AuthenticateWindowsAuthentication(params *AuthenticateWindowsAuthenticationParams, opts ...ClientOption) (*AuthenticateWindowsAuthenticationOK, error)

	BatchMaintenanceActive(params *BatchMaintenanceActiveParams, opts ...ClientOption) (*BatchMaintenanceActiveOK, error)

	BatchMaintenanceGet(params *BatchMaintenanceGetParams, opts ...ClientOption) (*BatchMaintenanceGetOK, error)

	BatchTypeGroupsGet(params *BatchTypeGroupsGetParams, opts ...ClientOption) (*BatchTypeGroupsGetOK, error)

	BatchTypeGroupsGetAll(params *BatchTypeGroupsGetAllParams, opts ...ClientOption) (*BatchTypeGroupsGetAllOK, error)

	BatchTypeGroupsGetSummaries(params *BatchTypeGroupsGetSummariesParams, opts ...ClientOption) (*BatchTypeGroupsGetSummariesOK, error)

	BatchTypeUserGroupGetAll(params *BatchTypeUserGroupGetAllParams, opts ...ClientOption) (*BatchTypeUserGroupGetAllOK, error)

	BatchTypesGet(params *BatchTypesGetParams, opts ...ClientOption) (*BatchTypesGetOK, error)

	BatchTypesGetAll(params *BatchTypesGetAllParams, opts ...ClientOption) (*BatchTypesGetAllOK, error)

	BatchTypesGetSummaries(params *BatchTypesGetSummariesParams, opts ...ClientOption) (*BatchTypesGetSummariesOK, error)

	BillingSchedulesGet(params *BillingSchedulesGetParams, opts ...ClientOption) (*BillingSchedulesGetOK, error)

	BillingSchedulesGetAll(params *BillingSchedulesGetAllParams, opts ...ClientOption) (*BillingSchedulesGetAllOK, error)

	BillingSchedulesGetSummaries(params *BillingSchedulesGetSummariesParams, opts ...ClientOption) (*BillingSchedulesGetSummariesOK, error)

	BillingTypesGet(params *BillingTypesGetParams, opts ...ClientOption) (*BillingTypesGetOK, error)

	BillingTypesGetAll(params *BillingTypesGetAllParams, opts ...ClientOption) (*BillingTypesGetAllOK, error)

	BillingTypesGetSummaries(params *BillingTypesGetSummariesParams, opts ...ClientOption) (*BillingTypesGetSummariesOK, error)

	BookingCategoriesGet(params *BookingCategoriesGetParams, opts ...ClientOption) (*BookingCategoriesGetOK, error)

	BookingCategoriesGetAll(params *BookingCategoriesGetAllParams, opts ...ClientOption) (*BookingCategoriesGetAllOK, error)

	BookingCategoriesGetSummaries(params *BookingCategoriesGetSummariesParams, opts ...ClientOption) (*BookingCategoriesGetSummariesOK, error)

	BookingTemplatesGet(params *BookingTemplatesGetParams, opts ...ClientOption) (*BookingTemplatesGetOK, error)

	BookingTemplatesGetSummaries(params *BookingTemplatesGetSummariesParams, opts ...ClientOption) (*BookingTemplatesGetSummariesOK, error)

	BookingsGet(params *BookingsGetParams, opts ...ClientOption) (*BookingsGetOK, error)

	BookingsGetAllDocumentSummaries(params *BookingsGetAllDocumentSummariesParams, opts ...ClientOption) (*BookingsGetAllDocumentSummariesOK, error)

	BookingsGetAllDocuments(params *BookingsGetAllDocumentsParams, opts ...ClientOption) (*BookingsGetAllDocumentsOK, error)

	BookingsGetDocument(params *BookingsGetDocumentParams, opts ...ClientOption) (*BookingsGetDocumentOK, error)

	BookingsGetSummary(params *BookingsGetSummaryParams, opts ...ClientOption) (*BookingsGetSummaryOK, error)

	BulkCopySetsGet(params *BulkCopySetsGetParams, opts ...ClientOption) (*BulkCopySetsGetOK, error)

	BulkCopySetsGetAll(params *BulkCopySetsGetAllParams, opts ...ClientOption) (*BulkCopySetsGetAllOK, error)

	BulkCopySetsGetDayForCopy(params *BulkCopySetsGetDayForCopyParams, opts ...ClientOption) (*BulkCopySetsGetDayForCopyOK, error)

	BulkCopySetsGetSummaries(params *BulkCopySetsGetSummariesParams, opts ...ClientOption) (*BulkCopySetsGetSummariesOK, error)

	BulkDailyCopyExclusionsGet(params *BulkDailyCopyExclusionsGetParams, opts ...ClientOption) (*BulkDailyCopyExclusionsGetOK, error)

	BulkDailyCopyExclusionsGetAll(params *BulkDailyCopyExclusionsGetAllParams, opts ...ClientOption) (*BulkDailyCopyExclusionsGetAllOK, error)

	BusinessUnitsGet(params *BusinessUnitsGetParams, opts ...ClientOption) (*BusinessUnitsGetOK, error)

	BusinessUnitsGetAll(params *BusinessUnitsGetAllParams, opts ...ClientOption) (*BusinessUnitsGetAllOK, error)

	BusinessUnitsGetSummaries(params *BusinessUnitsGetSummariesParams, opts ...ClientOption) (*BusinessUnitsGetSummariesOK, error)

	CacheInit(params *CacheInitParams, opts ...ClientOption) (*CacheInitNoContent, error)

	CampaignDesignationsGet(params *CampaignDesignationsGetParams, opts ...ClientOption) (*CampaignDesignationsGetOK, error)

	CampaignDesignationsGetAll(params *CampaignDesignationsGetAllParams, opts ...ClientOption) (*CampaignDesignationsGetAllOK, error)

	CampaignFundsGet(params *CampaignFundsGetParams, opts ...ClientOption) (*CampaignFundsGetOK, error)

	CampaignFundsGetAll(params *CampaignFundsGetAllParams, opts ...ClientOption) (*CampaignFundsGetAllOK, error)

	CampaignsGet(params *CampaignsGetParams, opts ...ClientOption) (*CampaignsGetOK, error)

	CampaignsGetSummaries(params *CampaignsGetSummariesParams, opts ...ClientOption) (*CampaignsGetSummariesOK, error)

	CardReaderTypesGet(params *CardReaderTypesGetParams, opts ...ClientOption) (*CardReaderTypesGetOK, error)

	CardReaderTypesGetAll(params *CardReaderTypesGetAllParams, opts ...ClientOption) (*CardReaderTypesGetAllOK, error)

	CardReaderTypesGetSummaries(params *CardReaderTypesGetSummariesParams, opts ...ClientOption) (*CardReaderTypesGetSummariesOK, error)

	CartGet(params *CartGetParams, opts ...ClientOption) (*CartGetOK, error)

	CartGetCartProperties(params *CartGetCartPropertiesParams, opts ...ClientOption) (*CartGetCartPropertiesOK, error)

	CartGetMessages(params *CartGetMessagesParams, opts ...ClientOption) (*CartGetMessagesOK, error)

	CartGetReceiptString(params *CartGetReceiptStringParams, opts ...ClientOption) (*CartGetReceiptStringOK, error)

	CartGetSummary(params *CartGetSummaryParams, opts ...ClientOption) (*CartGetSummaryOK, error)

	ColorsGet(params *ColorsGetParams, opts ...ClientOption) (*ColorsGetOK, error)

	ColorsGetAll(params *ColorsGetAllParams, opts ...ClientOption) (*ColorsGetAllOK, error)

	ColorsGetSummaries(params *ColorsGetSummariesParams, opts ...ClientOption) (*ColorsGetSummariesOK, error)

	ComposersGet(params *ComposersGetParams, opts ...ClientOption) (*ComposersGetOK, error)

	ComposersGetAll(params *ComposersGetAllParams, opts ...ClientOption) (*ComposersGetAllOK, error)

	ComposersGetSummaries(params *ComposersGetSummariesParams, opts ...ClientOption) (*ComposersGetSummariesOK, error)

	ConstituenciesGet(params *ConstituenciesGetParams, opts ...ClientOption) (*ConstituenciesGetOK, error)

	ConstituenciesGetAll(params *ConstituenciesGetAllParams, opts ...ClientOption) (*ConstituenciesGetAllOK, error)

	ConstituencyTypesGet(params *ConstituencyTypesGetParams, opts ...ClientOption) (*ConstituencyTypesGetOK, error)

	ConstituencyTypesGetAll(params *ConstituencyTypesGetAllParams, opts ...ClientOption) (*ConstituencyTypesGetAllOK, error)

	ConstituencyTypesGetSummaries(params *ConstituencyTypesGetSummariesParams, opts ...ClientOption) (*ConstituencyTypesGetSummariesOK, error)

	ConstituentContributionsGetAll(params *ConstituentContributionsGetAllParams, opts ...ClientOption) (*ConstituentContributionsGetAllOK, error)

	ConstituentDocumentsGet(params *ConstituentDocumentsGetParams, opts ...ClientOption) (*ConstituentDocumentsGetOK, error)

	ConstituentDocumentsGetAll(params *ConstituentDocumentsGetAllParams, opts ...ClientOption) (*ConstituentDocumentsGetAllOK, error)

	ConstituentDocumentsGetAllSummary(params *ConstituentDocumentsGetAllSummaryParams, opts ...ClientOption) (*ConstituentDocumentsGetAllSummaryOK, error)

	ConstituentGroupsGet(params *ConstituentGroupsGetParams, opts ...ClientOption) (*ConstituentGroupsGetOK, error)

	ConstituentGroupsGetAll(params *ConstituentGroupsGetAllParams, opts ...ClientOption) (*ConstituentGroupsGetAllOK, error)

	ConstituentGroupsGetSummaries(params *ConstituentGroupsGetSummariesParams, opts ...ClientOption) (*ConstituentGroupsGetSummariesOK, error)

	ConstituentInactivesGet(params *ConstituentInactivesGetParams, opts ...ClientOption) (*ConstituentInactivesGetOK, error)

	ConstituentInactivesGetAll(params *ConstituentInactivesGetAllParams, opts ...ClientOption) (*ConstituentInactivesGetAllOK, error)

	ConstituentInactivesGetSummaries(params *ConstituentInactivesGetSummariesParams, opts ...ClientOption) (*ConstituentInactivesGetSummariesOK, error)

	ConstituentProtectionTypesGet(params *ConstituentProtectionTypesGetParams, opts ...ClientOption) (*ConstituentProtectionTypesGetOK, error)

	ConstituentProtectionTypesGetAll(params *ConstituentProtectionTypesGetAllParams, opts ...ClientOption) (*ConstituentProtectionTypesGetAllOK, error)

	ConstituentProtectionTypesGetSummaries(params *ConstituentProtectionTypesGetSummariesParams, opts ...ClientOption) (*ConstituentProtectionTypesGetSummariesOK, error)

	ConstituentTypeAffiliatesGet(params *ConstituentTypeAffiliatesGetParams, opts ...ClientOption) (*ConstituentTypeAffiliatesGetOK, error)

	ConstituentTypeAffiliatesGetAll(params *ConstituentTypeAffiliatesGetAllParams, opts ...ClientOption) (*ConstituentTypeAffiliatesGetAllOK, error)

	ConstituentTypeAffiliatesGetSummaries(params *ConstituentTypeAffiliatesGetSummariesParams, opts ...ClientOption) (*ConstituentTypeAffiliatesGetSummariesOK, error)

	ConstituentTypesGet(params *ConstituentTypesGetParams, opts ...ClientOption) (*ConstituentTypesGetOK, error)

	ConstituentTypesGetAll(params *ConstituentTypesGetAllParams, opts ...ClientOption) (*ConstituentTypesGetAllOK, error)

	ConstituentTypesGetSummaries(params *ConstituentTypesGetSummariesParams, opts ...ClientOption) (*ConstituentTypesGetSummariesOK, error)

	ConstituentsGet(params *ConstituentsGetParams, opts ...ClientOption) (*ConstituentsGetOK, error)

	ConstituentsGetConstituent(params *ConstituentsGetConstituentParams, opts ...ClientOption) (*ConstituentsGetConstituentOK, error)

	ConstituentsGetConstituentDevelopmentInfo(params *ConstituentsGetConstituentDevelopmentInfoParams, opts ...ClientOption) (*ConstituentsGetConstituentDevelopmentInfoOK, error)

	ConstituentsGetConstituentSnapshot(params *ConstituentsGetConstituentSnapshotParams, opts ...ClientOption) (*ConstituentsGetConstituentSnapshotOK, error)

	ConstituentsGetConstituents(params *ConstituentsGetConstituentsParams, opts ...ClientOption) (*ConstituentsGetConstituentsOK, error)

	ConstituentsGetDefaultHeader(params *ConstituentsGetDefaultHeaderParams, opts ...ClientOption) (*ConstituentsGetDefaultHeaderOK, error)

	ConstituentsGetFlexHeader(params *ConstituentsGetFlexHeaderParams, opts ...ClientOption) (*ConstituentsGetFlexHeaderOK, error)

	ConstituentsGetHeader(params *ConstituentsGetHeaderParams, opts ...ClientOption) (*ConstituentsGetHeaderOK, error)

	ConstituentsGetPrimaryHousehold(params *ConstituentsGetPrimaryHouseholdParams, opts ...ClientOption) (*ConstituentsGetPrimaryHouseholdOK, error)

	ConstituentsSearch(params *ConstituentsSearchParams, opts ...ClientOption) (*ConstituentsSearchOK, error)

	ContactPermissionCategoriesGet(params *ContactPermissionCategoriesGetParams, opts ...ClientOption) (*ContactPermissionCategoriesGetOK, error)

	ContactPermissionCategoriesGetAll(params *ContactPermissionCategoriesGetAllParams, opts ...ClientOption) (*ContactPermissionCategoriesGetAllOK, error)

	ContactPermissionCategoriesGetSummaries(params *ContactPermissionCategoriesGetSummariesParams, opts ...ClientOption) (*ContactPermissionCategoriesGetSummariesOK, error)

	ContactPermissionTypesGet(params *ContactPermissionTypesGetParams, opts ...ClientOption) (*ContactPermissionTypesGetOK, error)

	ContactPermissionTypesGetAll(params *ContactPermissionTypesGetAllParams, opts ...ClientOption) (*ContactPermissionTypesGetAllOK, error)

	ContactPermissionTypesGetForProductionSeasons(params *ContactPermissionTypesGetForProductionSeasonsParams, opts ...ClientOption) (*ContactPermissionTypesGetForProductionSeasonsOK, error)

	ContactPermissionTypesGetSummaries(params *ContactPermissionTypesGetSummariesParams, opts ...ClientOption) (*ContactPermissionTypesGetSummariesOK, error)

	ContactPermissionsGet(params *ContactPermissionsGetParams, opts ...ClientOption) (*ContactPermissionsGetOK, error)

	ContactPermissionsGetAll(params *ContactPermissionsGetAllParams, opts ...ClientOption) (*ContactPermissionsGetAllOK, error)

	ContactPointCategoriesGet(params *ContactPointCategoriesGetParams, opts ...ClientOption) (*ContactPointCategoriesGetOK, error)

	ContactPointCategoriesGetAll(params *ContactPointCategoriesGetAllParams, opts ...ClientOption) (*ContactPointCategoriesGetAllOK, error)

	ContactPointCategoriesGetSummaries(params *ContactPointCategoriesGetSummariesParams, opts ...ClientOption) (*ContactPointCategoriesGetSummariesOK, error)

	ContactPointCategoryPurposesGet(params *ContactPointCategoryPurposesGetParams, opts ...ClientOption) (*ContactPointCategoryPurposesGetOK, error)

	ContactPointCategoryPurposesGetAll(params *ContactPointCategoryPurposesGetAllParams, opts ...ClientOption) (*ContactPointCategoryPurposesGetAllOK, error)

	ContactPointCategoryPurposesGetSummaries(params *ContactPointCategoryPurposesGetSummariesParams, opts ...ClientOption) (*ContactPointCategoryPurposesGetSummariesOK, error)

	ContactPointPurposeCategoriesGet(params *ContactPointPurposeCategoriesGetParams, opts ...ClientOption) (*ContactPointPurposeCategoriesGetOK, error)

	ContactPointPurposeCategoriesGetAll(params *ContactPointPurposeCategoriesGetAllParams, opts ...ClientOption) (*ContactPointPurposeCategoriesGetAllOK, error)

	ContactPointPurposeCategoriesGetSummaries(params *ContactPointPurposeCategoriesGetSummariesParams, opts ...ClientOption) (*ContactPointPurposeCategoriesGetSummariesOK, error)

	ContactPointPurposeMapsGet(params *ContactPointPurposeMapsGetParams, opts ...ClientOption) (*ContactPointPurposeMapsGetOK, error)

	ContactPointPurposeMapsGetAll(params *ContactPointPurposeMapsGetAllParams, opts ...ClientOption) (*ContactPointPurposeMapsGetAllOK, error)

	ContactPointPurposesGet(params *ContactPointPurposesGetParams, opts ...ClientOption) (*ContactPointPurposesGetOK, error)

	ContactPointPurposesGetAll(params *ContactPointPurposesGetAllParams, opts ...ClientOption) (*ContactPointPurposesGetAllOK, error)

	ContactPointPurposesGetSummaries(params *ContactPointPurposesGetSummariesParams, opts ...ClientOption) (*ContactPointPurposesGetSummariesOK, error)

	ContactPointsGetAll(params *ContactPointsGetAllParams, opts ...ClientOption) (*ContactPointsGetAllOK, error)

	ContactTypesGet(params *ContactTypesGetParams, opts ...ClientOption) (*ContactTypesGetOK, error)

	ContactTypesGetAll(params *ContactTypesGetAllParams, opts ...ClientOption) (*ContactTypesGetAllOK, error)

	ContactTypesGetSummaries(params *ContactTypesGetSummariesParams, opts ...ClientOption) (*ContactTypesGetSummariesOK, error)

	ContextInformationGet(params *ContextInformationGetParams, opts ...ClientOption) (*ContextInformationGetOK, error)

	ContributionDesignationsGet(params *ContributionDesignationsGetParams, opts ...ClientOption) (*ContributionDesignationsGetOK, error)

	ContributionDesignationsGetAll(params *ContributionDesignationsGetAllParams, opts ...ClientOption) (*ContributionDesignationsGetAllOK, error)

	ContributionDesignationsGetSummaries(params *ContributionDesignationsGetSummariesParams, opts ...ClientOption) (*ContributionDesignationsGetSummariesOK, error)

	ContributionImportSetsGet(params *ContributionImportSetsGetParams, opts ...ClientOption) (*ContributionImportSetsGetOK, error)

	ContributionImportSetsGetAll(params *ContributionImportSetsGetAllParams, opts ...ClientOption) (*ContributionImportSetsGetAllOK, error)

	ContributionImportSetsGetSummaries(params *ContributionImportSetsGetSummariesParams, opts ...ClientOption) (*ContributionImportSetsGetSummariesOK, error)

	ControlGroupUserGroupsGet(params *ControlGroupUserGroupsGetParams, opts ...ClientOption) (*ControlGroupUserGroupsGetOK, error)

	ControlGroupUserGroupsGetAll(params *ControlGroupUserGroupsGetAllParams, opts ...ClientOption) (*ControlGroupUserGroupsGetAllOK, error)

	ControlGroupUserGroupsGetSummaries(params *ControlGroupUserGroupsGetSummariesParams, opts ...ClientOption) (*ControlGroupUserGroupsGetSummariesOK, error)

	ControlGroupsGet(params *ControlGroupsGetParams, opts ...ClientOption) (*ControlGroupsGetOK, error)

	ControlGroupsGetAll(params *ControlGroupsGetAllParams, opts ...ClientOption) (*ControlGroupsGetAllOK, error)

	ControlGroupsGetSummaries(params *ControlGroupsGetSummariesParams, opts ...ClientOption) (*ControlGroupsGetSummariesOK, error)

	CoreIdentityToken(params *CoreIdentityTokenParams, opts ...ClientOption) (*CoreIdentityTokenOK, error)

	CountriesGet(params *CountriesGetParams, opts ...ClientOption) (*CountriesGetOK, error)

	CountriesGetAll(params *CountriesGetAllParams, opts ...ClientOption) (*CountriesGetAllOK, error)

	CountriesGetSummaries(params *CountriesGetSummariesParams, opts ...ClientOption) (*CountriesGetSummariesOK, error)

	CrediteeTypesGet(params *CrediteeTypesGetParams, opts ...ClientOption) (*CrediteeTypesGetOK, error)

	CrediteeTypesGetAll(params *CrediteeTypesGetAllParams, opts ...ClientOption) (*CrediteeTypesGetAllOK, error)

	CrediteeTypesGetSummaries(params *CrediteeTypesGetSummariesParams, opts ...ClientOption) (*CrediteeTypesGetSummariesOK, error)

	CreditsGetCredits(params *CreditsGetCreditsParams, opts ...ClientOption) (*CreditsGetCreditsOK, error)

	CriterionOperatorsGet(params *CriterionOperatorsGetParams, opts ...ClientOption) (*CriterionOperatorsGetOK, error)

	CriterionOperatorsGetAll(params *CriterionOperatorsGetAllParams, opts ...ClientOption) (*CriterionOperatorsGetAllOK, error)

	CriterionOperatorsGetSummaries(params *CriterionOperatorsGetSummariesParams, opts ...ClientOption) (*CriterionOperatorsGetSummariesOK, error)

	CumulativeGivingReceiptsGet(params *CumulativeGivingReceiptsGetParams, opts ...ClientOption) (*CumulativeGivingReceiptsGetOK, error)

	CumulativeGivingReceiptsGetAll(params *CumulativeGivingReceiptsGetAllParams, opts ...ClientOption) (*CumulativeGivingReceiptsGetAllOK, error)

	CumulativeGivingReceiptsGetForSession(params *CumulativeGivingReceiptsGetForSessionParams, opts ...ClientOption) (*CumulativeGivingReceiptsGetForSessionOK, error)

	CurrencyTypesGet(params *CurrencyTypesGetParams, opts ...ClientOption) (*CurrencyTypesGetOK, error)

	CurrencyTypesGetAll(params *CurrencyTypesGetAllParams, opts ...ClientOption) (*CurrencyTypesGetAllOK, error)

	CurrencyTypesGetSummaries(params *CurrencyTypesGetSummariesParams, opts ...ClientOption) (*CurrencyTypesGetSummariesOK, error)

	CustomDefaultCategoriesGet(params *CustomDefaultCategoriesGetParams, opts ...ClientOption) (*CustomDefaultCategoriesGetOK, error)

	CustomDefaultCategoriesGetAll(params *CustomDefaultCategoriesGetAllParams, opts ...ClientOption) (*CustomDefaultCategoriesGetAllOK, error)

	CustomDefaultCategoriesGetSummaries(params *CustomDefaultCategoriesGetSummariesParams, opts ...ClientOption) (*CustomDefaultCategoriesGetSummariesOK, error)

	CustomDefaultsGet(params *CustomDefaultsGetParams, opts ...ClientOption) (*CustomDefaultsGetOK, error)

	CustomDefaultsGetAll(params *CustomDefaultsGetAllParams, opts ...ClientOption) (*CustomDefaultsGetAllOK, error)

	CustomDefaultsGetSummaries(params *CustomDefaultsGetSummariesParams, opts ...ClientOption) (*CustomDefaultsGetSummariesOK, error)

	CustomGet(params *CustomGetParams, opts ...ClientOption) (*CustomGetOK, error)

	CustomGetAll(params *CustomGetAllParams, opts ...ClientOption) (*CustomGetAllOK, error)

	CustomGetMetadata(params *CustomGetMetadataParams, opts ...ClientOption) (*CustomGetMetadataOK, error)

	DeliveryMethodsGet(params *DeliveryMethodsGetParams, opts ...ClientOption) (*DeliveryMethodsGetOK, error)

	DeliveryMethodsGetAll(params *DeliveryMethodsGetAllParams, opts ...ClientOption) (*DeliveryMethodsGetAllOK, error)

	DeliveryMethodsGetSummaries(params *DeliveryMethodsGetSummariesParams, opts ...ClientOption) (*DeliveryMethodsGetSummariesOK, error)

	DesignationCodesGet(params *DesignationCodesGetParams, opts ...ClientOption) (*DesignationCodesGetOK, error)

	DesignationCodesGetAll(params *DesignationCodesGetAllParams, opts ...ClientOption) (*DesignationCodesGetAllOK, error)

	DesignationCodesGetSummaries(params *DesignationCodesGetSummariesParams, opts ...ClientOption) (*DesignationCodesGetSummariesOK, error)

	DesignsGet(params *DesignsGetParams, opts ...ClientOption) (*DesignsGetOK, error)

	DesignsGetAll(params *DesignsGetAllParams, opts ...ClientOption) (*DesignsGetAllOK, error)

	DesignsGetSummaries(params *DesignsGetSummariesParams, opts ...ClientOption) (*DesignsGetSummariesOK, error)

	DiagnosticsEncryptionKeyCheck(params *DiagnosticsEncryptionKeyCheckParams, opts ...ClientOption) (*DiagnosticsEncryptionKeyCheckOK, error)

	DiagnosticsGetAPIPluginConfiguration(params *DiagnosticsGetAPIPluginConfigurationParams, opts ...ClientOption) (*DiagnosticsGetAPIPluginConfigurationOK, error)

	DiagnosticsGetSeatServerStatus(params *DiagnosticsGetSeatServerStatusParams, opts ...ClientOption) (*DiagnosticsGetSeatServerStatusOK, error)

	DiagnosticsGetStatus(params *DiagnosticsGetStatusParams, opts ...ClientOption) (*DiagnosticsGetStatusOK, error)

	DiagnosticsGetStatusReport(params *DiagnosticsGetStatusReportParams, opts ...ClientOption) (*DiagnosticsGetStatusReportOK, error)

	DirectDebitAccountTypesGet(params *DirectDebitAccountTypesGetParams, opts ...ClientOption) (*DirectDebitAccountTypesGetOK, error)

	DirectDebitAccountTypesGetAll(params *DirectDebitAccountTypesGetAllParams, opts ...ClientOption) (*DirectDebitAccountTypesGetAllOK, error)

	DirectDebitAccountTypesGetSummaries(params *DirectDebitAccountTypesGetSummariesParams, opts ...ClientOption) (*DirectDebitAccountTypesGetSummariesOK, error)

	DiscountTypesGet(params *DiscountTypesGetParams, opts ...ClientOption) (*DiscountTypesGetOK, error)

	DiscountTypesGetAll(params *DiscountTypesGetAllParams, opts ...ClientOption) (*DiscountTypesGetAllOK, error)

	DiscountTypesGetSummaries(params *DiscountTypesGetSummariesParams, opts ...ClientOption) (*DiscountTypesGetSummariesOK, error)

	DivisionsGetAll(params *DivisionsGetAllParams, opts ...ClientOption) (*DivisionsGetAllOK, error)

	DivisionsGetForDivision(params *DivisionsGetForDivisionParams, opts ...ClientOption) (*DivisionsGetForDivisionOK, error)

	DocumentCategoriesGet(params *DocumentCategoriesGetParams, opts ...ClientOption) (*DocumentCategoriesGetOK, error)

	DocumentCategoriesGetAll(params *DocumentCategoriesGetAllParams, opts ...ClientOption) (*DocumentCategoriesGetAllOK, error)

	DocumentCategoriesGetSummaries(params *DocumentCategoriesGetSummariesParams, opts ...ClientOption) (*DocumentCategoriesGetSummariesOK, error)

	DocumentsGet(params *DocumentsGetParams, opts ...ClientOption) (*DocumentsGetOK, error)

	DocumentsGetAll(params *DocumentsGetAllParams, opts ...ClientOption) (*DocumentsGetAllOK, error)

	DocumentsGetAllSummary(params *DocumentsGetAllSummaryParams, opts ...ClientOption) (*DocumentsGetAllSummaryOK, error)

	DocumentsSettings(params *DocumentsSettingsParams, opts ...ClientOption) (*DocumentsSettingsOK, error)

	DonationLevelsGet(params *DonationLevelsGetParams, opts ...ClientOption) (*DonationLevelsGetOK, error)

	DonationLevelsGetAll(params *DonationLevelsGetAllParams, opts ...ClientOption) (*DonationLevelsGetAllOK, error)

	DonationLevelsGetSummaries(params *DonationLevelsGetSummariesParams, opts ...ClientOption) (*DonationLevelsGetSummariesOK, error)

	EMVGetAllLanes(params *EMVGetAllLanesParams, opts ...ClientOption) (*EMVGetAllLanesOK, error)

	EMVGetConnectionStatus(params *EMVGetConnectionStatusParams, opts ...ClientOption) (*EMVGetConnectionStatusOK, error)

	EMVGetConnectionStatusHistory(params *EMVGetConnectionStatusHistoryParams, opts ...ClientOption) (*EMVGetConnectionStatusHistoryOK, error)

	EMVGetIdleMessage(params *EMVGetIdleMessageParams, opts ...ClientOption) (*EMVGetIdleMessageOK, error)

	EMVGetLane(params *EMVGetLaneParams, opts ...ClientOption) (*EMVGetLaneOK, error)

	ElectronicAddressTypesGet(params *ElectronicAddressTypesGetParams, opts ...ClientOption) (*ElectronicAddressTypesGetOK, error)

	ElectronicAddressTypesGetAll(params *ElectronicAddressTypesGetAllParams, opts ...ClientOption) (*ElectronicAddressTypesGetAllOK, error)

	ElectronicAddressTypesGetSummaries(params *ElectronicAddressTypesGetSummariesParams, opts ...ClientOption) (*ElectronicAddressTypesGetSummariesOK, error)

	ElectronicAddressesGet(params *ElectronicAddressesGetParams, opts ...ClientOption) (*ElectronicAddressesGetOK, error)

	ElectronicAddressesGetAll(params *ElectronicAddressesGetAllParams, opts ...ClientOption) (*ElectronicAddressesGetAllOK, error)

	ElectronicAddressesIsAttachedToLogin(params *ElectronicAddressesIsAttachedToLoginParams, opts ...ClientOption) (*ElectronicAddressesIsAttachedToLoginOK, error)

	EmailProfilesGet(params *EmailProfilesGetParams, opts ...ClientOption) (*EmailProfilesGetOK, error)

	EmailProfilesGetAll(params *EmailProfilesGetAllParams, opts ...ClientOption) (*EmailProfilesGetAllOK, error)

	EmailProfilesGetSummaries(params *EmailProfilesGetSummariesParams, opts ...ClientOption) (*EmailProfilesGetSummariesOK, error)

	EmarketIndicatorsGet(params *EmarketIndicatorsGetParams, opts ...ClientOption) (*EmarketIndicatorsGetOK, error)

	EmarketIndicatorsGetAll(params *EmarketIndicatorsGetAllParams, opts ...ClientOption) (*EmarketIndicatorsGetAllOK, error)

	EmarketIndicatorsGetSummaries(params *EmarketIndicatorsGetSummariesParams, opts ...ClientOption) (*EmarketIndicatorsGetSummariesOK, error)

	ErasGet(params *ErasGetParams, opts ...ClientOption) (*ErasGetOK, error)

	ErasGetAll(params *ErasGetAllParams, opts ...ClientOption) (*ErasGetAllOK, error)

	ErasGetSummaries(params *ErasGetSummariesParams, opts ...ClientOption) (*ErasGetSummariesOK, error)

	EventControlGetAll(params *EventControlGetAllParams, opts ...ClientOption) (*EventControlGetAllOK, error)

	FacilitiesGet(params *FacilitiesGetParams, opts ...ClientOption) (*FacilitiesGetOK, error)

	FacilitiesGetAll(params *FacilitiesGetAllParams, opts ...ClientOption) (*FacilitiesGetAllOK, error)

	FacilitiesGetScreens(params *FacilitiesGetScreensParams, opts ...ClientOption) (*FacilitiesGetScreensOK, error)

	FacilitiesGetSummaries(params *FacilitiesGetSummariesParams, opts ...ClientOption) (*FacilitiesGetSummariesOK, error)

	FeesGet(params *FeesGetParams, opts ...ClientOption) (*FeesGetOK, error)

	FeesGetAll(params *FeesGetAllParams, opts ...ClientOption) (*FeesGetAllOK, error)

	FeesGetSummaries(params *FeesGetSummariesParams, opts ...ClientOption) (*FeesGetSummariesOK, error)

	FinanceContributionsGet(params *FinanceContributionsGetParams, opts ...ClientOption) (*FinanceContributionsGetOK, error)

	FinanceContributionsGetAll(params *FinanceContributionsGetAllParams, opts ...ClientOption) (*FinanceContributionsGetAllOK, error)

	FormatsGet(params *FormatsGetParams, opts ...ClientOption) (*FormatsGetOK, error)

	FormatsGetAll(params *FormatsGetAllParams, opts ...ClientOption) (*FormatsGetAllOK, error)

	FormatsGetSummaries(params *FormatsGetSummariesParams, opts ...ClientOption) (*FormatsGetSummariesOK, error)

	FundsGet(params *FundsGetParams, opts ...ClientOption) (*FundsGetOK, error)

	FundsGetSummaries(params *FundsGetSummariesParams, opts ...ClientOption) (*FundsGetSummariesOK, error)

	GLAccountsGet(params *GLAccountsGetParams, opts ...ClientOption) (*GLAccountsGetOK, error)

	GLAccountsGetAll(params *GLAccountsGetAllParams, opts ...ClientOption) (*GLAccountsGetAllOK, error)

	GLAccountsGetSummaries(params *GLAccountsGetSummariesParams, opts ...ClientOption) (*GLAccountsGetSummariesOK, error)

	GendersGet(params *GendersGetParams, opts ...ClientOption) (*GendersGetOK, error)

	GendersGetAll(params *GendersGetAllParams, opts ...ClientOption) (*GendersGetAllOK, error)

	GendersGetSummaries(params *GendersGetSummariesParams, opts ...ClientOption) (*GendersGetSummariesOK, error)

	GiftAidContactMethodsGet(params *GiftAidContactMethodsGetParams, opts ...ClientOption) (*GiftAidContactMethodsGetOK, error)

	GiftAidContactMethodsGetAll(params *GiftAidContactMethodsGetAllParams, opts ...ClientOption) (*GiftAidContactMethodsGetAllOK, error)

	GiftAidContactMethodsGetSummaries(params *GiftAidContactMethodsGetSummariesParams, opts ...ClientOption) (*GiftAidContactMethodsGetSummariesOK, error)

	GiftAidDeclarationsGet(params *GiftAidDeclarationsGetParams, opts ...ClientOption) (*GiftAidDeclarationsGetOK, error)

	GiftAidDeclarationsGetAll(params *GiftAidDeclarationsGetAllParams, opts ...ClientOption) (*GiftAidDeclarationsGetAllOK, error)

	GiftAidDocumentStatusesGet(params *GiftAidDocumentStatusesGetParams, opts ...ClientOption) (*GiftAidDocumentStatusesGetOK, error)

	GiftAidDocumentStatusesGetAll(params *GiftAidDocumentStatusesGetAllParams, opts ...ClientOption) (*GiftAidDocumentStatusesGetAllOK, error)

	GiftAidDocumentStatusesGetSummaries(params *GiftAidDocumentStatusesGetSummariesParams, opts ...ClientOption) (*GiftAidDocumentStatusesGetSummariesOK, error)

	GiftAidIneligibleReasonsGet(params *GiftAidIneligibleReasonsGetParams, opts ...ClientOption) (*GiftAidIneligibleReasonsGetOK, error)

	GiftAidIneligibleReasonsGetAll(params *GiftAidIneligibleReasonsGetAllParams, opts ...ClientOption) (*GiftAidIneligibleReasonsGetAllOK, error)

	GiftAidIneligibleReasonsGetSummaries(params *GiftAidIneligibleReasonsGetSummariesParams, opts ...ClientOption) (*GiftAidIneligibleReasonsGetSummariesOK, error)

	GiftAidRatesGet(params *GiftAidRatesGetParams, opts ...ClientOption) (*GiftAidRatesGetOK, error)

	GiftAidRatesGetAll(params *GiftAidRatesGetAllParams, opts ...ClientOption) (*GiftAidRatesGetAllOK, error)

	GiftAidRatesGetSummaries(params *GiftAidRatesGetSummariesParams, opts ...ClientOption) (*GiftAidRatesGetSummariesOK, error)

	GiftAidStatusesGet(params *GiftAidStatusesGetParams, opts ...ClientOption) (*GiftAidStatusesGetOK, error)

	GiftAidStatusesGetAll(params *GiftAidStatusesGetAllParams, opts ...ClientOption) (*GiftAidStatusesGetAllOK, error)

	GiftAidStatusesGetSummaries(params *GiftAidStatusesGetSummariesParams, opts ...ClientOption) (*GiftAidStatusesGetSummariesOK, error)

	GiftAidTypesGet(params *GiftAidTypesGetParams, opts ...ClientOption) (*GiftAidTypesGetOK, error)

	GiftAidTypesGetAll(params *GiftAidTypesGetAllParams, opts ...ClientOption) (*GiftAidTypesGetAllOK, error)

	GiftAidTypesGetSummaries(params *GiftAidTypesGetSummariesParams, opts ...ClientOption) (*GiftAidTypesGetSummariesOK, error)

	GiftCertificatesGet(params *GiftCertificatesGetParams, opts ...ClientOption) (*GiftCertificatesGetOK, error)

	HoldCodeCategoriesGet(params *HoldCodeCategoriesGetParams, opts ...ClientOption) (*HoldCodeCategoriesGetOK, error)

	HoldCodeCategoriesGetAll(params *HoldCodeCategoriesGetAllParams, opts ...ClientOption) (*HoldCodeCategoriesGetAllOK, error)

	HoldCodeCategoriesGetSummaries(params *HoldCodeCategoriesGetSummariesParams, opts ...ClientOption) (*HoldCodeCategoriesGetSummariesOK, error)

	HoldCodeUserGroupsGet(params *HoldCodeUserGroupsGetParams, opts ...ClientOption) (*HoldCodeUserGroupsGetOK, error)

	HoldCodeUserGroupsGetAll(params *HoldCodeUserGroupsGetAllParams, opts ...ClientOption) (*HoldCodeUserGroupsGetAllOK, error)

	HoldCodeUserGroupsGetSummaries(params *HoldCodeUserGroupsGetSummariesParams, opts ...ClientOption) (*HoldCodeUserGroupsGetSummariesOK, error)

	HoldCodeUserGroupsGetSummary(params *HoldCodeUserGroupsGetSummaryParams, opts ...ClientOption) (*HoldCodeUserGroupsGetSummaryOK, error)

	HoldCodesGet(params *HoldCodesGetParams, opts ...ClientOption) (*HoldCodesGetOK, error)

	HoldCodesGetAll(params *HoldCodesGetAllParams, opts ...ClientOption) (*HoldCodesGetAllOK, error)

	InactiveReasonsGet(params *InactiveReasonsGetParams, opts ...ClientOption) (*InactiveReasonsGetOK, error)

	InactiveReasonsGetAll(params *InactiveReasonsGetAllParams, opts ...ClientOption) (*InactiveReasonsGetAllOK, error)

	InactiveReasonsGetSummaries(params *InactiveReasonsGetSummariesParams, opts ...ClientOption) (*InactiveReasonsGetSummariesOK, error)

	IntegrationDefaultsGet(params *IntegrationDefaultsGetParams, opts ...ClientOption) (*IntegrationDefaultsGetOK, error)

	IntegrationDefaultsGetAll(params *IntegrationDefaultsGetAllParams, opts ...ClientOption) (*IntegrationDefaultsGetAllOK, error)

	IntegrationDefaultsGetSummaries(params *IntegrationDefaultsGetSummariesParams, opts ...ClientOption) (*IntegrationDefaultsGetSummariesOK, error)

	IntegrationsGet(params *IntegrationsGetParams, opts ...ClientOption) (*IntegrationsGetOK, error)

	IntegrationsGetAll(params *IntegrationsGetAllParams, opts ...ClientOption) (*IntegrationsGetAllOK, error)

	IntegrationsGetSummaries(params *IntegrationsGetSummariesParams, opts ...ClientOption) (*IntegrationsGetSummariesOK, error)

	InterestCategoriesGet(params *InterestCategoriesGetParams, opts ...ClientOption) (*InterestCategoriesGetOK, error)

	InterestCategoriesGetAll(params *InterestCategoriesGetAllParams, opts ...ClientOption) (*InterestCategoriesGetAllOK, error)

	InterestCategoriesGetSummaries(params *InterestCategoriesGetSummariesParams, opts ...ClientOption) (*InterestCategoriesGetSummariesOK, error)

	InterestTypesGet(params *InterestTypesGetParams, opts ...ClientOption) (*InterestTypesGetOK, error)

	InterestTypesGetAll(params *InterestTypesGetAllParams, opts ...ClientOption) (*InterestTypesGetAllOK, error)

	InterestTypesGetSummaries(params *InterestTypesGetSummariesParams, opts ...ClientOption) (*InterestTypesGetSummariesOK, error)

	InterestsGet(params *InterestsGetParams, opts ...ClientOption) (*InterestsGetOK, error)

	InterestsGetAll(params *InterestsGetAllParams, opts ...ClientOption) (*InterestsGetAllOK, error)

	InternalGet(params *InternalGetParams, opts ...ClientOption) (*InternalGetOK, error)

	InternalGetAll(params *InternalGetAllParams, opts ...ClientOption) (*InternalGetAllOK, error)

	InternalGetConstituentMiniSnapshot(params *InternalGetConstituentMiniSnapshotParams, opts ...ClientOption) (*InternalGetConstituentMiniSnapshotOK, error)

	InventoryContactPermissionTypesGet(params *InventoryContactPermissionTypesGetParams, opts ...ClientOption) (*InventoryContactPermissionTypesGetOK, error)

	InventoryContactPermissionTypesGetAll(params *InventoryContactPermissionTypesGetAllParams, opts ...ClientOption) (*InventoryContactPermissionTypesGetAllOK, error)

	InventoryWebContentsGet(params *InventoryWebContentsGetParams, opts ...ClientOption) (*InventoryWebContentsGetOK, error)

	InventoryWebContentsGetAll(params *InventoryWebContentsGetAllParams, opts ...ClientOption) (*InventoryWebContentsGetAllOK, error)

	InventoryWebContentsGetAllSummaries(params *InventoryWebContentsGetAllSummariesParams, opts ...ClientOption) (*InventoryWebContentsGetAllSummariesOK, error)

	InvoiceBillingStatus(params *InvoiceBillingStatusParams, opts ...ClientOption) (*InvoiceBillingStatusOK, error)

	IssuesGet(params *IssuesGetParams, opts ...ClientOption) (*IssuesGetOK, error)

	IssuesGetAll(params *IssuesGetAllParams, opts ...ClientOption) (*IssuesGetAllOK, error)

	KeywordCategoriesGet(params *KeywordCategoriesGetParams, opts ...ClientOption) (*KeywordCategoriesGetOK, error)

	KeywordCategoriesGetAll(params *KeywordCategoriesGetAllParams, opts ...ClientOption) (*KeywordCategoriesGetAllOK, error)

	KeywordCategoriesGetSummaries(params *KeywordCategoriesGetSummariesParams, opts ...ClientOption) (*KeywordCategoriesGetSummariesOK, error)

	KeywordsGet(params *KeywordsGetParams, opts ...ClientOption) (*KeywordsGetOK, error)

	KeywordsGetAll(params *KeywordsGetAllParams, opts ...ClientOption) (*KeywordsGetAllOK, error)

	KeywordsGetDataFor(params *KeywordsGetDataForParams, opts ...ClientOption) (*KeywordsGetDataForOK, error)

	KeywordsGetSummaries(params *KeywordsGetSummariesParams, opts ...ClientOption) (*KeywordsGetSummariesOK, error)

	LanguagesGet(params *LanguagesGetParams, opts ...ClientOption) (*LanguagesGetOK, error)

	LanguagesGetAll(params *LanguagesGetAllParams, opts ...ClientOption) (*LanguagesGetAllOK, error)

	LanguagesGetSummaries(params *LanguagesGetSummariesParams, opts ...ClientOption) (*LanguagesGetSummariesOK, error)

	ListCategoriesGet(params *ListCategoriesGetParams, opts ...ClientOption) (*ListCategoriesGetOK, error)

	ListCategoriesGetAll(params *ListCategoriesGetAllParams, opts ...ClientOption) (*ListCategoriesGetAllOK, error)

	ListCategoriesGetSummaries(params *ListCategoriesGetSummariesParams, opts ...ClientOption) (*ListCategoriesGetSummariesOK, error)

	ListsGet(params *ListsGetParams, opts ...ClientOption) (*ListsGetOK, error)

	ListsGetContents(params *ListsGetContentsParams, opts ...ClientOption) (*ListsGetContentsOK, error)

	ListsGetContentsDetail(params *ListsGetContentsDetailParams, opts ...ClientOption) (*ListsGetContentsDetailOK, error)

	ListsGetListCriterionMatchReasons(params *ListsGetListCriterionMatchReasonsParams, opts ...ClientOption) (*ListsGetListCriterionMatchReasonsOK, error)

	ListsGetSummaries(params *ListsGetSummariesParams, opts ...ClientOption) (*ListsGetSummariesOK, error)

	LoginTypesGet(params *LoginTypesGetParams, opts ...ClientOption) (*LoginTypesGetOK, error)

	LoginTypesGetAll(params *LoginTypesGetAllParams, opts ...ClientOption) (*LoginTypesGetAllOK, error)

	LoginTypesGetSummaries(params *LoginTypesGetSummariesParams, opts ...ClientOption) (*LoginTypesGetSummariesOK, error)

	MachineSettingsGet(params *MachineSettingsGetParams, opts ...ClientOption) (*MachineSettingsGetOK, error)

	MachineSettingsGetAll(params *MachineSettingsGetAllParams, opts ...ClientOption) (*MachineSettingsGetAllOK, error)

	MachineSettingsGetSummaries(params *MachineSettingsGetSummariesParams, opts ...ClientOption) (*MachineSettingsGetSummariesOK, error)

	MailIndicatorsGet(params *MailIndicatorsGetParams, opts ...ClientOption) (*MailIndicatorsGetOK, error)

	MailIndicatorsGetAll(params *MailIndicatorsGetAllParams, opts ...ClientOption) (*MailIndicatorsGetAllOK, error)

	MailIndicatorsGetSummaries(params *MailIndicatorsGetSummariesParams, opts ...ClientOption) (*MailIndicatorsGetSummariesOK, error)

	MediaTypesGet(params *MediaTypesGetParams, opts ...ClientOption) (*MediaTypesGetOK, error)

	MediaTypesGetAll(params *MediaTypesGetAllParams, opts ...ClientOption) (*MediaTypesGetAllOK, error)

	MediaTypesGetSummaries(params *MediaTypesGetSummariesParams, opts ...ClientOption) (*MediaTypesGetSummariesOK, error)

	MembershipLevelCategoriesGet(params *MembershipLevelCategoriesGetParams, opts ...ClientOption) (*MembershipLevelCategoriesGetOK, error)

	MembershipLevelCategoriesGetAll(params *MembershipLevelCategoriesGetAllParams, opts ...ClientOption) (*MembershipLevelCategoriesGetAllOK, error)

	MembershipLevelCategoriesGetSummaries(params *MembershipLevelCategoriesGetSummariesParams, opts ...ClientOption) (*MembershipLevelCategoriesGetSummariesOK, error)

	MembershipLevelsGet(params *MembershipLevelsGetParams, opts ...ClientOption) (*MembershipLevelsGetOK, error)

	MembershipLevelsGetAll(params *MembershipLevelsGetAllParams, opts ...ClientOption) (*MembershipLevelsGetAllOK, error)

	MembershipLevelsGetSummaries(params *MembershipLevelsGetSummariesParams, opts ...ClientOption) (*MembershipLevelsGetSummariesOK, error)

	MembershipOrganizationsGet(params *MembershipOrganizationsGetParams, opts ...ClientOption) (*MembershipOrganizationsGetOK, error)

	MembershipOrganizationsGetAll(params *MembershipOrganizationsGetAllParams, opts ...ClientOption) (*MembershipOrganizationsGetAllOK, error)

	MembershipOrganizationsGetSummaries(params *MembershipOrganizationsGetSummariesParams, opts ...ClientOption) (*MembershipOrganizationsGetSummariesOK, error)

	MembershipStandingsGet(params *MembershipStandingsGetParams, opts ...ClientOption) (*MembershipStandingsGetOK, error)

	MembershipStandingsGetAll(params *MembershipStandingsGetAllParams, opts ...ClientOption) (*MembershipStandingsGetAllOK, error)

	MembershipStandingsGetSummaries(params *MembershipStandingsGetSummariesParams, opts ...ClientOption) (*MembershipStandingsGetSummariesOK, error)

	MembershipsGetAll(params *MembershipsGetAllParams, opts ...ClientOption) (*MembershipsGetAllOK, error)

	MerchantReferencesReference(params *MerchantReferencesReferenceParams, opts ...ClientOption) (*MerchantReferencesReferenceOK, error)

	MerchantsGetMerchants(params *MerchantsGetMerchantsParams, opts ...ClientOption) (*MerchantsGetMerchantsOK, error)

	ModeOfSaleCategoriesGet(params *ModeOfSaleCategoriesGetParams, opts ...ClientOption) (*ModeOfSaleCategoriesGetOK, error)

	ModeOfSaleCategoriesGetAll(params *ModeOfSaleCategoriesGetAllParams, opts ...ClientOption) (*ModeOfSaleCategoriesGetAllOK, error)

	ModeOfSaleOffersGet(params *ModeOfSaleOffersGetParams, opts ...ClientOption) (*ModeOfSaleOffersGetOK, error)

	ModeOfSaleOffersGetAll(params *ModeOfSaleOffersGetAllParams, opts ...ClientOption) (*ModeOfSaleOffersGetAllOK, error)

	ModeOfSalePriceTypesGet(params *ModeOfSalePriceTypesGetParams, opts ...ClientOption) (*ModeOfSalePriceTypesGetOK, error)

	ModeOfSalePriceTypesGetAll(params *ModeOfSalePriceTypesGetAllParams, opts ...ClientOption) (*ModeOfSalePriceTypesGetAllOK, error)

	ModeOfSaleSurveyQuestionsGet(params *ModeOfSaleSurveyQuestionsGetParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsGetOK, error)

	ModeOfSaleSurveyQuestionsGetAll(params *ModeOfSaleSurveyQuestionsGetAllParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsGetAllOK, error)

	ModeOfSaleUserGroupsGet(params *ModeOfSaleUserGroupsGetParams, opts ...ClientOption) (*ModeOfSaleUserGroupsGetOK, error)

	ModeOfSaleUserGroupsGetAll(params *ModeOfSaleUserGroupsGetAllParams, opts ...ClientOption) (*ModeOfSaleUserGroupsGetAllOK, error)

	ModesOfSaleGet(params *ModesOfSaleGetParams, opts ...ClientOption) (*ModesOfSaleGetOK, error)

	ModesOfSaleGetAll(params *ModesOfSaleGetAllParams, opts ...ClientOption) (*ModesOfSaleGetAllOK, error)

	ModesOfSaleGetSummaries(params *ModesOfSaleGetSummariesParams, opts ...ClientOption) (*ModesOfSaleGetSummariesOK, error)

	NScanAccessAreasGet(params *NScanAccessAreasGetParams, opts ...ClientOption) (*NScanAccessAreasGetOK, error)

	NScanAccessAreasGetAll(params *NScanAccessAreasGetAllParams, opts ...ClientOption) (*NScanAccessAreasGetAllOK, error)

	NScanAccessAreasGetSummaries(params *NScanAccessAreasGetSummariesParams, opts ...ClientOption) (*NScanAccessAreasGetSummariesOK, error)

	NameStatusesGet(params *NameStatusesGetParams, opts ...ClientOption) (*NameStatusesGetOK, error)

	NameStatusesGetAll(params *NameStatusesGetAllParams, opts ...ClientOption) (*NameStatusesGetAllOK, error)

	NameStatusesGetSummaries(params *NameStatusesGetSummariesParams, opts ...ClientOption) (*NameStatusesGetSummariesOK, error)

	ObjectPermissionsGet(params *ObjectPermissionsGetParams, opts ...ClientOption) (*ObjectPermissionsGetOK, error)

	ObjectPermissionsGetAll(params *ObjectPermissionsGetAllParams, opts ...ClientOption) (*ObjectPermissionsGetAllOK, error)

	ObjectPermissionsGetSummaries(params *ObjectPermissionsGetSummariesParams, opts ...ClientOption) (*ObjectPermissionsGetSummariesOK, error)

	OrderBillingReprint(params *OrderBillingReprintParams, opts ...ClientOption) (*OrderBillingReprintOK, error)

	OrderBillingStatus(params *OrderBillingStatusParams, opts ...ClientOption) (*OrderBillingStatusOK, error)

	OrderCategoriesGet(params *OrderCategoriesGetParams, opts ...ClientOption) (*OrderCategoriesGetOK, error)

	OrderCategoriesGetAll(params *OrderCategoriesGetAllParams, opts ...ClientOption) (*OrderCategoriesGetAllOK, error)

	OrderCategoriesGetSummaries(params *OrderCategoriesGetSummariesParams, opts ...ClientOption) (*OrderCategoriesGetSummariesOK, error)

	OrdersGetProductsView(params *OrdersGetProductsViewParams, opts ...ClientOption) (*OrdersGetProductsViewOK, error)

	OrganizationsGet(params *OrganizationsGetParams, opts ...ClientOption) (*OrganizationsGetOK, error)

	OrganizationsGetAll(params *OrganizationsGetAllParams, opts ...ClientOption) (*OrganizationsGetAllOK, error)

	OrganizationsGetSummaries(params *OrganizationsGetSummariesParams, opts ...ClientOption) (*OrganizationsGetSummariesOK, error)

	OriginalSourcesGet(params *OriginalSourcesGetParams, opts ...ClientOption) (*OriginalSourcesGetOK, error)

	OriginalSourcesGetAll(params *OriginalSourcesGetAllParams, opts ...ClientOption) (*OriginalSourcesGetAllOK, error)

	OriginalSourcesGetSummaries(params *OriginalSourcesGetSummariesParams, opts ...ClientOption) (*OriginalSourcesGetSummariesOK, error)

	OriginsGet(params *OriginsGetParams, opts ...ClientOption) (*OriginsGetOK, error)

	OriginsGetAll(params *OriginsGetAllParams, opts ...ClientOption) (*OriginsGetAllOK, error)

	OriginsGetSummaries(params *OriginsGetSummariesParams, opts ...ClientOption) (*OriginsGetSummariesOK, error)

	OutputSetsGet(params *OutputSetsGetParams, opts ...ClientOption) (*OutputSetsGetOK, error)

	OutputSetsGetSummaries(params *OutputSetsGetSummariesParams, opts ...ClientOption) (*OutputSetsGetSummariesOK, error)

	PackageHistoryGetAll(params *PackageHistoryGetAllParams, opts ...ClientOption) (*PackageHistoryGetAllOK, error)

	PackagePriceTypesGet(params *PackagePriceTypesGetParams, opts ...ClientOption) (*PackagePriceTypesGetOK, error)

	PackagePriceTypesGetAll(params *PackagePriceTypesGetAllParams, opts ...ClientOption) (*PackagePriceTypesGetAllOK, error)

	PackageTypesGet(params *PackageTypesGetParams, opts ...ClientOption) (*PackageTypesGetOK, error)

	PackageTypesGetAll(params *PackageTypesGetAllParams, opts ...ClientOption) (*PackageTypesGetAllOK, error)

	PackageTypesGetSummaries(params *PackageTypesGetSummariesParams, opts ...ClientOption) (*PackageTypesGetSummariesOK, error)

	PackageWebContentsGet(params *PackageWebContentsGetParams, opts ...ClientOption) (*PackageWebContentsGetOK, error)

	PackageWebContentsGetAll(params *PackageWebContentsGetAllParams, opts ...ClientOption) (*PackageWebContentsGetAllOK, error)

	PackageWebContentsGetAllSummaries(params *PackageWebContentsGetAllSummariesParams, opts ...ClientOption) (*PackageWebContentsGetAllSummariesOK, error)

	PackagesGet(params *PackagesGetParams, opts ...ClientOption) (*PackagesGetOK, error)

	PackagesGetAll(params *PackagesGetAllParams, opts ...ClientOption) (*PackagesGetAllOK, error)

	PackagesGetPackageDetail(params *PackagesGetPackageDetailParams, opts ...ClientOption) (*PackagesGetPackageDetailOK, error)

	PackagesGetPerformanceGroupDetails(params *PackagesGetPerformanceGroupDetailsParams, opts ...ClientOption) (*PackagesGetPerformanceGroupDetailsOK, error)

	PackagesGetPrices(params *PackagesGetPricesParams, opts ...ClientOption) (*PackagesGetPricesOK, error)

	PackagesGetSeatFees(params *PackagesGetSeatFeesParams, opts ...ClientOption) (*PackagesGetSeatFeesOK, error)

	PackagesGetSeatSummaries(params *PackagesGetSeatSummariesParams, opts ...ClientOption) (*PackagesGetSeatSummariesOK, error)

	PackagesGetSeats(params *PackagesGetSeatsParams, opts ...ClientOption) (*PackagesGetSeatsOK, error)

	PackagesGetSummaries(params *PackagesGetSummariesParams, opts ...ClientOption) (*PackagesGetSummariesOK, error)

	PaymentGatewayActivitiesGet(params *PaymentGatewayActivitiesGetParams, opts ...ClientOption) (*PaymentGatewayActivitiesGetOK, error)

	PaymentGatewayActivitiesGetAll(params *PaymentGatewayActivitiesGetAllParams, opts ...ClientOption) (*PaymentGatewayActivitiesGetAllOK, error)

	PaymentGatewayConfigurationGetConfiguration(params *PaymentGatewayConfigurationGetConfigurationParams, opts ...ClientOption) (*PaymentGatewayConfigurationGetConfigurationOK, error)

	PaymentGatewayNotificationsCheck(params *PaymentGatewayNotificationsCheckParams, opts ...ClientOption) (*PaymentGatewayNotificationsCheckOK, error)

	PaymentGatewayNotificationsGetAllNotificationEvents(params *PaymentGatewayNotificationsGetAllNotificationEventsParams, opts ...ClientOption) (*PaymentGatewayNotificationsGetAllNotificationEventsOK, error)

	PaymentGatewayNotificationsGetNotification(params *PaymentGatewayNotificationsGetNotificationParams, opts ...ClientOption) (*PaymentGatewayNotificationsGetNotificationOK, error)

	PaymentGatewayNotificationsGetNotificationEvent(params *PaymentGatewayNotificationsGetNotificationEventParams, opts ...ClientOption) (*PaymentGatewayNotificationsGetNotificationEventOK, error)

	PaymentGatewayTransactionTypesGet(params *PaymentGatewayTransactionTypesGetParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesGetOK, error)

	PaymentGatewayTransactionTypesGetAll(params *PaymentGatewayTransactionTypesGetAllParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesGetAllOK, error)

	PaymentGatewayTransactionTypesGetSummaries(params *PaymentGatewayTransactionTypesGetSummariesParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesGetSummariesOK, error)

	PaymentHistoryGetAll(params *PaymentHistoryGetAllParams, opts ...ClientOption) (*PaymentHistoryGetAllOK, error)

	PaymentMethodGroupsGet(params *PaymentMethodGroupsGetParams, opts ...ClientOption) (*PaymentMethodGroupsGetOK, error)

	PaymentMethodGroupsGetAll(params *PaymentMethodGroupsGetAllParams, opts ...ClientOption) (*PaymentMethodGroupsGetAllOK, error)

	PaymentMethodGroupsGetSummaries(params *PaymentMethodGroupsGetSummariesParams, opts ...ClientOption) (*PaymentMethodGroupsGetSummariesOK, error)

	PaymentMethodUserGroupsGet(params *PaymentMethodUserGroupsGetParams, opts ...ClientOption) (*PaymentMethodUserGroupsGetOK, error)

	PaymentMethodUserGroupsGetAll(params *PaymentMethodUserGroupsGetAllParams, opts ...ClientOption) (*PaymentMethodUserGroupsGetAllOK, error)

	PaymentMethodsCheck(params *PaymentMethodsCheckParams, opts ...ClientOption) (*PaymentMethodsCheckOK, error)

	PaymentMethodsGet(params *PaymentMethodsGetParams, opts ...ClientOption) (*PaymentMethodsGetOK, error)

	PaymentMethodsGetAll(params *PaymentMethodsGetAllParams, opts ...ClientOption) (*PaymentMethodsGetAllOK, error)

	PaymentMethodsTranslateMnemonic(params *PaymentMethodsTranslateMnemonicParams, opts ...ClientOption) (*PaymentMethodsTranslateMnemonicOK, error)

	PaymentSignaturesGet(params *PaymentSignaturesGetParams, opts ...ClientOption) (*PaymentSignaturesGetOK, error)

	PaymentSignaturesGetAll(params *PaymentSignaturesGetAllParams, opts ...ClientOption) (*PaymentSignaturesGetAllOK, error)

	PaymentTypesGet(params *PaymentTypesGetParams, opts ...ClientOption) (*PaymentTypesGetOK, error)

	PaymentTypesGetAll(params *PaymentTypesGetAllParams, opts ...ClientOption) (*PaymentTypesGetAllOK, error)

	PaymentTypesGetSummaries(params *PaymentTypesGetSummariesParams, opts ...ClientOption) (*PaymentTypesGetSummariesOK, error)

	PaymentsAvailableForRefund(params *PaymentsAvailableForRefundParams, opts ...ClientOption) (*PaymentsAvailableForRefundOK, error)

	PaymentsGet(params *PaymentsGetParams, opts ...ClientOption) (*PaymentsGetOK, error)

	PaymentsGetAll(params *PaymentsGetAllParams, opts ...ClientOption) (*PaymentsGetAllOK, error)

	PaymentsGetOnAccountBalances(params *PaymentsGetOnAccountBalancesParams, opts ...ClientOption) (*PaymentsGetOnAccountBalancesOK, error)

	PerformanceGroupsGet(params *PerformanceGroupsGetParams, opts ...ClientOption) (*PerformanceGroupsGetOK, error)

	PerformanceGroupsGetAll(params *PerformanceGroupsGetAllParams, opts ...ClientOption) (*PerformanceGroupsGetAllOK, error)

	PerformanceGroupsGetSummaries(params *PerformanceGroupsGetSummariesParams, opts ...ClientOption) (*PerformanceGroupsGetSummariesOK, error)

	PerformancePackageModeOfSalesGet(params *PerformancePackageModeOfSalesGetParams, opts ...ClientOption) (*PerformancePackageModeOfSalesGetOK, error)

	PerformancePackageModeOfSalesGetAll(params *PerformancePackageModeOfSalesGetAllParams, opts ...ClientOption) (*PerformancePackageModeOfSalesGetAllOK, error)

	PerformancePriceLayersGet(params *PerformancePriceLayersGetParams, opts ...ClientOption) (*PerformancePriceLayersGetOK, error)

	PerformancePriceLayersGetCounts(params *PerformancePriceLayersGetCountsParams, opts ...ClientOption) (*PerformancePriceLayersGetCountsOK, error)

	PerformancePriceLayersGetPriceCount(params *PerformancePriceLayersGetPriceCountParams, opts ...ClientOption) (*PerformancePriceLayersGetPriceCountOK, error)

	PerformancePriceTypesGet(params *PerformancePriceTypesGetParams, opts ...ClientOption) (*PerformancePriceTypesGetOK, error)

	PerformancePriceTypesGetAll(params *PerformancePriceTypesGetAllParams, opts ...ClientOption) (*PerformancePriceTypesGetAllOK, error)

	PerformancePricesGet(params *PerformancePricesGetParams, opts ...ClientOption) (*PerformancePricesGetOK, error)

	PerformancePricesGetAll(params *PerformancePricesGetAllParams, opts ...ClientOption) (*PerformancePricesGetAllOK, error)

	PerformancePricesGetAllWithEvents(params *PerformancePricesGetAllWithEventsParams, opts ...ClientOption) (*PerformancePricesGetAllWithEventsOK, error)

	PerformancePricesGetAudit(params *PerformancePricesGetAuditParams, opts ...ClientOption) (*PerformancePricesGetAuditOK, error)

	PerformanceStatusesGet(params *PerformanceStatusesGetParams, opts ...ClientOption) (*PerformanceStatusesGetOK, error)

	PerformanceStatusesGetAll(params *PerformanceStatusesGetAllParams, opts ...ClientOption) (*PerformanceStatusesGetAllOK, error)

	PerformanceStatusesGetSummaries(params *PerformanceStatusesGetSummariesParams, opts ...ClientOption) (*PerformanceStatusesGetSummariesOK, error)

	PerformanceTypesGet(params *PerformanceTypesGetParams, opts ...ClientOption) (*PerformanceTypesGetOK, error)

	PerformanceTypesGetAll(params *PerformanceTypesGetAllParams, opts ...ClientOption) (*PerformanceTypesGetAllOK, error)

	PerformanceTypesGetSummaries(params *PerformanceTypesGetSummariesParams, opts ...ClientOption) (*PerformanceTypesGetSummariesOK, error)

	PerformancesGet(params *PerformancesGetParams, opts ...ClientOption) (*PerformancesGetOK, error)

	PerformancesGetAll(params *PerformancesGetAllParams, opts ...ClientOption) (*PerformancesGetAllOK, error)

	PerformancesGetAuditEntries(params *PerformancesGetAuditEntriesParams, opts ...ClientOption) (*PerformancesGetAuditEntriesOK, error)

	PerformancesGetPerformanceZoneAvailabilities(params *PerformancesGetPerformanceZoneAvailabilitiesParams, opts ...ClientOption) (*PerformancesGetPerformanceZoneAvailabilitiesOK, error)

	PerformancesGetPerformanceZoneAvailabilityWithConstituent(params *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams, opts ...ClientOption) (*PerformancesGetPerformanceZoneAvailabilityWithConstituentOK, error)

	PerformancesGetPrices(params *PerformancesGetPricesParams, opts ...ClientOption) (*PerformancesGetPricesOK, error)

	PerformancesGetSeatFees(params *PerformancesGetSeatFeesParams, opts ...ClientOption) (*PerformancesGetSeatFeesOK, error)

	PerformancesGetSeatHoldDetails(params *PerformancesGetSeatHoldDetailsParams, opts ...ClientOption) (*PerformancesGetSeatHoldDetailsOK, error)

	PerformancesGetSeatSummaries(params *PerformancesGetSeatSummariesParams, opts ...ClientOption) (*PerformancesGetSeatSummariesOK, error)

	PerformancesGetSeats(params *PerformancesGetSeatsParams, opts ...ClientOption) (*PerformancesGetSeatsOK, error)

	PerformancesGetSummaries(params *PerformancesGetSummariesParams, opts ...ClientOption) (*PerformancesGetSummariesOK, error)

	PhilanthropyTypesGet(params *PhilanthropyTypesGetParams, opts ...ClientOption) (*PhilanthropyTypesGetOK, error)

	PhilanthropyTypesGetAll(params *PhilanthropyTypesGetAllParams, opts ...ClientOption) (*PhilanthropyTypesGetAllOK, error)

	PhilanthropyTypesGetSummaries(params *PhilanthropyTypesGetSummariesParams, opts ...ClientOption) (*PhilanthropyTypesGetSummariesOK, error)

	PhilanthropyGet(params *PhilanthropyGetParams, opts ...ClientOption) (*PhilanthropyGetOK, error)

	PhilanthropyGetAll(params *PhilanthropyGetAllParams, opts ...ClientOption) (*PhilanthropyGetAllOK, error)

	PhoneIndicatorsGet(params *PhoneIndicatorsGetParams, opts ...ClientOption) (*PhoneIndicatorsGetOK, error)

	PhoneIndicatorsGetAll(params *PhoneIndicatorsGetAllParams, opts ...ClientOption) (*PhoneIndicatorsGetAllOK, error)

	PhoneIndicatorsGetSummaries(params *PhoneIndicatorsGetSummariesParams, opts ...ClientOption) (*PhoneIndicatorsGetSummariesOK, error)

	PhoneTypesGet(params *PhoneTypesGetParams, opts ...ClientOption) (*PhoneTypesGetOK, error)

	PhoneTypesGetAll(params *PhoneTypesGetAllParams, opts ...ClientOption) (*PhoneTypesGetAllOK, error)

	PhoneTypesGetSummaries(params *PhoneTypesGetSummariesParams, opts ...ClientOption) (*PhoneTypesGetSummariesOK, error)

	PhonesGet(params *PhonesGetParams, opts ...ClientOption) (*PhonesGetOK, error)

	PhonesGetAll(params *PhonesGetAllParams, opts ...ClientOption) (*PhonesGetAllOK, error)

	PlanPrioritiesGet(params *PlanPrioritiesGetParams, opts ...ClientOption) (*PlanPrioritiesGetOK, error)

	PlanPrioritiesGetAll(params *PlanPrioritiesGetAllParams, opts ...ClientOption) (*PlanPrioritiesGetAllOK, error)

	PlanPrioritiesGetSummaries(params *PlanPrioritiesGetSummariesParams, opts ...ClientOption) (*PlanPrioritiesGetSummariesOK, error)

	PlanSourcesGet(params *PlanSourcesGetParams, opts ...ClientOption) (*PlanSourcesGetOK, error)

	PlanSourcesGetAll(params *PlanSourcesGetAllParams, opts ...ClientOption) (*PlanSourcesGetAllOK, error)

	PlanSourcesGetSummaries(params *PlanSourcesGetSummariesParams, opts ...ClientOption) (*PlanSourcesGetSummariesOK, error)

	PlanStatusesGet(params *PlanStatusesGetParams, opts ...ClientOption) (*PlanStatusesGetOK, error)

	PlanStatusesGetAll(params *PlanStatusesGetAllParams, opts ...ClientOption) (*PlanStatusesGetAllOK, error)

	PlanStatusesGetSummaries(params *PlanStatusesGetSummariesParams, opts ...ClientOption) (*PlanStatusesGetSummariesOK, error)

	PlanTypesGet(params *PlanTypesGetParams, opts ...ClientOption) (*PlanTypesGetOK, error)

	PlanTypesGetAll(params *PlanTypesGetAllParams, opts ...ClientOption) (*PlanTypesGetAllOK, error)

	PlanTypesGetSummaries(params *PlanTypesGetSummariesParams, opts ...ClientOption) (*PlanTypesGetSummariesOK, error)

	PlanWorkersGet(params *PlanWorkersGetParams, opts ...ClientOption) (*PlanWorkersGetOK, error)

	PlanWorkersGetAll(params *PlanWorkersGetAllParams, opts ...ClientOption) (*PlanWorkersGetAllOK, error)

	PlansGet(params *PlansGetParams, opts ...ClientOption) (*PlansGetOK, error)

	PlansGetAll(params *PlansGetAllParams, opts ...ClientOption) (*PlansGetAllOK, error)

	PledgeBillingGetStatus(params *PledgeBillingGetStatusParams, opts ...ClientOption) (*PledgeBillingGetStatusOK, error)

	PortfolioCustomElementsGet(params *PortfolioCustomElementsGetParams, opts ...ClientOption) (*PortfolioCustomElementsGetOK, error)

	PortfolioCustomElementsGetAll(params *PortfolioCustomElementsGetAllParams, opts ...ClientOption) (*PortfolioCustomElementsGetAllOK, error)

	PortfolioCustomElementsGetSummaries(params *PortfolioCustomElementsGetSummariesParams, opts ...ClientOption) (*PortfolioCustomElementsGetSummariesOK, error)

	PortfoliosGet(params *PortfoliosGetParams, opts ...ClientOption) (*PortfoliosGetOK, error)

	PortfoliosGetPortfolioEntry(params *PortfoliosGetPortfolioEntryParams, opts ...ClientOption) (*PortfoliosGetPortfolioEntryOK, error)

	PrefixesGet(params *PrefixesGetParams, opts ...ClientOption) (*PrefixesGetOK, error)

	PrefixesGetAll(params *PrefixesGetAllParams, opts ...ClientOption) (*PrefixesGetAllOK, error)

	PrefixesGetSummaries(params *PrefixesGetSummariesParams, opts ...ClientOption) (*PrefixesGetSummariesOK, error)

	PremieresGet(params *PremieresGetParams, opts ...ClientOption) (*PremieresGetOK, error)

	PremieresGetAll(params *PremieresGetAllParams, opts ...ClientOption) (*PremieresGetAllOK, error)

	PremieresGetSummaries(params *PremieresGetSummariesParams, opts ...ClientOption) (*PremieresGetSummariesOK, error)

	PriceCategoriesGet(params *PriceCategoriesGetParams, opts ...ClientOption) (*PriceCategoriesGetOK, error)

	PriceCategoriesGetAll(params *PriceCategoriesGetAllParams, opts ...ClientOption) (*PriceCategoriesGetAllOK, error)

	PriceCategoriesGetSummaries(params *PriceCategoriesGetSummariesParams, opts ...ClientOption) (*PriceCategoriesGetSummariesOK, error)

	PriceEventsGet(params *PriceEventsGetParams, opts ...ClientOption) (*PriceEventsGetOK, error)

	PriceEventsGetAll(params *PriceEventsGetAllParams, opts ...ClientOption) (*PriceEventsGetAllOK, error)

	PriceEventsGetDates(params *PriceEventsGetDatesParams, opts ...ClientOption) (*PriceEventsGetDatesOK, error)

	PriceLayerTypesGet(params *PriceLayerTypesGetParams, opts ...ClientOption) (*PriceLayerTypesGetOK, error)

	PriceLayerTypesGetAll(params *PriceLayerTypesGetAllParams, opts ...ClientOption) (*PriceLayerTypesGetAllOK, error)

	PriceLayerTypesGetSummaries(params *PriceLayerTypesGetSummariesParams, opts ...ClientOption) (*PriceLayerTypesGetSummariesOK, error)

	PriceTemplatesGet(params *PriceTemplatesGetParams, opts ...ClientOption) (*PriceTemplatesGetOK, error)

	PriceTemplatesGetAll(params *PriceTemplatesGetAllParams, opts ...ClientOption) (*PriceTemplatesGetAllOK, error)

	PriceTemplatesGetSummaries(params *PriceTemplatesGetSummariesParams, opts ...ClientOption) (*PriceTemplatesGetSummariesOK, error)

	PriceTypeCategoriesGet(params *PriceTypeCategoriesGetParams, opts ...ClientOption) (*PriceTypeCategoriesGetOK, error)

	PriceTypeCategoriesGetAll(params *PriceTypeCategoriesGetAllParams, opts ...ClientOption) (*PriceTypeCategoriesGetAllOK, error)

	PriceTypeCategoriesGetSummaries(params *PriceTypeCategoriesGetSummariesParams, opts ...ClientOption) (*PriceTypeCategoriesGetSummariesOK, error)

	PriceTypeGroupsGet(params *PriceTypeGroupsGetParams, opts ...ClientOption) (*PriceTypeGroupsGetOK, error)

	PriceTypeGroupsGetAll(params *PriceTypeGroupsGetAllParams, opts ...ClientOption) (*PriceTypeGroupsGetAllOK, error)

	PriceTypeGroupsGetSummaries(params *PriceTypeGroupsGetSummariesParams, opts ...ClientOption) (*PriceTypeGroupsGetSummariesOK, error)

	PriceTypeReasonsGet(params *PriceTypeReasonsGetParams, opts ...ClientOption) (*PriceTypeReasonsGetOK, error)

	PriceTypeReasonsGetAll(params *PriceTypeReasonsGetAllParams, opts ...ClientOption) (*PriceTypeReasonsGetAllOK, error)

	PriceTypeReasonsGetSummaries(params *PriceTypeReasonsGetSummariesParams, opts ...ClientOption) (*PriceTypeReasonsGetSummariesOK, error)

	PriceTypeUserGroupsGet(params *PriceTypeUserGroupsGetParams, opts ...ClientOption) (*PriceTypeUserGroupsGetOK, error)

	PriceTypeUserGroupsGetAll(params *PriceTypeUserGroupsGetAllParams, opts ...ClientOption) (*PriceTypeUserGroupsGetAllOK, error)

	PriceTypesGet(params *PriceTypesGetParams, opts ...ClientOption) (*PriceTypesGetOK, error)

	PriceTypesGetAll(params *PriceTypesGetAllParams, opts ...ClientOption) (*PriceTypesGetAllOK, error)

	PriceTypesGetReasons(params *PriceTypesGetReasonsParams, opts ...ClientOption) (*PriceTypesGetReasonsOK, error)

	PriceTypesGetSummaries(params *PriceTypesGetSummariesParams, opts ...ClientOption) (*PriceTypesGetSummariesOK, error)

	PriceTypesGetValidPriceTypes(params *PriceTypesGetValidPriceTypesParams, opts ...ClientOption) (*PriceTypesGetValidPriceTypesOK, error)

	PriceTypesGetValidZones(params *PriceTypesGetValidZonesParams, opts ...ClientOption) (*PriceTypesGetValidZonesOK, error)

	PricingRuleCategoriesGet(params *PricingRuleCategoriesGetParams, opts ...ClientOption) (*PricingRuleCategoriesGetOK, error)

	PricingRuleCategoriesGetAll(params *PricingRuleCategoriesGetAllParams, opts ...ClientOption) (*PricingRuleCategoriesGetAllOK, error)

	PricingRuleCategoriesGetSummaries(params *PricingRuleCategoriesGetSummariesParams, opts ...ClientOption) (*PricingRuleCategoriesGetSummariesOK, error)

	PricingRuleMessageTypesGet(params *PricingRuleMessageTypesGetParams, opts ...ClientOption) (*PricingRuleMessageTypesGetOK, error)

	PricingRuleMessageTypesGetAll(params *PricingRuleMessageTypesGetAllParams, opts ...ClientOption) (*PricingRuleMessageTypesGetAllOK, error)

	PricingRuleMessageTypesGetSummaries(params *PricingRuleMessageTypesGetSummariesParams, opts ...ClientOption) (*PricingRuleMessageTypesGetSummariesOK, error)

	PricingRuleSetsGet(params *PricingRuleSetsGetParams, opts ...ClientOption) (*PricingRuleSetsGetOK, error)

	PricingRuleSetsGetAll(params *PricingRuleSetsGetAllParams, opts ...ClientOption) (*PricingRuleSetsGetAllOK, error)

	PricingRuleSetsGetSummaries(params *PricingRuleSetsGetSummariesParams, opts ...ClientOption) (*PricingRuleSetsGetSummariesOK, error)

	PricingRuleTypesGet(params *PricingRuleTypesGetParams, opts ...ClientOption) (*PricingRuleTypesGetOK, error)

	PricingRuleTypesGetAll(params *PricingRuleTypesGetAllParams, opts ...ClientOption) (*PricingRuleTypesGetAllOK, error)

	PricingRuleTypesGetSummaries(params *PricingRuleTypesGetSummariesParams, opts ...ClientOption) (*PricingRuleTypesGetSummariesOK, error)

	PricingRulesGet(params *PricingRulesGetParams, opts ...ClientOption) (*PricingRulesGetOK, error)

	PricingRulesGetAll(params *PricingRulesGetAllParams, opts ...ClientOption) (*PricingRulesGetAllOK, error)

	PricingRulesGetAllSummary(params *PricingRulesGetAllSummaryParams, opts ...ClientOption) (*PricingRulesGetAllSummaryOK, error)

	PrintersGet(params *PrintersGetParams, opts ...ClientOption) (*PrintersGetOK, error)

	PrintersGetAll(params *PrintersGetAllParams, opts ...ClientOption) (*PrintersGetAllOK, error)

	PrintersGetSummaries(params *PrintersGetSummariesParams, opts ...ClientOption) (*PrintersGetSummariesOK, error)

	ProductKeywordsGetKeywords(params *ProductKeywordsGetKeywordsParams, opts ...ClientOption) (*ProductKeywordsGetKeywordsOK, error)

	ProductionSeasonMembershipOrganizationsGet(params *ProductionSeasonMembershipOrganizationsGetParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsGetOK, error)

	ProductionSeasonMembershipOrganizationsGetAll(params *ProductionSeasonMembershipOrganizationsGetAllParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsGetAllOK, error)

	ProductionSeasonMembershipOrganizationsGetSummaries(params *ProductionSeasonMembershipOrganizationsGetSummariesParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsGetSummariesOK, error)

	ProductionSeasonsGet(params *ProductionSeasonsGetParams, opts ...ClientOption) (*ProductionSeasonsGetOK, error)

	ProductionSeasonsGetAll(params *ProductionSeasonsGetAllParams, opts ...ClientOption) (*ProductionSeasonsGetAllOK, error)

	ProductionSeasonsGetSummaries(params *ProductionSeasonsGetSummariesParams, opts ...ClientOption) (*ProductionSeasonsGetSummariesOK, error)

	ProductionsGet(params *ProductionsGetParams, opts ...ClientOption) (*ProductionsGetOK, error)

	ProductionsGetAll(params *ProductionsGetAllParams, opts ...ClientOption) (*ProductionsGetAllOK, error)

	ProductionsGetSummaries(params *ProductionsGetSummariesParams, opts ...ClientOption) (*ProductionsGetSummariesOK, error)

	ProgramListingsGet(params *ProgramListingsGetParams, opts ...ClientOption) (*ProgramListingsGetOK, error)

	ProgramListingsGetAll(params *ProgramListingsGetAllParams, opts ...ClientOption) (*ProgramListingsGetAllOK, error)

	ProgramsGet(params *ProgramsGetParams, opts ...ClientOption) (*ProgramsGetOK, error)

	ProgramsGetAll(params *ProgramsGetAllParams, opts ...ClientOption) (*ProgramsGetAllOK, error)

	ProgramsGetSummaries(params *ProgramsGetSummariesParams, opts ...ClientOption) (*ProgramsGetSummariesOK, error)

	PronounsGet(params *PronounsGetParams, opts ...ClientOption) (*PronounsGetOK, error)

	PronounsGetAll(params *PronounsGetAllParams, opts ...ClientOption) (*PronounsGetAllOK, error)

	PronounsGetSummaries(params *PronounsGetSummariesParams, opts ...ClientOption) (*PronounsGetSummariesOK, error)

	QualificationCategoriesGet(params *QualificationCategoriesGetParams, opts ...ClientOption) (*QualificationCategoriesGetOK, error)

	QualificationCategoriesGetAll(params *QualificationCategoriesGetAllParams, opts ...ClientOption) (*QualificationCategoriesGetAllOK, error)

	QualificationCategoriesGetSummaries(params *QualificationCategoriesGetSummariesParams, opts ...ClientOption) (*QualificationCategoriesGetSummariesOK, error)

	QualificationsGet(params *QualificationsGetParams, opts ...ClientOption) (*QualificationsGetOK, error)

	QualificationsGetAll(params *QualificationsGetAllParams, opts ...ClientOption) (*QualificationsGetAllOK, error)

	QualificationsGetSummaries(params *QualificationsGetSummariesParams, opts ...ClientOption) (*QualificationsGetSummariesOK, error)

	QueryElementFiltersGet(params *QueryElementFiltersGetParams, opts ...ClientOption) (*QueryElementFiltersGetOK, error)

	QueryElementFiltersGetAll(params *QueryElementFiltersGetAllParams, opts ...ClientOption) (*QueryElementFiltersGetAllOK, error)

	QueryElementFiltersGetDataFor(params *QueryElementFiltersGetDataForParams, opts ...ClientOption) (*QueryElementFiltersGetDataForOK, error)

	QueryElementFiltersGetSummaries(params *QueryElementFiltersGetSummariesParams, opts ...ClientOption) (*QueryElementFiltersGetSummariesOK, error)

	QueryElementGroupsGet(params *QueryElementGroupsGetParams, opts ...ClientOption) (*QueryElementGroupsGetOK, error)

	QueryElementGroupsGetAll(params *QueryElementGroupsGetAllParams, opts ...ClientOption) (*QueryElementGroupsGetAllOK, error)

	QueryElementsGet(params *QueryElementsGetParams, opts ...ClientOption) (*QueryElementsGetOK, error)

	QueryElementsGetAll(params *QueryElementsGetAllParams, opts ...ClientOption) (*QueryElementsGetAllOK, error)

	QueryElementsGetSummaries(params *QueryElementsGetSummariesParams, opts ...ClientOption) (*QueryElementsGetSummariesOK, error)

	RankTypesGet(params *RankTypesGetParams, opts ...ClientOption) (*RankTypesGetOK, error)

	RankTypesGetAll(params *RankTypesGetAllParams, opts ...ClientOption) (*RankTypesGetAllOK, error)

	RankTypesGetSummaries(params *RankTypesGetSummariesParams, opts ...ClientOption) (*RankTypesGetSummariesOK, error)

	RankingsGet(params *RankingsGetParams, opts ...ClientOption) (*RankingsGetOK, error)

	RankingsGetAll(params *RankingsGetAllParams, opts ...ClientOption) (*RankingsGetAllOK, error)

	ReceiptSettingsGet(params *ReceiptSettingsGetParams, opts ...ClientOption) (*ReceiptSettingsGetOK, error)

	ReceiptSettingsGetAll(params *ReceiptSettingsGetAllParams, opts ...ClientOption) (*ReceiptSettingsGetAllOK, error)

	ReceiptSettingsGetSummaries(params *ReceiptSettingsGetSummariesParams, opts ...ClientOption) (*ReceiptSettingsGetSummariesOK, error)

	ReferenceColumnsGetAll(params *ReferenceColumnsGetAllParams, opts ...ClientOption) (*ReferenceColumnsGetAllOK, error)

	ReferenceColumnsGetSummaries(params *ReferenceColumnsGetSummariesParams, opts ...ClientOption) (*ReferenceColumnsGetSummariesOK, error)

	ReferenceTableUserGroupsGet(params *ReferenceTableUserGroupsGetParams, opts ...ClientOption) (*ReferenceTableUserGroupsGetOK, error)

	ReferenceTableUserGroupsGetAll(params *ReferenceTableUserGroupsGetAllParams, opts ...ClientOption) (*ReferenceTableUserGroupsGetAllOK, error)

	ReferenceTableUserGroupsGetSummaries(params *ReferenceTableUserGroupsGetSummariesParams, opts ...ClientOption) (*ReferenceTableUserGroupsGetSummariesOK, error)

	ReferenceTablesGet(params *ReferenceTablesGetParams, opts ...ClientOption) (*ReferenceTablesGetOK, error)

	ReferenceTablesGetAll(params *ReferenceTablesGetAllParams, opts ...ClientOption) (*ReferenceTablesGetAllOK, error)

	ReferenceTablesGetSummaries(params *ReferenceTablesGetSummariesParams, opts ...ClientOption) (*ReferenceTablesGetSummariesOK, error)

	RelationshipCategoriesGet(params *RelationshipCategoriesGetParams, opts ...ClientOption) (*RelationshipCategoriesGetOK, error)

	RelationshipCategoriesGetAll(params *RelationshipCategoriesGetAllParams, opts ...ClientOption) (*RelationshipCategoriesGetAllOK, error)

	RelationshipCategoriesGetSummaries(params *RelationshipCategoriesGetSummariesParams, opts ...ClientOption) (*RelationshipCategoriesGetSummariesOK, error)

	RelationshipsGetAll(params *RelationshipsGetAllParams, opts ...ClientOption) (*RelationshipsGetAllOK, error)

	ReportRequestsGet(params *ReportRequestsGetParams, opts ...ClientOption) (*ReportRequestsGetOK, error)

	ReportRequestsGetAll(params *ReportRequestsGetAllParams, opts ...ClientOption) (*ReportRequestsGetAllOK, error)

	ReportRequestsGetAllExpired(params *ReportRequestsGetAllExpiredParams, opts ...ClientOption) (*ReportRequestsGetAllExpiredOK, error)

	ReportRequestsGetQueued(params *ReportRequestsGetQueuedParams, opts ...ClientOption) (*ReportRequestsGetQueuedOK, error)

	ReportSchedulesGet(params *ReportSchedulesGetParams, opts ...ClientOption) (*ReportSchedulesGetOK, error)

	ReportSchedulesGetAll(params *ReportSchedulesGetAllParams, opts ...ClientOption) (*ReportSchedulesGetAllOK, error)

	ReportUserGroupsGet(params *ReportUserGroupsGetParams, opts ...ClientOption) (*ReportUserGroupsGetOK, error)

	ReportUserGroupsGetAll(params *ReportUserGroupsGetAllParams, opts ...ClientOption) (*ReportUserGroupsGetAllOK, error)

	ReportUserGroupsGetSummaries(params *ReportUserGroupsGetSummariesParams, opts ...ClientOption) (*ReportUserGroupsGetSummariesOK, error)

	ReportsGet(params *ReportsGetParams, opts ...ClientOption) (*ReportsGetOK, error)

	ReportsGetAll(params *ReportsGetAllParams, opts ...ClientOption) (*ReportsGetAllOK, error)

	ReportsGetCustomData(params *ReportsGetCustomDataParams, opts ...ClientOption) (*ReportsGetCustomDataOK, error)

	ReportsGetReportCategories(params *ReportsGetReportCategoriesParams, opts ...ClientOption) (*ReportsGetReportCategoriesOK, error)

	ReportsGetReportDefaults(params *ReportsGetReportDefaultsParams, opts ...ClientOption) (*ReportsGetReportDefaultsOK, error)

	ReportsGetReportParameters(params *ReportsGetReportParametersParams, opts ...ClientOption) (*ReportsGetReportParametersOK, error)

	ResearchTypesGet(params *ResearchTypesGetParams, opts ...ClientOption) (*ResearchTypesGetOK, error)

	ResearchTypesGetAll(params *ResearchTypesGetAllParams, opts ...ClientOption) (*ResearchTypesGetAllOK, error)

	ResearchTypesGetSummaries(params *ResearchTypesGetSummariesParams, opts ...ClientOption) (*ResearchTypesGetSummariesOK, error)

	ResearchGet(params *ResearchGetParams, opts ...ClientOption) (*ResearchGetOK, error)

	ResearchGetAll(params *ResearchGetAllParams, opts ...ClientOption) (*ResearchGetAllOK, error)

	ResourceCategoriesGet(params *ResourceCategoriesGetParams, opts ...ClientOption) (*ResourceCategoriesGetOK, error)

	ResourceCategoriesGetAll(params *ResourceCategoriesGetAllParams, opts ...ClientOption) (*ResourceCategoriesGetAllOK, error)

	ResourceCategoriesGetSummaries(params *ResourceCategoriesGetSummariesParams, opts ...ClientOption) (*ResourceCategoriesGetSummariesOK, error)

	ResourceSchedulesGet(params *ResourceSchedulesGetParams, opts ...ClientOption) (*ResourceSchedulesGetOK, error)

	ResourceSchedulesGetAll(params *ResourceSchedulesGetAllParams, opts ...ClientOption) (*ResourceSchedulesGetAllOK, error)

	ResourceTypesGet(params *ResourceTypesGetParams, opts ...ClientOption) (*ResourceTypesGetOK, error)

	ResourceTypesGetAll(params *ResourceTypesGetAllParams, opts ...ClientOption) (*ResourceTypesGetAllOK, error)

	ResourceTypesGetSummaries(params *ResourceTypesGetSummariesParams, opts ...ClientOption) (*ResourceTypesGetSummariesOK, error)

	ResourcesGet(params *ResourcesGetParams, opts ...ClientOption) (*ResourcesGetOK, error)

	ResourcesGetAll(params *ResourcesGetAllParams, opts ...ClientOption) (*ResourcesGetAllOK, error)

	ResourcesGetDetails(params *ResourcesGetDetailsParams, opts ...ClientOption) (*ResourcesGetDetailsOK, error)

	ResourcesGetSummaries(params *ResourcesGetSummariesParams, opts ...ClientOption) (*ResourcesGetSummariesOK, error)

	ResourcesHasUsages(params *ResourcesHasUsagesParams, opts ...ClientOption) (*ResourcesHasUsagesOK, error)

	SalesChannelsGet(params *SalesChannelsGetParams, opts ...ClientOption) (*SalesChannelsGetOK, error)

	SalesChannelsGetAll(params *SalesChannelsGetAllParams, opts ...ClientOption) (*SalesChannelsGetAllOK, error)

	SalesChannelsGetSummaries(params *SalesChannelsGetSummariesParams, opts ...ClientOption) (*SalesChannelsGetSummariesOK, error)

	SalesLayoutButtonTypesGet(params *SalesLayoutButtonTypesGetParams, opts ...ClientOption) (*SalesLayoutButtonTypesGetOK, error)

	SalesLayoutButtonTypesGetAll(params *SalesLayoutButtonTypesGetAllParams, opts ...ClientOption) (*SalesLayoutButtonTypesGetAllOK, error)

	SalesLayoutButtonTypesGetSummaries(params *SalesLayoutButtonTypesGetSummariesParams, opts ...ClientOption) (*SalesLayoutButtonTypesGetSummariesOK, error)

	SalesLayoutsGet(params *SalesLayoutsGetParams, opts ...ClientOption) (*SalesLayoutsGetOK, error)

	SalesLayoutsGetForSale(params *SalesLayoutsGetForSaleParams, opts ...ClientOption) (*SalesLayoutsGetForSaleOK, error)

	SalesLayoutsGetSummaries(params *SalesLayoutsGetSummariesParams, opts ...ClientOption) (*SalesLayoutsGetSummariesOK, error)

	SalutationTypesGet(params *SalutationTypesGetParams, opts ...ClientOption) (*SalutationTypesGetOK, error)

	SalutationTypesGetAll(params *SalutationTypesGetAllParams, opts ...ClientOption) (*SalutationTypesGetAllOK, error)

	SalutationTypesGetSummaries(params *SalutationTypesGetSummariesParams, opts ...ClientOption) (*SalutationTypesGetSummariesOK, error)

	SalutationsGenerate(params *SalutationsGenerateParams, opts ...ClientOption) (*SalutationsGenerateOK, error)

	SalutationsGet(params *SalutationsGetParams, opts ...ClientOption) (*SalutationsGetOK, error)

	SalutationsGetAll(params *SalutationsGetAllParams, opts ...ClientOption) (*SalutationsGetAllOK, error)

	SchedulePatternTypesGet(params *SchedulePatternTypesGetParams, opts ...ClientOption) (*SchedulePatternTypesGetOK, error)

	SchedulePatternTypesGetAll(params *SchedulePatternTypesGetAllParams, opts ...ClientOption) (*SchedulePatternTypesGetAllOK, error)

	SchedulePatternTypesGetSummaries(params *SchedulePatternTypesGetSummariesParams, opts ...ClientOption) (*SchedulePatternTypesGetSummariesOK, error)

	ScheduleTypesGet(params *ScheduleTypesGetParams, opts ...ClientOption) (*ScheduleTypesGetOK, error)

	ScheduleTypesGetAll(params *ScheduleTypesGetAllParams, opts ...ClientOption) (*ScheduleTypesGetAllOK, error)

	ScheduleTypesGetSummaries(params *ScheduleTypesGetSummariesParams, opts ...ClientOption) (*ScheduleTypesGetSummariesOK, error)

	SeasonTypesGet(params *SeasonTypesGetParams, opts ...ClientOption) (*SeasonTypesGetOK, error)

	SeasonTypesGetAll(params *SeasonTypesGetAllParams, opts ...ClientOption) (*SeasonTypesGetAllOK, error)

	SeasonTypesGetSummaries(params *SeasonTypesGetSummariesParams, opts ...ClientOption) (*SeasonTypesGetSummariesOK, error)

	SeasonsGet(params *SeasonsGetParams, opts ...ClientOption) (*SeasonsGetOK, error)

	SeasonsGetAll(params *SeasonsGetAllParams, opts ...ClientOption) (*SeasonsGetAllOK, error)

	SeasonsGetSummaries(params *SeasonsGetSummariesParams, opts ...ClientOption) (*SeasonsGetSummariesOK, error)

	SeatCodesGet(params *SeatCodesGetParams, opts ...ClientOption) (*SeatCodesGetOK, error)

	SeatCodesGetAll(params *SeatCodesGetAllParams, opts ...ClientOption) (*SeatCodesGetAllOK, error)

	SeatCodesGetSummaries(params *SeatCodesGetSummariesParams, opts ...ClientOption) (*SeatCodesGetSummariesOK, error)

	SeatStatusesGet(params *SeatStatusesGetParams, opts ...ClientOption) (*SeatStatusesGetOK, error)

	SeatStatusesGetAll(params *SeatStatusesGetAllParams, opts ...ClientOption) (*SeatStatusesGetAllOK, error)

	SeatStatusesGetSummaries(params *SeatStatusesGetSummariesParams, opts ...ClientOption) (*SeatStatusesGetSummariesOK, error)

	SectionsGet(params *SectionsGetParams, opts ...ClientOption) (*SectionsGetOK, error)

	SectionsGetAll(params *SectionsGetAllParams, opts ...ClientOption) (*SectionsGetAllOK, error)

	SectionsGetSummaries(params *SectionsGetSummariesParams, opts ...ClientOption) (*SectionsGetSummariesOK, error)

	SecurityBatchTypesGetAll(params *SecurityBatchTypesGetAllParams, opts ...ClientOption) (*SecurityBatchTypesGetAllOK, error)

	SecurityControlGroupsGetAll(params *SecurityControlGroupsGetAllParams, opts ...ClientOption) (*SecurityControlGroupsGetAllOK, error)

	SecurityHoldCodesGetAll(params *SecurityHoldCodesGetAllParams, opts ...ClientOption) (*SecurityHoldCodesGetAllOK, error)

	SecurityModesOfSaleGetAll(params *SecurityModesOfSaleGetAllParams, opts ...ClientOption) (*SecurityModesOfSaleGetAllOK, error)

	SecurityObjectPermissionsGetAll(params *SecurityObjectPermissionsGetAllParams, opts ...ClientOption) (*SecurityObjectPermissionsGetAllOK, error)

	SecurityPaymentMethodsGetAll(params *SecurityPaymentMethodsGetAllParams, opts ...ClientOption) (*SecurityPaymentMethodsGetAllOK, error)

	SecurityPriceTypesGetAll(params *SecurityPriceTypesGetAllParams, opts ...ClientOption) (*SecurityPriceTypesGetAllOK, error)

	SecurityReferenceTablesGetAll(params *SecurityReferenceTablesGetAllParams, opts ...ClientOption) (*SecurityReferenceTablesGetAllOK, error)

	SecurityReportsGetAll(params *SecurityReportsGetAllParams, opts ...ClientOption) (*SecurityReportsGetAllOK, error)

	SecurityServiceResourcesGetAll(params *SecurityServiceResourcesGetAllParams, opts ...ClientOption) (*SecurityServiceResourcesGetAllOK, error)

	SecurityUserGroupsGetAll(params *SecurityUserGroupsGetAllParams, opts ...ClientOption) (*SecurityUserGroupsGetAllOK, error)

	SecurityUserGroupsGetDefaultUserGroup(params *SecurityUserGroupsGetDefaultUserGroupParams, opts ...ClientOption) (*SecurityUserGroupsGetDefaultUserGroupOK, error)

	SecurityUserGroupsGetManagedGroups(params *SecurityUserGroupsGetManagedGroupsParams, opts ...ClientOption) (*SecurityUserGroupsGetManagedGroupsOK, error)

	ServiceResourceUserGroupsGet(params *ServiceResourceUserGroupsGetParams, opts ...ClientOption) (*ServiceResourceUserGroupsGetOK, error)

	ServiceResourceUserGroupsGetAll(params *ServiceResourceUserGroupsGetAllParams, opts ...ClientOption) (*ServiceResourceUserGroupsGetAllOK, error)

	ServiceResourceUserGroupsGetSummaries(params *ServiceResourceUserGroupsGetSummariesParams, opts ...ClientOption) (*ServiceResourceUserGroupsGetSummariesOK, error)

	ServiceResourcesGetAll(params *ServiceResourcesGetAllParams, opts ...ClientOption) (*ServiceResourcesGetAllOK, error)

	ServiceResourcesGetSummaries(params *ServiceResourcesGetSummariesParams, opts ...ClientOption) (*ServiceResourcesGetSummariesOK, error)

	SessionGet(params *SessionGetParams, opts ...ClientOption) (*SessionGetOK, error)

	SessionGetDefault(params *SessionGetDefaultParams, opts ...ClientOption) (*SessionGetDefaultOK, error)

	SessionGetDeliveryMethods(params *SessionGetDeliveryMethodsParams, opts ...ClientOption) (*SessionGetDeliveryMethodsOK, error)

	SessionGetExpiration(params *SessionGetExpirationParams, opts ...ClientOption) (*SessionGetExpirationOK, error)

	SessionGetOnAccountBalances(params *SessionGetOnAccountBalancesParams, opts ...ClientOption) (*SessionGetOnAccountBalancesOK, error)

	SessionGetVariable(params *SessionGetVariableParams, opts ...ClientOption) (*SessionGetVariableOK, error)

	SessionGetVariables(params *SessionGetVariablesParams, opts ...ClientOption) (*SessionGetVariablesOK, error)

	SessionOrderSearch(params *SessionOrderSearchParams, opts ...ClientOption) (*SessionOrderSearchOK, error)

	SourceGroupsGet(params *SourceGroupsGetParams, opts ...ClientOption) (*SourceGroupsGetOK, error)

	SourceGroupsGetAll(params *SourceGroupsGetAllParams, opts ...ClientOption) (*SourceGroupsGetAllOK, error)

	SourceGroupsGetSummaries(params *SourceGroupsGetSummariesParams, opts ...ClientOption) (*SourceGroupsGetSummariesOK, error)

	SourcesGet(params *SourcesGetParams, opts ...ClientOption) (*SourcesGetOK, error)

	SourcesGetSummaries(params *SourcesGetSummariesParams, opts ...ClientOption) (*SourcesGetSummariesOK, error)

	SourcesGetWebExpiring(params *SourcesGetWebExpiringParams, opts ...ClientOption) (*SourcesGetWebExpiringOK, error)

	SpecialActivitiesGet(params *SpecialActivitiesGetParams, opts ...ClientOption) (*SpecialActivitiesGetOK, error)

	SpecialActivitiesGetAll(params *SpecialActivitiesGetAllParams, opts ...ClientOption) (*SpecialActivitiesGetAllOK, error)

	SpecialActivityStatusesGet(params *SpecialActivityStatusesGetParams, opts ...ClientOption) (*SpecialActivityStatusesGetOK, error)

	SpecialActivityStatusesGetAll(params *SpecialActivityStatusesGetAllParams, opts ...ClientOption) (*SpecialActivityStatusesGetAllOK, error)

	SpecialActivityStatusesGetSummaries(params *SpecialActivityStatusesGetSummariesParams, opts ...ClientOption) (*SpecialActivityStatusesGetSummariesOK, error)

	SpecialActivityTypesGet(params *SpecialActivityTypesGetParams, opts ...ClientOption) (*SpecialActivityTypesGetOK, error)

	SpecialActivityTypesGetAll(params *SpecialActivityTypesGetAllParams, opts ...ClientOption) (*SpecialActivityTypesGetAllOK, error)

	SpecialActivityTypesGetSummaries(params *SpecialActivityTypesGetSummariesParams, opts ...ClientOption) (*SpecialActivityTypesGetSummariesOK, error)

	StatesGet(params *StatesGetParams, opts ...ClientOption) (*StatesGetOK, error)

	StatesGetAll(params *StatesGetAllParams, opts ...ClientOption) (*StatesGetAllOK, error)

	StatesGetSummaries(params *StatesGetSummariesParams, opts ...ClientOption) (*StatesGetSummariesOK, error)

	StepTypesGet(params *StepTypesGetParams, opts ...ClientOption) (*StepTypesGetOK, error)

	StepTypesGetAll(params *StepTypesGetAllParams, opts ...ClientOption) (*StepTypesGetAllOK, error)

	StepTypesGetSummaries(params *StepTypesGetSummariesParams, opts ...ClientOption) (*StepTypesGetSummariesOK, error)

	StepsGet(params *StepsGetParams, opts ...ClientOption) (*StepsGetOK, error)

	StepsGetAll(params *StepsGetAllParams, opts ...ClientOption) (*StepsGetAllOK, error)

	StepsGetAllDocumentSummaries(params *StepsGetAllDocumentSummariesParams, opts ...ClientOption) (*StepsGetAllDocumentSummariesOK, error)

	StepsGetAllDocuments(params *StepsGetAllDocumentsParams, opts ...ClientOption) (*StepsGetAllDocumentsOK, error)

	SubLineItemStatusesGet(params *SubLineItemStatusesGetParams, opts ...ClientOption) (*SubLineItemStatusesGetOK, error)

	SubLineItemStatusesGetAll(params *SubLineItemStatusesGetAllParams, opts ...ClientOption) (*SubLineItemStatusesGetAllOK, error)

	SubLineItemStatusesGetSummaries(params *SubLineItemStatusesGetSummariesParams, opts ...ClientOption) (*SubLineItemStatusesGetSummariesOK, error)

	SubLineItemsGetSubLineItemSummaries(params *SubLineItemsGetSubLineItemSummariesParams, opts ...ClientOption) (*SubLineItemsGetSubLineItemSummariesOK, error)

	SuffixesGet(params *SuffixesGetParams, opts ...ClientOption) (*SuffixesGetOK, error)

	SuffixesGetAll(params *SuffixesGetAllParams, opts ...ClientOption) (*SuffixesGetAllOK, error)

	SuffixesGetSummaries(params *SuffixesGetSummariesParams, opts ...ClientOption) (*SuffixesGetSummariesOK, error)

	SurveyQuestionsGet(params *SurveyQuestionsGetParams, opts ...ClientOption) (*SurveyQuestionsGetOK, error)

	SurveyQuestionsGetAll(params *SurveyQuestionsGetAllParams, opts ...ClientOption) (*SurveyQuestionsGetAllOK, error)

	SurveyQuestionsGetDataFor(params *SurveyQuestionsGetDataForParams, opts ...ClientOption) (*SurveyQuestionsGetDataForOK, error)

	SurveyQuestionsGetSummaries(params *SurveyQuestionsGetSummariesParams, opts ...ClientOption) (*SurveyQuestionsGetSummariesOK, error)

	SurveyResponsesGet(params *SurveyResponsesGetParams, opts ...ClientOption) (*SurveyResponsesGetOK, error)

	SurveyResponsesGetAll(params *SurveyResponsesGetAllParams, opts ...ClientOption) (*SurveyResponsesGetAllOK, error)

	SystemDefaultsGetAll(params *SystemDefaultsGetAllParams, opts ...ClientOption) (*SystemDefaultsGetAllOK, error)

	SystemDefaultsGetDefault(params *SystemDefaultsGetDefaultParams, opts ...ClientOption) (*SystemDefaultsGetDefaultOK, error)

	SystemDefaultsGetSummaries(params *SystemDefaultsGetSummariesParams, opts ...ClientOption) (*SystemDefaultsGetSummariesOK, error)

	TemplateCategoriesGet(params *TemplateCategoriesGetParams, opts ...ClientOption) (*TemplateCategoriesGetOK, error)

	TemplateCategoriesGetAll(params *TemplateCategoriesGetAllParams, opts ...ClientOption) (*TemplateCategoriesGetAllOK, error)

	TemplateCategoriesGetSummaries(params *TemplateCategoriesGetSummariesParams, opts ...ClientOption) (*TemplateCategoriesGetSummariesOK, error)

	TemplatePriceTypesGet(params *TemplatePriceTypesGetParams, opts ...ClientOption) (*TemplatePriceTypesGetOK, error)

	TemplatePriceTypesGetAll(params *TemplatePriceTypesGetAllParams, opts ...ClientOption) (*TemplatePriceTypesGetAllOK, error)

	TemplatePricesGet(params *TemplatePricesGetParams, opts ...ClientOption) (*TemplatePricesGetOK, error)

	TemplatePricesGetAll(params *TemplatePricesGetAllParams, opts ...ClientOption) (*TemplatePricesGetAllOK, error)

	TemplateTypesGet(params *TemplateTypesGetParams, opts ...ClientOption) (*TemplateTypesGetOK, error)

	TemplateTypesGetAll(params *TemplateTypesGetAllParams, opts ...ClientOption) (*TemplateTypesGetAllOK, error)

	TemplateTypesGetSummaries(params *TemplateTypesGetSummariesParams, opts ...ClientOption) (*TemplateTypesGetSummariesOK, error)

	TemplatesGet(params *TemplatesGetParams, opts ...ClientOption) (*TemplatesGetOK, error)

	TemplatesGetAll(params *TemplatesGetAllParams, opts ...ClientOption) (*TemplatesGetAllOK, error)

	TemplatesGetSummaries(params *TemplatesGetSummariesParams, opts ...ClientOption) (*TemplatesGetSummariesOK, error)

	TheatersGet(params *TheatersGetParams, opts ...ClientOption) (*TheatersGetOK, error)

	TheatersGetAll(params *TheatersGetAllParams, opts ...ClientOption) (*TheatersGetAllOK, error)

	TheatersGetSummaries(params *TheatersGetSummariesParams, opts ...ClientOption) (*TheatersGetSummariesOK, error)

	TicketHistoryGetAll(params *TicketHistoryGetAllParams, opts ...ClientOption) (*TicketHistoryGetAllOK, error)

	TimeSlotsGet(params *TimeSlotsGetParams, opts ...ClientOption) (*TimeSlotsGetOK, error)

	TimeSlotsGetAll(params *TimeSlotsGetAllParams, opts ...ClientOption) (*TimeSlotsGetAllOK, error)

	TimeSlotsGetSummaries(params *TimeSlotsGetSummariesParams, opts ...ClientOption) (*TimeSlotsGetSummariesOK, error)

	TitlesGet(params *TitlesGetParams, opts ...ClientOption) (*TitlesGetOK, error)

	TitlesGetAll(params *TitlesGetAllParams, opts ...ClientOption) (*TitlesGetAllOK, error)

	TitlesGetSummaries(params *TitlesGetSummariesParams, opts ...ClientOption) (*TitlesGetSummariesOK, error)

	TransactionHistoryGetAll(params *TransactionHistoryGetAllParams, opts ...ClientOption) (*TransactionHistoryGetAllOK, error)

	TriPOSCloudConfigurationsGet(params *TriPOSCloudConfigurationsGetParams, opts ...ClientOption) (*TriPOSCloudConfigurationsGetOK, error)

	TriPOSCloudConfigurationsGetAll(params *TriPOSCloudConfigurationsGetAllParams, opts ...ClientOption) (*TriPOSCloudConfigurationsGetAllOK, error)

	TriPOSCloudConfigurationsGetSummaries(params *TriPOSCloudConfigurationsGetSummariesParams, opts ...ClientOption) (*TriPOSCloudConfigurationsGetSummariesOK, error)

	UpgradeCategoriesGet(params *UpgradeCategoriesGetParams, opts ...ClientOption) (*UpgradeCategoriesGetOK, error)

	UpgradeCategoriesGetAll(params *UpgradeCategoriesGetAllParams, opts ...ClientOption) (*UpgradeCategoriesGetAllOK, error)

	UpgradeCategoriesGetSummaries(params *UpgradeCategoriesGetSummariesParams, opts ...ClientOption) (*UpgradeCategoriesGetSummariesOK, error)

	UpgradeLogsGet(params *UpgradeLogsGetParams, opts ...ClientOption) (*UpgradeLogsGetOK, error)

	UpgradeLogsGetAll(params *UpgradeLogsGetAllParams, opts ...ClientOption) (*UpgradeLogsGetAllOK, error)

	UserGroupsGet(params *UserGroupsGetParams, opts ...ClientOption) (*UserGroupsGetOK, error)

	UserGroupsGetAll(params *UserGroupsGetAllParams, opts ...ClientOption) (*UserGroupsGetAllOK, error)

	UserGroupsGetSummaries(params *UserGroupsGetSummariesParams, opts ...ClientOption) (*UserGroupsGetSummariesOK, error)

	UserPreferencesGet(params *UserPreferencesGetParams, opts ...ClientOption) (*UserPreferencesGetOK, error)

	UserPreferencesGetAll(params *UserPreferencesGetAllParams, opts ...ClientOption) (*UserPreferencesGetAllOK, error)

	UsersGet(params *UsersGetParams, opts ...ClientOption) (*UsersGetOK, error)

	UsersGetActiveDirectoryUser(params *UsersGetActiveDirectoryUserParams, opts ...ClientOption) (*UsersGetActiveDirectoryUserOK, error)

	UsersGetUserInformationForActiveDirectoryUser(params *UsersGetUserInformationForActiveDirectoryUserParams, opts ...ClientOption) (*UsersGetUserInformationForActiveDirectoryUserOK, error)

	UsersGetUsersForUserGroup(params *UsersGetUsersForUserGroupParams, opts ...ClientOption) (*UsersGetUsersForUserGroupOK, error)

	WebContentTypesGet(params *WebContentTypesGetParams, opts ...ClientOption) (*WebContentTypesGetOK, error)

	WebContentTypesGetAll(params *WebContentTypesGetAllParams, opts ...ClientOption) (*WebContentTypesGetAllOK, error)

	WebContentTypesGetDataFor(params *WebContentTypesGetDataForParams, opts ...ClientOption) (*WebContentTypesGetDataForOK, error)

	WebContentTypesGetSummaries(params *WebContentTypesGetSummariesParams, opts ...ClientOption) (*WebContentTypesGetSummariesOK, error)

	WebContentsGetWebContents(params *WebContentsGetWebContentsParams, opts ...ClientOption) (*WebContentsGetWebContentsOK, error)

	WebLoginsGet(params *WebLoginsGetParams, opts ...ClientOption) (*WebLoginsGetOK, error)

	WebLoginsGetAll(params *WebLoginsGetAllParams, opts ...ClientOption) (*WebLoginsGetAllOK, error)

	WebLoginsGetLoginCredentials(params *WebLoginsGetLoginCredentialsParams, opts ...ClientOption) (*WebLoginsGetLoginCredentialsOK, error)

	WebLoginsSearch(params *WebLoginsSearchParams, opts ...ClientOption) (*WebLoginsSearchOK, error)

	WorkerQualificationsGet(params *WorkerQualificationsGetParams, opts ...ClientOption) (*WorkerQualificationsGetOK, error)

	WorkerQualificationsGetAll(params *WorkerQualificationsGetAllParams, opts ...ClientOption) (*WorkerQualificationsGetAllOK, error)

	WorkerRolesGet(params *WorkerRolesGetParams, opts ...ClientOption) (*WorkerRolesGetOK, error)

	WorkerRolesGetAll(params *WorkerRolesGetAllParams, opts ...ClientOption) (*WorkerRolesGetAllOK, error)

	WorkerRolesGetSummaries(params *WorkerRolesGetSummariesParams, opts ...ClientOption) (*WorkerRolesGetSummariesOK, error)

	WorkerTypesGet(params *WorkerTypesGetParams, opts ...ClientOption) (*WorkerTypesGetOK, error)

	WorkerTypesGetAll(params *WorkerTypesGetAllParams, opts ...ClientOption) (*WorkerTypesGetAllOK, error)

	WorkerTypesGetSummaries(params *WorkerTypesGetSummariesParams, opts ...ClientOption) (*WorkerTypesGetSummariesOK, error)

	WorkersGet(params *WorkersGetParams, opts ...ClientOption) (*WorkersGetOK, error)

	WorkersGetAll(params *WorkersGetAllParams, opts ...ClientOption) (*WorkersGetAllOK, error)

	WorkersGetSummaries(params *WorkersGetSummariesParams, opts ...ClientOption) (*WorkersGetSummariesOK, error)

	ZoneGroupsGet(params *ZoneGroupsGetParams, opts ...ClientOption) (*ZoneGroupsGetOK, error)

	ZoneGroupsGetAll(params *ZoneGroupsGetAllParams, opts ...ClientOption) (*ZoneGroupsGetAllOK, error)

	ZoneGroupsGetSummaries(params *ZoneGroupsGetSummariesParams, opts ...ClientOption) (*ZoneGroupsGetSummariesOK, error)

	ZoneMapsGet(params *ZoneMapsGetParams, opts ...ClientOption) (*ZoneMapsGetOK, error)

	ZoneMapsGetAll(params *ZoneMapsGetAllParams, opts ...ClientOption) (*ZoneMapsGetAllOK, error)

	ZoneMapsGetSummaries(params *ZoneMapsGetSummariesParams, opts ...ClientOption) (*ZoneMapsGetSummariesOK, error)

	ZonesGet(params *ZonesGetParams, opts ...ClientOption) (*ZonesGetOK, error)

	ZonesGetAll(params *ZonesGetAllParams, opts ...ClientOption) (*ZonesGetAllOK, error)

	ZonesGetSummaries(params *ZonesGetSummariesParams, opts ...ClientOption) (*ZonesGetSummariesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccountTypesGet gets the details of an account type by id
*/
func (a *Client) AccountTypesGet(params *AccountTypesGetParams, opts ...ClientOption) (*AccountTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AccountTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountTypesGetAll gets all account types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) AccountTypesGetAll(params *AccountTypesGetAllParams, opts ...ClientOption) (*AccountTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AccountTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountTypesGetSummaries gets a summary representation of all account types
*/
func (a *Client) AccountTypesGetSummaries(params *AccountTypesGetSummariesParams, opts ...ClientOption) (*AccountTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AccountTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountsGet gets details of a specific credit card account
*/
func (a *Client) AccountsGet(params *AccountsGetParams, opts ...ClientOption) (*AccountsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Accounts/{accountId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountsGetAll gets details of all the credit card direct debit and s e p a accounts for the specified constituent id and all its visible affiliates accounts as well to exclude accounts of the visible affiliates pass include affiliations false
*/
func (a *Client) AccountsGetAll(params *AccountsGetAllParams, opts ...ClientOption) (*AccountsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Accounts",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActionTypesGet gets the details of an action type by id
*/
func (a *Client) ActionTypesGet(params *ActionTypesGetParams, opts ...ClientOption) (*ActionTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ActionTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActionTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActionTypesGetAll gets all action types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ActionTypesGetAll(params *ActionTypesGetAllParams, opts ...ClientOption) (*ActionTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ActionTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActionTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActionTypesGetSummaries gets a summary representation of all action types
*/
func (a *Client) ActionTypesGetSummaries(params *ActionTypesGetSummariesParams, opts ...ClientOption) (*ActionTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ActionTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActionTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActionsGet gets details of an issue action
*/
func (a *Client) ActionsGet(params *ActionsGetParams, opts ...ClientOption) (*ActionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Actions_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Actions/{issueActionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Actions_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActionsGetAll gets details of all the actions for the given constituent or issue
*/
func (a *Client) ActionsGetAll(params *ActionsGetAllParams, opts ...ClientOption) (*ActionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Actions_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Actions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Actions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActivityCategoriesGet gets the details of an activity category by id
*/
func (a *Client) ActivityCategoriesGet(params *ActivityCategoriesGetParams, opts ...ClientOption) (*ActivityCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ActivityCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActivityCategoriesGetAll gets all activity categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ActivityCategoriesGetAll(params *ActivityCategoriesGetAllParams, opts ...ClientOption) (*ActivityCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ActivityCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActivityCategoriesGetSummaries gets a summary representation of all activity categories
*/
func (a *Client) ActivityCategoriesGetSummaries(params *ActivityCategoriesGetSummariesParams, opts ...ClientOption) (*ActivityCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ActivityCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActivityTypesGet gets the details of an activity type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ActivityTypesGet(params *ActivityTypesGetParams, opts ...ClientOption) (*ActivityTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ActivityTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActivityTypesGetAll gets all activity types to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ActivityTypesGetAll(params *ActivityTypesGetAllParams, opts ...ClientOption) (*ActivityTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ActivityTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActivityTypesGetSummaries gets a summary representation of all activity types
*/
func (a *Client) ActivityTypesGetSummaries(params *ActivityTypesGetSummariesParams, opts ...ClientOption) (*ActivityTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ActivityTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressTypesGet gets the details of an address type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) AddressTypesGet(params *AddressTypesGetParams, opts ...ClientOption) (*AddressTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddressTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AddressTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddressTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressTypesGetAll gets all address types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) AddressTypesGetAll(params *AddressTypesGetAllParams, opts ...ClientOption) (*AddressTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddressTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AddressTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddressTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressTypesGetSummaries gets a summary representation of all address types
*/
func (a *Client) AddressTypesGetSummaries(params *AddressTypesGetSummariesParams, opts ...ClientOption) (*AddressTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddressTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AddressTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddressTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressesGet gets details of an address using address Id as a URL query parameter returns 404 not found if an address with the specified Id is not found
*/
func (a *Client) AddressesGet(params *AddressesGetParams, opts ...ClientOption) (*AddressesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Addresses_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Addresses/{addressId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Addresses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressesGetAll gets details of all the addresses for the specified constituent id and all its visible affiliation s addresses as well to exclude addresses of the visible affiliations pass include affiliations false to get only the primary addresses pass primary only true
*/
func (a *Client) AddressesGetAll(params *AddressesGetAllParams, opts ...ClientOption) (*AddressesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Addresses_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Addresses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Addresses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AffiliationTypesGet gets the details of an affiliation type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) AffiliationTypesGet(params *AffiliationTypesGetParams, opts ...ClientOption) (*AffiliationTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AffiliationTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AffiliationTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AffiliationTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AffiliationTypesGetAll affiliation types get all API
*/
func (a *Client) AffiliationTypesGetAll(params *AffiliationTypesGetAllParams, opts ...ClientOption) (*AffiliationTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AffiliationTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AffiliationTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AffiliationTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AffiliationTypesGetSummaries gets a summary representation of all affiliation types
*/
func (a *Client) AffiliationTypesGetSummaries(params *AffiliationTypesGetSummariesParams, opts ...ClientOption) (*AffiliationTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AffiliationTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AffiliationTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AffiliationTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AffiliationsGet gets details of an affiliation
*/
func (a *Client) AffiliationsGet(params *AffiliationsGetParams, opts ...ClientOption) (*AffiliationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Affiliations_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Affiliations/{affiliationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Affiliations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AffiliationsGetAll gets details of all the affiliation of the specified individual constituent id or get all the affiliations of the specified group constituent id if both individual constituent id and group constituent id are specified get all the affiliations between them to filter the affiliations that are active within certain date then pass values for start date and end date to fetch primary affiliations alone pass primary only true to limit the associations returned to those that are primary or that are marked as show with group pass show with group true
*/
func (a *Client) AffiliationsGetAll(params *AffiliationsGetAllParams, opts ...ClientOption) (*AffiliationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Affiliations_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Affiliations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Affiliations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AliasTypesGet gets the details of an alias type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) AliasTypesGet(params *AliasTypesGetParams, opts ...ClientOption) (*AliasTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AliasTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AliasTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AliasTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AliasTypesGetAll gets all alias types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) AliasTypesGetAll(params *AliasTypesGetAllParams, opts ...ClientOption) (*AliasTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AliasTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AliasTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AliasTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AliasTypesGetSummaries gets a summary representation of all alias types
*/
func (a *Client) AliasTypesGetSummaries(params *AliasTypesGetSummariesParams, opts ...ClientOption) (*AliasTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AliasTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AliasTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AliasTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AliasesGet gets details of an alias
*/
func (a *Client) AliasesGet(params *AliasesGetParams, opts ...ClientOption) (*AliasesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Aliases_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Aliases/{aliasId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Aliases_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AliasesGetAll gets details of all the aliases for the specified constituent id and all its visible affiliation s aliases as well to exclude aliases of the visible affiliations pass include affiliations false
*/
func (a *Client) AliasesGetAll(params *AliasesGetAllParams, opts ...ClientOption) (*AliasesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Aliases_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Aliases",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Aliases_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AnalyticsCubesGet gets the details of an analytics cube
*/
func (a *Client) AnalyticsCubesGet(params *AnalyticsCubesGetParams, opts ...ClientOption) (*AnalyticsCubesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyticsCubesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnalyticsCubes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AnalyticsCubes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnalyticsCubesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyticsCubesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AnalyticsCubes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AnalyticsCubesGetAll gets all analytics cubes for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) AnalyticsCubesGetAll(params *AnalyticsCubesGetAllParams, opts ...ClientOption) (*AnalyticsCubesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyticsCubesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnalyticsCubes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AnalyticsCubes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnalyticsCubesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyticsCubesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AnalyticsCubes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AnalyticsReportsGet gets a single s s r s report for display in analytics
*/
func (a *Client) AnalyticsReportsGet(params *AnalyticsReportsGetParams, opts ...ClientOption) (*AnalyticsReportsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyticsReportsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnalyticsReports_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/AnalyticsReports/{analyticsReportId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnalyticsReportsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyticsReportsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AnalyticsReports_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AnalyticsReportsGetAll gets all s s r s reports for display in analytics
*/
func (a *Client) AnalyticsReportsGetAll(params *AnalyticsReportsGetAllParams, opts ...ClientOption) (*AnalyticsReportsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyticsReportsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnalyticsReports_GetAll",
		Method:             "GET",
		PathPattern:        "/Reporting/AnalyticsReports",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnalyticsReportsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyticsReportsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AnalyticsReports_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppScreenTextsGet gets the details of an app screen text by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) AppScreenTextsGet(params *AppScreenTextsGetParams, opts ...ClientOption) (*AppScreenTextsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppScreenTextsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppScreenTexts_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AppScreenTexts/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppScreenTextsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppScreenTextsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AppScreenTexts_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppScreenTextsGetAll gets details of all app screen texts to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) AppScreenTextsGetAll(params *AppScreenTextsGetAllParams, opts ...ClientOption) (*AppScreenTextsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppScreenTextsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppScreenTexts_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AppScreenTexts",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppScreenTextsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppScreenTextsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AppScreenTexts_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppScreenTextsGetSummaries gets a summary representation of all app screen texts
*/
func (a *Client) AppScreenTextsGetSummaries(params *AppScreenTextsGetSummariesParams, opts ...ClientOption) (*AppScreenTextsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppScreenTextsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppScreenTexts_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AppScreenTexts/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppScreenTextsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppScreenTextsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AppScreenTexts_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppealCategoriesGet gets the details of an appeal category by id
*/
func (a *Client) AppealCategoriesGet(params *AppealCategoriesGetParams, opts ...ClientOption) (*AppealCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppealCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppealCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AppealCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppealCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppealCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AppealCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppealCategoriesGetAll gets all appeal categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) AppealCategoriesGetAll(params *AppealCategoriesGetAllParams, opts ...ClientOption) (*AppealCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppealCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppealCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AppealCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppealCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppealCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AppealCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppealCategoriesGetSummaries gets a summary representation of all appeal categories
*/
func (a *Client) AppealCategoriesGetSummaries(params *AppealCategoriesGetSummariesParams, opts ...ClientOption) (*AppealCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppealCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppealCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AppealCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppealCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppealCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AppealCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppealsGet gets details of an appeal
*/
func (a *Client) AppealsGet(params *AppealsGetParams, opts ...ClientOption) (*AppealsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppealsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Appeals_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Appeals/{appealId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppealsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppealsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Appeals_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppealsGetSummaries gets summary of all appeals
*/
func (a *Client) AppealsGetSummaries(params *AppealsGetSummariesParams, opts ...ClientOption) (*AppealsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppealsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Appeals_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Finance/Appeals/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppealsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppealsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Appeals_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ApplicationObjectsGetAll gets all application objects valid for the context usergroup
*/
func (a *Client) ApplicationObjectsGetAll(params *ApplicationObjectsGetAllParams, opts ...ClientOption) (*ApplicationObjectsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationObjectsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ApplicationObjects_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/ApplicationObjects",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationObjectsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationObjectsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ApplicationObjects_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ArtistsGet gets details of an existing artist
*/
func (a *Client) ArtistsGet(params *ArtistsGetParams, opts ...ClientOption) (*ArtistsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtistsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Artists_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Artists/{artistId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArtistsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArtistsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Artists_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ArtistsGetAll gets details of all artists
*/
func (a *Client) ArtistsGetAll(params *ArtistsGetAllParams, opts ...ClientOption) (*ArtistsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtistsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Artists_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Artists",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArtistsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArtistsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Artists_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssetTypesGet gets the details of an asset type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) AssetTypesGet(params *AssetTypesGetParams, opts ...ClientOption) (*AssetTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AssetTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AssetTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssetTypesGetAll gets all asset types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) AssetTypesGetAll(params *AssetTypesGetAllParams, opts ...ClientOption) (*AssetTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AssetTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AssetTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssetTypesGetSummaries gets a summary representation of all asset types
*/
func (a *Client) AssetTypesGetSummaries(params *AssetTypesGetSummariesParams, opts ...ClientOption) (*AssetTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AssetTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AssetTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssetsGet gets details of an asset
*/
func (a *Client) AssetsGet(params *AssetsGetParams, opts ...ClientOption) (*AssetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Assets_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Assets/{assetId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Assets_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssetsGetAll gets details of all the assets for the specified constituent id and all its visible affiliations assets as well to exclude assets of the visible affiliations pass include affiliations false
*/
func (a *Client) AssetsGetAll(params *AssetsGetAllParams, opts ...ClientOption) (*AssetsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Assets_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Assets",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Assets_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssociationTypesGet gets the details of an association type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) AssociationTypesGet(params *AssociationTypesGetParams, opts ...ClientOption) (*AssociationTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssociationTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AssociationTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AssociationTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssociationTypesGetAll gets all association types to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) AssociationTypesGetAll(params *AssociationTypesGetAllParams, opts ...ClientOption) (*AssociationTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssociationTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AssociationTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AssociationTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssociationTypesGetSummaries gets a summary representation of all association types
*/
func (a *Client) AssociationTypesGetSummaries(params *AssociationTypesGetSummariesParams, opts ...ClientOption) (*AssociationTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssociationTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/AssociationTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AssociationTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssociationsGet gets details of an association
*/
func (a *Client) AssociationsGet(params *AssociationsGetParams, opts ...ClientOption) (*AssociationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Associations_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Associations/{associationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Associations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssociationsGetAll gets details of all the association of the specified constituent id or get all the associations of the specified associated constituent id if both constituent id and associated constituent id are specified get all the associations between them to filter the associations that are active within certain date then pass values for start date and end date
*/
func (a *Client) AssociationsGetAll(params *AssociationsGetAllParams, opts ...ClientOption) (*AssociationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Associations_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Associations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Associations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AttendanceHistoryGetAll attendances history for a selected constituent optionally including primary affiliates does not return history based on recipient for the selected constituent s
*/
func (a *Client) AttendanceHistoryGetAll(params *AttendanceHistoryGetAllParams, opts ...ClientOption) (*AttendanceHistoryGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttendanceHistoryGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AttendanceHistory_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/AttendanceHistory",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttendanceHistoryGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttendanceHistoryGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AttendanceHistory_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AttributesGet gets details of an attribute
*/
func (a *Client) AttributesGet(params *AttributesGetParams, opts ...ClientOption) (*AttributesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttributesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Attributes_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Attributes/{attributeId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttributesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttributesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Attributes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AttributesGetAll gets details of all the attributes for the specified constituent id and all its visible affiliation s attributes as well to exclude attributes of the visible affiliations pass include affiliations false
*/
func (a *Client) AttributesGetAll(params *AttributesGetAllParams, opts ...ClientOption) (*AttributesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttributesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Attributes_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Attributes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttributesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttributesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Attributes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AuditLogsGet gets details of a audit log
*/
func (a *Client) AuditLogsGet(params *AuditLogsGetParams, opts ...ClientOption) (*AuditLogsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditLogsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuditLogs_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/AuditLogs/{auditLog}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuditLogsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditLogsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AuditLogs_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AuditLogsGetAll gets all audit logs the audit log response is paginated with default page index 1 and page size 100 to get the audit log between a specific time interval specify audit start time and audit end time if only audit start time is specified then all audit entries after that time would be returned if only audit end time is specified then all audit entries before that time would be returned
*/
func (a *Client) AuditLogsGetAll(params *AuditLogsGetAllParams, opts ...ClientOption) (*AuditLogsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditLogsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuditLogs_GetAll",
		Method:             "GET",
		PathPattern:        "/Reporting/AuditLogs",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuditLogsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditLogsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AuditLogs_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AuditLogsGetDetails gets audit log details
*/
func (a *Client) AuditLogsGetDetails(params *AuditLogsGetDetailsParams, opts ...ClientOption) (*AuditLogsGetDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditLogsGetDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuditLogs_GetDetails",
		Method:             "GET",
		PathPattern:        "/Reporting/AuditLogs/Details",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuditLogsGetDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditLogsGetDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AuditLogs_GetDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AuthenticateWindowsAuthentication this is a no op operation for windows authentication diagnostics
*/
func (a *Client) AuthenticateWindowsAuthentication(params *AuthenticateWindowsAuthenticationParams, opts ...ClientOption) (*AuthenticateWindowsAuthenticationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateWindowsAuthenticationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authenticate_WindowsAuthentication",
		Method:             "GET",
		PathPattern:        "/Security/Authenticate/Windows",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateWindowsAuthenticationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateWindowsAuthenticationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Authenticate_WindowsAuthentication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchMaintenanceActive returns all open or held batches owned by the service user optionally filters out controlled batches
*/
func (a *Client) BatchMaintenanceActive(params *BatchMaintenanceActiveParams, opts ...ClientOption) (*BatchMaintenanceActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchMaintenanceActiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchMaintenance_Active",
		Method:             "GET",
		PathPattern:        "/Finance/BatchMaintenance/Active",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchMaintenanceActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchMaintenanceActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchMaintenance_Active: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchMaintenanceGet gets a single batch
*/
func (a *Client) BatchMaintenanceGet(params *BatchMaintenanceGetParams, opts ...ClientOption) (*BatchMaintenanceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchMaintenanceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchMaintenance_Get",
		Method:             "GET",
		PathPattern:        "/Finance/BatchMaintenance/{batchId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchMaintenanceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchMaintenanceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchMaintenance_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchTypeGroupsGet gets the details of a batch type group by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) BatchTypeGroupsGet(params *BatchTypeGroupsGetParams, opts ...ClientOption) (*BatchTypeGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypeGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypeGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BatchTypeGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypeGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypeGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchTypeGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchTypeGroupsGetAll gets all batch type groups to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) BatchTypeGroupsGetAll(params *BatchTypeGroupsGetAllParams, opts ...ClientOption) (*BatchTypeGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypeGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypeGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BatchTypeGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypeGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypeGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchTypeGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchTypeGroupsGetSummaries gets a summary representation of all batch type groups
*/
func (a *Client) BatchTypeGroupsGetSummaries(params *BatchTypeGroupsGetSummariesParams, opts ...ClientOption) (*BatchTypeGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypeGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypeGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BatchTypeGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypeGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypeGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchTypeGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchTypeUserGroupGetAll gets all batch type user group mappings
*/
func (a *Client) BatchTypeUserGroupGetAll(params *BatchTypeUserGroupGetAllParams, opts ...ClientOption) (*BatchTypeUserGroupGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypeUserGroupGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypeUserGroup_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/BatchTypeUserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypeUserGroupGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypeUserGroupGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchTypeUserGroup_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchTypesGet gets the details of a batch type by id
*/
func (a *Client) BatchTypesGet(params *BatchTypesGetParams, opts ...ClientOption) (*BatchTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BatchTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchTypesGetAll gets all batch types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) BatchTypesGetAll(params *BatchTypesGetAllParams, opts ...ClientOption) (*BatchTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BatchTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchTypesGetSummaries gets a summary representation of all batch types
*/
func (a *Client) BatchTypesGetSummaries(params *BatchTypesGetSummariesParams, opts ...ClientOption) (*BatchTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BatchTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingSchedulesGet gets the details of a billing schedule to get only the resources for which the user has write edit access pass filter writeonly to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) BillingSchedulesGet(params *BillingSchedulesGetParams, opts ...ClientOption) (*BillingSchedulesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSchedulesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingSchedules_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BillingSchedules/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSchedulesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingSchedulesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingSchedules_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingSchedulesGetAll gets all billing schedules to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) BillingSchedulesGetAll(params *BillingSchedulesGetAllParams, opts ...ClientOption) (*BillingSchedulesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSchedulesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingSchedules_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BillingSchedules",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSchedulesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingSchedulesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingSchedules_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingSchedulesGetSummaries gets a summary representation of all billing schedules
*/
func (a *Client) BillingSchedulesGetSummaries(params *BillingSchedulesGetSummariesParams, opts ...ClientOption) (*BillingSchedulesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSchedulesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingSchedules_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BillingSchedules/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSchedulesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingSchedulesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingSchedules_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingTypesGet gets the details of a billing type by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) BillingTypesGet(params *BillingTypesGetParams, opts ...ClientOption) (*BillingTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BillingTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingTypesGetAll gets details of all billing types to get them in maintenance mode which ignores control groups pass maintenance mode true
*/
func (a *Client) BillingTypesGetAll(params *BillingTypesGetAllParams, opts ...ClientOption) (*BillingTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BillingTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingTypesGetSummaries gets a summary representation of all billing types
*/
func (a *Client) BillingTypesGetSummaries(params *BillingTypesGetSummariesParams, opts ...ClientOption) (*BillingTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BillingTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingCategoriesGet gets the details of a booking category by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) BookingCategoriesGet(params *BookingCategoriesGetParams, opts ...ClientOption) (*BookingCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BookingCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookingCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingCategoriesGetAll gets all booking categories to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) BookingCategoriesGetAll(params *BookingCategoriesGetAllParams, opts ...ClientOption) (*BookingCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BookingCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookingCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingCategoriesGetSummaries gets a summary representation of all booking categories
*/
func (a *Client) BookingCategoriesGetSummaries(params *BookingCategoriesGetSummariesParams, opts ...ClientOption) (*BookingCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BookingCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookingCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingTemplatesGet gets a booking template by ID
*/
func (a *Client) BookingTemplatesGet(params *BookingTemplatesGetParams, opts ...ClientOption) (*BookingTemplatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingTemplatesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingTemplates_Get",
		Method:             "GET",
		PathPattern:        "/EventsManagement/BookingTemplates/{bookingTemplateId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingTemplatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingTemplatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookingTemplates_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingTemplatesGetSummaries gets summary of all booking templates filtered optionally by category
*/
func (a *Client) BookingTemplatesGetSummaries(params *BookingTemplatesGetSummariesParams, opts ...ClientOption) (*BookingTemplatesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingTemplatesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingTemplates_GetSummaries",
		Method:             "GET",
		PathPattern:        "/EventsManagement/BookingTemplates/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingTemplatesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingTemplatesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookingTemplates_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingsGet gets a booking by id
*/
func (a *Client) BookingsGet(params *BookingsGetParams, opts ...ClientOption) (*BookingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_Get",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Bookings/{bookingId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Bookings_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingsGetAllDocumentSummaries gets summary of all the documents associated with the booking excluding the file contents
*/
func (a *Client) BookingsGetAllDocumentSummaries(params *BookingsGetAllDocumentSummariesParams, opts ...ClientOption) (*BookingsGetAllDocumentSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsGetAllDocumentSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_GetAllDocumentSummaries",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Bookings/{bookingId}/Documents/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsGetAllDocumentSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsGetAllDocumentSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Bookings_GetAllDocumentSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingsGetAllDocuments gets all the documents associated with the booking including the file contents
*/
func (a *Client) BookingsGetAllDocuments(params *BookingsGetAllDocumentsParams, opts ...ClientOption) (*BookingsGetAllDocumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsGetAllDocumentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_GetAllDocuments",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Bookings/{bookingId}/Documents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsGetAllDocumentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsGetAllDocumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Bookings_GetAllDocuments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingsGetDocument gets the document associated with the document Id including the file contents
*/
func (a *Client) BookingsGetDocument(params *BookingsGetDocumentParams, opts ...ClientOption) (*BookingsGetDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsGetDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_GetDocument",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Bookings/{bookingId}/Documents/{documentId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsGetDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsGetDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Bookings_GetDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingsGetSummary gets a summary for a single booking
*/
func (a *Client) BookingsGetSummary(params *BookingsGetSummaryParams, opts ...ClientOption) (*BookingsGetSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsGetSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_GetSummary",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Bookings/Summary/{bookingId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsGetSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsGetSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Bookings_GetSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkCopySetsGet gets a bulk copy set by Id
*/
func (a *Client) BulkCopySetsGet(params *BulkCopySetsGetParams, opts ...ClientOption) (*BulkCopySetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_Get",
		Method:             "GET",
		PathPattern:        "/TXN/BulkCopySets/{bulkCopySetId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCopySets_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkCopySetsGetAll gets all bulk copy sets
*/
func (a *Client) BulkCopySetsGetAll(params *BulkCopySetsGetAllParams, opts ...ClientOption) (*BulkCopySetsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/BulkCopySets",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCopySets_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkCopySetsGetDayForCopy returns the packages and performances that will be copied for the daily bulk copy set
*/
func (a *Client) BulkCopySetsGetDayForCopy(params *BulkCopySetsGetDayForCopyParams, opts ...ClientOption) (*BulkCopySetsGetDayForCopyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsGetDayForCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_GetDayForCopy",
		Method:             "GET",
		PathPattern:        "/TXN/BulkCopySets/{bulkCopySetId}/GetDayForCopy",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsGetDayForCopyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsGetDayForCopyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCopySets_GetDayForCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkCopySetsGetSummaries gets a summary of all bulk copy sets
*/
func (a *Client) BulkCopySetsGetSummaries(params *BulkCopySetsGetSummariesParams, opts ...ClientOption) (*BulkCopySetsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/BulkCopySets/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCopySets_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkDailyCopyExclusionsGet gets a bulk daily copy exclusion by id
*/
func (a *Client) BulkDailyCopyExclusionsGet(params *BulkDailyCopyExclusionsGetParams, opts ...ClientOption) (*BulkDailyCopyExclusionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDailyCopyExclusionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDailyCopyExclusions_Get",
		Method:             "GET",
		PathPattern:        "/TXN/BulkDailyCopyExclusions/{bulkDailyCopyExclusionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkDailyCopyExclusionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDailyCopyExclusionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkDailyCopyExclusions_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkDailyCopyExclusionsGetAll gets all bulk daily copy exclusions for a given bulk copy set
*/
func (a *Client) BulkDailyCopyExclusionsGetAll(params *BulkDailyCopyExclusionsGetAllParams, opts ...ClientOption) (*BulkDailyCopyExclusionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDailyCopyExclusionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDailyCopyExclusions_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/BulkDailyCopyExclusions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkDailyCopyExclusionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDailyCopyExclusionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkDailyCopyExclusions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BusinessUnitsGet gets the details of a business unit by id
*/
func (a *Client) BusinessUnitsGet(params *BusinessUnitsGetParams, opts ...ClientOption) (*BusinessUnitsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusinessUnitsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BusinessUnits_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BusinessUnits/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BusinessUnitsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BusinessUnitsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BusinessUnits_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BusinessUnitsGetAll gets all business units for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) BusinessUnitsGetAll(params *BusinessUnitsGetAllParams, opts ...ClientOption) (*BusinessUnitsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusinessUnitsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BusinessUnits_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BusinessUnits",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BusinessUnitsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BusinessUnitsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BusinessUnits_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BusinessUnitsGetSummaries gets a summary representation of all business units
*/
func (a *Client) BusinessUnitsGetSummaries(params *BusinessUnitsGetSummariesParams, opts ...ClientOption) (*BusinessUnitsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusinessUnitsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BusinessUnits_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/BusinessUnits/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BusinessUnitsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BusinessUnitsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BusinessUnits_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CacheInit cache init API
*/
func (a *Client) CacheInit(params *CacheInitParams, opts ...ClientOption) (*CacheInitNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacheInitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cache_Init",
		Method:             "GET",
		PathPattern:        "/Cache/init",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CacheInitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CacheInitNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cache_Init: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CampaignDesignationsGet gets a single designation associated to a campaign
*/
func (a *Client) CampaignDesignationsGet(params *CampaignDesignationsGetParams, opts ...ClientOption) (*CampaignDesignationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignDesignationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignDesignations_Get",
		Method:             "GET",
		PathPattern:        "/Finance/CampaignDesignations/{campaignDesignationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignDesignationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignDesignationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CampaignDesignations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CampaignDesignationsGetAll gets all designations associated to a campaign
*/
func (a *Client) CampaignDesignationsGetAll(params *CampaignDesignationsGetAllParams, opts ...ClientOption) (*CampaignDesignationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignDesignationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignDesignations_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/CampaignDesignations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignDesignationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignDesignationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CampaignDesignations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CampaignFundsGet gets a single fund associated to a campaign
*/
func (a *Client) CampaignFundsGet(params *CampaignFundsGetParams, opts ...ClientOption) (*CampaignFundsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignFundsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignFunds_Get",
		Method:             "GET",
		PathPattern:        "/Finance/CampaignFunds/{campaignFundId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignFundsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignFundsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CampaignFunds_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CampaignFundsGetAll gets all funds associated to a campaign
*/
func (a *Client) CampaignFundsGetAll(params *CampaignFundsGetAllParams, opts ...ClientOption) (*CampaignFundsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignFundsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignFunds_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/CampaignFunds",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignFundsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignFundsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CampaignFunds_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CampaignsGet gets summary of a specific campaign
*/
func (a *Client) CampaignsGet(params *CampaignsGetParams, opts ...ClientOption) (*CampaignsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Campaigns_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Campaigns/{campaignId}/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Campaigns_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CampaignsGetSummaries returns a collection of all campaigns in summary optionally excluding inactive campaigns
*/
func (a *Client) CampaignsGetSummaries(params *CampaignsGetSummariesParams, opts ...ClientOption) (*CampaignsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Campaigns_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Finance/Campaigns/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Campaigns_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CardReaderTypesGet gets the details of a card reader type by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) CardReaderTypesGet(params *CardReaderTypesGetParams, opts ...ClientOption) (*CardReaderTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardReaderTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CardReaderTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CardReaderTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardReaderTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardReaderTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CardReaderTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CardReaderTypesGetAll gets details of all card reader types to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) CardReaderTypesGetAll(params *CardReaderTypesGetAllParams, opts ...ClientOption) (*CardReaderTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardReaderTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CardReaderTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CardReaderTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardReaderTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardReaderTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CardReaderTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CardReaderTypesGetSummaries gets a summary representation of all card reader types
*/
func (a *Client) CardReaderTypesGetSummaries(params *CardReaderTypesGetSummariesParams, opts ...ClientOption) (*CardReaderTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardReaderTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CardReaderTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CardReaderTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardReaderTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardReaderTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CardReaderTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartGet gets the cart details
*/
func (a *Client) CartGet(params *CartGetParams, opts ...ClientOption) (*CartGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_Get",
		Method:             "GET",
		PathPattern:        "/Web/Cart/{sessionKey}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartGetCartProperties returns cart properties
*/
func (a *Client) CartGetCartProperties(params *CartGetCartPropertiesParams, opts ...ClientOption) (*CartGetCartPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartGetCartPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_GetCartProperties",
		Method:             "GET",
		PathPattern:        "/Web/Cart/{sessionKey}/Properties",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartGetCartPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartGetCartPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_GetCartProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartGetMessages gets the pricing rule messages for the current cart both message only and rule messages are returned
*/
func (a *Client) CartGetMessages(params *CartGetMessagesParams, opts ...ClientOption) (*CartGetMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartGetMessagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_GetMessages",
		Method:             "GET",
		PathPattern:        "/Web/Cart/{sessionKey}/Messages",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartGetMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartGetMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_GetMessages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartGetReceiptString returns a formatted receipt for a cart
*/
func (a *Client) CartGetReceiptString(params *CartGetReceiptStringParams, opts ...ClientOption) (*CartGetReceiptStringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartGetReceiptStringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_GetReceiptString",
		Method:             "GET",
		PathPattern:        "/Web/Cart/{sessionKey}/ReceiptString",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartGetReceiptStringReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartGetReceiptStringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_GetReceiptString: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartGetSummary gets the cart summary used by t r b o returns the cart with product lines summarized by price type zone and price
*/
func (a *Client) CartGetSummary(params *CartGetSummaryParams, opts ...ClientOption) (*CartGetSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartGetSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_GetSummary",
		Method:             "GET",
		PathPattern:        "/Web/Cart/{sessionKey}/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartGetSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartGetSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_GetSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ColorsGet gets the details of a color by id
*/
func (a *Client) ColorsGet(params *ColorsGetParams, opts ...ClientOption) (*ColorsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColorsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Colors_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Colors/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ColorsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColorsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Colors_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ColorsGetAll gets all colors for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ColorsGetAll(params *ColorsGetAllParams, opts ...ClientOption) (*ColorsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColorsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Colors_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Colors",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ColorsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColorsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Colors_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ColorsGetSummaries gets a summary representation of all colors
*/
func (a *Client) ColorsGetSummaries(params *ColorsGetSummariesParams, opts ...ClientOption) (*ColorsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColorsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Colors_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Colors/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ColorsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColorsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Colors_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ComposersGet gets the details of a composer by id
*/
func (a *Client) ComposersGet(params *ComposersGetParams, opts ...ClientOption) (*ComposersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComposersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Composers_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Composers/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ComposersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComposersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Composers_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ComposersGetAll gets all composers for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ComposersGetAll(params *ComposersGetAllParams, opts ...ClientOption) (*ComposersGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComposersGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Composers_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Composers",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ComposersGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComposersGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Composers_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ComposersGetSummaries gets a summary representation of all composers
*/
func (a *Client) ComposersGetSummaries(params *ComposersGetSummariesParams, opts ...ClientOption) (*ComposersGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComposersGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Composers_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Composers/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ComposersGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComposersGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Composers_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituenciesGet gets details of constituency
*/
func (a *Client) ConstituenciesGet(params *ConstituenciesGetParams, opts ...ClientOption) (*ConstituenciesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituenciesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituencies_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Constituencies/{constituencyId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituenciesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituenciesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituencies_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituenciesGetAll gets details of all the constituencies for the specified constituent id and all its visible affiliation s constituencies as well to exclude constituencies of the visible affiliations pass include affiliations false
*/
func (a *Client) ConstituenciesGetAll(params *ConstituenciesGetAllParams, opts ...ClientOption) (*ConstituenciesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituenciesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituencies_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Constituencies",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituenciesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituenciesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituencies_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituencyTypesGet gets the details of a constituency type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ConstituencyTypesGet(params *ConstituencyTypesGetParams, opts ...ClientOption) (*ConstituencyTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituencyTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituencyTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituencyTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituencyTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituencyTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituencyTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituencyTypesGetAll gets all constituency types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ConstituencyTypesGetAll(params *ConstituencyTypesGetAllParams, opts ...ClientOption) (*ConstituencyTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituencyTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituencyTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituencyTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituencyTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituencyTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituencyTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituencyTypesGetSummaries gets a summary representation of all constituency types
*/
func (a *Client) ConstituencyTypesGetSummaries(params *ConstituencyTypesGetSummariesParams, opts ...ClientOption) (*ConstituencyTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituencyTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituencyTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituencyTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituencyTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituencyTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituencyTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentContributionsGetAll gets contributions for a constituent
*/
func (a *Client) ConstituentContributionsGetAll(params *ConstituentContributionsGetAllParams, opts ...ClientOption) (*ConstituentContributionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentContributionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentContributions_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Contributions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentContributionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentContributionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentContributions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentDocumentsGet gets the details of a document for a constituent
*/
func (a *Client) ConstituentDocumentsGet(params *ConstituentDocumentsGetParams, opts ...ClientOption) (*ConstituentDocumentsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentDocumentsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentDocuments_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Documents/{documentId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentDocumentsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentDocumentsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentDocuments_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentDocumentsGetAll gets all the documents for a particular constituent including file contents
*/
func (a *Client) ConstituentDocumentsGetAll(params *ConstituentDocumentsGetAllParams, opts ...ClientOption) (*ConstituentDocumentsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentDocumentsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentDocuments_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Documents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentDocumentsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentDocumentsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentDocuments_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentDocumentsGetAllSummary gets summary of all the documents for the constituent only a summary of file information is returned
*/
func (a *Client) ConstituentDocumentsGetAllSummary(params *ConstituentDocumentsGetAllSummaryParams, opts ...ClientOption) (*ConstituentDocumentsGetAllSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentDocumentsGetAllSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentDocuments_GetAllSummary",
		Method:             "GET",
		PathPattern:        "/CRM/Documents/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentDocumentsGetAllSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentDocumentsGetAllSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentDocuments_GetAllSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentGroupsGet gets the details of a constituent group by id
*/
func (a *Client) ConstituentGroupsGet(params *ConstituentGroupsGetParams, opts ...ClientOption) (*ConstituentGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentGroupsGetAll gets all constituent groups for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ConstituentGroupsGetAll(params *ConstituentGroupsGetAllParams, opts ...ClientOption) (*ConstituentGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentGroupsGetSummaries gets a summary representation of all constituent groups
*/
func (a *Client) ConstituentGroupsGetSummaries(params *ConstituentGroupsGetSummariesParams, opts ...ClientOption) (*ConstituentGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentInactivesGet gets the details of a constituent inactive by id
*/
func (a *Client) ConstituentInactivesGet(params *ConstituentInactivesGetParams, opts ...ClientOption) (*ConstituentInactivesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentInactivesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentInactives_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentInactives/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentInactivesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentInactivesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentInactives_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentInactivesGetAll gets all constituent inactives for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ConstituentInactivesGetAll(params *ConstituentInactivesGetAllParams, opts ...ClientOption) (*ConstituentInactivesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentInactivesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentInactives_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentInactives",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentInactivesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentInactivesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentInactives_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentInactivesGetSummaries gets a summary representation of all constituent inactives
*/
func (a *Client) ConstituentInactivesGetSummaries(params *ConstituentInactivesGetSummariesParams, opts ...ClientOption) (*ConstituentInactivesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentInactivesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentInactives_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentInactives/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentInactivesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentInactivesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentInactives_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentProtectionTypesGet gets the details of a constituent protection type by id
*/
func (a *Client) ConstituentProtectionTypesGet(params *ConstituentProtectionTypesGetParams, opts ...ClientOption) (*ConstituentProtectionTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentProtectionTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentProtectionTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentProtectionTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentProtectionTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentProtectionTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentProtectionTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentProtectionTypesGetAll gets all constituent protection types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ConstituentProtectionTypesGetAll(params *ConstituentProtectionTypesGetAllParams, opts ...ClientOption) (*ConstituentProtectionTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentProtectionTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentProtectionTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentProtectionTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentProtectionTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentProtectionTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentProtectionTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentProtectionTypesGetSummaries gets a summary representation of all constituent protection types
*/
func (a *Client) ConstituentProtectionTypesGetSummaries(params *ConstituentProtectionTypesGetSummariesParams, opts ...ClientOption) (*ConstituentProtectionTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentProtectionTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentProtectionTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentProtectionTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentProtectionTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentProtectionTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentProtectionTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentTypeAffiliatesGet gets the details of a constituent type affiliate by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ConstituentTypeAffiliatesGet(params *ConstituentTypeAffiliatesGetParams, opts ...ClientOption) (*ConstituentTypeAffiliatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypeAffiliatesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypeAffiliates_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentTypeAffiliates/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypeAffiliatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypeAffiliatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentTypeAffiliates_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentTypeAffiliatesGetAll gets all constituent type affiliates to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ConstituentTypeAffiliatesGetAll(params *ConstituentTypeAffiliatesGetAllParams, opts ...ClientOption) (*ConstituentTypeAffiliatesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypeAffiliatesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypeAffiliates_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentTypeAffiliates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypeAffiliatesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypeAffiliatesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentTypeAffiliates_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentTypeAffiliatesGetSummaries gets a summary representation of all constituent type affiliates
*/
func (a *Client) ConstituentTypeAffiliatesGetSummaries(params *ConstituentTypeAffiliatesGetSummariesParams, opts ...ClientOption) (*ConstituentTypeAffiliatesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypeAffiliatesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypeAffiliates_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentTypeAffiliates/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypeAffiliatesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypeAffiliatesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentTypeAffiliates_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentTypesGet gets the details of a constituent type by id
*/
func (a *Client) ConstituentTypesGet(params *ConstituentTypesGetParams, opts ...ClientOption) (*ConstituentTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentTypesGetAll gets all constituent types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ConstituentTypesGetAll(params *ConstituentTypesGetAllParams, opts ...ClientOption) (*ConstituentTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentTypesGetSummaries gets a summary representation of all constituent types
*/
func (a *Client) ConstituentTypesGetSummaries(params *ConstituentTypesGetSummariesParams, opts ...ClientOption) (*ConstituentTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ConstituentTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsGet gets the details of a constituent using id
*/
func (a *Client) ConstituentsGet(params *ConstituentsGetParams, opts ...ClientOption) (*ConstituentsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents/{constituentId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsGetConstituent gets constituent details with addresses electronic addresses salutations and phones to exclude information about visible affiliations pass include affiliations false
*/
func (a *Client) ConstituentsGetConstituent(params *ConstituentsGetConstituentParams, opts ...ClientOption) (*ConstituentsGetConstituentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsGetConstituentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_GetConstituent",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents/{constituentId}/Detail",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsGetConstituentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsGetConstituentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_GetConstituent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsGetConstituentDevelopmentInfo gets constituent information for fundraising
*/
func (a *Client) ConstituentsGetConstituentDevelopmentInfo(params *ConstituentsGetConstituentDevelopmentInfoParams, opts ...ClientOption) (*ConstituentsGetConstituentDevelopmentInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsGetConstituentDevelopmentInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_GetConstituentDevelopmentInfo",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents/{constituentId}/DevelopmentInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsGetConstituentDevelopmentInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsGetConstituentDevelopmentInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_GetConstituentDevelopmentInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsGetConstituentSnapshot gets constituent details along with primary address primary salutation primary electronic address phones and affiliates information
*/
func (a *Client) ConstituentsGetConstituentSnapshot(params *ConstituentsGetConstituentSnapshotParams, opts ...ClientOption) (*ConstituentsGetConstituentSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsGetConstituentSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_GetConstituentSnapshot",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents/{constituentId}/Snapshot",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsGetConstituentSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsGetConstituentSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_GetConstituentSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsGetConstituents gets multiple constituents given a set of constituent ids
*/
func (a *Client) ConstituentsGetConstituents(params *ConstituentsGetConstituentsParams, opts ...ClientOption) (*ConstituentsGetConstituentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsGetConstituentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_GetConstituents",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsGetConstituentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsGetConstituentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_GetConstituents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsGetDefaultHeader returns the default header for the constituent including configured flexible header names and values
*/
func (a *Client) ConstituentsGetDefaultHeader(params *ConstituentsGetDefaultHeaderParams, opts ...ClientOption) (*ConstituentsGetDefaultHeaderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsGetDefaultHeaderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_GetDefaultHeader",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents/{constituentId}/Header/Default",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsGetDefaultHeaderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsGetDefaultHeaderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_GetDefaultHeader: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsGetFlexHeader gets the details of a flex header for a constituent
*/
func (a *Client) ConstituentsGetFlexHeader(params *ConstituentsGetFlexHeaderParams, opts ...ClientOption) (*ConstituentsGetFlexHeaderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsGetFlexHeaderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_GetFlexHeader",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents/{constituentId}/Header/Flex/{headerId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsGetFlexHeaderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsGetFlexHeaderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_GetFlexHeader: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsGetHeader returns constituent header details including configured flexible header names and values
*/
func (a *Client) ConstituentsGetHeader(params *ConstituentsGetHeaderParams, opts ...ClientOption) (*ConstituentsGetHeaderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsGetHeaderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_GetHeader",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents/{constituentId}/Header/{headerId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsGetHeaderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsGetHeaderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_GetHeader: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsGetPrimaryHousehold gets primary household constituent details for a provided constituent Id
*/
func (a *Client) ConstituentsGetPrimaryHousehold(params *ConstituentsGetPrimaryHouseholdParams, opts ...ClientOption) (*ConstituentsGetPrimaryHouseholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsGetPrimaryHouseholdParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_GetPrimaryHousehold",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents/PrimaryHousehold",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsGetPrimaryHouseholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsGetPrimaryHouseholdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_GetPrimaryHousehold: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentsSearch searches for constituents using one of four possible search modes querystring parameters are valid based on the type parameter value single line type fluent sample c r m constituents search type fluent and amp q huff single line search type or fluent is the default search if not provided in querystring single line search works on string patterns in the passed search value q param patterns are as follows value contains only alpha characters interpreted as a last name search to search with first name pass comma then additional search value last first text enclosed in quotes is interpreted as a search for name a c e 123 corporation value containing an at symbol is interpreted as an email address value starting with is interpreted as a phone number search value containing alpha and numeric characters is interpreted as a postal code u k and other countries should omit spaces for postal code search values basic search type permits parameters constituent Id ln fn street and post sample URL c r m constituents search type basic and amp ln huff and amp fn frank and amp post 20746 advanced search type permits parameters atype op and value sample URL c r m constituents search type advanced and amp atype email and amp op like and amp value 25 at gmail com attribute search type permits parameters key op value sample URL c r m constituents search type attribute and amp key board affiliation and amp op equals and amp value association member
*/
func (a *Client) ConstituentsSearch(params *ConstituentsSearchParams, opts ...ClientOption) (*ConstituentsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_Search",
		Method:             "GET",
		PathPattern:        "/CRM/Constituents/Search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituents_Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionCategoriesGet gets the details of a contact permission category to get only the resoures for which the user has write edit access pass filter writeonly to get the resource in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ContactPermissionCategoriesGet(params *ContactPermissionCategoriesGetParams, opts ...ClientOption) (*ContactPermissionCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPermissionCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissionCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionCategoriesGetAll gets all contact permission categories to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ContactPermissionCategoriesGetAll(params *ContactPermissionCategoriesGetAllParams, opts ...ClientOption) (*ContactPermissionCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPermissionCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissionCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionCategoriesGetSummaries gets a summary representation of all contact permission categories
*/
func (a *Client) ContactPermissionCategoriesGetSummaries(params *ContactPermissionCategoriesGetSummariesParams, opts ...ClientOption) (*ContactPermissionCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPermissionCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissionCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionTypesGet gets the details of a contact permission type to get the resource only if the user has write edit access pass filter writeonly to get the resource in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ContactPermissionTypesGet(params *ContactPermissionTypesGetParams, opts ...ClientOption) (*ContactPermissionTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPermissionTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissionTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionTypesGetAll gets all contact permission types to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ContactPermissionTypesGetAll(params *ContactPermissionTypesGetAllParams, opts ...ClientOption) (*ContactPermissionTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPermissionTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissionTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionTypesGetForProductionSeasons gets all contact permission types assigned to a set of production seasons
*/
func (a *Client) ContactPermissionTypesGetForProductionSeasons(params *ContactPermissionTypesGetForProductionSeasonsParams, opts ...ClientOption) (*ContactPermissionTypesGetForProductionSeasonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionTypesGetForProductionSeasonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionTypes_GetForProductionSeasons",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPermissionTypes/ByProductionSeason",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionTypesGetForProductionSeasonsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionTypesGetForProductionSeasonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissionTypes_GetForProductionSeasons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionTypesGetSummaries gets a summary representation of all contact permission types
*/
func (a *Client) ContactPermissionTypesGetSummaries(params *ContactPermissionTypesGetSummariesParams, opts ...ClientOption) (*ContactPermissionTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPermissionTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissionTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionsGet gets details of a contact permission
*/
func (a *Client) ContactPermissionsGet(params *ContactPermissionsGetParams, opts ...ClientOption) (*ContactPermissionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissions_Get",
		Method:             "GET",
		PathPattern:        "/CRM/ContactPermissions/{contactPermissionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissions_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionsGetAll gets all the contact permissions for the specified constituent and its affiliations if requested
*/
func (a *Client) ContactPermissionsGetAll(params *ContactPermissionsGetAllParams, opts ...ClientOption) (*ContactPermissionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissions_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/ContactPermissions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointCategoriesGet gets the details of a contact point category by id
*/
func (a *Client) ContactPointCategoriesGet(params *ContactPointCategoriesGetParams, opts ...ClientOption) (*ContactPointCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointCategoriesGetAll gets all contact point categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ContactPointCategoriesGetAll(params *ContactPointCategoriesGetAllParams, opts ...ClientOption) (*ContactPointCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointCategoriesGetSummaries gets a summary representation of all contact point categories
*/
func (a *Client) ContactPointCategoriesGetSummaries(params *ContactPointCategoriesGetSummariesParams, opts ...ClientOption) (*ContactPointCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointCategoryPurposesGet gets the details of a contact point category purpose by id
*/
func (a *Client) ContactPointCategoryPurposesGet(params *ContactPointCategoryPurposesGetParams, opts ...ClientOption) (*ContactPointCategoryPurposesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoryPurposesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategoryPurposes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointCategoryPurposes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoryPurposesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoryPurposesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointCategoryPurposes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointCategoryPurposesGetAll gets all contact point category purposes for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ContactPointCategoryPurposesGetAll(params *ContactPointCategoryPurposesGetAllParams, opts ...ClientOption) (*ContactPointCategoryPurposesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoryPurposesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategoryPurposes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointCategoryPurposes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoryPurposesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoryPurposesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointCategoryPurposes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointCategoryPurposesGetSummaries gets a summary representation of all contact point category purposes
*/
func (a *Client) ContactPointCategoryPurposesGetSummaries(params *ContactPointCategoryPurposesGetSummariesParams, opts ...ClientOption) (*ContactPointCategoryPurposesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoryPurposesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategoryPurposes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointCategoryPurposes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoryPurposesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoryPurposesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointCategoryPurposes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposeCategoriesGet gets the details of a contact point purpose category by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ContactPointPurposeCategoriesGet(params *ContactPointPurposeCategoriesGetParams, opts ...ClientOption) (*ContactPointPurposeCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointPurposeCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposeCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposeCategoriesGetAll gets all contact point purpose categories to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ContactPointPurposeCategoriesGetAll(params *ContactPointPurposeCategoriesGetAllParams, opts ...ClientOption) (*ContactPointPurposeCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointPurposeCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposeCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposeCategoriesGetSummaries gets a summary representation of all contact point purpose categories
*/
func (a *Client) ContactPointPurposeCategoriesGetSummaries(params *ContactPointPurposeCategoriesGetSummariesParams, opts ...ClientOption) (*ContactPointPurposeCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointPurposeCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposeCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposeMapsGet gets details of a contact point purpose
*/
func (a *Client) ContactPointPurposeMapsGet(params *ContactPointPurposeMapsGetParams, opts ...ClientOption) (*ContactPointPurposeMapsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeMapsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeMaps_Get",
		Method:             "GET",
		PathPattern:        "/CRM/ContactPointPurposeMaps/{contactPointPurposeMapId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeMapsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeMapsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposeMaps_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposeMapsGetAll gets details of all the contact point purposes for the specified constituent constituent Id and all its visible affiliation s contact point purposes as well to exclude contact point purposes of the visible affiliations pass include affiliations false to get contact point purposes for a contact point pass contact point Id
*/
func (a *Client) ContactPointPurposeMapsGetAll(params *ContactPointPurposeMapsGetAllParams, opts ...ClientOption) (*ContactPointPurposeMapsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeMapsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeMaps_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/ContactPointPurposeMaps",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeMapsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeMapsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposeMaps_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposesGet gets the details of a contact point purpose by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ContactPointPurposesGet(params *ContactPointPurposesGetParams, opts ...ClientOption) (*ContactPointPurposesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointPurposes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposesGetAll gets all contact point purposes to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ContactPointPurposesGetAll(params *ContactPointPurposesGetAllParams, opts ...ClientOption) (*ContactPointPurposesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointPurposes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposesGetSummaries gets a summary representation of all contact point purposes
*/
func (a *Client) ContactPointPurposesGetSummaries(params *ContactPointPurposesGetSummariesParams, opts ...ClientOption) (*ContactPointPurposesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactPointPurposes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointsGetAll gets all the delivery points for the specified constituent constituent Id and all its visible affiliation s delivery point purposes as well to exclude delivery point purposes of the visible affiliations pass include affiliations false
*/
func (a *Client) ContactPointsGetAll(params *ContactPointsGetAllParams, opts ...ClientOption) (*ContactPointsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPoints_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/ContactPoints",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPoints_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactTypesGet gets the details of a contact type by id
*/
func (a *Client) ContactTypesGet(params *ContactTypesGetParams, opts ...ClientOption) (*ContactTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactTypesGetAll gets all contact types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ContactTypesGetAll(params *ContactTypesGetAllParams, opts ...ClientOption) (*ContactTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactTypesGetSummaries gets a summary representation of all contact types
*/
func (a *Client) ContactTypesGetSummaries(params *ContactTypesGetSummariesParams, opts ...ClientOption) (*ContactTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContactTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContextInformationGet gets a commonly used set of default values for the user and usergroup in the current security context
*/
func (a *Client) ContextInformationGet(params *ContextInformationGetParams, opts ...ClientOption) (*ContextInformationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContextInformationGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContextInformation_Get",
		Method:             "GET",
		PathPattern:        "/Security/ContextInformation",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContextInformationGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContextInformationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContextInformation_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContributionDesignationsGet gets the details of a contribution designation by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ContributionDesignationsGet(params *ContributionDesignationsGetParams, opts ...ClientOption) (*ContributionDesignationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionDesignationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionDesignations_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContributionDesignations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionDesignationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionDesignationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContributionDesignations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContributionDesignationsGetAll gets all contribution designations to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ContributionDesignationsGetAll(params *ContributionDesignationsGetAllParams, opts ...ClientOption) (*ContributionDesignationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionDesignationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionDesignations_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContributionDesignations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionDesignationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionDesignationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContributionDesignations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContributionDesignationsGetSummaries gets a summary representation of all contribution designations
*/
func (a *Client) ContributionDesignationsGetSummaries(params *ContributionDesignationsGetSummariesParams, opts ...ClientOption) (*ContributionDesignationsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionDesignationsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionDesignations_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContributionDesignations/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionDesignationsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionDesignationsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContributionDesignations_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContributionImportSetsGet gets the details of a contribution import set by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ContributionImportSetsGet(params *ContributionImportSetsGetParams, opts ...ClientOption) (*ContributionImportSetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionImportSetsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionImportSets_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContributionImportSets/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionImportSetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionImportSetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContributionImportSets_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContributionImportSetsGetAll gets all contribution import sets to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups if this is a secured resource pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ContributionImportSetsGetAll(params *ContributionImportSetsGetAllParams, opts ...ClientOption) (*ContributionImportSetsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionImportSetsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionImportSets_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContributionImportSets",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionImportSetsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionImportSetsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContributionImportSets_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContributionImportSetsGetSummaries gets a summary representation of all contribution import sets
*/
func (a *Client) ContributionImportSetsGetSummaries(params *ContributionImportSetsGetSummariesParams, opts ...ClientOption) (*ContributionImportSetsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionImportSetsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionImportSets_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ContributionImportSets/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionImportSetsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionImportSetsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContributionImportSets_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ControlGroupUserGroupsGet gets the details of a control group user group mapping by id
*/
func (a *Client) ControlGroupUserGroupsGet(params *ControlGroupUserGroupsGetParams, opts ...ClientOption) (*ControlGroupUserGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupUserGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroupUserGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ControlGroupUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupUserGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupUserGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ControlGroupUserGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ControlGroupUserGroupsGetAll gets all control group user group mappings
*/
func (a *Client) ControlGroupUserGroupsGetAll(params *ControlGroupUserGroupsGetAllParams, opts ...ClientOption) (*ControlGroupUserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroupUserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ControlGroupUserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupUserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupUserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ControlGroupUserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ControlGroupUserGroupsGetSummaries gets a summary representation of all control group user group mappings
*/
func (a *Client) ControlGroupUserGroupsGetSummaries(params *ControlGroupUserGroupsGetSummariesParams, opts ...ClientOption) (*ControlGroupUserGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupUserGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroupUserGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ControlGroupUserGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupUserGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupUserGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ControlGroupUserGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ControlGroupsGet gets the details of a control group by id
*/
func (a *Client) ControlGroupsGet(params *ControlGroupsGetParams, opts ...ClientOption) (*ControlGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ControlGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ControlGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ControlGroupsGetAll gets all control groups for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ControlGroupsGetAll(params *ControlGroupsGetAllParams, opts ...ClientOption) (*ControlGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ControlGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ControlGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ControlGroupsGetSummaries gets a summary representation of all control groups
*/
func (a *Client) ControlGroupsGetSummaries(params *ControlGroupsGetSummariesParams, opts ...ClientOption) (*ControlGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ControlGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ControlGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreIdentityToken core identity token API
*/
func (a *Client) CoreIdentityToken(params *CoreIdentityTokenParams, opts ...ClientOption) (*CoreIdentityTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreIdentityTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CoreIdentity_Token",
		Method:             "GET",
		PathPattern:        "/Security/CoreIdentity/Token",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CoreIdentityTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreIdentityTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CoreIdentity_Token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CountriesGet gets the details of a country by id
*/
func (a *Client) CountriesGet(params *CountriesGetParams, opts ...ClientOption) (*CountriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCountriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Countries_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Countries/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CountriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CountriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Countries_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CountriesGetAll gets all countries for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) CountriesGetAll(params *CountriesGetAllParams, opts ...ClientOption) (*CountriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCountriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Countries_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Countries",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CountriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CountriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Countries_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CountriesGetSummaries gets a summary representation of all countries
*/
func (a *Client) CountriesGetSummaries(params *CountriesGetSummariesParams, opts ...ClientOption) (*CountriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCountriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Countries_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Countries/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CountriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CountriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Countries_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CrediteeTypesGet gets the details of a creditee type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) CrediteeTypesGet(params *CrediteeTypesGetParams, opts ...ClientOption) (*CrediteeTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrediteeTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CrediteeTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CrediteeTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrediteeTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrediteeTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CrediteeTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CrediteeTypesGetAll gets all creditee types to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups if this is a secured resource pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) CrediteeTypesGetAll(params *CrediteeTypesGetAllParams, opts ...ClientOption) (*CrediteeTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrediteeTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CrediteeTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CrediteeTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrediteeTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrediteeTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CrediteeTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CrediteeTypesGetSummaries gets a summary representation of all creditee types
*/
func (a *Client) CrediteeTypesGetSummaries(params *CrediteeTypesGetSummariesParams, opts ...ClientOption) (*CrediteeTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrediteeTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CrediteeTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CrediteeTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrediteeTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrediteeTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CrediteeTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreditsGetCredits returns all credits for the requested production element and all credits from above it in the production hierarchy
*/
func (a *Client) CreditsGetCredits(params *CreditsGetCreditsParams, opts ...ClientOption) (*CreditsGetCreditsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreditsGetCreditsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Credits_GetCredits",
		Method:             "GET",
		PathPattern:        "/TXN/Credits",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreditsGetCreditsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreditsGetCreditsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Credits_GetCredits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CriterionOperatorsGet gets the details of a criterion operator by id
*/
func (a *Client) CriterionOperatorsGet(params *CriterionOperatorsGetParams, opts ...ClientOption) (*CriterionOperatorsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCriterionOperatorsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CriterionOperators_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CriterionOperators/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CriterionOperatorsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CriterionOperatorsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CriterionOperators_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CriterionOperatorsGetAll gets all criterion operators for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) CriterionOperatorsGetAll(params *CriterionOperatorsGetAllParams, opts ...ClientOption) (*CriterionOperatorsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCriterionOperatorsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CriterionOperators_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CriterionOperators",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CriterionOperatorsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CriterionOperatorsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CriterionOperators_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CriterionOperatorsGetSummaries gets a summary representation of all criterion operators
*/
func (a *Client) CriterionOperatorsGetSummaries(params *CriterionOperatorsGetSummariesParams, opts ...ClientOption) (*CriterionOperatorsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCriterionOperatorsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CriterionOperators_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CriterionOperators/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CriterionOperatorsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CriterionOperatorsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CriterionOperators_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CumulativeGivingReceiptsGet gets details of an cumulative giving receipt
*/
func (a *Client) CumulativeGivingReceiptsGet(params *CumulativeGivingReceiptsGetParams, opts ...ClientOption) (*CumulativeGivingReceiptsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCumulativeGivingReceiptsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CumulativeGivingReceipts_Get",
		Method:             "GET",
		PathPattern:        "/CRM/CumulativeGivingReceipts/{cumulativeGivingReceiptId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CumulativeGivingReceiptsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CumulativeGivingReceiptsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CumulativeGivingReceipts_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CumulativeGivingReceiptsGetAll gets cumulative giving receipts for the specified constituent id and affiliation cumulative giving receipts as well to exclude receipts of the visible affiliations pass include affiliations false
*/
func (a *Client) CumulativeGivingReceiptsGetAll(params *CumulativeGivingReceiptsGetAllParams, opts ...ClientOption) (*CumulativeGivingReceiptsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCumulativeGivingReceiptsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CumulativeGivingReceipts_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/CumulativeGivingReceipts",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CumulativeGivingReceiptsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CumulativeGivingReceiptsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CumulativeGivingReceipts_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CumulativeGivingReceiptsGetForSession tos retrieve a specific receipt for a session pass session Id and constituent Id
*/
func (a *Client) CumulativeGivingReceiptsGetForSession(params *CumulativeGivingReceiptsGetForSessionParams, opts ...ClientOption) (*CumulativeGivingReceiptsGetForSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCumulativeGivingReceiptsGetForSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CumulativeGivingReceipts_GetForSession",
		Method:             "GET",
		PathPattern:        "/CRM/CumulativeGivingReceipts/ForSession",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CumulativeGivingReceiptsGetForSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CumulativeGivingReceiptsGetForSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CumulativeGivingReceipts_GetForSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CurrencyTypesGet gets the details of a currency type by id
*/
func (a *Client) CurrencyTypesGet(params *CurrencyTypesGetParams, opts ...ClientOption) (*CurrencyTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCurrencyTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CurrencyTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CurrencyTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CurrencyTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CurrencyTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CurrencyTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CurrencyTypesGetAll gets all currency types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) CurrencyTypesGetAll(params *CurrencyTypesGetAllParams, opts ...ClientOption) (*CurrencyTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCurrencyTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CurrencyTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CurrencyTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CurrencyTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CurrencyTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CurrencyTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CurrencyTypesGetSummaries gets a summary representation of all currency types
*/
func (a *Client) CurrencyTypesGetSummaries(params *CurrencyTypesGetSummariesParams, opts ...ClientOption) (*CurrencyTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCurrencyTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CurrencyTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CurrencyTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CurrencyTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CurrencyTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CurrencyTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomDefaultCategoriesGet gets the details of a custom default category by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) CustomDefaultCategoriesGet(params *CustomDefaultCategoriesGetParams, opts ...ClientOption) (*CustomDefaultCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaultCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CustomDefaultCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomDefaultCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomDefaultCategoriesGetAll gets all custom default categories to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) CustomDefaultCategoriesGetAll(params *CustomDefaultCategoriesGetAllParams, opts ...ClientOption) (*CustomDefaultCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaultCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CustomDefaultCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomDefaultCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomDefaultCategoriesGetSummaries gets a summary representation of all custom default categories
*/
func (a *Client) CustomDefaultCategoriesGetSummaries(params *CustomDefaultCategoriesGetSummariesParams, opts ...ClientOption) (*CustomDefaultCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaultCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CustomDefaultCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomDefaultCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomDefaultsGet gets the details of a custom default by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) CustomDefaultsGet(params *CustomDefaultsGetParams, opts ...ClientOption) (*CustomDefaultsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaults_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CustomDefaults/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomDefaults_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomDefaultsGetAll gets all custom defaults to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) CustomDefaultsGetAll(params *CustomDefaultsGetAllParams, opts ...ClientOption) (*CustomDefaultsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaults_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CustomDefaults",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomDefaults_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomDefaultsGetSummaries gets a summary representation of all custom defaults
*/
func (a *Client) CustomDefaultsGetSummaries(params *CustomDefaultsGetSummariesParams, opts ...ClientOption) (*CustomDefaultsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaults_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/CustomDefaults/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomDefaults_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomGet gets details of an entry in the table for the resource as defined by resource name in t r d a t a s e r v i c e t a b l e s with the given id Id
*/
func (a *Client) CustomGet(params *CustomGetParams, opts ...ClientOption) (*CustomGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Custom_Get",
		Method:             "GET",
		PathPattern:        "/Custom/{resourceName}/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Custom_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomGetAll gets all data for the resource configured in t r d a t a s e r v i c e t a b l e s the resource name in the URL should be replaced by the name of the resource as configured in t r d a t a s e r v i c e t a b l e s the data can be filtered by using a set of query parameters the format for the filter query parameters is column1 value1 and amp column2 value2 where column1 can either be the name of the column in the table or a formatted name for the column as defined in t r d a t a s e r v i c e c o l u m n s for more information about custom resources including setup and use please look at the a href custom data custom data a help page
*/
func (a *Client) CustomGetAll(params *CustomGetAllParams, opts ...ClientOption) (*CustomGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Custom_GetAll",
		Method:             "GET",
		PathPattern:        "/Custom/{resourceName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Custom_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomGetMetadata gets the metadata information of a custom table as defined by t r d a t a s e r v i c e t a b l e s and t r d a t a s e r v i c e c o l u m n s
*/
func (a *Client) CustomGetMetadata(params *CustomGetMetadataParams, opts ...ClientOption) (*CustomGetMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomGetMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Custom_GetMetadata",
		Method:             "GET",
		PathPattern:        "/Custom/Metadata",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomGetMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomGetMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Custom_GetMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeliveryMethodsGet gets the details of a delivery method by id
*/
func (a *Client) DeliveryMethodsGet(params *DeliveryMethodsGetParams, opts ...ClientOption) (*DeliveryMethodsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliveryMethodsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeliveryMethods_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DeliveryMethods/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeliveryMethodsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeliveryMethodsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeliveryMethods_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeliveryMethodsGetAll gets all delivery methods for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) DeliveryMethodsGetAll(params *DeliveryMethodsGetAllParams, opts ...ClientOption) (*DeliveryMethodsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliveryMethodsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeliveryMethods_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DeliveryMethods",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeliveryMethodsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeliveryMethodsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeliveryMethods_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeliveryMethodsGetSummaries gets a summary representation of all delivery methods
*/
func (a *Client) DeliveryMethodsGetSummaries(params *DeliveryMethodsGetSummariesParams, opts ...ClientOption) (*DeliveryMethodsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliveryMethodsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeliveryMethods_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DeliveryMethods/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeliveryMethodsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeliveryMethodsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeliveryMethods_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DesignationCodesGet gets the details of a designation code by id
*/
func (a *Client) DesignationCodesGet(params *DesignationCodesGetParams, opts ...ClientOption) (*DesignationCodesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDesignationCodesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DesignationCodes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DesignationCodes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DesignationCodesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DesignationCodesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DesignationCodes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DesignationCodesGetAll gets all designation codes for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) DesignationCodesGetAll(params *DesignationCodesGetAllParams, opts ...ClientOption) (*DesignationCodesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDesignationCodesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DesignationCodes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DesignationCodes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DesignationCodesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DesignationCodesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DesignationCodes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DesignationCodesGetSummaries gets a summary representation of all designation codes
*/
func (a *Client) DesignationCodesGetSummaries(params *DesignationCodesGetSummariesParams, opts ...ClientOption) (*DesignationCodesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDesignationCodesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DesignationCodes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DesignationCodes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DesignationCodesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DesignationCodesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DesignationCodes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DesignsGet gets the details of a design by id
*/
func (a *Client) DesignsGet(params *DesignsGetParams, opts ...ClientOption) (*DesignsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDesignsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Designs_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Designs/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DesignsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DesignsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Designs_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DesignsGetAll gets all designs for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) DesignsGetAll(params *DesignsGetAllParams, opts ...ClientOption) (*DesignsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDesignsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Designs_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Designs",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DesignsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DesignsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Designs_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DesignsGetSummaries gets a summary representation of all designs
*/
func (a *Client) DesignsGetSummaries(params *DesignsGetSummariesParams, opts ...ClientOption) (*DesignsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDesignsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Designs_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Designs/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DesignsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DesignsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Designs_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiagnosticsEncryptionKeyCheck validates encryption key dates
*/
func (a *Client) DiagnosticsEncryptionKeyCheck(params *DiagnosticsEncryptionKeyCheckParams, opts ...ClientOption) (*DiagnosticsEncryptionKeyCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiagnosticsEncryptionKeyCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Diagnostics_EncryptionKeyCheck",
		Method:             "GET",
		PathPattern:        "/Diagnostics/EncryptionKey",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiagnosticsEncryptionKeyCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiagnosticsEncryptionKeyCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Diagnostics_EncryptionKeyCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiagnosticsGetAPIPluginConfiguration returns current API plugin configuration with listing of registered plugins whether plugins are enabled and whether plugins are reloaded with each request
*/
func (a *Client) DiagnosticsGetAPIPluginConfiguration(params *DiagnosticsGetAPIPluginConfigurationParams, opts ...ClientOption) (*DiagnosticsGetAPIPluginConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiagnosticsGetAPIPluginConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Diagnostics_GetApiPluginConfiguration",
		Method:             "GET",
		PathPattern:        "/Diagnostics/ApiPluginConfiguration",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiagnosticsGetAPIPluginConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiagnosticsGetAPIPluginConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Diagnostics_GetApiPluginConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiagnosticsGetSeatServerStatus returns status of the seat server connection
*/
func (a *Client) DiagnosticsGetSeatServerStatus(params *DiagnosticsGetSeatServerStatusParams, opts ...ClientOption) (*DiagnosticsGetSeatServerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiagnosticsGetSeatServerStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Diagnostics_GetSeatServerStatus",
		Method:             "GET",
		PathPattern:        "/Diagnostics/SeatServerStatus",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiagnosticsGetSeatServerStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiagnosticsGetSeatServerStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Diagnostics_GetSeatServerStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiagnosticsGetStatus returns status of the application connection to database and service version information
*/
func (a *Client) DiagnosticsGetStatus(params *DiagnosticsGetStatusParams, opts ...ClientOption) (*DiagnosticsGetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiagnosticsGetStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Diagnostics_GetStatus",
		Method:             "GET",
		PathPattern:        "/Diagnostics/Status",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiagnosticsGetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiagnosticsGetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Diagnostics_GetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiagnosticsGetStatusReport returns status of the application connection to database and service version information as an html page
*/
func (a *Client) DiagnosticsGetStatusReport(params *DiagnosticsGetStatusReportParams, opts ...ClientOption) (*DiagnosticsGetStatusReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiagnosticsGetStatusReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Diagnostics_GetStatusReport",
		Method:             "GET",
		PathPattern:        "/Diagnostics/Report",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiagnosticsGetStatusReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiagnosticsGetStatusReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Diagnostics_GetStatusReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DirectDebitAccountTypesGet gets the details of a direct debit account type by id
*/
func (a *Client) DirectDebitAccountTypesGet(params *DirectDebitAccountTypesGetParams, opts ...ClientOption) (*DirectDebitAccountTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDirectDebitAccountTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DirectDebitAccountTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DirectDebitAccountTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DirectDebitAccountTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DirectDebitAccountTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DirectDebitAccountTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DirectDebitAccountTypesGetAll gets all direct debit currency types
*/
func (a *Client) DirectDebitAccountTypesGetAll(params *DirectDebitAccountTypesGetAllParams, opts ...ClientOption) (*DirectDebitAccountTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDirectDebitAccountTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DirectDebitAccountTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DirectDebitAccountTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DirectDebitAccountTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DirectDebitAccountTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DirectDebitAccountTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DirectDebitAccountTypesGetSummaries gets a summary representation of all direct debit account types
*/
func (a *Client) DirectDebitAccountTypesGetSummaries(params *DirectDebitAccountTypesGetSummariesParams, opts ...ClientOption) (*DirectDebitAccountTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDirectDebitAccountTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DirectDebitAccountTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DirectDebitAccountTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DirectDebitAccountTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DirectDebitAccountTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DirectDebitAccountTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiscountTypesGet gets the details of a discount type by id
*/
func (a *Client) DiscountTypesGet(params *DiscountTypesGetParams, opts ...ClientOption) (*DiscountTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DiscountTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiscountTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DiscountTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiscountTypesGetAll gets all discount types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) DiscountTypesGetAll(params *DiscountTypesGetAllParams, opts ...ClientOption) (*DiscountTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DiscountTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiscountTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DiscountTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiscountTypesGetSummaries gets a summary representation of all discount types
*/
func (a *Client) DiscountTypesGetSummaries(params *DiscountTypesGetSummariesParams, opts ...ClientOption) (*DiscountTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DiscountTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiscountTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DiscountTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DivisionsGetAll gets the control group division mappings for the specified division
*/
func (a *Client) DivisionsGetAll(params *DivisionsGetAllParams, opts ...ClientOption) (*DivisionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDivisionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Divisions_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/Divisions/ControlGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DivisionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DivisionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Divisions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DivisionsGetForDivision gets the control group division mappings for the specified division
*/
func (a *Client) DivisionsGetForDivision(params *DivisionsGetForDivisionParams, opts ...ClientOption) (*DivisionsGetForDivisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDivisionsGetForDivisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Divisions_GetForDivision",
		Method:             "GET",
		PathPattern:        "/Security/Divisions/{divisionId}/ControlGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DivisionsGetForDivisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DivisionsGetForDivisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Divisions_GetForDivision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentCategoriesGet gets the details of a document category by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) DocumentCategoriesGet(params *DocumentCategoriesGetParams, opts ...ClientOption) (*DocumentCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DocumentCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DocumentCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentCategoriesGetAll gets all document categories to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) DocumentCategoriesGetAll(params *DocumentCategoriesGetAllParams, opts ...ClientOption) (*DocumentCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DocumentCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DocumentCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentCategoriesGetSummaries gets a summary representation of all document categories
*/
func (a *Client) DocumentCategoriesGetSummaries(params *DocumentCategoriesGetSummariesParams, opts ...ClientOption) (*DocumentCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DocumentCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DocumentCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentsGet gets the details of a document
*/
func (a *Client) DocumentsGet(params *DocumentsGetParams, opts ...ClientOption) (*DocumentsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Documents_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Documents/{documentId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Documents_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentsGetAll gets all the documents for a particular resource including file contents only documents associated with steps may be returned at this time
*/
func (a *Client) DocumentsGetAll(params *DocumentsGetAllParams, opts ...ClientOption) (*DocumentsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Documents_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/Documents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Documents_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentsGetAllSummary gets summary of all the documents for the step only a summary of file information is returned
*/
func (a *Client) DocumentsGetAllSummary(params *DocumentsGetAllSummaryParams, opts ...ClientOption) (*DocumentsGetAllSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentsGetAllSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Documents_GetAllSummary",
		Method:             "GET",
		PathPattern:        "/Finance/Documents/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentsGetAllSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentsGetAllSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Documents_GetAllSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentsSettings gets configuration settings for uploading documents
*/
func (a *Client) DocumentsSettings(params *DocumentsSettingsParams, opts ...ClientOption) (*DocumentsSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentsSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Documents_Settings",
		Method:             "GET",
		PathPattern:        "/Finance/Documents/Settings",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentsSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentsSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Documents_Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DonationLevelsGet gets the details of a donation level by id
*/
func (a *Client) DonationLevelsGet(params *DonationLevelsGetParams, opts ...ClientOption) (*DonationLevelsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDonationLevelsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DonationLevels_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DonationLevels/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DonationLevelsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DonationLevelsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DonationLevels_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DonationLevelsGetAll gets all donation levels for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) DonationLevelsGetAll(params *DonationLevelsGetAllParams, opts ...ClientOption) (*DonationLevelsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDonationLevelsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DonationLevels_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DonationLevels",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DonationLevelsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DonationLevelsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DonationLevels_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DonationLevelsGetSummaries gets a summary representation of all donation levels
*/
func (a *Client) DonationLevelsGetSummaries(params *DonationLevelsGetSummariesParams, opts ...ClientOption) (*DonationLevelsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDonationLevelsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DonationLevels_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/DonationLevels/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DonationLevelsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DonationLevelsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DonationLevels_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EMVGetAllLanes retrieves information on all lanes associated with merchant
*/
func (a *Client) EMVGetAllLanes(params *EMVGetAllLanesParams, opts ...ClientOption) (*EMVGetAllLanesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVGetAllLanesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_GetAllLanes",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/EMV/TriPosLanes/Lanes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVGetAllLanesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVGetAllLanesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EMV_GetAllLanes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EMVGetConnectionStatus gets connection status for a lane
*/
func (a *Client) EMVGetConnectionStatus(params *EMVGetConnectionStatusParams, opts ...ClientOption) (*EMVGetConnectionStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVGetConnectionStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_GetConnectionStatus",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/EMV/TriPosLanes/{laneId}/ConnectionStatus",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVGetConnectionStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVGetConnectionStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EMV_GetConnectionStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EMVGetConnectionStatusHistory gets connection status history for a lane
*/
func (a *Client) EMVGetConnectionStatusHistory(params *EMVGetConnectionStatusHistoryParams, opts ...ClientOption) (*EMVGetConnectionStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVGetConnectionStatusHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_GetConnectionStatusHistory",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/EMV/TriPosLanes/{laneId}/ConnectionStatus/History",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVGetConnectionStatusHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVGetConnectionStatusHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EMV_GetConnectionStatusHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EMVGetIdleMessage retrieves idle message for a specific lane
*/
func (a *Client) EMVGetIdleMessage(params *EMVGetIdleMessageParams, opts ...ClientOption) (*EMVGetIdleMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVGetIdleMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_GetIdleMessage",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/EMV/TriPosLanes/{laneId}/Profiles/Idle",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVGetIdleMessageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVGetIdleMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EMV_GetIdleMessage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EMVGetLane retrieves information for a specific lane
*/
func (a *Client) EMVGetLane(params *EMVGetLaneParams, opts ...ClientOption) (*EMVGetLaneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVGetLaneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_GetLane",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/EMV/TriPosLanes/{laneId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVGetLaneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVGetLaneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EMV_GetLane: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ElectronicAddressTypesGet gets the details of an electronic address type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ElectronicAddressTypesGet(params *ElectronicAddressTypesGetParams, opts ...ClientOption) (*ElectronicAddressTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddressTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ElectronicAddressTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ElectronicAddressTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ElectronicAddressTypesGetAll gets all electronic address types to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ElectronicAddressTypesGetAll(params *ElectronicAddressTypesGetAllParams, opts ...ClientOption) (*ElectronicAddressTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddressTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ElectronicAddressTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ElectronicAddressTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ElectronicAddressTypesGetSummaries gets a summary representation of all electronic address types
*/
func (a *Client) ElectronicAddressTypesGetSummaries(params *ElectronicAddressTypesGetSummariesParams, opts ...ClientOption) (*ElectronicAddressTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddressTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ElectronicAddressTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ElectronicAddressTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ElectronicAddressesGet gets details of an electronic address
*/
func (a *Client) ElectronicAddressesGet(params *ElectronicAddressesGetParams, opts ...ClientOption) (*ElectronicAddressesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddresses_Get",
		Method:             "GET",
		PathPattern:        "/CRM/ElectronicAddresses/{electronicAddressId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ElectronicAddresses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ElectronicAddressesGetAll gets electronic addresses for constituent s or query general public electronic addresses for a specific address either constituent ids use general public or address must be specified in request for constituent electronic address visible affiliation electronic addresses can be included with include affiliations true to exclude electronic addresses of the visible affiliations pass include affiliations false to retrieve only the primary electronic addresses pass primary only true
*/
func (a *Client) ElectronicAddressesGetAll(params *ElectronicAddressesGetAllParams, opts ...ClientOption) (*ElectronicAddressesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddresses_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/ElectronicAddresses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ElectronicAddresses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ElectronicAddressesIsAttachedToLogin checks if the specified electronic address is attached to a web login
*/
func (a *Client) ElectronicAddressesIsAttachedToLogin(params *ElectronicAddressesIsAttachedToLoginParams, opts ...ClientOption) (*ElectronicAddressesIsAttachedToLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressesIsAttachedToLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddresses_IsAttachedToLogin",
		Method:             "GET",
		PathPattern:        "/CRM/ElectronicAddresses/{electronicAddressId}/IsAttachedToLogin",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressesIsAttachedToLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressesIsAttachedToLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ElectronicAddresses_IsAttachedToLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailProfilesGet gets the details of an email profile by id
*/
func (a *Client) EmailProfilesGet(params *EmailProfilesGetParams, opts ...ClientOption) (*EmailProfilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailProfilesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmailProfiles_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/EmailProfiles/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailProfilesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailProfilesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailProfiles_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailProfilesGetAll gets all email profiles
*/
func (a *Client) EmailProfilesGetAll(params *EmailProfilesGetAllParams, opts ...ClientOption) (*EmailProfilesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailProfilesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmailProfiles_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/EmailProfiles",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailProfilesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailProfilesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailProfiles_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailProfilesGetSummaries gets summary of all email profiles
*/
func (a *Client) EmailProfilesGetSummaries(params *EmailProfilesGetSummariesParams, opts ...ClientOption) (*EmailProfilesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailProfilesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmailProfiles_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/EmailProfiles/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailProfilesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailProfilesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailProfiles_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmarketIndicatorsGet gets the details of an emarket indicator by id
*/
func (a *Client) EmarketIndicatorsGet(params *EmarketIndicatorsGetParams, opts ...ClientOption) (*EmarketIndicatorsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmarketIndicatorsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmarketIndicators_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/EmarketIndicators/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmarketIndicatorsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmarketIndicatorsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmarketIndicators_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmarketIndicatorsGetAll gets all emarket indicators for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) EmarketIndicatorsGetAll(params *EmarketIndicatorsGetAllParams, opts ...ClientOption) (*EmarketIndicatorsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmarketIndicatorsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmarketIndicators_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/EmarketIndicators",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmarketIndicatorsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmarketIndicatorsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmarketIndicators_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmarketIndicatorsGetSummaries gets a summary representation of all emarket indicators
*/
func (a *Client) EmarketIndicatorsGetSummaries(params *EmarketIndicatorsGetSummariesParams, opts ...ClientOption) (*EmarketIndicatorsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmarketIndicatorsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmarketIndicators_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/EmarketIndicators/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmarketIndicatorsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmarketIndicatorsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmarketIndicators_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ErasGet gets the details of an era by id
*/
func (a *Client) ErasGet(params *ErasGetParams, opts ...ClientOption) (*ErasGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErasGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Eras_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Eras/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErasGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ErasGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Eras_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ErasGetAll gets all eras for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ErasGetAll(params *ErasGetAllParams, opts ...ClientOption) (*ErasGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErasGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Eras_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Eras",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErasGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ErasGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Eras_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ErasGetSummaries gets a summary representation of all eras
*/
func (a *Client) ErasGetSummaries(params *ErasGetSummariesParams, opts ...ClientOption) (*ErasGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErasGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Eras_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Eras/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErasGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ErasGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Eras_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EventControlGetAll returns a response containing a list of event control rows for the n scan event control table
*/
func (a *Client) EventControlGetAll(params *EventControlGetAllParams, opts ...ClientOption) (*EventControlGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventControlGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EventControl_GetAll",
		Method:             "GET",
		PathPattern:        "/AccessControl/EventControl",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventControlGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventControlGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EventControl_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FacilitiesGet gets details of a facility
*/
func (a *Client) FacilitiesGet(params *FacilitiesGetParams, opts ...ClientOption) (*FacilitiesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFacilitiesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Facilities_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Facilities/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FacilitiesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FacilitiesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Facilities_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FacilitiesGetAll gets details of all the facilities
*/
func (a *Client) FacilitiesGetAll(params *FacilitiesGetAllParams, opts ...ClientOption) (*FacilitiesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFacilitiesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Facilities_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Facilities",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FacilitiesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FacilitiesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Facilities_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FacilitiesGetScreens returns details of all screens and the house map for the facility the screen details include which other screens are assigned to each screen navigation arrow button
*/
func (a *Client) FacilitiesGetScreens(params *FacilitiesGetScreensParams, opts ...ClientOption) (*FacilitiesGetScreensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFacilitiesGetScreensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Facilities_GetScreens",
		Method:             "GET",
		PathPattern:        "/TXN/Facilities/{facilityId}/Screens",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FacilitiesGetScreensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FacilitiesGetScreensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Facilities_GetScreens: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FacilitiesGetSummaries gets summary representation of all facilities
*/
func (a *Client) FacilitiesGetSummaries(params *FacilitiesGetSummariesParams, opts ...ClientOption) (*FacilitiesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFacilitiesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Facilities_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/Facilities/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FacilitiesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FacilitiesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Facilities_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FeesGet gets details of a fee
*/
func (a *Client) FeesGet(params *FeesGetParams, opts ...ClientOption) (*FeesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Fees_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Fees/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FeesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FeesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Fees_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FeesGetAll gets all fees
*/
func (a *Client) FeesGetAll(params *FeesGetAllParams, opts ...ClientOption) (*FeesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Fees_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Fees",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FeesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FeesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Fees_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FeesGetSummaries gets summary representation of all fees
*/
func (a *Client) FeesGetSummaries(params *FeesGetSummariesParams, opts ...ClientOption) (*FeesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Fees_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/Fees/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FeesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FeesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Fees_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FinanceContributionsGet gets details of a contribution
*/
func (a *Client) FinanceContributionsGet(params *FinanceContributionsGetParams, opts ...ClientOption) (*FinanceContributionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFinanceContributionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FinanceContributions_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Contributions/{contributionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FinanceContributionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FinanceContributionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FinanceContributions_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FinanceContributionsGetAll gets details of all the contributions for the specified plan
*/
func (a *Client) FinanceContributionsGetAll(params *FinanceContributionsGetAllParams, opts ...ClientOption) (*FinanceContributionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFinanceContributionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FinanceContributions_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/Contributions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FinanceContributionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FinanceContributionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FinanceContributions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FormatsGet gets the details of a format by id
*/
func (a *Client) FormatsGet(params *FormatsGetParams, opts ...ClientOption) (*FormatsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Formats_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Formats/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Formats_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FormatsGetAll gets all formats for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) FormatsGetAll(params *FormatsGetAllParams, opts ...ClientOption) (*FormatsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Formats_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Formats",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Formats_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FormatsGetSummaries gets a summary representation of all formats
*/
func (a *Client) FormatsGetSummaries(params *FormatsGetSummariesParams, opts ...ClientOption) (*FormatsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Formats_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Formats/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Formats_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FundsGet gets details of a specific fund
*/
func (a *Client) FundsGet(params *FundsGetParams, opts ...ClientOption) (*FundsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFundsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Funds_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Funds/{fundId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FundsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FundsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Funds_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FundsGetSummaries gets summary of all funds
*/
func (a *Client) FundsGetSummaries(params *FundsGetSummariesParams, opts ...ClientOption) (*FundsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFundsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Funds_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Finance/Funds/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FundsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FundsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Funds_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GLAccountsGet gets the details of a gl account by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) GLAccountsGet(params *GLAccountsGetParams, opts ...ClientOption) (*GLAccountsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGLAccountsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GLAccounts_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GLAccounts/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GLAccountsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GLAccountsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GLAccounts_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GLAccountsGetAll gets all gl accounts to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) GLAccountsGetAll(params *GLAccountsGetAllParams, opts ...ClientOption) (*GLAccountsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGLAccountsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GLAccounts_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GLAccounts",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GLAccountsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GLAccountsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GLAccounts_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GLAccountsGetSummaries gets a summary representation of all gl accounts
*/
func (a *Client) GLAccountsGetSummaries(params *GLAccountsGetSummariesParams, opts ...ClientOption) (*GLAccountsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGLAccountsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GLAccounts_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GLAccounts/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GLAccountsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GLAccountsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GLAccounts_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GendersGet gets the details of a gender by id
*/
func (a *Client) GendersGet(params *GendersGetParams, opts ...ClientOption) (*GendersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGendersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Genders_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Genders/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GendersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GendersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Genders_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GendersGetAll gets all available gender values for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) GendersGetAll(params *GendersGetAllParams, opts ...ClientOption) (*GendersGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGendersGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Genders_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Genders",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GendersGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GendersGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Genders_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GendersGetSummaries gets a summary representation of all gender values
*/
func (a *Client) GendersGetSummaries(params *GendersGetSummariesParams, opts ...ClientOption) (*GendersGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGendersGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Genders_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Genders/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GendersGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GendersGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Genders_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidContactMethodsGet gets the details of a gift aid contact method by id
*/
func (a *Client) GiftAidContactMethodsGet(params *GiftAidContactMethodsGetParams, opts ...ClientOption) (*GiftAidContactMethodsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidContactMethodsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidContactMethods_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidContactMethods/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidContactMethodsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidContactMethodsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidContactMethods_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidContactMethodsGetAll gets all gift aid contact methods for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) GiftAidContactMethodsGetAll(params *GiftAidContactMethodsGetAllParams, opts ...ClientOption) (*GiftAidContactMethodsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidContactMethodsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidContactMethods_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidContactMethods",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidContactMethodsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidContactMethodsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidContactMethods_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidContactMethodsGetSummaries gets a summary representation of all gift aid contact methods
*/
func (a *Client) GiftAidContactMethodsGetSummaries(params *GiftAidContactMethodsGetSummariesParams, opts ...ClientOption) (*GiftAidContactMethodsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidContactMethodsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidContactMethods_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidContactMethods/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidContactMethodsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidContactMethodsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidContactMethods_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidDeclarationsGet gets a single gift aid declaration
*/
func (a *Client) GiftAidDeclarationsGet(params *GiftAidDeclarationsGetParams, opts ...ClientOption) (*GiftAidDeclarationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDeclarationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDeclarations_Get",
		Method:             "GET",
		PathPattern:        "/CRM/GiftAidDeclarations/{giftAidDeclarationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDeclarationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDeclarationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidDeclarations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidDeclarationsGetAll gets all gift aid declarations for a provided constituent including primary affiliates by default
*/
func (a *Client) GiftAidDeclarationsGetAll(params *GiftAidDeclarationsGetAllParams, opts ...ClientOption) (*GiftAidDeclarationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDeclarationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDeclarations_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/GiftAidDeclarations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDeclarationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDeclarationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidDeclarations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidDocumentStatusesGet gets the details of a gift aid document status by id
*/
func (a *Client) GiftAidDocumentStatusesGet(params *GiftAidDocumentStatusesGetParams, opts ...ClientOption) (*GiftAidDocumentStatusesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDocumentStatusesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDocumentStatuses_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidDocumentStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDocumentStatusesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDocumentStatusesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidDocumentStatuses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidDocumentStatusesGetAll gets all gift aid document statuses for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) GiftAidDocumentStatusesGetAll(params *GiftAidDocumentStatusesGetAllParams, opts ...ClientOption) (*GiftAidDocumentStatusesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDocumentStatusesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDocumentStatuses_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidDocumentStatuses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDocumentStatusesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDocumentStatusesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidDocumentStatuses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidDocumentStatusesGetSummaries gets a summary representation of all gift aid document statuses
*/
func (a *Client) GiftAidDocumentStatusesGetSummaries(params *GiftAidDocumentStatusesGetSummariesParams, opts ...ClientOption) (*GiftAidDocumentStatusesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDocumentStatusesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDocumentStatuses_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidDocumentStatuses/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDocumentStatusesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDocumentStatusesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidDocumentStatuses_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidIneligibleReasonsGet gets the details of a gift aid ineligible reason by id
*/
func (a *Client) GiftAidIneligibleReasonsGet(params *GiftAidIneligibleReasonsGetParams, opts ...ClientOption) (*GiftAidIneligibleReasonsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidIneligibleReasonsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidIneligibleReasons_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidIneligibleReasons/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidIneligibleReasonsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidIneligibleReasonsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidIneligibleReasons_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidIneligibleReasonsGetAll gets all gift aid ineligible reasons for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) GiftAidIneligibleReasonsGetAll(params *GiftAidIneligibleReasonsGetAllParams, opts ...ClientOption) (*GiftAidIneligibleReasonsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidIneligibleReasonsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidIneligibleReasons_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidIneligibleReasons",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidIneligibleReasonsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidIneligibleReasonsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidIneligibleReasons_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidIneligibleReasonsGetSummaries gets a summary representation of all gift aid ineligible reasons
*/
func (a *Client) GiftAidIneligibleReasonsGetSummaries(params *GiftAidIneligibleReasonsGetSummariesParams, opts ...ClientOption) (*GiftAidIneligibleReasonsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidIneligibleReasonsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidIneligibleReasons_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidIneligibleReasons/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidIneligibleReasonsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidIneligibleReasonsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidIneligibleReasons_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidRatesGet gets the details of a gift aid rate by id
*/
func (a *Client) GiftAidRatesGet(params *GiftAidRatesGetParams, opts ...ClientOption) (*GiftAidRatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidRatesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidRates_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidRates/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidRatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidRatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidRates_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidRatesGetAll gets all gift aid rates for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) GiftAidRatesGetAll(params *GiftAidRatesGetAllParams, opts ...ClientOption) (*GiftAidRatesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidRatesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidRates_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidRates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidRatesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidRatesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidRates_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidRatesGetSummaries gets a summary representation of all gift aid rates
*/
func (a *Client) GiftAidRatesGetSummaries(params *GiftAidRatesGetSummariesParams, opts ...ClientOption) (*GiftAidRatesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidRatesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidRates_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidRates/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidRatesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidRatesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidRates_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidStatusesGet gets the details of a gift aid status by id
*/
func (a *Client) GiftAidStatusesGet(params *GiftAidStatusesGetParams, opts ...ClientOption) (*GiftAidStatusesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidStatusesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidStatuses_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidStatusesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidStatusesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidStatuses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidStatusesGetAll gets all gift aid statuses for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) GiftAidStatusesGetAll(params *GiftAidStatusesGetAllParams, opts ...ClientOption) (*GiftAidStatusesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidStatusesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidStatuses_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidStatuses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidStatusesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidStatusesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidStatuses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidStatusesGetSummaries gets a summary representation of all gift aid statuses
*/
func (a *Client) GiftAidStatusesGetSummaries(params *GiftAidStatusesGetSummariesParams, opts ...ClientOption) (*GiftAidStatusesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidStatusesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidStatuses_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidStatuses/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidStatusesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidStatusesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidStatuses_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidTypesGet gets the details of a gift aid type by id
*/
func (a *Client) GiftAidTypesGet(params *GiftAidTypesGetParams, opts ...ClientOption) (*GiftAidTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidTypesGetAll gets all gift aid types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) GiftAidTypesGetAll(params *GiftAidTypesGetAllParams, opts ...ClientOption) (*GiftAidTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidTypesGetSummaries gets a summary representation of all gift aid types
*/
func (a *Client) GiftAidTypesGetSummaries(params *GiftAidTypesGetSummariesParams, opts ...ClientOption) (*GiftAidTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/GiftAidTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftCertificatesGet gets details of a specific gift certificate the original amount amount used and balance are all returned amounts applied to a current web session are included
*/
func (a *Client) GiftCertificatesGet(params *GiftCertificatesGetParams, opts ...ClientOption) (*GiftCertificatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftCertificatesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftCertificates_Get",
		Method:             "GET",
		PathPattern:        "/Finance/GiftCertificates/{giftCertificateNumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftCertificatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftCertificatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftCertificates_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodeCategoriesGet gets the details of a hold code category by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) HoldCodeCategoriesGet(params *HoldCodeCategoriesGetParams, opts ...ClientOption) (*HoldCodeCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/HoldCodeCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodeCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodeCategoriesGetAll gets all hold code categories to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) HoldCodeCategoriesGetAll(params *HoldCodeCategoriesGetAllParams, opts ...ClientOption) (*HoldCodeCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/HoldCodeCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodeCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodeCategoriesGetSummaries gets a summary representation of all hold code categories
*/
func (a *Client) HoldCodeCategoriesGetSummaries(params *HoldCodeCategoriesGetSummariesParams, opts ...ClientOption) (*HoldCodeCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/HoldCodeCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodeCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodeUserGroupsGet gets the details of a hold code user group mapping by id
*/
func (a *Client) HoldCodeUserGroupsGet(params *HoldCodeUserGroupsGetParams, opts ...ClientOption) (*HoldCodeUserGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeUserGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeUserGroups_Get",
		Method:             "GET",
		PathPattern:        "/TXN/HoldCodeUserGroups/{holdCodeUserGroupId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeUserGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeUserGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodeUserGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodeUserGroupsGetAll gets all hold code user group mappings optional filter for a user group or hold code
*/
func (a *Client) HoldCodeUserGroupsGetAll(params *HoldCodeUserGroupsGetAllParams, opts ...ClientOption) (*HoldCodeUserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeUserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/HoldCodeUserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeUserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeUserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodeUserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodeUserGroupsGetSummaries gets a summary representation of all hold code user group mappings optional filter for a user group or hold code
*/
func (a *Client) HoldCodeUserGroupsGetSummaries(params *HoldCodeUserGroupsGetSummariesParams, opts ...ClientOption) (*HoldCodeUserGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeUserGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeUserGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/HoldCodeUserGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeUserGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeUserGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodeUserGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodeUserGroupsGetSummary gets summary representation of a hold code user group mapping by id
*/
func (a *Client) HoldCodeUserGroupsGetSummary(params *HoldCodeUserGroupsGetSummaryParams, opts ...ClientOption) (*HoldCodeUserGroupsGetSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeUserGroupsGetSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeUserGroups_GetSummary",
		Method:             "GET",
		PathPattern:        "/TXN/HoldCodeUserGroups/Summary/{holdCodeUserGroupId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeUserGroupsGetSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeUserGroupsGetSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodeUserGroups_GetSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodesGet gets details of a hold code
*/
func (a *Client) HoldCodesGet(params *HoldCodesGetParams, opts ...ClientOption) (*HoldCodesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodes_Get",
		Method:             "GET",
		PathPattern:        "/TXN/HoldCodes/{holdCodeId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodesGetAll gets details of all hold codes
*/
func (a *Client) HoldCodesGetAll(params *HoldCodesGetAllParams, opts ...ClientOption) (*HoldCodesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodes_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/HoldCodes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InactiveReasonsGet gets the details of an inactive reason by id
*/
func (a *Client) InactiveReasonsGet(params *InactiveReasonsGetParams, opts ...ClientOption) (*InactiveReasonsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInactiveReasonsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InactiveReasons_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/InactiveReasons/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InactiveReasonsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InactiveReasonsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InactiveReasons_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InactiveReasonsGetAll gets all inactive reasons for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) InactiveReasonsGetAll(params *InactiveReasonsGetAllParams, opts ...ClientOption) (*InactiveReasonsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInactiveReasonsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InactiveReasons_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/InactiveReasons",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InactiveReasonsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InactiveReasonsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InactiveReasons_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InactiveReasonsGetSummaries gets a summary representation of all inactive reasons
*/
func (a *Client) InactiveReasonsGetSummaries(params *InactiveReasonsGetSummariesParams, opts ...ClientOption) (*InactiveReasonsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInactiveReasonsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InactiveReasons_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/InactiveReasons/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InactiveReasonsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InactiveReasonsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InactiveReasons_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IntegrationDefaultsGet gets the details of an integration default by id
*/
func (a *Client) IntegrationDefaultsGet(params *IntegrationDefaultsGetParams, opts ...ClientOption) (*IntegrationDefaultsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationDefaultsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationDefaults_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/IntegrationDefaults/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationDefaultsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationDefaultsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for IntegrationDefaults_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IntegrationDefaultsGetAll gets all integration defaults for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) IntegrationDefaultsGetAll(params *IntegrationDefaultsGetAllParams, opts ...ClientOption) (*IntegrationDefaultsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationDefaultsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationDefaults_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/IntegrationDefaults",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationDefaultsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationDefaultsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for IntegrationDefaults_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IntegrationDefaultsGetSummaries gets a summary representation of all integration defaults
*/
func (a *Client) IntegrationDefaultsGetSummaries(params *IntegrationDefaultsGetSummariesParams, opts ...ClientOption) (*IntegrationDefaultsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationDefaultsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationDefaults_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/IntegrationDefaults/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationDefaultsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationDefaultsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for IntegrationDefaults_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IntegrationsGet gets the details of an action type by id
*/
func (a *Client) IntegrationsGet(params *IntegrationsGetParams, opts ...ClientOption) (*IntegrationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Integrations_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Integrations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IntegrationsGetAll gets all action types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) IntegrationsGetAll(params *IntegrationsGetAllParams, opts ...ClientOption) (*IntegrationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Integrations_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Integrations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IntegrationsGetSummaries gets a summary representation of all action types
*/
func (a *Client) IntegrationsGetSummaries(params *IntegrationsGetSummariesParams, opts ...ClientOption) (*IntegrationsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Integrations_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Integrations/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestCategoriesGet gets the details of an interest category by id
*/
func (a *Client) InterestCategoriesGet(params *InterestCategoriesGetParams, opts ...ClientOption) (*InterestCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/InterestCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterestCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestCategoriesGetAll gets all interest categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) InterestCategoriesGetAll(params *InterestCategoriesGetAllParams, opts ...ClientOption) (*InterestCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/InterestCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterestCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestCategoriesGetSummaries gets a summary representation of all interest categories
*/
func (a *Client) InterestCategoriesGetSummaries(params *InterestCategoriesGetSummariesParams, opts ...ClientOption) (*InterestCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/InterestCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterestCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestTypesGet gets the details of an interest type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) InterestTypesGet(params *InterestTypesGetParams, opts ...ClientOption) (*InterestTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/InterestTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterestTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestTypesGetAll gets all interest types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) InterestTypesGetAll(params *InterestTypesGetAllParams, opts ...ClientOption) (*InterestTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/InterestTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterestTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestTypesGetSummaries gets a summary representation of all interest types
*/
func (a *Client) InterestTypesGetSummaries(params *InterestTypesGetSummariesParams, opts ...ClientOption) (*InterestTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/InterestTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterestTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestsGet gets details of an interest
*/
func (a *Client) InterestsGet(params *InterestsGetParams, opts ...ClientOption) (*InterestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Interests_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Interests/{interestId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Interests_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestsGetAll gets all the interests of the specified constituent id to exclude attributes of the visible affiliations pass include affiliations false to filter the interests of specific categories pass comma separted values under categories
*/
func (a *Client) InterestsGetAll(params *InterestsGetAllParams, opts ...ClientOption) (*InterestsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Interests_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Interests",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Interests_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InternalGet gets details of an address and all the phones attached to it
*/
func (a *Client) InternalGet(params *InternalGetParams, opts ...ClientOption) (*InternalGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Internal_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Internal/AddressDetails/{addressId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InternalGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InternalGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Internal_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InternalGetAll gets details of all the addresses and the phones attached to them of the constituent id to exclude addresses and the phones of the visible affiliations pass include affiliations false
*/
func (a *Client) InternalGetAll(params *InternalGetAllParams, opts ...ClientOption) (*InternalGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Internal_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Internal/AddressDetails",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InternalGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InternalGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Internal_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InternalGetConstituentMiniSnapshot gets constituent details along with primary address primary salutation primary electronic address primary and amp general phones
*/
func (a *Client) InternalGetConstituentMiniSnapshot(params *InternalGetConstituentMiniSnapshotParams, opts ...ClientOption) (*InternalGetConstituentMiniSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalGetConstituentMiniSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Internal_GetConstituentMiniSnapshot",
		Method:             "GET",
		PathPattern:        "/CRM/Internal/ConstituentMiniSnapshot/{constituentId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InternalGetConstituentMiniSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InternalGetConstituentMiniSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Internal_GetConstituentMiniSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InventoryContactPermissionTypesGet gets details of an inventory contact permission type
*/
func (a *Client) InventoryContactPermissionTypesGet(params *InventoryContactPermissionTypesGetParams, opts ...ClientOption) (*InventoryContactPermissionTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryContactPermissionTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryContactPermissionTypes_Get",
		Method:             "GET",
		PathPattern:        "/TXN/InventoryContactPermissionTypes/{inventoryContactPermissionTypeId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryContactPermissionTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryContactPermissionTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryContactPermissionTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InventoryContactPermissionTypesGetAll gets details of all the contact permission types associated to production seasons inventory contact permission type is a mapping of a contact permission type to a production season
*/
func (a *Client) InventoryContactPermissionTypesGetAll(params *InventoryContactPermissionTypesGetAllParams, opts ...ClientOption) (*InventoryContactPermissionTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryContactPermissionTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryContactPermissionTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/InventoryContactPermissionTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryContactPermissionTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryContactPermissionTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryContactPermissionTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InventoryWebContentsGet gets details of an inventory web content
*/
func (a *Client) InventoryWebContentsGet(params *InventoryWebContentsGetParams, opts ...ClientOption) (*InventoryWebContentsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryWebContentsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryWebContents_Get",
		Method:             "GET",
		PathPattern:        "/Txn/InventoryWebContents/{inventoryWebContentId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryWebContentsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryWebContentsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryWebContents_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InventoryWebContentsGetAll gets details of all the inventory web contents
*/
func (a *Client) InventoryWebContentsGetAll(params *InventoryWebContentsGetAllParams, opts ...ClientOption) (*InventoryWebContentsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryWebContentsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryWebContents_GetAll",
		Method:             "GET",
		PathPattern:        "/Txn/InventoryWebContents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryWebContentsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryWebContentsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryWebContents_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InventoryWebContentsGetAllSummaries gets details of all the inventory web contents
*/
func (a *Client) InventoryWebContentsGetAllSummaries(params *InventoryWebContentsGetAllSummariesParams, opts ...ClientOption) (*InventoryWebContentsGetAllSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryWebContentsGetAllSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryWebContents_GetAllSummaries",
		Method:             "GET",
		PathPattern:        "/Txn/InventoryWebContents/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryWebContentsGetAllSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryWebContentsGetAllSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryWebContents_GetAllSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvoiceBillingStatus gets status of a processing automated billing run
*/
func (a *Client) InvoiceBillingStatus(params *InvoiceBillingStatusParams, opts ...ClientOption) (*InvoiceBillingStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoiceBillingStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InvoiceBilling_Status",
		Method:             "GET",
		PathPattern:        "/TXN/InvoiceBilling/{id}/Status",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoiceBillingStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoiceBillingStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoiceBilling_Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssuesGet gets details of a customer issue
*/
func (a *Client) IssuesGet(params *IssuesGetParams, opts ...ClientOption) (*IssuesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssuesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Issues_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Issues/{issueId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IssuesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssuesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Issues_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssuesGetAll gets all the details of all the issues for the specified constituent id if you want to filter the issues based on date pass in the values for start date and end date if you want to filter issues based on contact type category activity type origin performance number or package number pass in the corresponding values in comma separated values
*/
func (a *Client) IssuesGetAll(params *IssuesGetAllParams, opts ...ClientOption) (*IssuesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssuesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Issues_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Issues",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IssuesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssuesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Issues_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KeywordCategoriesGet gets the details of a keyword category by id
*/
func (a *Client) KeywordCategoriesGet(params *KeywordCategoriesGetParams, opts ...ClientOption) (*KeywordCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KeywordCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/KeywordCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for KeywordCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KeywordCategoriesGetAll gets all keyword categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) KeywordCategoriesGetAll(params *KeywordCategoriesGetAllParams, opts ...ClientOption) (*KeywordCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KeywordCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/KeywordCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for KeywordCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KeywordCategoriesGetSummaries gets a summary representation of all keyword categories
*/
func (a *Client) KeywordCategoriesGetSummaries(params *KeywordCategoriesGetSummariesParams, opts ...ClientOption) (*KeywordCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KeywordCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/KeywordCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for KeywordCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KeywordsGet gets the details of a keyword by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) KeywordsGet(params *KeywordsGetParams, opts ...ClientOption) (*KeywordsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Keywords_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Keywords/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Keywords_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KeywordsGetAll gets all keywords to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) KeywordsGetAll(params *KeywordsGetAllParams, opts ...ClientOption) (*KeywordsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Keywords_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Keywords",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Keywords_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KeywordsGetDataFor gets potential values for a keyword as keyword data items
*/
func (a *Client) KeywordsGetDataFor(params *KeywordsGetDataForParams, opts ...ClientOption) (*KeywordsGetDataForOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordsGetDataForParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Keywords_GetDataFor",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Keywords/Data",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordsGetDataForReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordsGetDataForOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Keywords_GetDataFor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KeywordsGetSummaries gets a summary representation of all keywords
*/
func (a *Client) KeywordsGetSummaries(params *KeywordsGetSummariesParams, opts ...ClientOption) (*KeywordsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Keywords_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Keywords/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Keywords_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LanguagesGet gets the details of a language by id
*/
func (a *Client) LanguagesGet(params *LanguagesGetParams, opts ...ClientOption) (*LanguagesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLanguagesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Languages_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Languages/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LanguagesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LanguagesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Languages_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LanguagesGetAll gets all languages for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) LanguagesGetAll(params *LanguagesGetAllParams, opts ...ClientOption) (*LanguagesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLanguagesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Languages_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Languages",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LanguagesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LanguagesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Languages_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LanguagesGetSummaries gets a summary representation of all languages
*/
func (a *Client) LanguagesGetSummaries(params *LanguagesGetSummariesParams, opts ...ClientOption) (*LanguagesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLanguagesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Languages_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Languages/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LanguagesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LanguagesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Languages_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCategoriesGet gets the details of a list category by id
*/
func (a *Client) ListCategoriesGet(params *ListCategoriesGetParams, opts ...ClientOption) (*ListCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ListCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCategoriesGetAll gets all list categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ListCategoriesGetAll(params *ListCategoriesGetAllParams, opts ...ClientOption) (*ListCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ListCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCategoriesGetSummaries gets a summary representation of all list categories
*/
func (a *Client) ListCategoriesGetSummaries(params *ListCategoriesGetSummariesParams, opts ...ClientOption) (*ListCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ListCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListsGet gets a single list without contents
*/
func (a *Client) ListsGet(params *ListsGetParams, opts ...ClientOption) (*ListsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/Lists/{listId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Lists_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListsGetContents gets constituent ids for the contents of a list
*/
func (a *Client) ListsGetContents(params *ListsGetContentsParams, opts ...ClientOption) (*ListsGetContentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsGetContentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_GetContents",
		Method:             "GET",
		PathPattern:        "/Reporting/Lists/{listId}/Contents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsGetContentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsGetContentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Lists_GetContents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListsGetContentsDetail gets constituent details for the contents of a list
*/
func (a *Client) ListsGetContentsDetail(params *ListsGetContentsDetailParams, opts ...ClientOption) (*ListsGetContentsDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsGetContentsDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_GetContentsDetail",
		Method:             "GET",
		PathPattern:        "/Reporting/Lists/{listId}/Contents/Details",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsGetContentsDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsGetContentsDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Lists_GetContentsDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListsGetListCriterionMatchReasons returns list criteria match reasons for a constituent in a list
*/
func (a *Client) ListsGetListCriterionMatchReasons(params *ListsGetListCriterionMatchReasonsParams, opts ...ClientOption) (*ListsGetListCriterionMatchReasonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsGetListCriterionMatchReasonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_GetListCriterionMatchReasons",
		Method:             "GET",
		PathPattern:        "/Reporting/Lists/{listId}/Contents/{constituentId}/MatchReasons",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsGetListCriterionMatchReasonsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsGetListCriterionMatchReasonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Lists_GetListCriterionMatchReasons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListsGetSummaries gets a summary of all lists
*/
func (a *Client) ListsGetSummaries(params *ListsGetSummariesParams, opts ...ClientOption) (*ListsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Reporting/Lists/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Lists_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LoginTypesGet gets the details of a login type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) LoginTypesGet(params *LoginTypesGetParams, opts ...ClientOption) (*LoginTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/LoginTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LoginTypesGetAll gets all login types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) LoginTypesGetAll(params *LoginTypesGetAllParams, opts ...ClientOption) (*LoginTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/LoginTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LoginTypesGetSummaries gets a summary representation of all login types
*/
func (a *Client) LoginTypesGetSummaries(params *LoginTypesGetSummariesParams, opts ...ClientOption) (*LoginTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/LoginTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachineSettingsGet gets the details of a machine setting by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) MachineSettingsGet(params *MachineSettingsGetParams, opts ...ClientOption) (*MachineSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineSettingsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MachineSettings_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MachineSettings/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MachineSettings_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachineSettingsGetAll gets details of all machine settings to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) MachineSettingsGetAll(params *MachineSettingsGetAllParams, opts ...ClientOption) (*MachineSettingsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineSettingsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MachineSettings_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MachineSettings",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineSettingsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineSettingsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MachineSettings_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachineSettingsGetSummaries gets a summary representation of all machine settings
*/
func (a *Client) MachineSettingsGetSummaries(params *MachineSettingsGetSummariesParams, opts ...ClientOption) (*MachineSettingsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineSettingsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MachineSettings_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MachineSettings/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineSettingsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineSettingsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MachineSettings_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailIndicatorsGet gets the details of a mail indicator by id
*/
func (a *Client) MailIndicatorsGet(params *MailIndicatorsGetParams, opts ...ClientOption) (*MailIndicatorsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailIndicatorsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MailIndicators_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MailIndicators/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailIndicatorsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailIndicatorsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MailIndicators_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailIndicatorsGetAll gets all mail indicators for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) MailIndicatorsGetAll(params *MailIndicatorsGetAllParams, opts ...ClientOption) (*MailIndicatorsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailIndicatorsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MailIndicators_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MailIndicators",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailIndicatorsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailIndicatorsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MailIndicators_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailIndicatorsGetSummaries gets a summary representation of all mail indicators
*/
func (a *Client) MailIndicatorsGetSummaries(params *MailIndicatorsGetSummariesParams, opts ...ClientOption) (*MailIndicatorsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailIndicatorsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MailIndicators_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MailIndicators/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailIndicatorsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailIndicatorsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MailIndicators_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MediaTypesGet gets the details of a media type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) MediaTypesGet(params *MediaTypesGetParams, opts ...ClientOption) (*MediaTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MediaTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MediaTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MediaTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MediaTypesGetAll gets all media types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) MediaTypesGetAll(params *MediaTypesGetAllParams, opts ...ClientOption) (*MediaTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MediaTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MediaTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MediaTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MediaTypesGetSummaries gets a summary representation of all media types
*/
func (a *Client) MediaTypesGetSummaries(params *MediaTypesGetSummariesParams, opts ...ClientOption) (*MediaTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MediaTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MediaTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MediaTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipLevelCategoriesGet gets the details of a membership level category by id
*/
func (a *Client) MembershipLevelCategoriesGet(params *MembershipLevelCategoriesGetParams, opts ...ClientOption) (*MembershipLevelCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipLevelCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipLevelCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MembershipLevelCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipLevelCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipLevelCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipLevelCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipLevelCategoriesGetAll gets all membership level categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) MembershipLevelCategoriesGetAll(params *MembershipLevelCategoriesGetAllParams, opts ...ClientOption) (*MembershipLevelCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipLevelCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipLevelCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MembershipLevelCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipLevelCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipLevelCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipLevelCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipLevelCategoriesGetSummaries gets a summary representation of all membership level categories
*/
func (a *Client) MembershipLevelCategoriesGetSummaries(params *MembershipLevelCategoriesGetSummariesParams, opts ...ClientOption) (*MembershipLevelCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipLevelCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipLevelCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MembershipLevelCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipLevelCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipLevelCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipLevelCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipLevelsGet gets a specific membership level n o t e as part of the upcoming changes to membership functionality this resource will be removed in an upcoming major tessitura release please make a note that code that references it will need to be revisited as part of that upgrade process
*/
func (a *Client) MembershipLevelsGet(params *MembershipLevelsGetParams, opts ...ClientOption) (*MembershipLevelsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipLevelsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipLevels_Get",
		Method:             "GET",
		PathPattern:        "/Finance/MembershipLevels/{membershipLevelId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipLevelsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipLevelsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipLevels_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipLevelsGetAll gets a summary list of all membership levels membership org Id is required n o t e as part of the upcoming changes to membership functionality this resource will be removed in an upcoming major tessitura release please make a note that code that references it will need to be revisited as part of that upgrade process
*/
func (a *Client) MembershipLevelsGetAll(params *MembershipLevelsGetAllParams, opts ...ClientOption) (*MembershipLevelsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipLevelsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipLevels_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/MembershipLevels",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipLevelsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipLevelsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipLevels_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipLevelsGetSummaries gets a list of membership levels membership org Id is required n o t e as part of the upcoming changes to membership functionality this resource will be removed in an upcoming major tessitura release please make a note that code that references it will need to be revisited as part of that upgrade process
*/
func (a *Client) MembershipLevelsGetSummaries(params *MembershipLevelsGetSummariesParams, opts ...ClientOption) (*MembershipLevelsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipLevelsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipLevels_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Finance/MembershipLevels/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipLevelsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipLevelsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipLevels_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipOrganizationsGet gets a specific membership organization n o t e as part of the upcoming changes to membership functionality this resource will be removed in an upcoming major tessitura release please make a note that code that references it will need to be revisited as part of that upgrade process
*/
func (a *Client) MembershipOrganizationsGet(params *MembershipOrganizationsGetParams, opts ...ClientOption) (*MembershipOrganizationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipOrganizationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipOrganizations_Get",
		Method:             "GET",
		PathPattern:        "/Finance/MembershipOrganizations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipOrganizationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipOrganizationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipOrganizations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipOrganizationsGetAll gets a list of all membership organizations n o t e as part of the upcoming changes to membership functionality this resource will be removed in an upcoming major tessitura release please make a note that code that references it will need to be revisited as part of that upgrade process
*/
func (a *Client) MembershipOrganizationsGetAll(params *MembershipOrganizationsGetAllParams, opts ...ClientOption) (*MembershipOrganizationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipOrganizationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipOrganizations_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/MembershipOrganizations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipOrganizationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipOrganizationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipOrganizations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipOrganizationsGetSummaries gets a list of all membership organizations in summary n o t e as part of the upcoming changes to membership functionality this resource will be removed in an upcoming major tessitura release please make a note that code that references it will need to be revisited as part of that upgrade process
*/
func (a *Client) MembershipOrganizationsGetSummaries(params *MembershipOrganizationsGetSummariesParams, opts ...ClientOption) (*MembershipOrganizationsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipOrganizationsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipOrganizations_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Finance/MembershipOrganizations/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipOrganizationsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipOrganizationsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipOrganizations_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipStandingsGet gets a specific membership standing by id
*/
func (a *Client) MembershipStandingsGet(params *MembershipStandingsGetParams, opts ...ClientOption) (*MembershipStandingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipStandingsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipStandings_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MembershipStandings/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipStandingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipStandingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipStandings_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipStandingsGetAll gets all membership standings
*/
func (a *Client) MembershipStandingsGetAll(params *MembershipStandingsGetAllParams, opts ...ClientOption) (*MembershipStandingsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipStandingsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipStandings_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MembershipStandings",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipStandingsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipStandingsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipStandings_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipStandingsGetSummaries gets a summary representation of all membership standings
*/
func (a *Client) MembershipStandingsGetSummaries(params *MembershipStandingsGetSummariesParams, opts ...ClientOption) (*MembershipStandingsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipStandingsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipStandings_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/MembershipStandings/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipStandingsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipStandingsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipStandings_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipsGetAll returns membership details for a constituent n o t e as part of the upcoming changes to membership functionality this resource will change significantly in an upcoming major tessitura release and likely break code that references it please make a note that code that references it will need to be revisited as part of that upgrade process
*/
func (a *Client) MembershipsGetAll(params *MembershipsGetAllParams, opts ...ClientOption) (*MembershipsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Memberships_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Memberships/Details",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Memberships_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MerchantReferencesReference merchant references reference API
*/
func (a *Client) MerchantReferencesReference(params *MerchantReferencesReferenceParams, opts ...ClientOption) (*MerchantReferencesReferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMerchantReferencesReferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MerchantReferences_Reference",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/MerchantReference",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MerchantReferencesReferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MerchantReferencesReferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MerchantReferences_Reference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MerchantsGetMerchants retrieves merchant list
*/
func (a *Client) MerchantsGetMerchants(params *MerchantsGetMerchantsParams, opts ...ClientOption) (*MerchantsGetMerchantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMerchantsGetMerchantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Merchants_GetMerchants",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/Merchants",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MerchantsGetMerchantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MerchantsGetMerchantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Merchants_GetMerchants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleCategoriesGet gets details of a mode of sale category
*/
func (a *Client) ModeOfSaleCategoriesGet(params *ModeOfSaleCategoriesGetParams, opts ...ClientOption) (*ModeOfSaleCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleCategories_Get",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSaleCategories/{modeOfSaleCategoryId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleCategoriesGetAll gets all mode of sale categories
*/
func (a *Client) ModeOfSaleCategoriesGetAll(params *ModeOfSaleCategoriesGetAllParams, opts ...ClientOption) (*ModeOfSaleCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSaleCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleOffersGet gets details of a mode of sale offer
*/
func (a *Client) ModeOfSaleOffersGet(params *ModeOfSaleOffersGetParams, opts ...ClientOption) (*ModeOfSaleOffersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleOffersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleOffers_Get",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSaleOffers/{modeOfSaleOfferId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleOffersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleOffersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleOffers_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleOffersGetAll gets all mode of sale offers the mode of sale id performace ids or package ids is required performance ids and package ids used together will return no results
*/
func (a *Client) ModeOfSaleOffersGetAll(params *ModeOfSaleOffersGetAllParams, opts ...ClientOption) (*ModeOfSaleOffersGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleOffersGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleOffers_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSaleOffers",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleOffersGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleOffersGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleOffers_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSalePriceTypesGet gets details of a mode of sale price type
*/
func (a *Client) ModeOfSalePriceTypesGet(params *ModeOfSalePriceTypesGetParams, opts ...ClientOption) (*ModeOfSalePriceTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSalePriceTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSalePriceTypes_Get",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSalePriceTypes/{modeOfSalePriceTypeId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSalePriceTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSalePriceTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSalePriceTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSalePriceTypesGetAll gets all mode of sale price types
*/
func (a *Client) ModeOfSalePriceTypesGetAll(params *ModeOfSalePriceTypesGetAllParams, opts ...ClientOption) (*ModeOfSalePriceTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSalePriceTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSalePriceTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSalePriceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSalePriceTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSalePriceTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSalePriceTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleSurveyQuestionsGet gets details of a mode of sale survey question
*/
func (a *Client) ModeOfSaleSurveyQuestionsGet(params *ModeOfSaleSurveyQuestionsGetParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleSurveyQuestionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleSurveyQuestions_Get",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSaleSurveyQuestions/{modeOfSaleSurveyQuestionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleSurveyQuestionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleSurveyQuestionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleSurveyQuestions_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleSurveyQuestionsGetAll gets all mode of sale survey questions
*/
func (a *Client) ModeOfSaleSurveyQuestionsGetAll(params *ModeOfSaleSurveyQuestionsGetAllParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleSurveyQuestionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleSurveyQuestions_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSaleSurveyQuestions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleSurveyQuestionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleSurveyQuestionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleSurveyQuestions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleUserGroupsGet gets the details of a mode of sale user group mapping by id
*/
func (a *Client) ModeOfSaleUserGroupsGet(params *ModeOfSaleUserGroupsGetParams, opts ...ClientOption) (*ModeOfSaleUserGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleUserGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleUserGroups_Get",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSaleUserGroups/{modeOfSaleUserGroupId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleUserGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleUserGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleUserGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleUserGroupsGetAll gets all mode of sale user group mappings
*/
func (a *Client) ModeOfSaleUserGroupsGetAll(params *ModeOfSaleUserGroupsGetAllParams, opts ...ClientOption) (*ModeOfSaleUserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleUserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/ModeOfSaleUserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleUserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleUserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleUserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModesOfSaleGet gets details of an existing mode of sale
*/
func (a *Client) ModesOfSaleGet(params *ModesOfSaleGetParams, opts ...ClientOption) (*ModesOfSaleGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModesOfSaleGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModesOfSale_Get",
		Method:             "GET",
		PathPattern:        "/TXN/ModesOfSale/{modeOfSaleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModesOfSaleGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModesOfSaleGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModesOfSale_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModesOfSaleGetAll gets all modes of sale
*/
func (a *Client) ModesOfSaleGetAll(params *ModesOfSaleGetAllParams, opts ...ClientOption) (*ModesOfSaleGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModesOfSaleGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModesOfSale_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/ModesOfSale",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModesOfSaleGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModesOfSaleGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModesOfSale_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModesOfSaleGetSummaries gets summary of all modes of sale
*/
func (a *Client) ModesOfSaleGetSummaries(params *ModesOfSaleGetSummariesParams, opts ...ClientOption) (*ModesOfSaleGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModesOfSaleGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModesOfSale_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/ModesOfSale/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModesOfSaleGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModesOfSaleGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModesOfSale_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NScanAccessAreasGet gets the details of an n scan access area by id to get the resource only if the user has write edit access pass filter writeonly to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) NScanAccessAreasGet(params *NScanAccessAreasGetParams, opts ...ClientOption) (*NScanAccessAreasGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNScanAccessAreasGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NScanAccessAreas_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/NScanAccessAreas/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NScanAccessAreasGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NScanAccessAreasGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NScanAccessAreas_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NScanAccessAreasGetAll gets details of all n scan access areas to get only the resources for which the user has write edit access pass filter writeonly to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) NScanAccessAreasGetAll(params *NScanAccessAreasGetAllParams, opts ...ClientOption) (*NScanAccessAreasGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNScanAccessAreasGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NScanAccessAreas_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/NScanAccessAreas",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NScanAccessAreasGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NScanAccessAreasGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NScanAccessAreas_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NScanAccessAreasGetSummaries gets a summary representation of all n scan access areas
*/
func (a *Client) NScanAccessAreasGetSummaries(params *NScanAccessAreasGetSummariesParams, opts ...ClientOption) (*NScanAccessAreasGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNScanAccessAreasGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NScanAccessAreas_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/NScanAccessAreas/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NScanAccessAreasGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NScanAccessAreasGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NScanAccessAreas_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NameStatusesGet gets the details of a name status by id
*/
func (a *Client) NameStatusesGet(params *NameStatusesGetParams, opts ...ClientOption) (*NameStatusesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNameStatusesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NameStatuses_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/NameStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NameStatusesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NameStatusesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NameStatuses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NameStatusesGetAll gets all name statuses for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) NameStatusesGetAll(params *NameStatusesGetAllParams, opts ...ClientOption) (*NameStatusesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNameStatusesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NameStatuses_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/NameStatuses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NameStatusesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NameStatusesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NameStatuses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NameStatusesGetSummaries gets a summary representation of all name statuses
*/
func (a *Client) NameStatusesGetSummaries(params *NameStatusesGetSummariesParams, opts ...ClientOption) (*NameStatusesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNameStatusesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NameStatuses_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/NameStatuses/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NameStatusesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NameStatusesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NameStatuses_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ObjectPermissionsGet gets the details of an object permission by id
*/
func (a *Client) ObjectPermissionsGet(params *ObjectPermissionsGetParams, opts ...ClientOption) (*ObjectPermissionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectPermissionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ObjectPermissions_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ObjectPermissions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObjectPermissionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectPermissionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ObjectPermissions_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ObjectPermissionsGetAll gets all object permissions
*/
func (a *Client) ObjectPermissionsGetAll(params *ObjectPermissionsGetAllParams, opts ...ClientOption) (*ObjectPermissionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectPermissionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ObjectPermissions_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ObjectPermissions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObjectPermissionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectPermissionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ObjectPermissions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ObjectPermissionsGetSummaries gets a summary representation of all object permissions
*/
func (a *Client) ObjectPermissionsGetSummaries(params *ObjectPermissionsGetSummariesParams, opts ...ClientOption) (*ObjectPermissionsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectPermissionsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ObjectPermissions_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ObjectPermissions/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObjectPermissionsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectPermissionsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ObjectPermissions_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrderBillingReprint reprints order billing
*/
func (a *Client) OrderBillingReprint(params *OrderBillingReprintParams, opts ...ClientOption) (*OrderBillingReprintOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderBillingReprintParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrderBilling_Reprint",
		Method:             "GET",
		PathPattern:        "/TXN/OrderBilling/Reprint/{orderBillingId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderBillingReprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderBillingReprintOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderBilling_Reprint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrderBillingStatus gets status of a processing automated billing run
*/
func (a *Client) OrderBillingStatus(params *OrderBillingStatusParams, opts ...ClientOption) (*OrderBillingStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderBillingStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrderBilling_Status",
		Method:             "GET",
		PathPattern:        "/TXN/OrderBilling/{orderBillingId}/Status",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderBillingStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderBillingStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderBilling_Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrderCategoriesGet gets the details of an order category by id
*/
func (a *Client) OrderCategoriesGet(params *OrderCategoriesGetParams, opts ...ClientOption) (*OrderCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrderCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/OrderCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrderCategoriesGetAll gets all order categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) OrderCategoriesGetAll(params *OrderCategoriesGetAllParams, opts ...ClientOption) (*OrderCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrderCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/OrderCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrderCategoriesGetSummaries gets a summary representation of all order categories
*/
func (a *Client) OrderCategoriesGetSummaries(params *OrderCategoriesGetSummariesParams, opts ...ClientOption) (*OrderCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrderCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/OrderCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrdersGetProductsView gets the details of an existing order as the contract order products view which mirrors the structure of the cart response entity from g e t web session key cart this resource can be used to fetch any saved order in this view order HTML templates use this response contract orders products view as the model within the template orders actively in a session cart will not be available here until after checkout
*/
func (a *Client) OrdersGetProductsView(params *OrdersGetProductsViewParams, opts ...ClientOption) (*OrdersGetProductsViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersGetProductsViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Orders_GetProductsView",
		Method:             "GET",
		PathPattern:        "/TXN/Orders/{orderId}/ProductsView",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersGetProductsViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersGetProductsViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Orders_GetProductsView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrganizationsGet gets the details of an organization by ID to get the resource in maintenance mode ignoring control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) OrganizationsGet(params *OrganizationsGetParams, opts ...ClientOption) (*OrganizationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Organizations_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Organizations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Organizations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrganizationsGetAll gets all organizations to get the resources in maintenance mode ignoring control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) OrganizationsGetAll(params *OrganizationsGetAllParams, opts ...ClientOption) (*OrganizationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Organizations_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Organizations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Organizations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrganizationsGetSummaries gets a summary representation of all organizations
*/
func (a *Client) OrganizationsGetSummaries(params *OrganizationsGetSummariesParams, opts ...ClientOption) (*OrganizationsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Organizations_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Organizations/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Organizations_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OriginalSourcesGet gets the details of an original source by id
*/
func (a *Client) OriginalSourcesGet(params *OriginalSourcesGetParams, opts ...ClientOption) (*OriginalSourcesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginalSourcesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OriginalSources_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/OriginalSources/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginalSourcesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginalSourcesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OriginalSources_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OriginalSourcesGetAll gets all original sources for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) OriginalSourcesGetAll(params *OriginalSourcesGetAllParams, opts ...ClientOption) (*OriginalSourcesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginalSourcesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OriginalSources_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/OriginalSources",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginalSourcesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginalSourcesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OriginalSources_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OriginalSourcesGetSummaries gets a summary representation of all original sources
*/
func (a *Client) OriginalSourcesGetSummaries(params *OriginalSourcesGetSummariesParams, opts ...ClientOption) (*OriginalSourcesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginalSourcesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OriginalSources_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/OriginalSources/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginalSourcesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginalSourcesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OriginalSources_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OriginsGet gets the details of an origin by id
*/
func (a *Client) OriginsGet(params *OriginsGetParams, opts ...ClientOption) (*OriginsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Origins_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Origins/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Origins_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OriginsGetAll gets all origins for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) OriginsGetAll(params *OriginsGetAllParams, opts ...ClientOption) (*OriginsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Origins_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Origins",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Origins_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OriginsGetSummaries gets a summary representation of all origins
*/
func (a *Client) OriginsGetSummaries(params *OriginsGetSummariesParams, opts ...ClientOption) (*OriginsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Origins_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Origins/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Origins_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OutputSetsGet gets a single output set
*/
func (a *Client) OutputSetsGet(params *OutputSetsGetParams, opts ...ClientOption) (*OutputSetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutputSetsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OutputSets_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/OutputSets/{outputSetId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OutputSetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutputSetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OutputSets_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OutputSetsGetSummaries gets a summary of all output sets
*/
func (a *Client) OutputSetsGetSummaries(params *OutputSetsGetSummariesParams, opts ...ClientOption) (*OutputSetsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutputSetsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OutputSets_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Reporting/OutputSets/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OutputSetsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutputSetsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OutputSets_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackageHistoryGetAll gets history information for packages
*/
func (a *Client) PackageHistoryGetAll(params *PackageHistoryGetAllParams, opts ...ClientOption) (*PackageHistoryGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageHistoryGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageHistory_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/PackageHistory",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageHistoryGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageHistoryGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackageHistory_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagePriceTypesGet gets details of a specific package price type
*/
func (a *Client) PackagePriceTypesGet(params *PackagePriceTypesGetParams, opts ...ClientOption) (*PackagePriceTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagePriceTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackagePriceTypes_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PackagePriceTypes/{packagePriceTypeId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagePriceTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagePriceTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackagePriceTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagePriceTypesGetAll gets all package price types
*/
func (a *Client) PackagePriceTypesGetAll(params *PackagePriceTypesGetAllParams, opts ...ClientOption) (*PackagePriceTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagePriceTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackagePriceTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PackagePriceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagePriceTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagePriceTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackagePriceTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackageTypesGet gets the details of a package type by id
*/
func (a *Client) PackageTypesGet(params *PackageTypesGetParams, opts ...ClientOption) (*PackageTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PackageTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackageTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackageTypesGetAll gets all package types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PackageTypesGetAll(params *PackageTypesGetAllParams, opts ...ClientOption) (*PackageTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PackageTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackageTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackageTypesGetSummaries gets a summary representation of all package types
*/
func (a *Client) PackageTypesGetSummaries(params *PackageTypesGetSummariesParams, opts ...ClientOption) (*PackageTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PackageTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackageTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackageWebContentsGet gets details of a package web content
*/
func (a *Client) PackageWebContentsGet(params *PackageWebContentsGetParams, opts ...ClientOption) (*PackageWebContentsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageWebContentsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageWebContents_Get",
		Method:             "GET",
		PathPattern:        "/Txn/PackageWebContents/{packageWebContentId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageWebContentsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageWebContentsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackageWebContents_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackageWebContentsGetAll gets full package web contents for passed package ids or content type ids at least on parameter value is required for production element web contents use t x n inventory web contents to filter based on use web API flag on content type and other parameters use txn web contents this is mainly used for package web content setup
*/
func (a *Client) PackageWebContentsGetAll(params *PackageWebContentsGetAllParams, opts ...ClientOption) (*PackageWebContentsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageWebContentsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageWebContents_GetAll",
		Method:             "GET",
		PathPattern:        "/Txn/PackageWebContents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageWebContentsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageWebContentsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackageWebContents_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackageWebContentsGetAllSummaries gets summary package web contents for passed package ids and content type ids at least on parameter value is required for production element web contents use t x n inventory web contents to filter based on use web API flag on content type and other parameters use txn web contents this is mainly used for package web content setup
*/
func (a *Client) PackageWebContentsGetAllSummaries(params *PackageWebContentsGetAllSummariesParams, opts ...ClientOption) (*PackageWebContentsGetAllSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageWebContentsGetAllSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageWebContents_GetAllSummaries",
		Method:             "GET",
		PathPattern:        "/Txn/PackageWebContents/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageWebContentsGetAllSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageWebContentsGetAllSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackageWebContents_GetAllSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagesGet gets details of a package
*/
func (a *Client) PackagesGet(params *PackagesGetParams, opts ...ClientOption) (*PackagesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Packages/{packageId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Packages_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagesGetAll gets all packages filtered by a selected season
*/
func (a *Client) PackagesGetAll(params *PackagesGetAllParams, opts ...ClientOption) (*PackagesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Packages",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Packages_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagesGetPackageDetail gets detailed information about the package including sub packages and performance groups
*/
func (a *Client) PackagesGetPackageDetail(params *PackagesGetPackageDetailParams, opts ...ClientOption) (*PackagesGetPackageDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesGetPackageDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_GetPackageDetail",
		Method:             "GET",
		PathPattern:        "/TXN/Packages/{packageId}/Details",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesGetPackageDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesGetPackageDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Packages_GetPackageDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagesGetPerformanceGroupDetails gets details of performance groups and their performances for flex package selection
*/
func (a *Client) PackagesGetPerformanceGroupDetails(params *PackagesGetPerformanceGroupDetailsParams, opts ...ClientOption) (*PackagesGetPerformanceGroupDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesGetPerformanceGroupDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_GetPerformanceGroupDetails",
		Method:             "GET",
		PathPattern:        "/TXN/Packages/{packageId}/PerformanceGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesGetPerformanceGroupDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesGetPerformanceGroupDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Packages_GetPerformanceGroupDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagesGetPrices gets the package and its pricing details mode of sale and price type parameters can be used to filter the returned prices
*/
func (a *Client) PackagesGetPrices(params *PackagesGetPricesParams, opts ...ClientOption) (*PackagesGetPricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesGetPricesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_GetPrices",
		Method:             "GET",
		PathPattern:        "/TXN/Packages/{packageId}/Prices",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesGetPricesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesGetPricesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Packages_GetPrices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagesGetSeatFees returns price per seat fees for each zone and price type for the specified package
*/
func (a *Client) PackagesGetSeatFees(params *PackagesGetSeatFeesParams, opts ...ClientOption) (*PackagesGetSeatFeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesGetSeatFeesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_GetSeatFees",
		Method:             "GET",
		PathPattern:        "/TXN/Packages/{packageId}/SeatFees",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesGetSeatFeesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesGetSeatFeesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Packages_GetSeatFees: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagesGetSeatSummaries returns summary for seats in a package seat availability is summarized by screen section and zone the seats returned can be filtered by screen section or price zone allocation is returned based on m o s and constituent available seats can be filtered by price type availability causing any seats that are not available for the specified price types to be listed with a status of 5 not in allocation
*/
func (a *Client) PackagesGetSeatSummaries(params *PackagesGetSeatSummariesParams, opts ...ClientOption) (*PackagesGetSeatSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesGetSeatSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_GetSeatSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/Packages/{packageId}/Seats/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesGetSeatSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesGetSeatSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Packages_GetSeatSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagesGetSeats returns details for seats in a fixed seat package the seats returned can be filtered by screen section or price zone allocation is returned based on m o s and constituent available seats can be filtered by price type availability causing any seats that are not available for the specified price types to be listed with a status of 5 not in allocation
*/
func (a *Client) PackagesGetSeats(params *PackagesGetSeatsParams, opts ...ClientOption) (*PackagesGetSeatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesGetSeatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_GetSeats",
		Method:             "GET",
		PathPattern:        "/TXN/Packages/{packageId}/Seats",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesGetSeatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesGetSeatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Packages_GetSeats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagesGetSummaries gets summary of all packages filtered by a selected season
*/
func (a *Client) PackagesGetSummaries(params *PackagesGetSummariesParams, opts ...ClientOption) (*PackagesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/Packages/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Packages_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayActivitiesGet gets a single payment gateway activity
*/
func (a *Client) PaymentGatewayActivitiesGet(params *PaymentGatewayActivitiesGetParams, opts ...ClientOption) (*PaymentGatewayActivitiesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayActivitiesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayActivities_Get",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/PaymentGatewayActivities/{paymentGatewayActivityId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayActivitiesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayActivitiesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayActivities_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayActivitiesGetAll retrieves all payment gateway activity
*/
func (a *Client) PaymentGatewayActivitiesGetAll(params *PaymentGatewayActivitiesGetAllParams, opts ...ClientOption) (*PaymentGatewayActivitiesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayActivitiesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayActivities_GetAll",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/PaymentGatewayActivities",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayActivitiesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayActivitiesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayActivities_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayConfigurationGetConfiguration retrieves payment gateway configuration
*/
func (a *Client) PaymentGatewayConfigurationGetConfiguration(params *PaymentGatewayConfigurationGetConfigurationParams, opts ...ClientOption) (*PaymentGatewayConfigurationGetConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayConfigurationGetConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayConfiguration_GetConfiguration",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/Configuration",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayConfigurationGetConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayConfigurationGetConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayConfiguration_GetConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayNotificationsCheck payment gateway notifications check API
*/
func (a *Client) PaymentGatewayNotificationsCheck(params *PaymentGatewayNotificationsCheckParams, opts ...ClientOption) (*PaymentGatewayNotificationsCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayNotificationsCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayNotifications_Check",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/Notifications/Check",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayNotificationsCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayNotificationsCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayNotifications_Check: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayNotificationsGetAllNotificationEvents gets all notification events by reference
*/
func (a *Client) PaymentGatewayNotificationsGetAllNotificationEvents(params *PaymentGatewayNotificationsGetAllNotificationEventsParams, opts ...ClientOption) (*PaymentGatewayNotificationsGetAllNotificationEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayNotificationsGetAllNotificationEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayNotifications_GetAllNotificationEvents",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/Notifications/Events",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayNotificationsGetAllNotificationEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayNotificationsGetAllNotificationEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayNotifications_GetAllNotificationEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayNotificationsGetNotification retrieves notification events from tessitura merchant services for a given merchant p s p reference
*/
func (a *Client) PaymentGatewayNotificationsGetNotification(params *PaymentGatewayNotificationsGetNotificationParams, opts ...ClientOption) (*PaymentGatewayNotificationsGetNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayNotificationsGetNotificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayNotifications_GetNotification",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/Notifications",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayNotificationsGetNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayNotificationsGetNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayNotifications_GetNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayNotificationsGetNotificationEvent gets notification event by Id
*/
func (a *Client) PaymentGatewayNotificationsGetNotificationEvent(params *PaymentGatewayNotificationsGetNotificationEventParams, opts ...ClientOption) (*PaymentGatewayNotificationsGetNotificationEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayNotificationsGetNotificationEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayNotifications_GetNotificationEvent",
		Method:             "GET",
		PathPattern:        "/PaymentGateway/Notifications/Events/{notificationEventId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayNotificationsGetNotificationEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayNotificationsGetNotificationEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayNotifications_GetNotificationEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayTransactionTypesGet gets the details of a payment gateway transaction type by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PaymentGatewayTransactionTypesGet(params *PaymentGatewayTransactionTypesGetParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayTransactionTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayTransactionTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PaymentGatewayTransactionTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayTransactionTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayTransactionTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayTransactionTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayTransactionTypesGetAll gets details of all payment gateway transaction types to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PaymentGatewayTransactionTypesGetAll(params *PaymentGatewayTransactionTypesGetAllParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayTransactionTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayTransactionTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PaymentGatewayTransactionTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayTransactionTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayTransactionTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayTransactionTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayTransactionTypesGetSummaries gets a summary representation of all payment gateway transaction types
*/
func (a *Client) PaymentGatewayTransactionTypesGetSummaries(params *PaymentGatewayTransactionTypesGetSummariesParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayTransactionTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayTransactionTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PaymentGatewayTransactionTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayTransactionTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayTransactionTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayTransactionTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentHistoryGetAll gets history information for payments by constituent
*/
func (a *Client) PaymentHistoryGetAll(params *PaymentHistoryGetAllParams, opts ...ClientOption) (*PaymentHistoryGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentHistoryGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentHistory_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/PaymentHistory",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentHistoryGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentHistoryGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentHistory_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodGroupsGet gets the details of a payment method group by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PaymentMethodGroupsGet(params *PaymentMethodGroupsGetParams, opts ...ClientOption) (*PaymentMethodGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PaymentMethodGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethodGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodGroupsGetAll gets all payment method groups to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PaymentMethodGroupsGetAll(params *PaymentMethodGroupsGetAllParams, opts ...ClientOption) (*PaymentMethodGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PaymentMethodGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethodGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodGroupsGetSummaries gets a summary representation of all payment method groups
*/
func (a *Client) PaymentMethodGroupsGetSummaries(params *PaymentMethodGroupsGetSummariesParams, opts ...ClientOption) (*PaymentMethodGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PaymentMethodGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethodGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodUserGroupsGet gets details of a payment method user group mapping by id
*/
func (a *Client) PaymentMethodUserGroupsGet(params *PaymentMethodUserGroupsGetParams, opts ...ClientOption) (*PaymentMethodUserGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodUserGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodUserGroups_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PaymentMethodUserGroups/{paymentMethodUserGroupId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodUserGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodUserGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethodUserGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodUserGroupsGetAll gets all payment method user group mappings optional filter on user group amount and maintenance mode which overrides the filter on user group
*/
func (a *Client) PaymentMethodUserGroupsGetAll(params *PaymentMethodUserGroupsGetAllParams, opts ...ClientOption) (*PaymentMethodUserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodUserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PaymentMethodUserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodUserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodUserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethodUserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodsCheck checks payment method setup for e m v or hosted payment charges
*/
func (a *Client) PaymentMethodsCheck(params *PaymentMethodsCheckParams, opts ...ClientOption) (*PaymentMethodsCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodsCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethods_Check",
		Method:             "GET",
		PathPattern:        "/TXN/PaymentMethods/Check",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodsCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodsCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethods_Check: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodsGet gets details of a payment method
*/
func (a *Client) PaymentMethodsGet(params *PaymentMethodsGetParams, opts ...ClientOption) (*PaymentMethodsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethods_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PaymentMethods/{paymentMethodId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethods_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodsGetAll gets all payment methods this resource looks similar to reference data resources but is functionally different when maintenance mode is false control groups are considered when returning payment methods the default for maintenance mode is false this endpoint should not generally be used for transaction based screens because it does not account for assigned payment methods based on user group security for cart available payment methods consider security payment methods amount amount
*/
func (a *Client) PaymentMethodsGetAll(params *PaymentMethodsGetAllParams, opts ...ClientOption) (*PaymentMethodsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethods_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PaymentMethods",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethods_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodsTranslateMnemonic translates a card mnemonic into the matching system payment method or the default fallback payment method for that card reader type
*/
func (a *Client) PaymentMethodsTranslateMnemonic(params *PaymentMethodsTranslateMnemonicParams, opts ...ClientOption) (*PaymentMethodsTranslateMnemonicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodsTranslateMnemonicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethods_TranslateMnemonic",
		Method:             "GET",
		PathPattern:        "/TXN/PaymentMethods/TranslateMnemonic",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodsTranslateMnemonicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodsTranslateMnemonicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethods_TranslateMnemonic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentSignaturesGet gets details of a payment signature
*/
func (a *Client) PaymentSignaturesGet(params *PaymentSignaturesGetParams, opts ...ClientOption) (*PaymentSignaturesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentSignaturesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentSignatures_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Payment/Signatures/{paymentSignatureId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentSignaturesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentSignaturesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentSignatures_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentSignaturesGetAll gets all payment signatures
*/
func (a *Client) PaymentSignaturesGetAll(params *PaymentSignaturesGetAllParams, opts ...ClientOption) (*PaymentSignaturesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentSignaturesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentSignatures_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Payment/Signatures",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentSignaturesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentSignaturesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentSignatures_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentTypesGet gets the details of a payment type by id
*/
func (a *Client) PaymentTypesGet(params *PaymentTypesGetParams, opts ...ClientOption) (*PaymentTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PaymentTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentTypesGetAll gets all payment types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PaymentTypesGetAll(params *PaymentTypesGetAllParams, opts ...ClientOption) (*PaymentTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PaymentTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentTypesGetSummaries gets a summary representation of all payment types
*/
func (a *Client) PaymentTypesGetSummaries(params *PaymentTypesGetSummariesParams, opts ...ClientOption) (*PaymentTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PaymentTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentsAvailableForRefund retrieves cc payments available for refund by processor reference number
*/
func (a *Client) PaymentsAvailableForRefund(params *PaymentsAvailableForRefundParams, opts ...ClientOption) (*PaymentsAvailableForRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentsAvailableForRefundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payments_AvailableForRefund",
		Method:             "GET",
		PathPattern:        "/TXN/Payments/AvailableForRefund",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentsAvailableForRefundReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentsAvailableForRefundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Payments_AvailableForRefund: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentsGet gets a single payment
*/
func (a *Client) PaymentsGet(params *PaymentsGetParams, opts ...ClientOption) (*PaymentsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payments_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Payments/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Payments_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentsGetAll gets payments for a specified reference Id order or contribution id
*/
func (a *Client) PaymentsGetAll(params *PaymentsGetAllParams, opts ...ClientOption) (*PaymentsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payments_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Payments",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Payments_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentsGetOnAccountBalances gets a constituent s balance s for on account payment methods
*/
func (a *Client) PaymentsGetOnAccountBalances(params *PaymentsGetOnAccountBalancesParams, opts ...ClientOption) (*PaymentsGetOnAccountBalancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentsGetOnAccountBalancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payments_GetOnAccountBalances",
		Method:             "GET",
		PathPattern:        "/TXN/Payments/OnAccount",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentsGetOnAccountBalancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentsGetOnAccountBalancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Payments_GetOnAccountBalances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceGroupsGet gets details of a performance group
*/
func (a *Client) PerformanceGroupsGet(params *PerformanceGroupsGetParams, opts ...ClientOption) (*PerformanceGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceGroups_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PerformanceGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceGroupsGetAll gets all performance groups
*/
func (a *Client) PerformanceGroupsGetAll(params *PerformanceGroupsGetAllParams, opts ...ClientOption) (*PerformanceGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PerformanceGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceGroupsGetSummaries gets a summary representation of all performance groups
*/
func (a *Client) PerformanceGroupsGetSummaries(params *PerformanceGroupsGetSummariesParams, opts ...ClientOption) (*PerformanceGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/PerformanceGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePackageModeOfSalesGet gets details of a performance package mode of sale
*/
func (a *Client) PerformancePackageModeOfSalesGet(params *PerformancePackageModeOfSalesGetParams, opts ...ClientOption) (*PerformancePackageModeOfSalesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePackageModeOfSalesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePackageModeOfSales_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePackageModeOfSales/{performancePackageModeOfSaleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePackageModeOfSalesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePackageModeOfSalesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePackageModeOfSales_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePackageModeOfSalesGetAll gets all performance package mode of sales this entity shows the mode of sale assignment to either a package or a performance filter using at least one parameter all parameters work to filter the result set collectively so passing package ids and performance ids in the same request will retrieve no rows
*/
func (a *Client) PerformancePackageModeOfSalesGetAll(params *PerformancePackageModeOfSalesGetAllParams, opts ...ClientOption) (*PerformancePackageModeOfSalesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePackageModeOfSalesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePackageModeOfSales_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePackageModeOfSales",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePackageModeOfSalesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePackageModeOfSalesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePackageModeOfSales_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePriceLayersGet gets details of a performance price layer
*/
func (a *Client) PerformancePriceLayersGet(params *PerformancePriceLayersGetParams, opts ...ClientOption) (*PerformancePriceLayersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePriceLayers/{performancePriceLayerId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePriceLayers_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePriceLayersGetCounts gets count of performance price layers for a set of performances
*/
func (a *Client) PerformancePriceLayersGetCounts(params *PerformancePriceLayersGetCountsParams, opts ...ClientOption) (*PerformancePriceLayersGetCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersGetCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_GetCounts",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePriceLayers/Count",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersGetCountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersGetCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePriceLayers_GetCounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePriceLayersGetPriceCount gets the total count of price objects that will be collected when calling for the full price layer contract on these performance ids
*/
func (a *Client) PerformancePriceLayersGetPriceCount(params *PerformancePriceLayersGetPriceCountParams, opts ...ClientOption) (*PerformancePriceLayersGetPriceCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersGetPriceCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_GetPriceCount",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePriceLayers/PriceCount",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersGetPriceCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersGetPriceCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePriceLayers_GetPriceCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePriceTypesGet gets details of a performance price type
*/
func (a *Client) PerformancePriceTypesGet(params *PerformancePriceTypesGetParams, opts ...ClientOption) (*PerformancePriceTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceTypes_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePriceTypes/{performancePriceTypeId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePriceTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePriceTypesGetAll gets all performance price type for the list of performances pass comma separated list of performance ids as parameter
*/
func (a *Client) PerformancePriceTypesGetAll(params *PerformancePriceTypesGetAllParams, opts ...ClientOption) (*PerformancePriceTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePriceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePriceTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePricesGet gets details of a performance price
*/
func (a *Client) PerformancePricesGet(params *PerformancePricesGetParams, opts ...ClientOption) (*PerformancePricesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePricesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePrices_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePrices/{performancePriceId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePricesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePricesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePrices_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePricesGetAll gets all performance prices for a set of performance price types pass in as of date time to get prices effective for that date time
*/
func (a *Client) PerformancePricesGetAll(params *PerformancePricesGetAllParams, opts ...ClientOption) (*PerformancePricesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePricesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePrices_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePrices",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePricesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePricesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePrices_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePricesGetAllWithEvents gets details of a set of performance prices along with events associated with those prices
*/
func (a *Client) PerformancePricesGetAllWithEvents(params *PerformancePricesGetAllWithEventsParams, opts ...ClientOption) (*PerformancePricesGetAllWithEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePricesGetAllWithEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePrices_GetAllWithEvents",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePrices/Details",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePricesGetAllWithEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePricesGetAllWithEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePrices_GetAllWithEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePricesGetAudit gets the performance price audit entries for a set of performance prices
*/
func (a *Client) PerformancePricesGetAudit(params *PerformancePricesGetAuditParams, opts ...ClientOption) (*PerformancePricesGetAuditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePricesGetAuditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePrices_GetAudit",
		Method:             "GET",
		PathPattern:        "/TXN/PerformancePrices/Audit",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePricesGetAuditReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePricesGetAuditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePrices_GetAudit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceStatusesGet gets the details of a performance status by id
*/
func (a *Client) PerformanceStatusesGet(params *PerformanceStatusesGetParams, opts ...ClientOption) (*PerformanceStatusesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceStatusesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceStatuses_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PerformanceStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceStatusesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceStatusesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceStatuses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceStatusesGetAll gets all performance statuses for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PerformanceStatusesGetAll(params *PerformanceStatusesGetAllParams, opts ...ClientOption) (*PerformanceStatusesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceStatusesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceStatuses_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PerformanceStatuses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceStatusesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceStatusesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceStatuses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceStatusesGetSummaries gets a summary representation of all performance statuses
*/
func (a *Client) PerformanceStatusesGetSummaries(params *PerformanceStatusesGetSummariesParams, opts ...ClientOption) (*PerformanceStatusesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceStatusesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceStatuses_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PerformanceStatuses/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceStatusesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceStatusesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceStatuses_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceTypesGet gets the details of a performance type by id
*/
func (a *Client) PerformanceTypesGet(params *PerformanceTypesGetParams, opts ...ClientOption) (*PerformanceTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PerformanceTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceTypesGetAll gets all performance types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PerformanceTypesGetAll(params *PerformanceTypesGetAllParams, opts ...ClientOption) (*PerformanceTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PerformanceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceTypesGetSummaries gets a summary representation of all performance types
*/
func (a *Client) PerformanceTypesGetSummaries(params *PerformanceTypesGetSummariesParams, opts ...ClientOption) (*PerformanceTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PerformanceTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGet gets details of a performance
*/
func (a *Client) PerformancesGet(params *PerformancesGetParams, opts ...ClientOption) (*PerformancesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/{performanceId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetAll gets performance detail information for single production season a comma separated list of performances seasons or a single production season at least one filter parameter is required
*/
func (a *Client) PerformancesGetAll(params *PerformancesGetAllParams, opts ...ClientOption) (*PerformancesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Performances",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetAuditEntries audits log entries for changes to performance properties such as descriptions publish dates and the production season this does not include sub performance event setup items like pricing or modes of sale
*/
func (a *Client) PerformancesGetAuditEntries(params *PerformancesGetAuditEntriesParams, opts ...ClientOption) (*PerformancesGetAuditEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetAuditEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetAuditEntries",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/Audit",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetAuditEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetAuditEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetAuditEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetPerformanceZoneAvailabilities gets performance zone availability for a set of performances if section ids are specified only zones with matching sections will be returned and the section summaries node will be populated
*/
func (a *Client) PerformancesGetPerformanceZoneAvailabilities(params *PerformancesGetPerformanceZoneAvailabilitiesParams, opts ...ClientOption) (*PerformancesGetPerformanceZoneAvailabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetPerformanceZoneAvailabilitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetPerformanceZoneAvailabilities",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/Zones",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetPerformanceZoneAvailabilitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetPerformanceZoneAvailabilitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetPerformanceZoneAvailabilities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetPerformanceZoneAvailabilityWithConstituent gets performance zone availability for a set of performances if constituent Id and m o s are provided will also return availability based on allocations and constituent rank
*/
func (a *Client) PerformancesGetPerformanceZoneAvailabilityWithConstituent(params *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams, opts ...ClientOption) (*PerformancesGetPerformanceZoneAvailabilityWithConstituentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetPerformanceZoneAvailabilityWithConstituentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetPerformanceZoneAvailabilityWithConstituent",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/ZoneAvailabilities",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetPerformanceZoneAvailabilityWithConstituentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetPerformanceZoneAvailabilityWithConstituentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetPerformanceZoneAvailabilityWithConstituent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetPrices gets pricing details for a set of performances mode of sale and price type parameters can be used to filter the returned prices
*/
func (a *Client) PerformancesGetPrices(params *PerformancesGetPricesParams, opts ...ClientOption) (*PerformancesGetPricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetPricesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetPrices",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/Prices",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetPricesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetPricesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetPrices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetSeatFees returns price per seat fees for each zone and price type for a the specified performance
*/
func (a *Client) PerformancesGetSeatFees(params *PerformancesGetSeatFeesParams, opts ...ClientOption) (*PerformancesGetSeatFeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetSeatFeesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetSeatFees",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/{performanceId}/SeatFees",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetSeatFeesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetSeatFeesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetSeatFees: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetSeatHoldDetails gets seat holds for a performance
*/
func (a *Client) PerformancesGetSeatHoldDetails(params *PerformancesGetSeatHoldDetailsParams, opts ...ClientOption) (*PerformancesGetSeatHoldDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetSeatHoldDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetSeatHoldDetails",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/{performanceId}/Seats/Holds",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetSeatHoldDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetSeatHoldDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetSeatHoldDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetSeatSummaries returns summary for seats in a performance seat availability is summarized by screen section and zone the seats returned can be filtered by screen section or price zone allocation is returned based on m o s and constituent available seats can be filtered by price type availability causing any seats that are not available for the specified price types to be listed with a status of 5 not in allocation
*/
func (a *Client) PerformancesGetSeatSummaries(params *PerformancesGetSeatSummariesParams, opts ...ClientOption) (*PerformancesGetSeatSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetSeatSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetSeatSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/{performanceId}/Seats/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetSeatSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetSeatSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetSeatSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetSeats returns details for seats in a performance the seats returned can be filtered by screen section or price zone allocation is returned based on m o s and constituent available seats can be filtered by price type availability causing any seats that are not available for the specified price types to be listed with a status of 5 not in allocation
*/
func (a *Client) PerformancesGetSeats(params *PerformancesGetSeatsParams, opts ...ClientOption) (*PerformancesGetSeatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetSeatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetSeats",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/{performanceId}/Seats",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetSeatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetSeatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetSeats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesGetSummaries gets summary performance information for single production season a comma separated list of performances seasons or a single production season at least one filter parameter is required
*/
func (a *Client) PerformancesGetSummaries(params *PerformancesGetSummariesParams, opts ...ClientOption) (*PerformancesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/Performances/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhilanthropyTypesGet gets the details of philosophy type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PhilanthropyTypesGet(params *PhilanthropyTypesGetParams, opts ...ClientOption) (*PhilanthropyTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhilanthropyTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PhilanthropyTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhilanthropyTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhilanthropyTypesGetAll gets all philosophy types to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PhilanthropyTypesGetAll(params *PhilanthropyTypesGetAllParams, opts ...ClientOption) (*PhilanthropyTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhilanthropyTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PhilanthropyTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhilanthropyTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhilanthropyTypesGetSummaries gets a summary representation of all philosophy types
*/
func (a *Client) PhilanthropyTypesGetSummaries(params *PhilanthropyTypesGetSummariesParams, opts ...ClientOption) (*PhilanthropyTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhilanthropyTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PhilanthropyTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhilanthropyTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhilanthropyGet gets details of an philanthropy entry
*/
func (a *Client) PhilanthropyGet(params *PhilanthropyGetParams, opts ...ClientOption) (*PhilanthropyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Philanthropy_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Philanthropy/{philanthropyEntryId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Philanthropy_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhilanthropyGetAll gets details of all the philanthropy entries for the specified constituent id and all its visible affiliation s philanthropy entries as well to exclude philanthropy entries of the visible affiliations pass include affiliations false
*/
func (a *Client) PhilanthropyGetAll(params *PhilanthropyGetAllParams, opts ...ClientOption) (*PhilanthropyGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Philanthropy_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Philanthropy",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Philanthropy_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhoneIndicatorsGet gets the details of a phone indicator by id
*/
func (a *Client) PhoneIndicatorsGet(params *PhoneIndicatorsGetParams, opts ...ClientOption) (*PhoneIndicatorsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneIndicatorsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneIndicators_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PhoneIndicators/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneIndicatorsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneIndicatorsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhoneIndicators_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhoneIndicatorsGetAll gets all phone indicators for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PhoneIndicatorsGetAll(params *PhoneIndicatorsGetAllParams, opts ...ClientOption) (*PhoneIndicatorsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneIndicatorsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneIndicators_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PhoneIndicators",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneIndicatorsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneIndicatorsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhoneIndicators_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhoneIndicatorsGetSummaries gets a summary representation of all phone indicators
*/
func (a *Client) PhoneIndicatorsGetSummaries(params *PhoneIndicatorsGetSummariesParams, opts ...ClientOption) (*PhoneIndicatorsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneIndicatorsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneIndicators_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PhoneIndicators/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneIndicatorsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneIndicatorsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhoneIndicators_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhoneTypesGet gets the details of a phone type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PhoneTypesGet(params *PhoneTypesGetParams, opts ...ClientOption) (*PhoneTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PhoneTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhoneTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhoneTypesGetAll gets all phone types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PhoneTypesGetAll(params *PhoneTypesGetAllParams, opts ...ClientOption) (*PhoneTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PhoneTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhoneTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhoneTypesGetSummaries gets a summary representation of all phone types
*/
func (a *Client) PhoneTypesGetSummaries(params *PhoneTypesGetSummariesParams, opts ...ClientOption) (*PhoneTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PhoneTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhoneTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesGet gets details of a phone
*/
func (a *Client) PhonesGet(params *PhonesGetParams, opts ...ClientOption) (*PhonesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Phones/{phoneId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesGetAll gets details of all the phones for the specified constituent constituent Id and all its visible affiliation s phones as well or address address Id to exclude phones of the visible affiliations pass include affiliations false if address Id is passed constituent Id or include affiliations parameters are ignored to get the phones attached to the primary address pass primary true
*/
func (a *Client) PhonesGetAll(params *PhonesGetAllParams, opts ...ClientOption) (*PhonesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Phones",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanPrioritiesGet gets the details of a plan priority by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PlanPrioritiesGet(params *PlanPrioritiesGetParams, opts ...ClientOption) (*PlanPrioritiesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanPrioritiesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanPriorities_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanPriorities/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanPrioritiesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanPrioritiesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanPriorities_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanPrioritiesGetAll gets all plan priorities to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PlanPrioritiesGetAll(params *PlanPrioritiesGetAllParams, opts ...ClientOption) (*PlanPrioritiesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanPrioritiesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanPriorities_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanPriorities",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanPrioritiesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanPrioritiesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanPriorities_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanPrioritiesGetSummaries gets a summary representation of all plan priorities
*/
func (a *Client) PlanPrioritiesGetSummaries(params *PlanPrioritiesGetSummariesParams, opts ...ClientOption) (*PlanPrioritiesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanPrioritiesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanPriorities_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanPriorities/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanPrioritiesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanPrioritiesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanPriorities_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanSourcesGet gets the details of a plan source by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PlanSourcesGet(params *PlanSourcesGetParams, opts ...ClientOption) (*PlanSourcesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanSourcesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanSources_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanSources/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanSourcesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanSourcesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanSources_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanSourcesGetAll gets all plan sources to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PlanSourcesGetAll(params *PlanSourcesGetAllParams, opts ...ClientOption) (*PlanSourcesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanSourcesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanSources_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanSources",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanSourcesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanSourcesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanSources_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanSourcesGetSummaries gets a summary representation of all plan sources
*/
func (a *Client) PlanSourcesGetSummaries(params *PlanSourcesGetSummariesParams, opts ...ClientOption) (*PlanSourcesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanSourcesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanSources_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanSources/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanSourcesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanSourcesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanSources_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanStatusesGet gets the details of a plan status by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PlanStatusesGet(params *PlanStatusesGetParams, opts ...ClientOption) (*PlanStatusesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanStatusesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanStatuses_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanStatusesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanStatusesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanStatuses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanStatusesGetAll gets all plan statuses to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PlanStatusesGetAll(params *PlanStatusesGetAllParams, opts ...ClientOption) (*PlanStatusesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanStatusesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanStatuses_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanStatuses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanStatusesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanStatusesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanStatuses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanStatusesGetSummaries gets a summary representation of all plan statuses
*/
func (a *Client) PlanStatusesGetSummaries(params *PlanStatusesGetSummariesParams, opts ...ClientOption) (*PlanStatusesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanStatusesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanStatuses_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanStatuses/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanStatusesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanStatusesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanStatuses_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanTypesGet gets the details of a plan type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PlanTypesGet(params *PlanTypesGetParams, opts ...ClientOption) (*PlanTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanTypesGetAll gets all plan types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PlanTypesGetAll(params *PlanTypesGetAllParams, opts ...ClientOption) (*PlanTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanTypesGetSummaries gets a summary representation of all plan types
*/
func (a *Client) PlanTypesGetSummaries(params *PlanTypesGetSummariesParams, opts ...ClientOption) (*PlanTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PlanTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanWorkersGet gets details of a plan worker
*/
func (a *Client) PlanWorkersGet(params *PlanWorkersGetParams, opts ...ClientOption) (*PlanWorkersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanWorkersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanWorkers_Get",
		Method:             "GET",
		PathPattern:        "/Finance/PlanWorkers/{planWorkerId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanWorkersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanWorkersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanWorkers_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanWorkersGetAll gets details of all the plan workers for the specified constituent
*/
func (a *Client) PlanWorkersGetAll(params *PlanWorkersGetAllParams, opts ...ClientOption) (*PlanWorkersGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanWorkersGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanWorkers_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/PlanWorkers",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanWorkersGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanWorkersGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanWorkers_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlansGet gets details of a plan
*/
func (a *Client) PlansGet(params *PlansGetParams, opts ...ClientOption) (*PlansGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlansGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Plans_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Plans/{planId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlansGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlansGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Plans_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlansGetAll gets details of all the plans for the specified constituent campaign worker or fund
*/
func (a *Client) PlansGetAll(params *PlansGetAllParams, opts ...ClientOption) (*PlansGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlansGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Plans_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/Plans",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlansGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlansGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Plans_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PledgeBillingGetStatus gets status of a pledge billing run job is finished processing when is completed is true only billing runs using automated billing will be running after the response from a p o s t to txn pledge billing
*/
func (a *Client) PledgeBillingGetStatus(params *PledgeBillingGetStatusParams, opts ...ClientOption) (*PledgeBillingGetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPledgeBillingGetStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PledgeBilling_GetStatus",
		Method:             "GET",
		PathPattern:        "/TXN/PledgeBilling/{id}/Status",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PledgeBillingGetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PledgeBillingGetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PledgeBilling_GetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PortfolioCustomElementsGet gets the details of a portfolio custom element by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PortfolioCustomElementsGet(params *PortfolioCustomElementsGetParams, opts ...ClientOption) (*PortfolioCustomElementsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortfolioCustomElementsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PortfolioCustomElements_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PortfolioCustomElements/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PortfolioCustomElementsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PortfolioCustomElementsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PortfolioCustomElements_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PortfolioCustomElementsGetAll gets all portfolio custom elements to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PortfolioCustomElementsGetAll(params *PortfolioCustomElementsGetAllParams, opts ...ClientOption) (*PortfolioCustomElementsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortfolioCustomElementsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PortfolioCustomElements_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PortfolioCustomElements",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PortfolioCustomElementsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PortfolioCustomElementsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PortfolioCustomElements_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PortfolioCustomElementsGetSummaries gets a summary representation of all portfolio custom elements
*/
func (a *Client) PortfolioCustomElementsGetSummaries(params *PortfolioCustomElementsGetSummariesParams, opts ...ClientOption) (*PortfolioCustomElementsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortfolioCustomElementsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PortfolioCustomElements_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PortfolioCustomElements/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PortfolioCustomElementsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PortfolioCustomElementsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PortfolioCustomElements_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PortfoliosGet gets portfolio for a constituent
*/
func (a *Client) PortfoliosGet(params *PortfoliosGetParams, opts ...ClientOption) (*PortfoliosGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortfoliosGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Portfolios_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Portfolios",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PortfoliosGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PortfoliosGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Portfolios_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PortfoliosGetPortfolioEntry gets details of a portfolio entry for a plan
*/
func (a *Client) PortfoliosGetPortfolioEntry(params *PortfoliosGetPortfolioEntryParams, opts ...ClientOption) (*PortfoliosGetPortfolioEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortfoliosGetPortfolioEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Portfolios_GetPortfolioEntry",
		Method:             "GET",
		PathPattern:        "/Finance/Portfolios/Entries",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PortfoliosGetPortfolioEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PortfoliosGetPortfolioEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Portfolios_GetPortfolioEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrefixesGet gets the details of a prefix by id
*/
func (a *Client) PrefixesGet(params *PrefixesGetParams, opts ...ClientOption) (*PrefixesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrefixesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Prefixes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Prefixes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrefixesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrefixesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Prefixes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrefixesGetAll gets all prefixes for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PrefixesGetAll(params *PrefixesGetAllParams, opts ...ClientOption) (*PrefixesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrefixesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Prefixes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Prefixes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrefixesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrefixesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Prefixes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrefixesGetSummaries gets a summary representation of all prefixes
*/
func (a *Client) PrefixesGetSummaries(params *PrefixesGetSummariesParams, opts ...ClientOption) (*PrefixesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrefixesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Prefixes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Prefixes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrefixesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrefixesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Prefixes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PremieresGet gets the details of a premiere by id
*/
func (a *Client) PremieresGet(params *PremieresGetParams, opts ...ClientOption) (*PremieresGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPremieresGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Premieres_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Premieres/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PremieresGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PremieresGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Premieres_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PremieresGetAll gets all premieres for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PremieresGetAll(params *PremieresGetAllParams, opts ...ClientOption) (*PremieresGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPremieresGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Premieres_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Premieres",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PremieresGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PremieresGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Premieres_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PremieresGetSummaries gets a summary representation of all premieres
*/
func (a *Client) PremieresGetSummaries(params *PremieresGetSummariesParams, opts ...ClientOption) (*PremieresGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPremieresGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Premieres_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Premieres/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PremieresGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PremieresGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Premieres_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceCategoriesGet gets the details of a price category by id
*/
func (a *Client) PriceCategoriesGet(params *PriceCategoriesGetParams, opts ...ClientOption) (*PriceCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceCategoriesGetAll gets all price categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PriceCategoriesGetAll(params *PriceCategoriesGetAllParams, opts ...ClientOption) (*PriceCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceCategoriesGetSummaries gets a summary representation of all price categories
*/
func (a *Client) PriceCategoriesGetSummaries(params *PriceCategoriesGetSummariesParams, opts ...ClientOption) (*PriceCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceEventsGet gets details of a price event
*/
func (a *Client) PriceEventsGet(params *PriceEventsGetParams, opts ...ClientOption) (*PriceEventsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceEventsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceEvents_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PriceEvents/{priceEventId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceEventsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceEventsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceEvents_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceEventsGetAll gets all price events for a performance performance price type or performance price detail from and to date parameters can be used to filter the events if both are specified then events between those dates would be returned if only from date is specified then all events with a start date greater than that date would be returned if only to date is specified then all events with a start date less than that date would be returned
*/
func (a *Client) PriceEventsGetAll(params *PriceEventsGetAllParams, opts ...ClientOption) (*PriceEventsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceEventsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceEvents_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PriceEvents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceEventsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceEventsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceEvents_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceEventsGetDates gets a distinct set of dates that contain events for the given list of performances
*/
func (a *Client) PriceEventsGetDates(params *PriceEventsGetDatesParams, opts ...ClientOption) (*PriceEventsGetDatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceEventsGetDatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceEvents_GetDates",
		Method:             "GET",
		PathPattern:        "/TXN/PriceEvents/Dates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceEventsGetDatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceEventsGetDatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceEvents_GetDates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceLayerTypesGet gets the details of a price layer type by id
*/
func (a *Client) PriceLayerTypesGet(params *PriceLayerTypesGetParams, opts ...ClientOption) (*PriceLayerTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceLayerTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceLayerTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceLayerTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceLayerTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceLayerTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceLayerTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceLayerTypesGetAll gets all price layer types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PriceLayerTypesGetAll(params *PriceLayerTypesGetAllParams, opts ...ClientOption) (*PriceLayerTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceLayerTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceLayerTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceLayerTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceLayerTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceLayerTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceLayerTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceLayerTypesGetSummaries gets a summary representation of all price layer types
*/
func (a *Client) PriceLayerTypesGetSummaries(params *PriceLayerTypesGetSummariesParams, opts ...ClientOption) (*PriceLayerTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceLayerTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceLayerTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceLayerTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceLayerTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceLayerTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceLayerTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTemplatesGet gets details of a price template
*/
func (a *Client) PriceTemplatesGet(params *PriceTemplatesGetParams, opts ...ClientOption) (*PriceTemplatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTemplatesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTemplates_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTemplates/{priceTemplateId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTemplatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTemplatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTemplates_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTemplatesGetAll gets all price templates optionally filtered by zone map and or facility
*/
func (a *Client) PriceTemplatesGetAll(params *PriceTemplatesGetAllParams, opts ...ClientOption) (*PriceTemplatesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTemplatesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTemplates_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTemplates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTemplatesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTemplatesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTemplates_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTemplatesGetSummaries gets summary of all price templates optionally filtered by zone map and or facility
*/
func (a *Client) PriceTemplatesGetSummaries(params *PriceTemplatesGetSummariesParams, opts ...ClientOption) (*PriceTemplatesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTemplatesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTemplates_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTemplates/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTemplatesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTemplatesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTemplates_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeCategoriesGet gets the details of a price type category by id
*/
func (a *Client) PriceTypeCategoriesGet(params *PriceTypeCategoriesGetParams, opts ...ClientOption) (*PriceTypeCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceTypeCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeCategoriesGetAll gets all price type categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PriceTypeCategoriesGetAll(params *PriceTypeCategoriesGetAllParams, opts ...ClientOption) (*PriceTypeCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceTypeCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeCategoriesGetSummaries gets a summary representation of all price type categories
*/
func (a *Client) PriceTypeCategoriesGetSummaries(params *PriceTypeCategoriesGetSummariesParams, opts ...ClientOption) (*PriceTypeCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceTypeCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeGroupsGet gets the details of a price type group by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PriceTypeGroupsGet(params *PriceTypeGroupsGetParams, opts ...ClientOption) (*PriceTypeGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceTypeGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeGroupsGetAll gets all price type groups to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PriceTypeGroupsGetAll(params *PriceTypeGroupsGetAllParams, opts ...ClientOption) (*PriceTypeGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceTypeGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeGroupsGetSummaries gets a summary representation of all price type groups
*/
func (a *Client) PriceTypeGroupsGetSummaries(params *PriceTypeGroupsGetSummariesParams, opts ...ClientOption) (*PriceTypeGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceTypeGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeReasonsGet gets the details of a price type reason by id
*/
func (a *Client) PriceTypeReasonsGet(params *PriceTypeReasonsGetParams, opts ...ClientOption) (*PriceTypeReasonsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeReasonsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeReasons_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceTypeReasons/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeReasonsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeReasonsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeReasons_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeReasonsGetAll gets all price type reasons for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PriceTypeReasonsGetAll(params *PriceTypeReasonsGetAllParams, opts ...ClientOption) (*PriceTypeReasonsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeReasonsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeReasons_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceTypeReasons",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeReasonsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeReasonsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeReasons_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeReasonsGetSummaries gets a summary representation of all price type categories
*/
func (a *Client) PriceTypeReasonsGetSummaries(params *PriceTypeReasonsGetSummariesParams, opts ...ClientOption) (*PriceTypeReasonsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeReasonsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeReasons_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PriceTypeReasons/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeReasonsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeReasonsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeReasons_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeUserGroupsGet gets details of a price type user group mapping by id
*/
func (a *Client) PriceTypeUserGroupsGet(params *PriceTypeUserGroupsGetParams, opts ...ClientOption) (*PriceTypeUserGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeUserGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeUserGroups_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTypeUserGroups/{priceTypeUserGroupId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeUserGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeUserGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeUserGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeUserGroupsGetAll gets all price type user group mappings optional filter on user group and price type
*/
func (a *Client) PriceTypeUserGroupsGetAll(params *PriceTypeUserGroupsGetAllParams, opts ...ClientOption) (*PriceTypeUserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeUserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTypeUserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeUserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeUserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeUserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypesGet gets details of a price type
*/
func (a *Client) PriceTypesGet(params *PriceTypesGetParams, opts ...ClientOption) (*PriceTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypes_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTypes/{priceTypeId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypesGetAll gets all price types
*/
func (a *Client) PriceTypesGetAll(params *PriceTypesGetAllParams, opts ...ClientOption) (*PriceTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypesGetReasons gets valid price type reasons for the specified price type
*/
func (a *Client) PriceTypesGetReasons(params *PriceTypesGetReasonsParams, opts ...ClientOption) (*PriceTypesGetReasonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypesGetReasonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypes_GetReasons",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTypes/Reasons",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypesGetReasonsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypesGetReasonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypes_GetReasons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypesGetSummaries gets summary of all price types
*/
func (a *Client) PriceTypesGetSummaries(params *PriceTypesGetSummariesParams, opts ...ClientOption) (*PriceTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypesGetValidPriceTypes gets all valid price types for a performance package and a mode of sale a comma separated list of performance ids can be specified for a flex package
*/
func (a *Client) PriceTypesGetValidPriceTypes(params *PriceTypesGetValidPriceTypesParams, opts ...ClientOption) (*PriceTypesGetValidPriceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypesGetValidPriceTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypes_GetValidPriceTypes",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTypes/Details",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypesGetValidPriceTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypesGetValidPriceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypes_GetValidPriceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypesGetValidZones gets valid zones for a set of performances or packages
*/
func (a *Client) PriceTypesGetValidZones(params *PriceTypesGetValidZonesParams, opts ...ClientOption) (*PriceTypesGetValidZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypesGetValidZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypes_GetValidZones",
		Method:             "GET",
		PathPattern:        "/TXN/PriceTypes/Zones",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypesGetValidZonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypesGetValidZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypes_GetValidZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleCategoriesGet gets the details of a pricing rule category by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) PricingRuleCategoriesGet(params *PricingRuleCategoriesGetParams, opts ...ClientOption) (*PricingRuleCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PricingRuleCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleCategoriesGetAll gets all pricing rule categories to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PricingRuleCategoriesGetAll(params *PricingRuleCategoriesGetAllParams, opts ...ClientOption) (*PricingRuleCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PricingRuleCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleCategoriesGetSummaries gets a summary representation of all pricing rule categories
*/
func (a *Client) PricingRuleCategoriesGetSummaries(params *PricingRuleCategoriesGetSummariesParams, opts ...ClientOption) (*PricingRuleCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PricingRuleCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleMessageTypesGet gets the details of a pricing rule message type by id
*/
func (a *Client) PricingRuleMessageTypesGet(params *PricingRuleMessageTypesGetParams, opts ...ClientOption) (*PricingRuleMessageTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleMessageTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleMessageTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PricingRuleMessageTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleMessageTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleMessageTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleMessageTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleMessageTypesGetAll gets all pricing rule message types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PricingRuleMessageTypesGetAll(params *PricingRuleMessageTypesGetAllParams, opts ...ClientOption) (*PricingRuleMessageTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleMessageTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleMessageTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PricingRuleMessageTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleMessageTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleMessageTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleMessageTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleMessageTypesGetSummaries gets a summary representation of all pricing rule message types
*/
func (a *Client) PricingRuleMessageTypesGetSummaries(params *PricingRuleMessageTypesGetSummariesParams, opts ...ClientOption) (*PricingRuleMessageTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleMessageTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleMessageTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PricingRuleMessageTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleMessageTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleMessageTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleMessageTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleSetsGet gets details of a pricing rule set
*/
func (a *Client) PricingRuleSetsGet(params *PricingRuleSetsGetParams, opts ...ClientOption) (*PricingRuleSetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleSetsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleSets_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PricingRuleSets/{pricingRuleSetId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleSetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleSetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleSets_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleSetsGetAll gets all pricing rule sets
*/
func (a *Client) PricingRuleSetsGetAll(params *PricingRuleSetsGetAllParams, opts ...ClientOption) (*PricingRuleSetsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleSetsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleSets_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PricingRuleSets",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleSetsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleSetsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleSets_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleSetsGetSummaries gets a summary of all pricing rule sets
*/
func (a *Client) PricingRuleSetsGetSummaries(params *PricingRuleSetsGetSummariesParams, opts ...ClientOption) (*PricingRuleSetsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleSetsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleSets_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/PricingRuleSets/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleSetsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleSetsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleSets_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleTypesGet gets the details of a pricing rule type by id
*/
func (a *Client) PricingRuleTypesGet(params *PricingRuleTypesGetParams, opts ...ClientOption) (*PricingRuleTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PricingRuleTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleTypesGetAll gets all pricing rule types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PricingRuleTypesGetAll(params *PricingRuleTypesGetAllParams, opts ...ClientOption) (*PricingRuleTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PricingRuleTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleTypesGetSummaries gets a summary representation of all pricing rule types
*/
func (a *Client) PricingRuleTypesGetSummaries(params *PricingRuleTypesGetSummariesParams, opts ...ClientOption) (*PricingRuleTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/PricingRuleTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRulesGet gets details of a pricing rule
*/
func (a *Client) PricingRulesGet(params *PricingRulesGetParams, opts ...ClientOption) (*PricingRulesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRulesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRules_Get",
		Method:             "GET",
		PathPattern:        "/TXN/PricingRules/{pricingRuleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRulesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRulesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRules_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRulesGetAll gets all pricing rules or filtered set
*/
func (a *Client) PricingRulesGetAll(params *PricingRulesGetAllParams, opts ...ClientOption) (*PricingRulesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRulesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRules_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/PricingRules",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRulesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRulesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRules_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRulesGetAllSummary gets a summary of all pricing rules
*/
func (a *Client) PricingRulesGetAllSummary(params *PricingRulesGetAllSummaryParams, opts ...ClientOption) (*PricingRulesGetAllSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRulesGetAllSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRules_GetAllSummary",
		Method:             "GET",
		PathPattern:        "/TXN/PricingRules/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRulesGetAllSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRulesGetAllSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRules_GetAllSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrintersGet gets the details of a printer by id
*/
func (a *Client) PrintersGet(params *PrintersGetParams, opts ...ClientOption) (*PrintersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrintersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Printers_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Printers/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrintersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrintersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Printers_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrintersGetAll gets all printers for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) PrintersGetAll(params *PrintersGetAllParams, opts ...ClientOption) (*PrintersGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrintersGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Printers_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Printers",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrintersGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrintersGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Printers_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrintersGetSummaries gets a summary representation of all printers
*/
func (a *Client) PrintersGetSummaries(params *PrintersGetSummariesParams, opts ...ClientOption) (*PrintersGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrintersGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Printers_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Printers/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrintersGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrintersGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Printers_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductKeywordsGetKeywords returns keywords for the requested production elements or packages for production elements if the keyword is found returns the keyword and the lowest level at which it was found in the production hierarchy title production production season performance for the requested element optionally all matching keywords anywhere above the requested element in the production hierarchy can be returned with the show all parameter
*/
func (a *Client) ProductKeywordsGetKeywords(params *ProductKeywordsGetKeywordsParams, opts ...ClientOption) (*ProductKeywordsGetKeywordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductKeywordsGetKeywordsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductKeywords_GetKeywords",
		Method:             "GET",
		PathPattern:        "/TXN/ProductKeywords",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductKeywordsGetKeywordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductKeywordsGetKeywordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductKeywords_GetKeywords: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionSeasonMembershipOrganizationsGet gets details of a specific production season membership organization
*/
func (a *Client) ProductionSeasonMembershipOrganizationsGet(params *ProductionSeasonMembershipOrganizationsGetParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonMembershipOrganizationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasonMembershipOrganizations_Get",
		Method:             "GET",
		PathPattern:        "/TXN/ProductionSeasonMembershipOrganizations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonMembershipOrganizationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonMembershipOrganizationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductionSeasonMembershipOrganizations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionSeasonMembershipOrganizationsGetAll gets all production season membership organizations for a production season
*/
func (a *Client) ProductionSeasonMembershipOrganizationsGetAll(params *ProductionSeasonMembershipOrganizationsGetAllParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonMembershipOrganizationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasonMembershipOrganizations_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/ProductionSeasonMembershipOrganizations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonMembershipOrganizationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonMembershipOrganizationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductionSeasonMembershipOrganizations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionSeasonMembershipOrganizationsGetSummaries gets a summary of all production season membership organizations for a production season
*/
func (a *Client) ProductionSeasonMembershipOrganizationsGetSummaries(params *ProductionSeasonMembershipOrganizationsGetSummariesParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonMembershipOrganizationsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasonMembershipOrganizations_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/ProductionSeasonMembershipOrganizations/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonMembershipOrganizationsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonMembershipOrganizationsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductionSeasonMembershipOrganizations_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionSeasonsGet gets details of a specific production season returns the full details for a single production season including description and short description season first and last performance date and the four ticket text lines
*/
func (a *Client) ProductionSeasonsGet(params *ProductionSeasonsGetParams, opts ...ClientOption) (*ProductionSeasonsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasons_Get",
		Method:             "GET",
		PathPattern:        "/TXN/ProductionSeasons/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductionSeasons_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionSeasonsGetAll gets production season details returns the full details for multiple production seasons based on a string of production i ds or season i ds including description and short description season first and last performance date and the four ticket text lines
*/
func (a *Client) ProductionSeasonsGetAll(params *ProductionSeasonsGetAllParams, opts ...ClientOption) (*ProductionSeasonsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasons_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/ProductionSeasons",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductionSeasons_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionSeasonsGetSummaries gets production season summaries returns the production season summary description ID and related production and season summaries for all production seasons all production seasons of a string of specific productions or all production seasons in a string of specified seasons
*/
func (a *Client) ProductionSeasonsGetSummaries(params *ProductionSeasonsGetSummariesParams, opts ...ClientOption) (*ProductionSeasonsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasons_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/ProductionSeasons/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductionSeasons_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionsGet gets details of a specific production
*/
func (a *Client) ProductionsGet(params *ProductionsGetParams, opts ...ClientOption) (*ProductionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Productions_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Productions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Productions_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionsGetAll gets all productions optionally filtered by one or more titles
*/
func (a *Client) ProductionsGetAll(params *ProductionsGetAllParams, opts ...ClientOption) (*ProductionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Productions_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Productions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Productions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionsGetSummaries gets all production summaries optionally filtered by one or more titles
*/
func (a *Client) ProductionsGetSummaries(params *ProductionsGetSummariesParams, opts ...ClientOption) (*ProductionsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Productions_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/Productions/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Productions_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProgramListingsGet gets details of a program listing
*/
func (a *Client) ProgramListingsGet(params *ProgramListingsGetParams, opts ...ClientOption) (*ProgramListingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramListingsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProgramListings_Get",
		Method:             "GET",
		PathPattern:        "/CRM/ProgramListings/{programListingId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramListingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramListingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProgramListings_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProgramListingsGetAll gets details of all the program listings for the specified constituent id and all its visible affiliation s program listings as well to exclude program listings of the visible affiliations pass include affiliations false to get the primary program listings alone pass primary only true
*/
func (a *Client) ProgramListingsGetAll(params *ProgramListingsGetAllParams, opts ...ClientOption) (*ProgramListingsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramListingsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProgramListings_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/ProgramListings",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramListingsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramListingsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProgramListings_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProgramsGet gets the details of a program by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ProgramsGet(params *ProgramsGetParams, opts ...ClientOption) (*ProgramsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Programs_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Programs/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Programs_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProgramsGetAll gets all programs to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ProgramsGetAll(params *ProgramsGetAllParams, opts ...ClientOption) (*ProgramsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Programs_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Programs",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Programs_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProgramsGetSummaries gets a summary representation of all programs
*/
func (a *Client) ProgramsGetSummaries(params *ProgramsGetSummariesParams, opts ...ClientOption) (*ProgramsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Programs_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Programs/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Programs_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PronounsGet pronouns get API
*/
func (a *Client) PronounsGet(params *PronounsGetParams, opts ...ClientOption) (*PronounsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPronounsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Pronouns_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Pronouns/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PronounsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PronounsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Pronouns_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PronounsGetAll pronouns get all API
*/
func (a *Client) PronounsGetAll(params *PronounsGetAllParams, opts ...ClientOption) (*PronounsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPronounsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Pronouns_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Pronouns",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PronounsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PronounsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Pronouns_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PronounsGetSummaries pronouns get summaries API
*/
func (a *Client) PronounsGetSummaries(params *PronounsGetSummariesParams, opts ...ClientOption) (*PronounsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPronounsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Pronouns_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Pronouns/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PronounsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PronounsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Pronouns_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QualificationCategoriesGet gets the details of a qualification category by id to get the resource only if the user has write edit access pass filter writeonly to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) QualificationCategoriesGet(params *QualificationCategoriesGetParams, opts ...ClientOption) (*QualificationCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QualificationCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/QualificationCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QualificationCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QualificationCategoriesGetAll gets the details of all qualification categories to get the resources only if the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) QualificationCategoriesGetAll(params *QualificationCategoriesGetAllParams, opts ...ClientOption) (*QualificationCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QualificationCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/QualificationCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QualificationCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QualificationCategoriesGetSummaries gets a summary representation of all qualification categories
*/
func (a *Client) QualificationCategoriesGetSummaries(params *QualificationCategoriesGetSummariesParams, opts ...ClientOption) (*QualificationCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QualificationCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/QualificationCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QualificationCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QualificationsGet gets the details of a qualification by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) QualificationsGet(params *QualificationsGetParams, opts ...ClientOption) (*QualificationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Qualifications_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Qualifications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Qualifications_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QualificationsGetAll gets all qualifications to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p s
*/
func (a *Client) QualificationsGetAll(params *QualificationsGetAllParams, opts ...ClientOption) (*QualificationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Qualifications_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Qualifications",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Qualifications_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QualificationsGetSummaries gets a summary representation of all qualifications
*/
func (a *Client) QualificationsGetSummaries(params *QualificationsGetSummariesParams, opts ...ClientOption) (*QualificationsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Qualifications_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Qualifications/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Qualifications_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementFiltersGet gets a specific query element filter
*/
func (a *Client) QueryElementFiltersGet(params *QueryElementFiltersGetParams, opts ...ClientOption) (*QueryElementFiltersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementFiltersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementFilters_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/QueryElementFilters/{queryElementFilterId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementFiltersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementFiltersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElementFilters_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementFiltersGetAll gets available query element filters for one or more query element groups
*/
func (a *Client) QueryElementFiltersGetAll(params *QueryElementFiltersGetAllParams, opts ...ClientOption) (*QueryElementFiltersGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementFiltersGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementFilters_GetAll",
		Method:             "GET",
		PathPattern:        "/Reporting/QueryElementFilters",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementFiltersGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementFiltersGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElementFilters_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementFiltersGetDataFor gets values for a query element filter
*/
func (a *Client) QueryElementFiltersGetDataFor(params *QueryElementFiltersGetDataForParams, opts ...ClientOption) (*QueryElementFiltersGetDataForOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementFiltersGetDataForParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementFilters_GetDataFor",
		Method:             "GET",
		PathPattern:        "/Reporting/QueryElementFilters/Data",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementFiltersGetDataForReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementFiltersGetDataForOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElementFilters_GetDataFor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementFiltersGetSummaries gets summary of query element filters for one or more query element groups
*/
func (a *Client) QueryElementFiltersGetSummaries(params *QueryElementFiltersGetSummariesParams, opts ...ClientOption) (*QueryElementFiltersGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementFiltersGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementFilters_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Reporting/QueryElementFilters/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementFiltersGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementFiltersGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElementFilters_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementGroupsGet gets the details of a query element group by id
*/
func (a *Client) QueryElementGroupsGet(params *QueryElementGroupsGetParams, opts ...ClientOption) (*QueryElementGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementGroups_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/QueryElementGroups/{queryElementGroupId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElementGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementGroupsGetAll gets all query element groups
*/
func (a *Client) QueryElementGroupsGetAll(params *QueryElementGroupsGetAllParams, opts ...ClientOption) (*QueryElementGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/Reporting/QueryElementGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElementGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementsGet gets details of a query element by id
*/
func (a *Client) QueryElementsGet(params *QueryElementsGetParams, opts ...ClientOption) (*QueryElementsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElements_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/QueryElements/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElements_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementsGetAll gets a list of query elements optionally filtered by one or more group ids or if they re active only
*/
func (a *Client) QueryElementsGetAll(params *QueryElementsGetAllParams, opts ...ClientOption) (*QueryElementsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElements_GetAll",
		Method:             "GET",
		PathPattern:        "/Reporting/QueryElements",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElements_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementsGetSummaries gets a list of query elements in summary optionally filtered by one or more group ids or if they re active only
*/
func (a *Client) QueryElementsGetSummaries(params *QueryElementsGetSummariesParams, opts ...ClientOption) (*QueryElementsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElements_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Reporting/QueryElements/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElements_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RankTypesGet gets the details of a rank type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) RankTypesGet(params *RankTypesGetParams, opts ...ClientOption) (*RankTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RankTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/RankTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RankTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RankTypesGetAll gets all rank types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) RankTypesGetAll(params *RankTypesGetAllParams, opts ...ClientOption) (*RankTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RankTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/RankTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RankTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RankTypesGetSummaries gets a summary representation of all rank types
*/
func (a *Client) RankTypesGetSummaries(params *RankTypesGetSummariesParams, opts ...ClientOption) (*RankTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RankTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/RankTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RankTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RankingsGet gets details of a ranking
*/
func (a *Client) RankingsGet(params *RankingsGetParams, opts ...ClientOption) (*RankingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankingsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Rankings_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Rankings/{rankingId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Rankings_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RankingsGetAll gets details of all the rankings for the specified constituent id and all its visible affiliation s rankings as well to exclude rankings of the visible affiliations pass include affiliations false to get the primary rankings alone pass primary only true
*/
func (a *Client) RankingsGetAll(params *RankingsGetAllParams, opts ...ClientOption) (*RankingsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankingsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Rankings_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Rankings",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankingsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankingsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Rankings_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReceiptSettingsGet gets the details of a receipt setting by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ReceiptSettingsGet(params *ReceiptSettingsGetParams, opts ...ClientOption) (*ReceiptSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiptSettingsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReceiptSettings_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReceiptSettings/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReceiptSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReceiptSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReceiptSettings_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReceiptSettingsGetAll gets all receipt settings to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ReceiptSettingsGetAll(params *ReceiptSettingsGetAllParams, opts ...ClientOption) (*ReceiptSettingsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiptSettingsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReceiptSettings_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReceiptSettings",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReceiptSettingsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReceiptSettingsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReceiptSettings_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReceiptSettingsGetSummaries gets a summary representation of all receipt settings
*/
func (a *Client) ReceiptSettingsGetSummaries(params *ReceiptSettingsGetSummariesParams, opts ...ClientOption) (*ReceiptSettingsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiptSettingsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReceiptSettings_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReceiptSettings/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReceiptSettingsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReceiptSettingsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReceiptSettings_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReferenceColumnsGetAll gets all reference columns for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ReferenceColumnsGetAll(params *ReferenceColumnsGetAllParams, opts ...ClientOption) (*ReferenceColumnsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceColumnsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceColumns_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReferenceColumns",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceColumnsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceColumnsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReferenceColumns_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReferenceColumnsGetSummaries gets a summary representation of all reference columns
*/
func (a *Client) ReferenceColumnsGetSummaries(params *ReferenceColumnsGetSummariesParams, opts ...ClientOption) (*ReferenceColumnsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceColumnsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceColumns_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReferenceColumns/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceColumnsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceColumnsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReferenceColumns_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReferenceTableUserGroupsGet gets the details of a reference table user group mapping by id
*/
func (a *Client) ReferenceTableUserGroupsGet(params *ReferenceTableUserGroupsGetParams, opts ...ClientOption) (*ReferenceTableUserGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceTableUserGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceTableUserGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReferenceTableUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceTableUserGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceTableUserGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReferenceTableUserGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReferenceTableUserGroupsGetAll gets all the reference table user group mappings
*/
func (a *Client) ReferenceTableUserGroupsGetAll(params *ReferenceTableUserGroupsGetAllParams, opts ...ClientOption) (*ReferenceTableUserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceTableUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceTableUserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReferenceTableUserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceTableUserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceTableUserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReferenceTableUserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReferenceTableUserGroupsGetSummaries gets a summary representation of all reference table user group mappings
*/
func (a *Client) ReferenceTableUserGroupsGetSummaries(params *ReferenceTableUserGroupsGetSummariesParams, opts ...ClientOption) (*ReferenceTableUserGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceTableUserGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceTableUserGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReferenceTableUserGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceTableUserGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceTableUserGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReferenceTableUserGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReferenceTablesGet gets details for a reference table by Id
*/
func (a *Client) ReferenceTablesGet(params *ReferenceTablesGetParams, opts ...ClientOption) (*ReferenceTablesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceTablesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceTables_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReferenceTables/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceTablesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceTablesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReferenceTables_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReferenceTablesGetAll gets all reference tables for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ReferenceTablesGetAll(params *ReferenceTablesGetAllParams, opts ...ClientOption) (*ReferenceTablesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceTablesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceTables_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReferenceTables",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceTablesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceTablesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReferenceTables_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReferenceTablesGetSummaries gets a summary representation of all reference tables
*/
func (a *Client) ReferenceTablesGetSummaries(params *ReferenceTablesGetSummariesParams, opts ...ClientOption) (*ReferenceTablesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceTablesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceTables_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReferenceTables/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceTablesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceTablesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReferenceTables_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RelationshipCategoriesGet gets the details of a relationship category by id
*/
func (a *Client) RelationshipCategoriesGet(params *RelationshipCategoriesGetParams, opts ...ClientOption) (*RelationshipCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelationshipCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelationshipCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/RelationshipCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelationshipCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelationshipCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelationshipCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RelationshipCategoriesGetAll gets all relationship categories for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) RelationshipCategoriesGetAll(params *RelationshipCategoriesGetAllParams, opts ...ClientOption) (*RelationshipCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelationshipCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelationshipCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/RelationshipCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelationshipCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelationshipCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelationshipCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RelationshipCategoriesGetSummaries gets a summary representation of all relationship categories
*/
func (a *Client) RelationshipCategoriesGetSummaries(params *RelationshipCategoriesGetSummariesParams, opts ...ClientOption) (*RelationshipCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelationshipCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelationshipCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/RelationshipCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelationshipCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelationshipCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelationshipCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RelationshipsGetAll gets all affiliations and associations of the specified constituent id or get all affiliations and associations of the specified associated constituent id if both are specified get all the associations and affiliations between them
*/
func (a *Client) RelationshipsGetAll(params *RelationshipsGetAllParams, opts ...ClientOption) (*RelationshipsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelationshipsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Relationships_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Relationships",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelationshipsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelationshipsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Relationships_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportRequestsGet gets a report request
*/
func (a *Client) ReportRequestsGet(params *ReportRequestsGetParams, opts ...ClientOption) (*ReportRequestsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportRequestsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportRequests_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/ReportRequests/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportRequestsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportRequestsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportRequests_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportRequestsGetAll gets all requests optionally filtered by active requests only
*/
func (a *Client) ReportRequestsGetAll(params *ReportRequestsGetAllParams, opts ...ClientOption) (*ReportRequestsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportRequestsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportRequests_GetAll",
		Method:             "GET",
		PathPattern:        "/Reporting/ReportRequests",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportRequestsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportRequestsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportRequests_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportRequestsGetAllExpired gets a list of all the expired requests of the specified report types as of the provided date time
*/
func (a *Client) ReportRequestsGetAllExpired(params *ReportRequestsGetAllExpiredParams, opts ...ClientOption) (*ReportRequestsGetAllExpiredOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportRequestsGetAllExpiredParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportRequests_GetAllExpired",
		Method:             "GET",
		PathPattern:        "/Reporting/ReportRequests/Expired",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportRequestsGetAllExpiredReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportRequestsGetAllExpiredOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportRequests_GetAllExpired: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportRequestsGetQueued gets a list of all the requests queued to be run as of the current date time
*/
func (a *Client) ReportRequestsGetQueued(params *ReportRequestsGetQueuedParams, opts ...ClientOption) (*ReportRequestsGetQueuedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportRequestsGetQueuedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportRequests_GetQueued",
		Method:             "GET",
		PathPattern:        "/Reporting/ReportRequests/Queued",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportRequestsGetQueuedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportRequestsGetQueuedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportRequests_GetQueued: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportSchedulesGet gets a report schedule
*/
func (a *Client) ReportSchedulesGet(params *ReportSchedulesGetParams, opts ...ClientOption) (*ReportSchedulesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportSchedulesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportSchedules_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/ReportSchedules/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportSchedulesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportSchedulesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportSchedules_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportSchedulesGetAll gets all report schedules optionally filtered by active only
*/
func (a *Client) ReportSchedulesGetAll(params *ReportSchedulesGetAllParams, opts ...ClientOption) (*ReportSchedulesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportSchedulesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportSchedules_GetAll",
		Method:             "GET",
		PathPattern:        "/Reporting/ReportSchedules",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportSchedulesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportSchedulesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportSchedules_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportUserGroupsGet gets the details of a report user group mapping by id
*/
func (a *Client) ReportUserGroupsGet(params *ReportUserGroupsGetParams, opts ...ClientOption) (*ReportUserGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportUserGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportUserGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReportUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportUserGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportUserGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportUserGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportUserGroupsGetAll gets all report user group mappings
*/
func (a *Client) ReportUserGroupsGetAll(params *ReportUserGroupsGetAllParams, opts ...ClientOption) (*ReportUserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportUserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReportUserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportUserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportUserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportUserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportUserGroupsGetSummaries gets a summary representation of all report user group mappings
*/
func (a *Client) ReportUserGroupsGetSummaries(params *ReportUserGroupsGetSummariesParams, opts ...ClientOption) (*ReportUserGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportUserGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportUserGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ReportUserGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportUserGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportUserGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportUserGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportsGet gets details of a report
*/
func (a *Client) ReportsGet(params *ReportsGetParams, opts ...ClientOption) (*ReportsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Reports_Get",
		Method:             "GET",
		PathPattern:        "/Reporting/Reports/{reportId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Reports_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportsGetAll gets all reports optionally filtered by type
*/
func (a *Client) ReportsGetAll(params *ReportsGetAllParams, opts ...ClientOption) (*ReportsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Reports_GetAll",
		Method:             "GET",
		PathPattern:        "/Reporting/Reports",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Reports_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportsGetCustomData gets custom data for a report parameter
*/
func (a *Client) ReportsGetCustomData(params *ReportsGetCustomDataParams, opts ...ClientOption) (*ReportsGetCustomDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportsGetCustomDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Reports_GetCustomData",
		Method:             "GET",
		PathPattern:        "/Reporting/Reports/CustomData",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportsGetCustomDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportsGetCustomDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Reports_GetCustomData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportsGetReportCategories gets all report categories
*/
func (a *Client) ReportsGetReportCategories(params *ReportsGetReportCategoriesParams, opts ...ClientOption) (*ReportsGetReportCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportsGetReportCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Reports_GetReportCategories",
		Method:             "GET",
		PathPattern:        "/Reporting/Reports/Categories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportsGetReportCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportsGetReportCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Reports_GetReportCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportsGetReportDefaults gets report defaults for the specified user group
*/
func (a *Client) ReportsGetReportDefaults(params *ReportsGetReportDefaultsParams, opts ...ClientOption) (*ReportsGetReportDefaultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportsGetReportDefaultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Reports_GetReportDefaults",
		Method:             "GET",
		PathPattern:        "/Reporting/Reports/Defaults/{userGroup}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportsGetReportDefaultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportsGetReportDefaultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Reports_GetReportDefaults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportsGetReportParameters gets report parameters
*/
func (a *Client) ReportsGetReportParameters(params *ReportsGetReportParametersParams, opts ...ClientOption) (*ReportsGetReportParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportsGetReportParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Reports_GetReportParameters",
		Method:             "GET",
		PathPattern:        "/Reporting/Reports/Parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportsGetReportParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportsGetReportParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Reports_GetReportParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResearchTypesGet gets the details of research type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ResearchTypesGet(params *ResearchTypesGetParams, opts ...ClientOption) (*ResearchTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResearchTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ResearchTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResearchTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResearchTypesGetAll gets all research types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ResearchTypesGetAll(params *ResearchTypesGetAllParams, opts ...ClientOption) (*ResearchTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResearchTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ResearchTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResearchTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResearchTypesGetSummaries gets a summary representation of all research types
*/
func (a *Client) ResearchTypesGetSummaries(params *ResearchTypesGetSummariesParams, opts ...ClientOption) (*ResearchTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResearchTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ResearchTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResearchTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResearchGet gets details of a research entry
*/
func (a *Client) ResearchGet(params *ResearchGetParams, opts ...ClientOption) (*ResearchGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Research_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Research/{researchEntryId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Research_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResearchGetAll gets details of all the research for the specified constituent id and all its visible affiliation s researches as well to exclude researches of the visible affiliations pass include affiliations false
*/
func (a *Client) ResearchGetAll(params *ResearchGetAllParams, opts ...ClientOption) (*ResearchGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Research_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Research",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Research_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceCategoriesGet gets the details of a resource category by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ResourceCategoriesGet(params *ResourceCategoriesGetParams, opts ...ClientOption) (*ResourceCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ResourceCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceCategoriesGetAll gets details of all resource categories to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ResourceCategoriesGetAll(params *ResourceCategoriesGetAllParams, opts ...ClientOption) (*ResourceCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ResourceCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceCategoriesGetSummaries gets a summary representation of all resource categories
*/
func (a *Client) ResourceCategoriesGetSummaries(params *ResourceCategoriesGetSummariesParams, opts ...ClientOption) (*ResourceCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ResourceCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceSchedulesGet gets a single resource schedule
*/
func (a *Client) ResourceSchedulesGet(params *ResourceSchedulesGetParams, opts ...ClientOption) (*ResourceSchedulesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceSchedulesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceSchedules_Get",
		Method:             "GET",
		PathPattern:        "/EventsManagement/ResourceSchedules/{resourceScheduleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceSchedulesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceSchedulesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceSchedules_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceSchedulesGetAll gets a list of resource schedules for resources or workers one of resource ids or constituent ids parameters must be provided
*/
func (a *Client) ResourceSchedulesGetAll(params *ResourceSchedulesGetAllParams, opts ...ClientOption) (*ResourceSchedulesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceSchedulesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceSchedules_GetAll",
		Method:             "GET",
		PathPattern:        "/EventsManagement/ResourceSchedules",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceSchedulesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceSchedulesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceSchedules_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceTypesGet gets all resource types
*/
func (a *Client) ResourceTypesGet(params *ResourceTypesGetParams, opts ...ClientOption) (*ResourceTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceTypes_Get",
		Method:             "GET",
		PathPattern:        "/EventsManagement/ResourceTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceTypesGetAll gets all resource types
*/
func (a *Client) ResourceTypesGetAll(params *ResourceTypesGetAllParams, opts ...ClientOption) (*ResourceTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/EventsManagement/ResourceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceTypesGetSummaries gets summary of all resource types
*/
func (a *Client) ResourceTypesGetSummaries(params *ResourceTypesGetSummariesParams, opts ...ClientOption) (*ResourceTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/EventsManagement/ResourceTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourcesGet gets a specific resource
*/
func (a *Client) ResourcesGet(params *ResourcesGetParams, opts ...ClientOption) (*ResourcesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_Get",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Resources/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Resources_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourcesGetAll gets all resources optionally filtered by resource type category or constituent Id for worker type only include affiliations parameter only accepted when constituent Id provided
*/
func (a *Client) ResourcesGetAll(params *ResourcesGetAllParams, opts ...ClientOption) (*ResourcesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_GetAll",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Resources",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Resources_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourcesGetDetails gets schedules and qualifications that apply to a set of resources and or constituents during certain period of time
*/
func (a *Client) ResourcesGetDetails(params *ResourcesGetDetailsParams, opts ...ClientOption) (*ResourcesGetDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesGetDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_GetDetails",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Resources/Details",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesGetDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesGetDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Resources_GetDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourcesGetSummaries gets all resources in summary optionally filtered by resource type category or constituent for worker type only include affiliations parameter only accepted when constituent Id provided
*/
func (a *Client) ResourcesGetSummaries(params *ResourcesGetSummariesParams, opts ...ClientOption) (*ResourcesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_GetSummaries",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Resources/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Resources_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourcesHasUsages gets the resource usage information
*/
func (a *Client) ResourcesHasUsages(params *ResourcesHasUsagesParams, opts ...ClientOption) (*ResourcesHasUsagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesHasUsagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_HasUsages",
		Method:             "GET",
		PathPattern:        "/EventsManagement/Resources/{id}/Usages",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesHasUsagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesHasUsagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Resources_HasUsages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesChannelsGet gets the details of a sales channel by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SalesChannelsGet(params *SalesChannelsGetParams, opts ...ClientOption) (*SalesChannelsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesChannelsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesChannels_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SalesChannels/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesChannelsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesChannelsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesChannels_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesChannelsGetAll gets all sales channels to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SalesChannelsGetAll(params *SalesChannelsGetAllParams, opts ...ClientOption) (*SalesChannelsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesChannelsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesChannels_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SalesChannels",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesChannelsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesChannelsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesChannels_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesChannelsGetSummaries gets a summary representation of all sales channels
*/
func (a *Client) SalesChannelsGetSummaries(params *SalesChannelsGetSummariesParams, opts ...ClientOption) (*SalesChannelsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesChannelsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesChannels_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SalesChannels/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesChannelsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesChannelsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesChannels_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesLayoutButtonTypesGet gets the details of a sales layout button type by id
*/
func (a *Client) SalesLayoutButtonTypesGet(params *SalesLayoutButtonTypesGetParams, opts ...ClientOption) (*SalesLayoutButtonTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutButtonTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayoutButtonTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SalesLayoutButtonTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutButtonTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutButtonTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesLayoutButtonTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesLayoutButtonTypesGetAll gets all sales layout button types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SalesLayoutButtonTypesGetAll(params *SalesLayoutButtonTypesGetAllParams, opts ...ClientOption) (*SalesLayoutButtonTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutButtonTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayoutButtonTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SalesLayoutButtonTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutButtonTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutButtonTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesLayoutButtonTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesLayoutButtonTypesGetSummaries gets a summary representation of all sales layout button types
*/
func (a *Client) SalesLayoutButtonTypesGetSummaries(params *SalesLayoutButtonTypesGetSummariesParams, opts ...ClientOption) (*SalesLayoutButtonTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutButtonTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayoutButtonTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SalesLayoutButtonTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutButtonTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutButtonTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesLayoutButtonTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesLayoutsGet gets details of a sales layout setup
*/
func (a *Client) SalesLayoutsGet(params *SalesLayoutsGetParams, opts ...ClientOption) (*SalesLayoutsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayouts_Get",
		Method:             "GET",
		PathPattern:        "/TXN/SalesLayouts/Setup/{salesLayoutId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesLayouts_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesLayoutsGetForSale gets details of a sales layout for use in orders
*/
func (a *Client) SalesLayoutsGetForSale(params *SalesLayoutsGetForSaleParams, opts ...ClientOption) (*SalesLayoutsGetForSaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutsGetForSaleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayouts_GetForSale",
		Method:             "GET",
		PathPattern:        "/TXN/SalesLayouts/{salesLayoutId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutsGetForSaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutsGetForSaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesLayouts_GetForSale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesLayoutsGetSummaries gets all sales layouts setup
*/
func (a *Client) SalesLayoutsGetSummaries(params *SalesLayoutsGetSummariesParams, opts ...ClientOption) (*SalesLayoutsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayouts_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/SalesLayouts/Setup/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesLayouts_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalutationTypesGet gets the details of a salutation type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SalutationTypesGet(params *SalutationTypesGetParams, opts ...ClientOption) (*SalutationTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalutationTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SalutationTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalutationTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalutationTypesGetAll gets all salutation types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SalutationTypesGetAll(params *SalutationTypesGetAllParams, opts ...ClientOption) (*SalutationTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalutationTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SalutationTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalutationTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalutationTypesGetSummaries gets a summary representation of all salutation types
*/
func (a *Client) SalutationTypesGetSummaries(params *SalutationTypesGetSummariesParams, opts ...ClientOption) (*SalutationTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalutationTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SalutationTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalutationTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalutationsGenerate generates values for the fields required for the salutation last name and sort name using the values passed as query parameters if you pass in value for constituent Id there is no need to pass values for any other parameters even if it is passed they are ignored if value for constituent Id is not passed values for other parameters should be passed in this case values for either constituent type Id or formula Id should be passed
*/
func (a *Client) SalutationsGenerate(params *SalutationsGenerateParams, opts ...ClientOption) (*SalutationsGenerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationsGenerateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Salutations_Generate",
		Method:             "GET",
		PathPattern:        "/CRM/Salutations/Generate",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationsGenerateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationsGenerateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Salutations_Generate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalutationsGet gets details of a salutation
*/
func (a *Client) SalutationsGet(params *SalutationsGetParams, opts ...ClientOption) (*SalutationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Salutations_Get",
		Method:             "GET",
		PathPattern:        "/CRM/Salutations/{salutationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Salutations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalutationsGetAll gets details of all the salutations for the specified constituent id and all its visible affiliation s salutations as well to exclude salutations of the visible affiliations pass include affiliations false to fetch default salutations alone pass default only true
*/
func (a *Client) SalutationsGetAll(params *SalutationsGetAllParams, opts ...ClientOption) (*SalutationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Salutations_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/Salutations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Salutations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SchedulePatternTypesGet gets the details of a schedule pattern by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SchedulePatternTypesGet(params *SchedulePatternTypesGetParams, opts ...ClientOption) (*SchedulePatternTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulePatternTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SchedulePatternTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SchedulePatternTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulePatternTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulePatternTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SchedulePatternTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SchedulePatternTypesGetAll gets details of all schedule patterns to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SchedulePatternTypesGetAll(params *SchedulePatternTypesGetAllParams, opts ...ClientOption) (*SchedulePatternTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulePatternTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SchedulePatternTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SchedulePatternTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulePatternTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulePatternTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SchedulePatternTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SchedulePatternTypesGetSummaries gets a summary representation of all schedule patterns
*/
func (a *Client) SchedulePatternTypesGetSummaries(params *SchedulePatternTypesGetSummariesParams, opts ...ClientOption) (*SchedulePatternTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulePatternTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SchedulePatternTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SchedulePatternTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulePatternTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulePatternTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SchedulePatternTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScheduleTypesGet gets the details of a schedule type by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ScheduleTypesGet(params *ScheduleTypesGetParams, opts ...ClientOption) (*ScheduleTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ScheduleTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduleTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScheduleTypesGetAll gets details of all schedule types to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) ScheduleTypesGetAll(params *ScheduleTypesGetAllParams, opts ...ClientOption) (*ScheduleTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ScheduleTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduleTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScheduleTypesGetSummaries gets a summary representation of all schedule types
*/
func (a *Client) ScheduleTypesGetSummaries(params *ScheduleTypesGetSummariesParams, opts ...ClientOption) (*ScheduleTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ScheduleTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduleTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeasonTypesGet gets the details of a season type by id
*/
func (a *Client) SeasonTypesGet(params *SeasonTypesGetParams, opts ...ClientOption) (*SeasonTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeasonTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SeasonTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeasonTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeasonTypesGetAll gets all season types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SeasonTypesGetAll(params *SeasonTypesGetAllParams, opts ...ClientOption) (*SeasonTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeasonTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SeasonTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeasonTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeasonTypesGetSummaries gets a summary representation of all season types
*/
func (a *Client) SeasonTypesGetSummaries(params *SeasonTypesGetSummariesParams, opts ...ClientOption) (*SeasonTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeasonTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SeasonTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeasonTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeasonsGet gets the details of a season by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SeasonsGet(params *SeasonsGetParams, opts ...ClientOption) (*SeasonsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Seasons_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Seasons/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Seasons_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeasonsGetAll gets all seasons to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SeasonsGetAll(params *SeasonsGetAllParams, opts ...ClientOption) (*SeasonsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Seasons_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Seasons",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Seasons_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeasonsGetSummaries gets a summary representation of all seasons
*/
func (a *Client) SeasonsGetSummaries(params *SeasonsGetSummariesParams, opts ...ClientOption) (*SeasonsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Seasons_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Seasons/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Seasons_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeatCodesGet gets the details of a seat code by id
*/
func (a *Client) SeatCodesGet(params *SeatCodesGetParams, opts ...ClientOption) (*SeatCodesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatCodesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatCodes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SeatCodes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatCodesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatCodesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeatCodes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeatCodesGetAll gets all seat codes for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SeatCodesGetAll(params *SeatCodesGetAllParams, opts ...ClientOption) (*SeatCodesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatCodesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatCodes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SeatCodes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatCodesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatCodesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeatCodes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeatCodesGetSummaries gets a summary representation of all seat codes
*/
func (a *Client) SeatCodesGetSummaries(params *SeatCodesGetSummariesParams, opts ...ClientOption) (*SeatCodesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatCodesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatCodes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SeatCodes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatCodesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatCodesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeatCodes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeatStatusesGet gets the details of a seat status by id
*/
func (a *Client) SeatStatusesGet(params *SeatStatusesGetParams, opts ...ClientOption) (*SeatStatusesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatStatusesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatStatuses_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SeatStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatStatusesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatStatusesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeatStatuses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeatStatusesGetAll gets all seat statuses for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SeatStatusesGetAll(params *SeatStatusesGetAllParams, opts ...ClientOption) (*SeatStatusesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatStatusesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatStatuses_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SeatStatuses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatStatusesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatStatusesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeatStatuses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeatStatusesGetSummaries gets a summary representation of all seat statuses
*/
func (a *Client) SeatStatusesGetSummaries(params *SeatStatusesGetSummariesParams, opts ...ClientOption) (*SeatStatusesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatStatusesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatStatuses_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SeatStatuses/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatStatusesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatStatusesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeatStatuses_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SectionsGet gets the details of a section by id
*/
func (a *Client) SectionsGet(params *SectionsGetParams, opts ...ClientOption) (*SectionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSectionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Sections_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Sections/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SectionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SectionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sections_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SectionsGetAll gets all sections to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SectionsGetAll(params *SectionsGetAllParams, opts ...ClientOption) (*SectionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSectionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Sections_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Sections",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SectionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SectionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sections_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SectionsGetSummaries gets a summary representation of all sections
*/
func (a *Client) SectionsGetSummaries(params *SectionsGetSummariesParams, opts ...ClientOption) (*SectionsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSectionsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Sections_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Sections/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SectionsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SectionsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sections_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityBatchTypesGetAll gets all batch type user group mappings valid for the context usergroup
*/
func (a *Client) SecurityBatchTypesGetAll(params *SecurityBatchTypesGetAllParams, opts ...ClientOption) (*SecurityBatchTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityBatchTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityBatchTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/BatchTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityBatchTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityBatchTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityBatchTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityControlGroupsGetAll gets all control group user group mappings valid for the context usergroup
*/
func (a *Client) SecurityControlGroupsGetAll(params *SecurityControlGroupsGetAllParams, opts ...ClientOption) (*SecurityControlGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityControlGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityControlGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/ControlGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityControlGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityControlGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityControlGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityHoldCodesGetAll gets all hold code user group mappings valid for the context usergroup
*/
func (a *Client) SecurityHoldCodesGetAll(params *SecurityHoldCodesGetAllParams, opts ...ClientOption) (*SecurityHoldCodesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityHoldCodesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityHoldCodes_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/HoldCodes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityHoldCodesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityHoldCodesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityHoldCodes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityModesOfSaleGetAll gets all mode of sale user group mappings valid for the context usergroup
*/
func (a *Client) SecurityModesOfSaleGetAll(params *SecurityModesOfSaleGetAllParams, opts ...ClientOption) (*SecurityModesOfSaleGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityModesOfSaleGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityModesOfSale_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/ModesOfSale",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityModesOfSaleGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityModesOfSaleGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityModesOfSale_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityObjectPermissionsGetAll gets all the object permissions valid for the context usergroup optionally filter by constituency id and or object id
*/
func (a *Client) SecurityObjectPermissionsGetAll(params *SecurityObjectPermissionsGetAllParams, opts ...ClientOption) (*SecurityObjectPermissionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityObjectPermissionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityObjectPermissions_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/ObjectPermissions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityObjectPermissionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityObjectPermissionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityObjectPermissions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityPaymentMethodsGetAll gets all payment method user group mappings valid for the context usergroup
*/
func (a *Client) SecurityPaymentMethodsGetAll(params *SecurityPaymentMethodsGetAllParams, opts ...ClientOption) (*SecurityPaymentMethodsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityPaymentMethodsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityPaymentMethods_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/PaymentMethods",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityPaymentMethodsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityPaymentMethodsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityPaymentMethods_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityPriceTypesGetAll gets all price type user group mappings valid for the context usergroup
*/
func (a *Client) SecurityPriceTypesGetAll(params *SecurityPriceTypesGetAllParams, opts ...ClientOption) (*SecurityPriceTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityPriceTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityPriceTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/PriceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityPriceTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityPriceTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityPriceTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityReferenceTablesGetAll gets all the reference table user group mappings valid for the context usergroup
*/
func (a *Client) SecurityReferenceTablesGetAll(params *SecurityReferenceTablesGetAllParams, opts ...ClientOption) (*SecurityReferenceTablesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityReferenceTablesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityReferenceTables_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/ReferenceTables",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityReferenceTablesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityReferenceTablesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityReferenceTables_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityReportsGetAll gets all report user group mappings valid for the context usergroup
*/
func (a *Client) SecurityReportsGetAll(params *SecurityReportsGetAllParams, opts ...ClientOption) (*SecurityReportsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityReportsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityReports_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/Reports",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityReportsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityReportsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityReports_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityServiceResourcesGetAll gets all service resource user group mappings valid for the context usergroup
*/
func (a *Client) SecurityServiceResourcesGetAll(params *SecurityServiceResourcesGetAllParams, opts ...ClientOption) (*SecurityServiceResourcesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityServiceResourcesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityServiceResources_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/ServiceResources",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityServiceResourcesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityServiceResourcesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityServiceResources_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityUserGroupsGetAll gets all security user groups
*/
func (a *Client) SecurityUserGroupsGetAll(params *SecurityUserGroupsGetAllParams, opts ...ClientOption) (*SecurityUserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityUserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/UserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityUserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityUserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityUserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityUserGroupsGetDefaultUserGroup gets the default security user group
*/
func (a *Client) SecurityUserGroupsGetDefaultUserGroup(params *SecurityUserGroupsGetDefaultUserGroupParams, opts ...ClientOption) (*SecurityUserGroupsGetDefaultUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityUserGroupsGetDefaultUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityUserGroups_GetDefaultUserGroup",
		Method:             "GET",
		PathPattern:        "/Security/UserGroups/Default",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityUserGroupsGetDefaultUserGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityUserGroupsGetDefaultUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityUserGroups_GetDefaultUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecurityUserGroupsGetManagedGroups gets all managed security user groups
*/
func (a *Client) SecurityUserGroupsGetManagedGroups(params *SecurityUserGroupsGetManagedGroupsParams, opts ...ClientOption) (*SecurityUserGroupsGetManagedGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityUserGroupsGetManagedGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityUserGroups_GetManagedGroups",
		Method:             "GET",
		PathPattern:        "/Security/UserGroups/ManagedGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityUserGroupsGetManagedGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityUserGroupsGetManagedGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityUserGroups_GetManagedGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceResourceUserGroupsGet gets the details of a service resource user group mapping by id
*/
func (a *Client) ServiceResourceUserGroupsGet(params *ServiceResourceUserGroupsGetParams, opts ...ClientOption) (*ServiceResourceUserGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceResourceUserGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceResourceUserGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ServiceResourceUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceResourceUserGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceResourceUserGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceResourceUserGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceResourceUserGroupsGetAll gets all service resource user group mappings
*/
func (a *Client) ServiceResourceUserGroupsGetAll(params *ServiceResourceUserGroupsGetAllParams, opts ...ClientOption) (*ServiceResourceUserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceResourceUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceResourceUserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ServiceResourceUserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceResourceUserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceResourceUserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceResourceUserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceResourceUserGroupsGetSummaries gets a summary representation of all service resource user group mappings
*/
func (a *Client) ServiceResourceUserGroupsGetSummaries(params *ServiceResourceUserGroupsGetSummariesParams, opts ...ClientOption) (*ServiceResourceUserGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceResourceUserGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceResourceUserGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ServiceResourceUserGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceResourceUserGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceResourceUserGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceResourceUserGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceResourcesGetAll gets all service resources for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ServiceResourcesGetAll(params *ServiceResourcesGetAllParams, opts ...ClientOption) (*ServiceResourcesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceResourcesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceResources_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ServiceResources",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceResourcesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceResourcesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceResources_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceResourcesGetSummaries gets a summary representation of all service resources
*/
func (a *Client) ServiceResourcesGetSummaries(params *ServiceResourcesGetSummariesParams, opts ...ClientOption) (*ServiceResourcesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceResourcesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceResources_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ServiceResources/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceResourcesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceResourcesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceResources_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SessionGet returns details summarizing a web session s state includes counts of cart products the login status m o s and source
*/
func (a *Client) SessionGet(params *SessionGetParams, opts ...ClientOption) (*SessionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_Get",
		Method:             "GET",
		PathPattern:        "/Web/Session/{sessionKey}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Session_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SessionGetDefault returns summary information for the specified default including value
*/
func (a *Client) SessionGetDefault(params *SessionGetDefaultParams, opts ...ClientOption) (*SessionGetDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionGetDefaultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_GetDefault",
		Method:             "GET",
		PathPattern:        "/Web/Session/{sessionKey}/Default/{fieldName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionGetDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionGetDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Session_GetDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SessionGetDeliveryMethods returns the available delivery methods for the session delivery method availability is based on the mode of sale n o t e the hold at box office delivery method ID 1 is always returned web code must be used to filter out this delivery method as needed
*/
func (a *Client) SessionGetDeliveryMethods(params *SessionGetDeliveryMethodsParams, opts ...ClientOption) (*SessionGetDeliveryMethodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionGetDeliveryMethodsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_GetDeliveryMethods",
		Method:             "GET",
		PathPattern:        "/Web/Session/{sessionKey}/DeliveryMethods",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionGetDeliveryMethodsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionGetDeliveryMethodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Session_GetDeliveryMethods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SessionGetExpiration returns the deadline after which a session s reserved seats will be released when called on a session without an established seat server session one will be created for it once the session is created the deadline will apply regardless of whether or not any tickets have been added to the cart
*/
func (a *Client) SessionGetExpiration(params *SessionGetExpirationParams, opts ...ClientOption) (*SessionGetExpirationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionGetExpirationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_GetExpiration",
		Method:             "GET",
		PathPattern:        "/Web/Session/{sessionKey}/Expiration",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionGetExpirationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionGetExpirationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Session_GetExpiration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SessionGetOnAccountBalances returns the balance of on account money held by the constituent associated to the provided session key results can be filtered by specific on account payment methods the amount used in current session is also indicated
*/
func (a *Client) SessionGetOnAccountBalances(params *SessionGetOnAccountBalancesParams, opts ...ClientOption) (*SessionGetOnAccountBalancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionGetOnAccountBalancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_GetOnAccountBalances",
		Method:             "GET",
		PathPattern:        "/Web/Session/{sessionKey}/Constituent/OnAccount",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionGetOnAccountBalancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionGetOnAccountBalancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Session_GetOnAccountBalances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SessionGetVariable returns the value of the specified session variable
*/
func (a *Client) SessionGetVariable(params *SessionGetVariableParams, opts ...ClientOption) (*SessionGetVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionGetVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_GetVariable",
		Method:             "GET",
		PathPattern:        "/Web/Session/{sessionKey}/Variables/{variableName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionGetVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionGetVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Session_GetVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SessionGetVariables returns a list of all name value pair variables for the specified session
*/
func (a *Client) SessionGetVariables(params *SessionGetVariablesParams, opts ...ClientOption) (*SessionGetVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionGetVariablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_GetVariables",
		Method:             "GET",
		PathPattern:        "/Web/Session/{sessionKey}/Variables",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionGetVariablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionGetVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Session_GetVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SessionOrderSearch returns summary details for all orders belonging to the session s authenticated constituent returned orders can be filtered by print status performance date season mode of sale delivery method and whether or not an order was created by a rollover
*/
func (a *Client) SessionOrderSearch(params *SessionOrderSearchParams, opts ...ClientOption) (*SessionOrderSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionOrderSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_OrderSearch",
		Method:             "GET",
		PathPattern:        "/Web/Session/{sessionKey}/Orders/Search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionOrderSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionOrderSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Session_OrderSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SourceGroupsGet gets the details of a source group by id
*/
func (a *Client) SourceGroupsGet(params *SourceGroupsGetParams, opts ...ClientOption) (*SourceGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SourceGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SourceGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SourceGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SourceGroupsGetAll gets all source groups for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SourceGroupsGetAll(params *SourceGroupsGetAllParams, opts ...ClientOption) (*SourceGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SourceGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SourceGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SourceGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SourceGroupsGetSummaries gets a summary representation of all source groups
*/
func (a *Client) SourceGroupsGetSummaries(params *SourceGroupsGetSummariesParams, opts ...ClientOption) (*SourceGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SourceGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SourceGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SourceGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SourcesGet gets details of a source
*/
func (a *Client) SourcesGet(params *SourcesGetParams, opts ...ClientOption) (*SourcesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Sources_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Sources/{sourceId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SourcesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sources_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SourcesGetSummaries gets summary of all sources
*/
func (a *Client) SourcesGetSummaries(params *SourcesGetSummariesParams, opts ...ClientOption) (*SourcesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Sources_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Finance/Sources/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SourcesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sources_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SourcesGetWebExpiring gets the source codes configured as the web default that are expiring in 15 days without an overlapping source code
*/
func (a *Client) SourcesGetWebExpiring(params *SourcesGetWebExpiringParams, opts ...ClientOption) (*SourcesGetWebExpiringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesGetWebExpiringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Sources_GetWebExpiring",
		Method:             "GET",
		PathPattern:        "/Finance/Sources/WebExpiring",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SourcesGetWebExpiringReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesGetWebExpiringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sources_GetWebExpiring: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivitiesGet gets details of an activity record
*/
func (a *Client) SpecialActivitiesGet(params *SpecialActivitiesGetParams, opts ...ClientOption) (*SpecialActivitiesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivitiesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivities_Get",
		Method:             "GET",
		PathPattern:        "/CRM/SpecialActivities/{specialActivityId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivitiesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivitiesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivities_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivitiesGetAll gets details of all the activity records for the specified constituent id and all its visible affiliations activity records as well to exclude activity records of the visible affiliations pass include affiliations false
*/
func (a *Client) SpecialActivitiesGetAll(params *SpecialActivitiesGetAllParams, opts ...ClientOption) (*SpecialActivitiesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivitiesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivities_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/SpecialActivities",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivitiesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivitiesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivities_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivityStatusesGet gets the details of a special activity status by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SpecialActivityStatusesGet(params *SpecialActivityStatusesGetParams, opts ...ClientOption) (*SpecialActivityStatusesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityStatusesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityStatuses_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SpecialActivityStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityStatusesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityStatusesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivityStatuses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivityStatusesGetAll gets details of all special activity statuses to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SpecialActivityStatusesGetAll(params *SpecialActivityStatusesGetAllParams, opts ...ClientOption) (*SpecialActivityStatusesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityStatusesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityStatuses_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SpecialActivityStatuses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityStatusesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityStatusesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivityStatuses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivityStatusesGetSummaries gets a summary representation of all special activity statuses
*/
func (a *Client) SpecialActivityStatusesGetSummaries(params *SpecialActivityStatusesGetSummariesParams, opts ...ClientOption) (*SpecialActivityStatusesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityStatusesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityStatuses_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SpecialActivityStatuses/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityStatusesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityStatusesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivityStatuses_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivityTypesGet gets the details of a special activity type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SpecialActivityTypesGet(params *SpecialActivityTypesGetParams, opts ...ClientOption) (*SpecialActivityTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SpecialActivityTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivityTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivityTypesGetAll gets all special activity types to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SpecialActivityTypesGetAll(params *SpecialActivityTypesGetAllParams, opts ...ClientOption) (*SpecialActivityTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SpecialActivityTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivityTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivityTypesGetSummaries gets a summary representation of all special activity types
*/
func (a *Client) SpecialActivityTypesGetSummaries(params *SpecialActivityTypesGetSummariesParams, opts ...ClientOption) (*SpecialActivityTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SpecialActivityTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivityTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StatesGet gets the details of a state by id
*/
func (a *Client) StatesGet(params *StatesGetParams, opts ...ClientOption) (*StatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "States_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/States/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for States_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StatesGetAll gets all states for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) StatesGetAll(params *StatesGetAllParams, opts ...ClientOption) (*StatesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "States_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/States",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StatesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for States_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StatesGetSummaries gets a summary representation of all states
*/
func (a *Client) StatesGetSummaries(params *StatesGetSummariesParams, opts ...ClientOption) (*StatesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "States_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/States/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StatesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for States_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepTypesGet gets the details of a step type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) StepTypesGet(params *StepTypesGetParams, opts ...ClientOption) (*StepTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StepTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/StepTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StepTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepTypesGetAll gets all step types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) StepTypesGetAll(params *StepTypesGetAllParams, opts ...ClientOption) (*StepTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StepTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/StepTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StepTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepTypesGetSummaries gets a summary representation of all step types
*/
func (a *Client) StepTypesGetSummaries(params *StepTypesGetSummariesParams, opts ...ClientOption) (*StepTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StepTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/StepTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StepTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepsGet gets details of a step
*/
func (a *Client) StepsGet(params *StepsGetParams, opts ...ClientOption) (*StepsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Steps_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Steps/{stepId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Steps_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepsGetAll gets details of all the steps for the specified plan constituent or associate
*/
func (a *Client) StepsGetAll(params *StepsGetAllParams, opts ...ClientOption) (*StepsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Steps_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/Steps",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Steps_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepsGetAllDocumentSummaries gets summary of all the documents associated with the step excluding the file contents
*/
func (a *Client) StepsGetAllDocumentSummaries(params *StepsGetAllDocumentSummariesParams, opts ...ClientOption) (*StepsGetAllDocumentSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepsGetAllDocumentSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Steps_GetAllDocumentSummaries",
		Method:             "GET",
		PathPattern:        "/Finance/Steps/{stepId}/Documents/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepsGetAllDocumentSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepsGetAllDocumentSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Steps_GetAllDocumentSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepsGetAllDocuments gets all the documents associated with the step including the file contents
*/
func (a *Client) StepsGetAllDocuments(params *StepsGetAllDocumentsParams, opts ...ClientOption) (*StepsGetAllDocumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepsGetAllDocumentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Steps_GetAllDocuments",
		Method:             "GET",
		PathPattern:        "/Finance/Steps/{stepId}/Documents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepsGetAllDocumentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepsGetAllDocumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Steps_GetAllDocuments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubLineItemStatusesGet gets the details of a sub line item status by id
*/
func (a *Client) SubLineItemStatusesGet(params *SubLineItemStatusesGetParams, opts ...ClientOption) (*SubLineItemStatusesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubLineItemStatusesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubLineItemStatuses_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SubLineItemStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubLineItemStatusesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubLineItemStatusesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubLineItemStatuses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubLineItemStatusesGetAll gets all sub line item statuses for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SubLineItemStatusesGetAll(params *SubLineItemStatusesGetAllParams, opts ...ClientOption) (*SubLineItemStatusesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubLineItemStatusesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubLineItemStatuses_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SubLineItemStatuses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubLineItemStatusesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubLineItemStatusesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubLineItemStatuses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubLineItemStatusesGetSummaries gets a summary representation of all sub line item statuses
*/
func (a *Client) SubLineItemStatusesGetSummaries(params *SubLineItemStatusesGetSummariesParams, opts ...ClientOption) (*SubLineItemStatusesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubLineItemStatusesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubLineItemStatuses_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SubLineItemStatuses/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubLineItemStatusesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubLineItemStatusesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubLineItemStatuses_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubLineItemsGetSubLineItemSummaries returns sub line item summary data for a constituent
*/
func (a *Client) SubLineItemsGetSubLineItemSummaries(params *SubLineItemsGetSubLineItemSummariesParams, opts ...ClientOption) (*SubLineItemsGetSubLineItemSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubLineItemsGetSubLineItemSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubLineItems_GetSubLineItemSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/SubLineItems",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubLineItemsGetSubLineItemSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubLineItemsGetSubLineItemSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubLineItems_GetSubLineItemSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SuffixesGet gets the details of a suffix by id
*/
func (a *Client) SuffixesGet(params *SuffixesGetParams, opts ...ClientOption) (*SuffixesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuffixesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Suffixes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Suffixes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuffixesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuffixesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Suffixes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SuffixesGetAll gets all suffixes for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SuffixesGetAll(params *SuffixesGetAllParams, opts ...ClientOption) (*SuffixesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuffixesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Suffixes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Suffixes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuffixesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuffixesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Suffixes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SuffixesGetSummaries gets a summary representation of all suffixes
*/
func (a *Client) SuffixesGetSummaries(params *SuffixesGetSummariesParams, opts ...ClientOption) (*SuffixesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuffixesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Suffixes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Suffixes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuffixesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuffixesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Suffixes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SurveyQuestionsGet gets the details of a survey question by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) SurveyQuestionsGet(params *SurveyQuestionsGetParams, opts ...ClientOption) (*SurveyQuestionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyQuestionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyQuestions_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SurveyQuestions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyQuestionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyQuestionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SurveyQuestions_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SurveyQuestionsGetAll gets details of all survey questions to get only the resources for which the user has write edit access pass filter writeonly to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p optionally provide a mode of sale id
*/
func (a *Client) SurveyQuestionsGetAll(params *SurveyQuestionsGetAllParams, opts ...ClientOption) (*SurveyQuestionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyQuestionsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyQuestions_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SurveyQuestions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyQuestionsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyQuestionsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SurveyQuestions_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SurveyQuestionsGetDataFor gets answer data for a survey question if it refers to another reference table
*/
func (a *Client) SurveyQuestionsGetDataFor(params *SurveyQuestionsGetDataForParams, opts ...ClientOption) (*SurveyQuestionsGetDataForOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyQuestionsGetDataForParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyQuestions_GetDataFor",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SurveyQuestions/Data",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyQuestionsGetDataForReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyQuestionsGetDataForOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SurveyQuestions_GetDataFor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SurveyQuestionsGetSummaries gets a summary representation of all survey questions
*/
func (a *Client) SurveyQuestionsGetSummaries(params *SurveyQuestionsGetSummariesParams, opts ...ClientOption) (*SurveyQuestionsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyQuestionsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyQuestions_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SurveyQuestions/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyQuestionsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyQuestionsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SurveyQuestions_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SurveyResponsesGet gets details of a survey response
*/
func (a *Client) SurveyResponsesGet(params *SurveyResponsesGetParams, opts ...ClientOption) (*SurveyResponsesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyResponsesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyResponses_Get",
		Method:             "GET",
		PathPattern:        "/TXN/SurveyResponses/{surveyResponseId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyResponsesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyResponsesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SurveyResponses_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SurveyResponsesGetAll gets all survey responses
*/
func (a *Client) SurveyResponsesGetAll(params *SurveyResponsesGetAllParams, opts ...ClientOption) (*SurveyResponsesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyResponsesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyResponses_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/SurveyResponses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyResponsesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyResponsesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SurveyResponses_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemDefaultsGetAll gets all system defaults for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) SystemDefaultsGetAll(params *SystemDefaultsGetAllParams, opts ...ClientOption) (*SystemDefaultsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemDefaultsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemDefaults_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SystemDefaults",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemDefaultsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemDefaultsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemDefaults_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemDefaultsGetDefault gets default summaries for specified keys delimited by comma keys c o m p a n y n a m e r e q UI r e a d d r e s s this resource resolves organizational and global defaults to ensure that only one is returned per key field name no default will be returned if one does not exist
*/
func (a *Client) SystemDefaultsGetDefault(params *SystemDefaultsGetDefaultParams, opts ...ClientOption) (*SystemDefaultsGetDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemDefaultsGetDefaultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemDefaults_GetDefault",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SystemDefaults/Defaults",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemDefaultsGetDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemDefaultsGetDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemDefaults_GetDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemDefaultsGetSummaries gets a summary representation of all system defaults
*/
func (a *Client) SystemDefaultsGetSummaries(params *SystemDefaultsGetSummariesParams, opts ...ClientOption) (*SystemDefaultsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemDefaultsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemDefaults_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/SystemDefaults/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemDefaultsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemDefaultsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemDefaults_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplateCategoriesGet gets the details of a template category by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) TemplateCategoriesGet(params *TemplateCategoriesGetParams, opts ...ClientOption) (*TemplateCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TemplateCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplateCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplateCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplateCategoriesGetAll gets all template categories to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) TemplateCategoriesGetAll(params *TemplateCategoriesGetAllParams, opts ...ClientOption) (*TemplateCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TemplateCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplateCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplateCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplateCategoriesGetSummaries gets a summary representation of all template categories
*/
func (a *Client) TemplateCategoriesGetSummaries(params *TemplateCategoriesGetSummariesParams, opts ...ClientOption) (*TemplateCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TemplateCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplateCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplateCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplatePriceTypesGet gets details of a template price type
*/
func (a *Client) TemplatePriceTypesGet(params *TemplatePriceTypesGetParams, opts ...ClientOption) (*TemplatePriceTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePriceTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePriceTypes_Get",
		Method:             "GET",
		PathPattern:        "/TXN/TemplatePriceTypes/{templatePriceTypeId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePriceTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePriceTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplatePriceTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplatePriceTypesGetAll gets all template price type
*/
func (a *Client) TemplatePriceTypesGetAll(params *TemplatePriceTypesGetAllParams, opts ...ClientOption) (*TemplatePriceTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePriceTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePriceTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/TemplatePriceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePriceTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePriceTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplatePriceTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplatePricesGet gets details of a template price
*/
func (a *Client) TemplatePricesGet(params *TemplatePricesGetParams, opts ...ClientOption) (*TemplatePricesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePricesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePrices_Get",
		Method:             "GET",
		PathPattern:        "/TXN/TemplatePrices/{templatePriceId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePricesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePricesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplatePrices_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplatePricesGetAll gets all template prices
*/
func (a *Client) TemplatePricesGetAll(params *TemplatePricesGetAllParams, opts ...ClientOption) (*TemplatePricesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePricesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePrices_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/TemplatePrices",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePricesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePricesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplatePrices_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplateTypesGet gets the details of a template type by id to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) TemplateTypesGet(params *TemplateTypesGetParams, opts ...ClientOption) (*TemplateTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TemplateTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplateTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplateTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplateTypesGetAll gets all template types to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) TemplateTypesGetAll(params *TemplateTypesGetAllParams, opts ...ClientOption) (*TemplateTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TemplateTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplateTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplateTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplateTypesGetSummaries gets a summary representation of all template types
*/
func (a *Client) TemplateTypesGetSummaries(params *TemplateTypesGetSummariesParams, opts ...ClientOption) (*TemplateTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TemplateTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplateTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplateTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplatesGet gets the details of a template by id
*/
func (a *Client) TemplatesGet(params *TemplatesGetParams, opts ...ClientOption) (*TemplatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_Get",
		Method:             "GET",
		PathPattern:        "/Templates/{templateId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Templates_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplatesGetAll gets all templates
*/
func (a *Client) TemplatesGetAll(params *TemplatesGetAllParams, opts ...ClientOption) (*TemplatesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_GetAll",
		Method:             "GET",
		PathPattern:        "/Templates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Templates_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplatesGetSummaries gets a summary representation of all templates
*/
func (a *Client) TemplatesGetSummaries(params *TemplatesGetSummariesParams, opts ...ClientOption) (*TemplatesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Templates/Summaries",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Templates_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TheatersGet gets the details of a theater by id
*/
func (a *Client) TheatersGet(params *TheatersGetParams, opts ...ClientOption) (*TheatersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTheatersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Theaters_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Theaters/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TheatersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TheatersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Theaters_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TheatersGetAll gets all theaters for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) TheatersGetAll(params *TheatersGetAllParams, opts ...ClientOption) (*TheatersGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTheatersGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Theaters_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Theaters",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TheatersGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TheatersGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Theaters_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TheatersGetSummaries gets a summary representation of all theaters
*/
func (a *Client) TheatersGetSummaries(params *TheatersGetSummariesParams, opts ...ClientOption) (*TheatersGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTheatersGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Theaters_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/Theaters/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TheatersGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TheatersGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Theaters_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketHistoryGetAll gets history information for tickets
*/
func (a *Client) TicketHistoryGetAll(params *TicketHistoryGetAllParams, opts ...ClientOption) (*TicketHistoryGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketHistoryGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TicketHistory_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/TicketHistory",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketHistoryGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketHistoryGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TicketHistory_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimeSlotsGet gets the details of a time slot by id
*/
func (a *Client) TimeSlotsGet(params *TimeSlotsGetParams, opts ...ClientOption) (*TimeSlotsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeSlotsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TimeSlots_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TimeSlots/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeSlotsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeSlotsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeSlots_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimeSlotsGetAll gets all time slots for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) TimeSlotsGetAll(params *TimeSlotsGetAllParams, opts ...ClientOption) (*TimeSlotsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeSlotsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TimeSlots_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TimeSlots",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeSlotsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeSlotsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeSlots_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimeSlotsGetSummaries gets a summary representation of all time slots
*/
func (a *Client) TimeSlotsGetSummaries(params *TimeSlotsGetSummariesParams, opts ...ClientOption) (*TimeSlotsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeSlotsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TimeSlots_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TimeSlots/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeSlotsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeSlotsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeSlots_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TitlesGet gets details of a specific title
*/
func (a *Client) TitlesGet(params *TitlesGetParams, opts ...ClientOption) (*TitlesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTitlesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Titles_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Titles/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TitlesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TitlesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Titles_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TitlesGetAll gets all titles
*/
func (a *Client) TitlesGetAll(params *TitlesGetAllParams, opts ...ClientOption) (*TitlesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTitlesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Titles_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Titles",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TitlesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TitlesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Titles_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TitlesGetSummaries gets all title summaries
*/
func (a *Client) TitlesGetSummaries(params *TitlesGetSummariesParams, opts ...ClientOption) (*TitlesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTitlesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Titles_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/Titles/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TitlesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TitlesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Titles_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TransactionHistoryGetAll gets details of all transaction histories for the specified constituent id and all its visible affiliations transaction histories as well to exclude transaction histories of the visible affiliations pass include affiliations false this resource is paged pass filters such as transaction reference id payment id or start and end date to limit the results results can also be sorted
*/
func (a *Client) TransactionHistoryGetAll(params *TransactionHistoryGetAllParams, opts ...ClientOption) (*TransactionHistoryGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransactionHistoryGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TransactionHistory_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/TransactionHistory",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransactionHistoryGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransactionHistoryGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TransactionHistory_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriPOSCloudConfigurationsGet gets the details of a tri p o s cloud configuration by id
*/
func (a *Client) TriPOSCloudConfigurationsGet(params *TriPOSCloudConfigurationsGetParams, opts ...ClientOption) (*TriPOSCloudConfigurationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriPOSCloudConfigurationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TriPOSCloudConfigurations_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TriPOSCloudConfigurations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriPOSCloudConfigurationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriPOSCloudConfigurationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TriPOSCloudConfigurations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriPOSCloudConfigurationsGetAll gets all tri p o s cloud configurations
*/
func (a *Client) TriPOSCloudConfigurationsGetAll(params *TriPOSCloudConfigurationsGetAllParams, opts ...ClientOption) (*TriPOSCloudConfigurationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriPOSCloudConfigurationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TriPOSCloudConfigurations_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TriPOSCloudConfigurations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriPOSCloudConfigurationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriPOSCloudConfigurationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TriPOSCloudConfigurations_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriPOSCloudConfigurationsGetSummaries gets a summary representation of all tri p o s cloud configurations
*/
func (a *Client) TriPOSCloudConfigurationsGetSummaries(params *TriPOSCloudConfigurationsGetSummariesParams, opts ...ClientOption) (*TriPOSCloudConfigurationsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriPOSCloudConfigurationsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TriPOSCloudConfigurations_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/TriPOSCloudConfigurations/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriPOSCloudConfigurationsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriPOSCloudConfigurationsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TriPOSCloudConfigurations_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeCategoriesGet gets the details of an upgrade category by id to get the resource in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) UpgradeCategoriesGet(params *UpgradeCategoriesGetParams, opts ...ClientOption) (*UpgradeCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCategoriesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeCategories_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/UpgradeCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeCategoriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeCategoriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpgradeCategories_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeCategoriesGetAll gets details of all upgrade categories to get them in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) UpgradeCategoriesGetAll(params *UpgradeCategoriesGetAllParams, opts ...ClientOption) (*UpgradeCategoriesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCategoriesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeCategories_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/UpgradeCategories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeCategoriesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeCategoriesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpgradeCategories_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeCategoriesGetSummaries gets a summary representation of all upgrade categories
*/
func (a *Client) UpgradeCategoriesGetSummaries(params *UpgradeCategoriesGetSummariesParams, opts ...ClientOption) (*UpgradeCategoriesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCategoriesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeCategories_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/UpgradeCategories/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeCategoriesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeCategoriesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpgradeCategories_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeLogsGet returns an upgrade log for the given id
*/
func (a *Client) UpgradeLogsGet(params *UpgradeLogsGetParams, opts ...ClientOption) (*UpgradeLogsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeLogsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeLogs_Get",
		Method:             "GET",
		PathPattern:        "/Admin/UpgradeLogs/{upgradeLogId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeLogsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeLogsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpgradeLogs_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeLogsGetAll returns a list of upgrade log objects
*/
func (a *Client) UpgradeLogsGetAll(params *UpgradeLogsGetAllParams, opts ...ClientOption) (*UpgradeLogsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeLogsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeLogs_GetAll",
		Method:             "GET",
		PathPattern:        "/Admin/UpgradeLogs",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeLogsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeLogsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpgradeLogs_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserGroupsGet gets the details of a user group by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) UserGroupsGet(params *UserGroupsGetParams, opts ...ClientOption) (*UserGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/UserGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserGroupsGetAll gets all user groups to get only the resources for which the user has write edit access pass filter writeonly to get the resources in maintenance mode which ignores control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) UserGroupsGetAll(params *UserGroupsGetAllParams, opts ...ClientOption) (*UserGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/UserGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserGroupsGetSummaries gets a summary representation of all user groups
*/
func (a *Client) UserGroupsGetSummaries(params *UserGroupsGetSummariesParams, opts ...ClientOption) (*UserGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/UserGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserPreferencesGet gets a specific user preference by key
*/
func (a *Client) UserPreferencesGet(params *UserPreferencesGetParams, opts ...ClientOption) (*UserPreferencesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPreferencesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserPreferences_Get",
		Method:             "GET",
		PathPattern:        "/Security/UserPreferences/{key}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserPreferencesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPreferencesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserPreferences_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserPreferencesGetAll gets all user preferences valid for the context username and user group
*/
func (a *Client) UserPreferencesGetAll(params *UserPreferencesGetAllParams, opts ...ClientOption) (*UserPreferencesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPreferencesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserPreferences_GetAll",
		Method:             "GET",
		PathPattern:        "/Security/UserPreferences",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserPreferencesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPreferencesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserPreferences_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersGet gets the details of a user for the specified username
*/
func (a *Client) UsersGet(params *UsersGetParams, opts ...ClientOption) (*UsersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_Get",
		Method:             "GET",
		PathPattern:        "/Security/Users/{userName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersGetActiveDirectoryUser gets details of a user for the specified active directory username
*/
func (a *Client) UsersGetActiveDirectoryUser(params *UsersGetActiveDirectoryUserParams, opts ...ClientOption) (*UsersGetActiveDirectoryUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersGetActiveDirectoryUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_GetActiveDirectoryUser",
		Method:             "GET",
		PathPattern:        "/Security/Users",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersGetActiveDirectoryUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersGetActiveDirectoryUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_GetActiveDirectoryUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersGetUserInformationForActiveDirectoryUser gets user information for the specified active directory username
*/
func (a *Client) UsersGetUserInformationForActiveDirectoryUser(params *UsersGetUserInformationForActiveDirectoryUserParams, opts ...ClientOption) (*UsersGetUserInformationForActiveDirectoryUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersGetUserInformationForActiveDirectoryUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_GetUserInformationForActiveDirectoryUser",
		Method:             "GET",
		PathPattern:        "/Security/Users/Info",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersGetUserInformationForActiveDirectoryUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersGetUserInformationForActiveDirectoryUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_GetUserInformationForActiveDirectoryUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersGetUsersForUserGroup gets list of users in summary for the current user s group
*/
func (a *Client) UsersGetUsersForUserGroup(params *UsersGetUsersForUserGroupParams, opts ...ClientOption) (*UsersGetUsersForUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersGetUsersForUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_GetUsersForUserGroup",
		Method:             "GET",
		PathPattern:        "/Security/Users/ForGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersGetUsersForUserGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersGetUsersForUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_GetUsersForUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebContentTypesGet gets a specific web content type
*/
func (a *Client) WebContentTypesGet(params *WebContentTypesGetParams, opts ...ClientOption) (*WebContentTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebContentTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebContentTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WebContentTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebContentTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebContentTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebContentTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebContentTypesGetAll gets all web content types for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) WebContentTypesGetAll(params *WebContentTypesGetAllParams, opts ...ClientOption) (*WebContentTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebContentTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebContentTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WebContentTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebContentTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebContentTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebContentTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebContentTypesGetDataFor gets potential values for a referenced web content type as a collection of web content type data item
*/
func (a *Client) WebContentTypesGetDataFor(params *WebContentTypesGetDataForParams, opts ...ClientOption) (*WebContentTypesGetDataForOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebContentTypesGetDataForParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebContentTypes_GetDataFor",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WebContentTypes/Data",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebContentTypesGetDataForReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebContentTypesGetDataForOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebContentTypes_GetDataFor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebContentTypesGetSummaries gets a summary representation of all web content types
*/
func (a *Client) WebContentTypesGetSummaries(params *WebContentTypesGetSummariesParams, opts ...ClientOption) (*WebContentTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebContentTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebContentTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WebContentTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebContentTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebContentTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebContentTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebContentsGetWebContents returns web content for the requested production elements or packages the result can be filtered by content types at least one package id or production element id is required if the content type is found returns the content value at the lowest level at which it was found in the production hierarchy title production production season performance for the requested element optionally all matching content anywhere above the requested element in the production hierarchy can be returned with the show all parameter
*/
func (a *Client) WebContentsGetWebContents(params *WebContentsGetWebContentsParams, opts ...ClientOption) (*WebContentsGetWebContentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebContentsGetWebContentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebContents_GetWebContents",
		Method:             "GET",
		PathPattern:        "/TXN/WebContents",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebContentsGetWebContentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebContentsGetWebContentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebContents_GetWebContents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebLoginsGet gets details of a weblogin
*/
func (a *Client) WebLoginsGet(params *WebLoginsGetParams, opts ...ClientOption) (*WebLoginsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebLoginsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebLogins_Get",
		Method:             "GET",
		PathPattern:        "/CRM/WebLogins/{webLoginId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebLoginsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebLoginsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebLogins_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebLoginsGetAll gets details of all the weblogins for the specified constituent id and all its visible affiliation s weblogins as well to exclude weblogins of the visible affiliations pass include affiliations false to fetch primary web logins alone pass primary only true
*/
func (a *Client) WebLoginsGetAll(params *WebLoginsGetAllParams, opts ...ClientOption) (*WebLoginsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebLoginsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebLogins_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/WebLogins",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebLoginsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebLoginsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebLogins_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebLoginsGetLoginCredentials returns web login credential information
*/
func (a *Client) WebLoginsGetLoginCredentials(params *WebLoginsGetLoginCredentialsParams, opts ...ClientOption) (*WebLoginsGetLoginCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebLoginsGetLoginCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebLogins_GetLoginCredentials",
		Method:             "GET",
		PathPattern:        "/CRM/WebLogins/{loginId}/LoginCredentials",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebLoginsGetLoginCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebLoginsGetLoginCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebLogins_GetLoginCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebLoginsSearch gets weblogins by email address and login type
*/
func (a *Client) WebLoginsSearch(params *WebLoginsSearchParams, opts ...ClientOption) (*WebLoginsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebLoginsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebLogins_Search",
		Method:             "GET",
		PathPattern:        "/CRM/WebLogins/Search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebLoginsSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebLoginsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebLogins_Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerQualificationsGet gets a single worker qualification by Id
*/
func (a *Client) WorkerQualificationsGet(params *WorkerQualificationsGetParams, opts ...ClientOption) (*WorkerQualificationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerQualificationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerQualifications_Get",
		Method:             "GET",
		PathPattern:        "/CRM/WorkerQualifications/{workerQualificationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerQualificationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerQualificationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerQualifications_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerQualificationsGetAll gets all worker qualifications for a comma separated list of constituents optionally including qualifications from affiliated constituents
*/
func (a *Client) WorkerQualificationsGetAll(params *WorkerQualificationsGetAllParams, opts ...ClientOption) (*WorkerQualificationsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerQualificationsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerQualifications_GetAll",
		Method:             "GET",
		PathPattern:        "/CRM/WorkerQualifications",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerQualificationsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerQualificationsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerQualifications_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerRolesGet gets the details of a worker role by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) WorkerRolesGet(params *WorkerRolesGetParams, opts ...ClientOption) (*WorkerRolesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerRolesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerRoles_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WorkerRoles/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerRolesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerRolesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerRoles_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerRolesGetAll gets all worker roles to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) WorkerRolesGetAll(params *WorkerRolesGetAllParams, opts ...ClientOption) (*WorkerRolesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerRolesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerRoles_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WorkerRoles",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerRolesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerRolesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerRoles_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerRolesGetSummaries gets a summary representation of all worker roles
*/
func (a *Client) WorkerRolesGetSummaries(params *WorkerRolesGetSummariesParams, opts ...ClientOption) (*WorkerRolesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerRolesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerRoles_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WorkerRoles/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerRolesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerRolesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerRoles_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerTypesGet gets the details of a worker type by id to get the resource only if the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p
*/
func (a *Client) WorkerTypesGet(params *WorkerTypesGetParams, opts ...ClientOption) (*WorkerTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerTypesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerTypes_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WorkerTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerTypes_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerTypesGetAll gets all worker types to get only the resoures for which the user has write edit access pass filter writeonly to get the resources in maintenance mode ignore control groups pass maintenance mode true maintenance mode requires users to have access to the reference tables specified in t x r e f t a b l e u s e r g r o u p for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) WorkerTypesGetAll(params *WorkerTypesGetAllParams, opts ...ClientOption) (*WorkerTypesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerTypesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerTypes_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WorkerTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerTypesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerTypesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerTypes_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerTypesGetSummaries gets a summary representation of all worker types
*/
func (a *Client) WorkerTypesGetSummaries(params *WorkerTypesGetSummariesParams, opts ...ClientOption) (*WorkerTypesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerTypesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerTypes_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/WorkerTypes/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerTypesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerTypesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerTypes_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkersGet gets details of a worker
*/
func (a *Client) WorkersGet(params *WorkersGetParams, opts ...ClientOption) (*WorkersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Workers_Get",
		Method:             "GET",
		PathPattern:        "/Finance/Workers/{workerId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workers_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkersGetAll gets details of all the workers for the specified constituent
*/
func (a *Client) WorkersGetAll(params *WorkersGetAllParams, opts ...ClientOption) (*WorkersGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkersGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Workers_GetAll",
		Method:             "GET",
		PathPattern:        "/Finance/Workers",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkersGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkersGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workers_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkersGetSummaries gets summary of all the workers for the specified constituent
*/
func (a *Client) WorkersGetSummaries(params *WorkersGetSummariesParams, opts ...ClientOption) (*WorkersGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkersGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Workers_GetSummaries",
		Method:             "GET",
		PathPattern:        "/Finance/Workers/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkersGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkersGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workers_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZoneGroupsGet gets the details of a zone group by id
*/
func (a *Client) ZoneGroupsGet(params *ZoneGroupsGetParams, opts ...ClientOption) (*ZoneGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneGroupsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneGroups_Get",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ZoneGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ZoneGroups_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZoneGroupsGetAll gets all zone groups for filtering on specific property value pass the property name with value as query parameter if the property is another non primitive object pass property name Id and its value as query parameter
*/
func (a *Client) ZoneGroupsGetAll(params *ZoneGroupsGetAllParams, opts ...ClientOption) (*ZoneGroupsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneGroupsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneGroups_GetAll",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ZoneGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneGroupsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneGroupsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ZoneGroups_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZoneGroupsGetSummaries gets a summary representation of all zone groups
*/
func (a *Client) ZoneGroupsGetSummaries(params *ZoneGroupsGetSummariesParams, opts ...ClientOption) (*ZoneGroupsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneGroupsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneGroups_GetSummaries",
		Method:             "GET",
		PathPattern:        "/ReferenceData/ZoneGroups/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneGroupsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneGroupsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ZoneGroups_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZoneMapsGet gets details of a specific zone map
*/
func (a *Client) ZoneMapsGet(params *ZoneMapsGetParams, opts ...ClientOption) (*ZoneMapsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneMapsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneMaps_Get",
		Method:             "GET",
		PathPattern:        "/TXN/ZoneMaps/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneMapsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneMapsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ZoneMaps_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZoneMapsGetAll gets all zone maps optionally filtered by facility and or seat map
*/
func (a *Client) ZoneMapsGetAll(params *ZoneMapsGetAllParams, opts ...ClientOption) (*ZoneMapsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneMapsGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneMaps_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/ZoneMaps",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneMapsGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneMapsGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ZoneMaps_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZoneMapsGetSummaries gets a summary of all zone maps optionally filtered by facility and or seat map
*/
func (a *Client) ZoneMapsGetSummaries(params *ZoneMapsGetSummariesParams, opts ...ClientOption) (*ZoneMapsGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneMapsGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneMaps_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/ZoneMaps/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneMapsGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneMapsGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ZoneMaps_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZonesGet gets details of a specific zone
*/
func (a *Client) ZonesGet(params *ZonesGetParams, opts ...ClientOption) (*ZonesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZonesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Zones_Get",
		Method:             "GET",
		PathPattern:        "/TXN/Zones/{zoneMapId},{zoneId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZonesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Zones_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZonesGetAll gets all zones optionally filtered by a set of zone maps
*/
func (a *Client) ZonesGetAll(params *ZonesGetAllParams, opts ...ClientOption) (*ZonesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZonesGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Zones_GetAll",
		Method:             "GET",
		PathPattern:        "/TXN/Zones",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZonesGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Zones_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZonesGetSummaries gets a summary of all zones optionally filtered by a set of zone maps
*/
func (a *Client) ZonesGetSummaries(params *ZonesGetSummariesParams, opts ...ClientOption) (*ZonesGetSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZonesGetSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Zones_GetSummaries",
		Method:             "GET",
		PathPattern:        "/TXN/Zones/Summary",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesGetSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZonesGetSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Zones_GetSummaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
