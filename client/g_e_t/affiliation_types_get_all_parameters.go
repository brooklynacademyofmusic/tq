// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAffiliationTypesGetAllParams creates a new AffiliationTypesGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAffiliationTypesGetAllParams() *AffiliationTypesGetAllParams {
	return &AffiliationTypesGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAffiliationTypesGetAllParamsWithTimeout creates a new AffiliationTypesGetAllParams object
// with the ability to set a timeout on a request.
func NewAffiliationTypesGetAllParamsWithTimeout(timeout time.Duration) *AffiliationTypesGetAllParams {
	return &AffiliationTypesGetAllParams{
		timeout: timeout,
	}
}

// NewAffiliationTypesGetAllParamsWithContext creates a new AffiliationTypesGetAllParams object
// with the ability to set a context for a request.
func NewAffiliationTypesGetAllParamsWithContext(ctx context.Context) *AffiliationTypesGetAllParams {
	return &AffiliationTypesGetAllParams{
		Context: ctx,
	}
}

// NewAffiliationTypesGetAllParamsWithHTTPClient creates a new AffiliationTypesGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewAffiliationTypesGetAllParamsWithHTTPClient(client *http.Client) *AffiliationTypesGetAllParams {
	return &AffiliationTypesGetAllParams{
		HTTPClient: client,
	}
}

/*
AffiliationTypesGetAllParams contains all the parameters to send to the API endpoint

	for the affiliation types get all operation.

	Typically these are written to a http.Request.
*/
type AffiliationTypesGetAllParams struct {

	// ConstituentTypeID.
	ConstituentTypeID *string

	// Filter.
	Filter *string

	// MaintenanceMode.
	MaintenanceMode *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the affiliation types get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AffiliationTypesGetAllParams) WithDefaults() *AffiliationTypesGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the affiliation types get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AffiliationTypesGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) WithTimeout(timeout time.Duration) *AffiliationTypesGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) WithContext(ctx context.Context) *AffiliationTypesGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) WithHTTPClient(client *http.Client) *AffiliationTypesGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConstituentTypeID adds the constituentTypeID to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) WithConstituentTypeID(constituentTypeID *string) *AffiliationTypesGetAllParams {
	o.SetConstituentTypeID(constituentTypeID)
	return o
}

// SetConstituentTypeID adds the constituentTypeId to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) SetConstituentTypeID(constituentTypeID *string) {
	o.ConstituentTypeID = constituentTypeID
}

// WithFilter adds the filter to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) WithFilter(filter *string) *AffiliationTypesGetAllParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithMaintenanceMode adds the maintenanceMode to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) WithMaintenanceMode(maintenanceMode *string) *AffiliationTypesGetAllParams {
	o.SetMaintenanceMode(maintenanceMode)
	return o
}

// SetMaintenanceMode adds the maintenanceMode to the affiliation types get all params
func (o *AffiliationTypesGetAllParams) SetMaintenanceMode(maintenanceMode *string) {
	o.MaintenanceMode = maintenanceMode
}

// WriteToRequest writes these params to a swagger request
func (o *AffiliationTypesGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConstituentTypeID != nil {

		// query param constituentTypeId
		var qrConstituentTypeID string

		if o.ConstituentTypeID != nil {
			qrConstituentTypeID = *o.ConstituentTypeID
		}
		qConstituentTypeID := qrConstituentTypeID
		if qConstituentTypeID != "" {

			if err := r.SetQueryParam("constituentTypeId", qConstituentTypeID); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.MaintenanceMode != nil {

		// query param maintenanceMode
		var qrMaintenanceMode string

		if o.MaintenanceMode != nil {
			qrMaintenanceMode = *o.MaintenanceMode
		}
		qMaintenanceMode := qrMaintenanceMode
		if qMaintenanceMode != "" {

			if err := r.SetQueryParam("maintenanceMode", qMaintenanceMode); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
