// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewReportsGetParams creates a new ReportsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReportsGetParams() *ReportsGetParams {
	return &ReportsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReportsGetParamsWithTimeout creates a new ReportsGetParams object
// with the ability to set a timeout on a request.
func NewReportsGetParamsWithTimeout(timeout time.Duration) *ReportsGetParams {
	return &ReportsGetParams{
		timeout: timeout,
	}
}

// NewReportsGetParamsWithContext creates a new ReportsGetParams object
// with the ability to set a context for a request.
func NewReportsGetParamsWithContext(ctx context.Context) *ReportsGetParams {
	return &ReportsGetParams{
		Context: ctx,
	}
}

// NewReportsGetParamsWithHTTPClient creates a new ReportsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewReportsGetParamsWithHTTPClient(client *http.Client) *ReportsGetParams {
	return &ReportsGetParams{
		HTTPClient: client,
	}
}

/*
ReportsGetParams contains all the parameters to send to the API endpoint

	for the reports get operation.

	Typically these are written to a http.Request.
*/
type ReportsGetParams struct {

	// ReportID.
	ReportID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the reports get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReportsGetParams) WithDefaults() *ReportsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the reports get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReportsGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the reports get params
func (o *ReportsGetParams) WithTimeout(timeout time.Duration) *ReportsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the reports get params
func (o *ReportsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the reports get params
func (o *ReportsGetParams) WithContext(ctx context.Context) *ReportsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the reports get params
func (o *ReportsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the reports get params
func (o *ReportsGetParams) WithHTTPClient(client *http.Client) *ReportsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the reports get params
func (o *ReportsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithReportID adds the reportID to the reports get params
func (o *ReportsGetParams) WithReportID(reportID string) *ReportsGetParams {
	o.SetReportID(reportID)
	return o
}

// SetReportID adds the reportId to the reports get params
func (o *ReportsGetParams) SetReportID(reportID string) {
	o.ReportID = reportID
}

// WriteToRequest writes these params to a swagger request
func (o *ReportsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param reportId
	if err := r.SetPathParam("reportId", o.ReportID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
