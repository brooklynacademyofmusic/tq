// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSalesLayoutsGetForSaleParams creates a new SalesLayoutsGetForSaleParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSalesLayoutsGetForSaleParams() *SalesLayoutsGetForSaleParams {
	return &SalesLayoutsGetForSaleParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSalesLayoutsGetForSaleParamsWithTimeout creates a new SalesLayoutsGetForSaleParams object
// with the ability to set a timeout on a request.
func NewSalesLayoutsGetForSaleParamsWithTimeout(timeout time.Duration) *SalesLayoutsGetForSaleParams {
	return &SalesLayoutsGetForSaleParams{
		timeout: timeout,
	}
}

// NewSalesLayoutsGetForSaleParamsWithContext creates a new SalesLayoutsGetForSaleParams object
// with the ability to set a context for a request.
func NewSalesLayoutsGetForSaleParamsWithContext(ctx context.Context) *SalesLayoutsGetForSaleParams {
	return &SalesLayoutsGetForSaleParams{
		Context: ctx,
	}
}

// NewSalesLayoutsGetForSaleParamsWithHTTPClient creates a new SalesLayoutsGetForSaleParams object
// with the ability to set a custom HTTPClient for a request.
func NewSalesLayoutsGetForSaleParamsWithHTTPClient(client *http.Client) *SalesLayoutsGetForSaleParams {
	return &SalesLayoutsGetForSaleParams{
		HTTPClient: client,
	}
}

/*
SalesLayoutsGetForSaleParams contains all the parameters to send to the API endpoint

	for the sales layouts get for sale operation.

	Typically these are written to a http.Request.
*/
type SalesLayoutsGetForSaleParams struct {

	// ModeOfSaleID.
	ModeOfSaleID *string

	// OrderDateTime.
	OrderDateTime *string

	// SalesLayoutID.
	SalesLayoutID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the sales layouts get for sale params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SalesLayoutsGetForSaleParams) WithDefaults() *SalesLayoutsGetForSaleParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the sales layouts get for sale params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SalesLayoutsGetForSaleParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) WithTimeout(timeout time.Duration) *SalesLayoutsGetForSaleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) WithContext(ctx context.Context) *SalesLayoutsGetForSaleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) WithHTTPClient(client *http.Client) *SalesLayoutsGetForSaleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModeOfSaleID adds the modeOfSaleID to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) WithModeOfSaleID(modeOfSaleID *string) *SalesLayoutsGetForSaleParams {
	o.SetModeOfSaleID(modeOfSaleID)
	return o
}

// SetModeOfSaleID adds the modeOfSaleId to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) SetModeOfSaleID(modeOfSaleID *string) {
	o.ModeOfSaleID = modeOfSaleID
}

// WithOrderDateTime adds the orderDateTime to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) WithOrderDateTime(orderDateTime *string) *SalesLayoutsGetForSaleParams {
	o.SetOrderDateTime(orderDateTime)
	return o
}

// SetOrderDateTime adds the orderDateTime to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) SetOrderDateTime(orderDateTime *string) {
	o.OrderDateTime = orderDateTime
}

// WithSalesLayoutID adds the salesLayoutID to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) WithSalesLayoutID(salesLayoutID string) *SalesLayoutsGetForSaleParams {
	o.SetSalesLayoutID(salesLayoutID)
	return o
}

// SetSalesLayoutID adds the salesLayoutId to the sales layouts get for sale params
func (o *SalesLayoutsGetForSaleParams) SetSalesLayoutID(salesLayoutID string) {
	o.SalesLayoutID = salesLayoutID
}

// WriteToRequest writes these params to a swagger request
func (o *SalesLayoutsGetForSaleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ModeOfSaleID != nil {

		// query param modeOfSaleId
		var qrModeOfSaleID string

		if o.ModeOfSaleID != nil {
			qrModeOfSaleID = *o.ModeOfSaleID
		}
		qModeOfSaleID := qrModeOfSaleID
		if qModeOfSaleID != "" {

			if err := r.SetQueryParam("modeOfSaleId", qModeOfSaleID); err != nil {
				return err
			}
		}
	}

	if o.OrderDateTime != nil {

		// query param orderDateTime
		var qrOrderDateTime string

		if o.OrderDateTime != nil {
			qrOrderDateTime = *o.OrderDateTime
		}
		qOrderDateTime := qrOrderDateTime
		if qOrderDateTime != "" {

			if err := r.SetQueryParam("orderDateTime", qOrderDateTime); err != nil {
				return err
			}
		}
	}

	// path param salesLayoutId
	if err := r.SetPathParam("salesLayoutId", o.SalesLayoutID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
