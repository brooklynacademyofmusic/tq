// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewIssuesGetAllParams creates a new IssuesGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIssuesGetAllParams() *IssuesGetAllParams {
	return &IssuesGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIssuesGetAllParamsWithTimeout creates a new IssuesGetAllParams object
// with the ability to set a timeout on a request.
func NewIssuesGetAllParamsWithTimeout(timeout time.Duration) *IssuesGetAllParams {
	return &IssuesGetAllParams{
		timeout: timeout,
	}
}

// NewIssuesGetAllParamsWithContext creates a new IssuesGetAllParams object
// with the ability to set a context for a request.
func NewIssuesGetAllParamsWithContext(ctx context.Context) *IssuesGetAllParams {
	return &IssuesGetAllParams{
		Context: ctx,
	}
}

// NewIssuesGetAllParamsWithHTTPClient creates a new IssuesGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewIssuesGetAllParamsWithHTTPClient(client *http.Client) *IssuesGetAllParams {
	return &IssuesGetAllParams{
		HTTPClient: client,
	}
}

/*
IssuesGetAllParams contains all the parameters to send to the API endpoint

	for the issues get all operation.

	Typically these are written to a http.Request.
*/
type IssuesGetAllParams struct {

	// ActivityTypeIds.
	ActivityTypeIds *string

	// CategoryIds.
	CategoryIds *string

	/* ConstituentID.

	   Limit results by constituent
	*/
	ConstituentID *string

	// ContactTypeIds.
	ContactTypeIds *string

	// EndDate.
	EndDate *string

	/* IncludeAffiliations.

	   Include issues from affiliated constituents.
	*/
	IncludeAffiliations *string

	// OriginIds.
	OriginIds *string

	// PackageIds.
	PackageIds *string

	// PerformanceIds.
	PerformanceIds *string

	// Resolved.
	Resolved *string

	// StartDate.
	StartDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the issues get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IssuesGetAllParams) WithDefaults() *IssuesGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the issues get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IssuesGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the issues get all params
func (o *IssuesGetAllParams) WithTimeout(timeout time.Duration) *IssuesGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the issues get all params
func (o *IssuesGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the issues get all params
func (o *IssuesGetAllParams) WithContext(ctx context.Context) *IssuesGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the issues get all params
func (o *IssuesGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the issues get all params
func (o *IssuesGetAllParams) WithHTTPClient(client *http.Client) *IssuesGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the issues get all params
func (o *IssuesGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActivityTypeIds adds the activityTypeIds to the issues get all params
func (o *IssuesGetAllParams) WithActivityTypeIds(activityTypeIds *string) *IssuesGetAllParams {
	o.SetActivityTypeIds(activityTypeIds)
	return o
}

// SetActivityTypeIds adds the activityTypeIds to the issues get all params
func (o *IssuesGetAllParams) SetActivityTypeIds(activityTypeIds *string) {
	o.ActivityTypeIds = activityTypeIds
}

// WithCategoryIds adds the categoryIds to the issues get all params
func (o *IssuesGetAllParams) WithCategoryIds(categoryIds *string) *IssuesGetAllParams {
	o.SetCategoryIds(categoryIds)
	return o
}

// SetCategoryIds adds the categoryIds to the issues get all params
func (o *IssuesGetAllParams) SetCategoryIds(categoryIds *string) {
	o.CategoryIds = categoryIds
}

// WithConstituentID adds the constituentID to the issues get all params
func (o *IssuesGetAllParams) WithConstituentID(constituentID *string) *IssuesGetAllParams {
	o.SetConstituentID(constituentID)
	return o
}

// SetConstituentID adds the constituentId to the issues get all params
func (o *IssuesGetAllParams) SetConstituentID(constituentID *string) {
	o.ConstituentID = constituentID
}

// WithContactTypeIds adds the contactTypeIds to the issues get all params
func (o *IssuesGetAllParams) WithContactTypeIds(contactTypeIds *string) *IssuesGetAllParams {
	o.SetContactTypeIds(contactTypeIds)
	return o
}

// SetContactTypeIds adds the contactTypeIds to the issues get all params
func (o *IssuesGetAllParams) SetContactTypeIds(contactTypeIds *string) {
	o.ContactTypeIds = contactTypeIds
}

// WithEndDate adds the endDate to the issues get all params
func (o *IssuesGetAllParams) WithEndDate(endDate *string) *IssuesGetAllParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the issues get all params
func (o *IssuesGetAllParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithIncludeAffiliations adds the includeAffiliations to the issues get all params
func (o *IssuesGetAllParams) WithIncludeAffiliations(includeAffiliations *string) *IssuesGetAllParams {
	o.SetIncludeAffiliations(includeAffiliations)
	return o
}

// SetIncludeAffiliations adds the includeAffiliations to the issues get all params
func (o *IssuesGetAllParams) SetIncludeAffiliations(includeAffiliations *string) {
	o.IncludeAffiliations = includeAffiliations
}

// WithOriginIds adds the originIds to the issues get all params
func (o *IssuesGetAllParams) WithOriginIds(originIds *string) *IssuesGetAllParams {
	o.SetOriginIds(originIds)
	return o
}

// SetOriginIds adds the originIds to the issues get all params
func (o *IssuesGetAllParams) SetOriginIds(originIds *string) {
	o.OriginIds = originIds
}

// WithPackageIds adds the packageIds to the issues get all params
func (o *IssuesGetAllParams) WithPackageIds(packageIds *string) *IssuesGetAllParams {
	o.SetPackageIds(packageIds)
	return o
}

// SetPackageIds adds the packageIds to the issues get all params
func (o *IssuesGetAllParams) SetPackageIds(packageIds *string) {
	o.PackageIds = packageIds
}

// WithPerformanceIds adds the performanceIds to the issues get all params
func (o *IssuesGetAllParams) WithPerformanceIds(performanceIds *string) *IssuesGetAllParams {
	o.SetPerformanceIds(performanceIds)
	return o
}

// SetPerformanceIds adds the performanceIds to the issues get all params
func (o *IssuesGetAllParams) SetPerformanceIds(performanceIds *string) {
	o.PerformanceIds = performanceIds
}

// WithResolved adds the resolved to the issues get all params
func (o *IssuesGetAllParams) WithResolved(resolved *string) *IssuesGetAllParams {
	o.SetResolved(resolved)
	return o
}

// SetResolved adds the resolved to the issues get all params
func (o *IssuesGetAllParams) SetResolved(resolved *string) {
	o.Resolved = resolved
}

// WithStartDate adds the startDate to the issues get all params
func (o *IssuesGetAllParams) WithStartDate(startDate *string) *IssuesGetAllParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the issues get all params
func (o *IssuesGetAllParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *IssuesGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActivityTypeIds != nil {

		// query param activityTypeIds
		var qrActivityTypeIds string

		if o.ActivityTypeIds != nil {
			qrActivityTypeIds = *o.ActivityTypeIds
		}
		qActivityTypeIds := qrActivityTypeIds
		if qActivityTypeIds != "" {

			if err := r.SetQueryParam("activityTypeIds", qActivityTypeIds); err != nil {
				return err
			}
		}
	}

	if o.CategoryIds != nil {

		// query param categoryIds
		var qrCategoryIds string

		if o.CategoryIds != nil {
			qrCategoryIds = *o.CategoryIds
		}
		qCategoryIds := qrCategoryIds
		if qCategoryIds != "" {

			if err := r.SetQueryParam("categoryIds", qCategoryIds); err != nil {
				return err
			}
		}
	}

	if o.ConstituentID != nil {

		// query param constituentId
		var qrConstituentID string

		if o.ConstituentID != nil {
			qrConstituentID = *o.ConstituentID
		}
		qConstituentID := qrConstituentID
		if qConstituentID != "" {

			if err := r.SetQueryParam("constituentId", qConstituentID); err != nil {
				return err
			}
		}
	}

	if o.ContactTypeIds != nil {

		// query param contactTypeIds
		var qrContactTypeIds string

		if o.ContactTypeIds != nil {
			qrContactTypeIds = *o.ContactTypeIds
		}
		qContactTypeIds := qrContactTypeIds
		if qContactTypeIds != "" {

			if err := r.SetQueryParam("contactTypeIds", qContactTypeIds); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.IncludeAffiliations != nil {

		// query param includeAffiliations
		var qrIncludeAffiliations string

		if o.IncludeAffiliations != nil {
			qrIncludeAffiliations = *o.IncludeAffiliations
		}
		qIncludeAffiliations := qrIncludeAffiliations
		if qIncludeAffiliations != "" {

			if err := r.SetQueryParam("includeAffiliations", qIncludeAffiliations); err != nil {
				return err
			}
		}
	}

	if o.OriginIds != nil {

		// query param originIds
		var qrOriginIds string

		if o.OriginIds != nil {
			qrOriginIds = *o.OriginIds
		}
		qOriginIds := qrOriginIds
		if qOriginIds != "" {

			if err := r.SetQueryParam("originIds", qOriginIds); err != nil {
				return err
			}
		}
	}

	if o.PackageIds != nil {

		// query param packageIds
		var qrPackageIds string

		if o.PackageIds != nil {
			qrPackageIds = *o.PackageIds
		}
		qPackageIds := qrPackageIds
		if qPackageIds != "" {

			if err := r.SetQueryParam("packageIds", qPackageIds); err != nil {
				return err
			}
		}
	}

	if o.PerformanceIds != nil {

		// query param performanceIds
		var qrPerformanceIds string

		if o.PerformanceIds != nil {
			qrPerformanceIds = *o.PerformanceIds
		}
		qPerformanceIds := qrPerformanceIds
		if qPerformanceIds != "" {

			if err := r.SetQueryParam("performanceIds", qPerformanceIds); err != nil {
				return err
			}
		}
	}

	if o.Resolved != nil {

		// query param resolved
		var qrResolved string

		if o.Resolved != nil {
			qrResolved = *o.Resolved
		}
		qResolved := qrResolved
		if qResolved != "" {

			if err := r.SetQueryParam("resolved", qResolved); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
