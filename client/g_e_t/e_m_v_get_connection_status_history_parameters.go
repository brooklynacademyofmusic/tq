// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewEMVGetConnectionStatusHistoryParams creates a new EMVGetConnectionStatusHistoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEMVGetConnectionStatusHistoryParams() *EMVGetConnectionStatusHistoryParams {
	return &EMVGetConnectionStatusHistoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEMVGetConnectionStatusHistoryParamsWithTimeout creates a new EMVGetConnectionStatusHistoryParams object
// with the ability to set a timeout on a request.
func NewEMVGetConnectionStatusHistoryParamsWithTimeout(timeout time.Duration) *EMVGetConnectionStatusHistoryParams {
	return &EMVGetConnectionStatusHistoryParams{
		timeout: timeout,
	}
}

// NewEMVGetConnectionStatusHistoryParamsWithContext creates a new EMVGetConnectionStatusHistoryParams object
// with the ability to set a context for a request.
func NewEMVGetConnectionStatusHistoryParamsWithContext(ctx context.Context) *EMVGetConnectionStatusHistoryParams {
	return &EMVGetConnectionStatusHistoryParams{
		Context: ctx,
	}
}

// NewEMVGetConnectionStatusHistoryParamsWithHTTPClient creates a new EMVGetConnectionStatusHistoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewEMVGetConnectionStatusHistoryParamsWithHTTPClient(client *http.Client) *EMVGetConnectionStatusHistoryParams {
	return &EMVGetConnectionStatusHistoryParams{
		HTTPClient: client,
	}
}

/*
EMVGetConnectionStatusHistoryParams contains all the parameters to send to the API endpoint

	for the e m v get connection status history operation.

	Typically these are written to a http.Request.
*/
type EMVGetConnectionStatusHistoryParams struct {

	// Cert.
	Cert *string

	// LaneID.
	LaneID string

	// Merchant.
	Merchant *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the e m v get connection status history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EMVGetConnectionStatusHistoryParams) WithDefaults() *EMVGetConnectionStatusHistoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the e m v get connection status history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EMVGetConnectionStatusHistoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) WithTimeout(timeout time.Duration) *EMVGetConnectionStatusHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) WithContext(ctx context.Context) *EMVGetConnectionStatusHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) WithHTTPClient(client *http.Client) *EMVGetConnectionStatusHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCert adds the cert to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) WithCert(cert *string) *EMVGetConnectionStatusHistoryParams {
	o.SetCert(cert)
	return o
}

// SetCert adds the cert to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) SetCert(cert *string) {
	o.Cert = cert
}

// WithLaneID adds the laneID to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) WithLaneID(laneID string) *EMVGetConnectionStatusHistoryParams {
	o.SetLaneID(laneID)
	return o
}

// SetLaneID adds the laneId to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) SetLaneID(laneID string) {
	o.LaneID = laneID
}

// WithMerchant adds the merchant to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) WithMerchant(merchant *string) *EMVGetConnectionStatusHistoryParams {
	o.SetMerchant(merchant)
	return o
}

// SetMerchant adds the merchant to the e m v get connection status history params
func (o *EMVGetConnectionStatusHistoryParams) SetMerchant(merchant *string) {
	o.Merchant = merchant
}

// WriteToRequest writes these params to a swagger request
func (o *EMVGetConnectionStatusHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cert != nil {

		// query param cert
		var qrCert string

		if o.Cert != nil {
			qrCert = *o.Cert
		}
		qCert := qrCert
		if qCert != "" {

			if err := r.SetQueryParam("cert", qCert); err != nil {
				return err
			}
		}
	}

	// path param laneId
	if err := r.SetPathParam("laneId", o.LaneID); err != nil {
		return err
	}

	if o.Merchant != nil {

		// query param merchant
		var qrMerchant string

		if o.Merchant != nil {
			qrMerchant = *o.Merchant
		}
		qMerchant := qrMerchant
		if qMerchant != "" {

			if err := r.SetQueryParam("merchant", qMerchant); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
