// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPricingRulesGetAllParams creates a new PricingRulesGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPricingRulesGetAllParams() *PricingRulesGetAllParams {
	return &PricingRulesGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPricingRulesGetAllParamsWithTimeout creates a new PricingRulesGetAllParams object
// with the ability to set a timeout on a request.
func NewPricingRulesGetAllParamsWithTimeout(timeout time.Duration) *PricingRulesGetAllParams {
	return &PricingRulesGetAllParams{
		timeout: timeout,
	}
}

// NewPricingRulesGetAllParamsWithContext creates a new PricingRulesGetAllParams object
// with the ability to set a context for a request.
func NewPricingRulesGetAllParamsWithContext(ctx context.Context) *PricingRulesGetAllParams {
	return &PricingRulesGetAllParams{
		Context: ctx,
	}
}

// NewPricingRulesGetAllParamsWithHTTPClient creates a new PricingRulesGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewPricingRulesGetAllParamsWithHTTPClient(client *http.Client) *PricingRulesGetAllParams {
	return &PricingRulesGetAllParams{
		HTTPClient: client,
	}
}

/*
PricingRulesGetAllParams contains all the parameters to send to the API endpoint

	for the pricing rules get all operation.

	Typically these are written to a http.Request.
*/
type PricingRulesGetAllParams struct {

	// ModeOfSaleID.
	ModeOfSaleID *string

	// OrderDate.
	OrderDate *string

	// PackageIds.
	PackageIds *string

	// PerformanceIds.
	PerformanceIds *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pricing rules get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingRulesGetAllParams) WithDefaults() *PricingRulesGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pricing rules get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingRulesGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pricing rules get all params
func (o *PricingRulesGetAllParams) WithTimeout(timeout time.Duration) *PricingRulesGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pricing rules get all params
func (o *PricingRulesGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pricing rules get all params
func (o *PricingRulesGetAllParams) WithContext(ctx context.Context) *PricingRulesGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pricing rules get all params
func (o *PricingRulesGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pricing rules get all params
func (o *PricingRulesGetAllParams) WithHTTPClient(client *http.Client) *PricingRulesGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pricing rules get all params
func (o *PricingRulesGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModeOfSaleID adds the modeOfSaleID to the pricing rules get all params
func (o *PricingRulesGetAllParams) WithModeOfSaleID(modeOfSaleID *string) *PricingRulesGetAllParams {
	o.SetModeOfSaleID(modeOfSaleID)
	return o
}

// SetModeOfSaleID adds the modeOfSaleId to the pricing rules get all params
func (o *PricingRulesGetAllParams) SetModeOfSaleID(modeOfSaleID *string) {
	o.ModeOfSaleID = modeOfSaleID
}

// WithOrderDate adds the orderDate to the pricing rules get all params
func (o *PricingRulesGetAllParams) WithOrderDate(orderDate *string) *PricingRulesGetAllParams {
	o.SetOrderDate(orderDate)
	return o
}

// SetOrderDate adds the orderDate to the pricing rules get all params
func (o *PricingRulesGetAllParams) SetOrderDate(orderDate *string) {
	o.OrderDate = orderDate
}

// WithPackageIds adds the packageIds to the pricing rules get all params
func (o *PricingRulesGetAllParams) WithPackageIds(packageIds *string) *PricingRulesGetAllParams {
	o.SetPackageIds(packageIds)
	return o
}

// SetPackageIds adds the packageIds to the pricing rules get all params
func (o *PricingRulesGetAllParams) SetPackageIds(packageIds *string) {
	o.PackageIds = packageIds
}

// WithPerformanceIds adds the performanceIds to the pricing rules get all params
func (o *PricingRulesGetAllParams) WithPerformanceIds(performanceIds *string) *PricingRulesGetAllParams {
	o.SetPerformanceIds(performanceIds)
	return o
}

// SetPerformanceIds adds the performanceIds to the pricing rules get all params
func (o *PricingRulesGetAllParams) SetPerformanceIds(performanceIds *string) {
	o.PerformanceIds = performanceIds
}

// WriteToRequest writes these params to a swagger request
func (o *PricingRulesGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ModeOfSaleID != nil {

		// query param modeOfSaleId
		var qrModeOfSaleID string

		if o.ModeOfSaleID != nil {
			qrModeOfSaleID = *o.ModeOfSaleID
		}
		qModeOfSaleID := qrModeOfSaleID
		if qModeOfSaleID != "" {

			if err := r.SetQueryParam("modeOfSaleId", qModeOfSaleID); err != nil {
				return err
			}
		}
	}

	if o.OrderDate != nil {

		// query param orderDate
		var qrOrderDate string

		if o.OrderDate != nil {
			qrOrderDate = *o.OrderDate
		}
		qOrderDate := qrOrderDate
		if qOrderDate != "" {

			if err := r.SetQueryParam("orderDate", qOrderDate); err != nil {
				return err
			}
		}
	}

	if o.PackageIds != nil {

		// query param packageIds
		var qrPackageIds string

		if o.PackageIds != nil {
			qrPackageIds = *o.PackageIds
		}
		qPackageIds := qrPackageIds
		if qPackageIds != "" {

			if err := r.SetQueryParam("packageIds", qPackageIds); err != nil {
				return err
			}
		}
	}

	if o.PerformanceIds != nil {

		// query param performanceIds
		var qrPerformanceIds string

		if o.PerformanceIds != nil {
			qrPerformanceIds = *o.PerformanceIds
		}
		qPerformanceIds := qrPerformanceIds
		if qPerformanceIds != "" {

			if err := r.SetQueryParam("performanceIds", qPerformanceIds); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
