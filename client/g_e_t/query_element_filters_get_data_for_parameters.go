// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewQueryElementFiltersGetDataForParams creates a new QueryElementFiltersGetDataForParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryElementFiltersGetDataForParams() *QueryElementFiltersGetDataForParams {
	return &QueryElementFiltersGetDataForParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryElementFiltersGetDataForParamsWithTimeout creates a new QueryElementFiltersGetDataForParams object
// with the ability to set a timeout on a request.
func NewQueryElementFiltersGetDataForParamsWithTimeout(timeout time.Duration) *QueryElementFiltersGetDataForParams {
	return &QueryElementFiltersGetDataForParams{
		timeout: timeout,
	}
}

// NewQueryElementFiltersGetDataForParamsWithContext creates a new QueryElementFiltersGetDataForParams object
// with the ability to set a context for a request.
func NewQueryElementFiltersGetDataForParamsWithContext(ctx context.Context) *QueryElementFiltersGetDataForParams {
	return &QueryElementFiltersGetDataForParams{
		Context: ctx,
	}
}

// NewQueryElementFiltersGetDataForParamsWithHTTPClient creates a new QueryElementFiltersGetDataForParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryElementFiltersGetDataForParamsWithHTTPClient(client *http.Client) *QueryElementFiltersGetDataForParams {
	return &QueryElementFiltersGetDataForParams{
		HTTPClient: client,
	}
}

/*
QueryElementFiltersGetDataForParams contains all the parameters to send to the API endpoint

	for the query element filters get data for operation.

	Typically these are written to a http.Request.
*/
type QueryElementFiltersGetDataForParams struct {

	// QueryElementFilterID.
	QueryElementFilterID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query element filters get data for params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryElementFiltersGetDataForParams) WithDefaults() *QueryElementFiltersGetDataForParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query element filters get data for params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryElementFiltersGetDataForParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query element filters get data for params
func (o *QueryElementFiltersGetDataForParams) WithTimeout(timeout time.Duration) *QueryElementFiltersGetDataForParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query element filters get data for params
func (o *QueryElementFiltersGetDataForParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query element filters get data for params
func (o *QueryElementFiltersGetDataForParams) WithContext(ctx context.Context) *QueryElementFiltersGetDataForParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query element filters get data for params
func (o *QueryElementFiltersGetDataForParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query element filters get data for params
func (o *QueryElementFiltersGetDataForParams) WithHTTPClient(client *http.Client) *QueryElementFiltersGetDataForParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query element filters get data for params
func (o *QueryElementFiltersGetDataForParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQueryElementFilterID adds the queryElementFilterID to the query element filters get data for params
func (o *QueryElementFiltersGetDataForParams) WithQueryElementFilterID(queryElementFilterID *string) *QueryElementFiltersGetDataForParams {
	o.SetQueryElementFilterID(queryElementFilterID)
	return o
}

// SetQueryElementFilterID adds the queryElementFilterId to the query element filters get data for params
func (o *QueryElementFiltersGetDataForParams) SetQueryElementFilterID(queryElementFilterID *string) {
	o.QueryElementFilterID = queryElementFilterID
}

// WriteToRequest writes these params to a swagger request
func (o *QueryElementFiltersGetDataForParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.QueryElementFilterID != nil {

		// query param queryElementFilterId
		var qrQueryElementFilterID string

		if o.QueryElementFilterID != nil {
			qrQueryElementFilterID = *o.QueryElementFilterID
		}
		qQueryElementFilterID := qrQueryElementFilterID
		if qQueryElementFilterID != "" {

			if err := r.SetQueryParam("queryElementFilterId", qQueryElementFilterID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
