// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCartGetReceiptStringParams creates a new CartGetReceiptStringParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCartGetReceiptStringParams() *CartGetReceiptStringParams {
	return &CartGetReceiptStringParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCartGetReceiptStringParamsWithTimeout creates a new CartGetReceiptStringParams object
// with the ability to set a timeout on a request.
func NewCartGetReceiptStringParamsWithTimeout(timeout time.Duration) *CartGetReceiptStringParams {
	return &CartGetReceiptStringParams{
		timeout: timeout,
	}
}

// NewCartGetReceiptStringParamsWithContext creates a new CartGetReceiptStringParams object
// with the ability to set a context for a request.
func NewCartGetReceiptStringParamsWithContext(ctx context.Context) *CartGetReceiptStringParams {
	return &CartGetReceiptStringParams{
		Context: ctx,
	}
}

// NewCartGetReceiptStringParamsWithHTTPClient creates a new CartGetReceiptStringParams object
// with the ability to set a custom HTTPClient for a request.
func NewCartGetReceiptStringParamsWithHTTPClient(client *http.Client) *CartGetReceiptStringParams {
	return &CartGetReceiptStringParams{
		HTTPClient: client,
	}
}

/*
CartGetReceiptStringParams contains all the parameters to send to the API endpoint

	for the cart get receipt string operation.

	Typically these are written to a http.Request.
*/
type CartGetReceiptStringParams struct {

	/* ReceiptSettingsID.

	   ID of the receipt settings to use (ReferenceData/ReceiptSettings)
	*/
	ReceiptSettingsID string

	// SessionKey.
	SessionKey string

	/* TargetFormat.

	   HTML for targetFormat 1 and CPCL for targetFormat 2
	*/
	TargetFormat *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cart get receipt string params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CartGetReceiptStringParams) WithDefaults() *CartGetReceiptStringParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cart get receipt string params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CartGetReceiptStringParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cart get receipt string params
func (o *CartGetReceiptStringParams) WithTimeout(timeout time.Duration) *CartGetReceiptStringParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cart get receipt string params
func (o *CartGetReceiptStringParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cart get receipt string params
func (o *CartGetReceiptStringParams) WithContext(ctx context.Context) *CartGetReceiptStringParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cart get receipt string params
func (o *CartGetReceiptStringParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cart get receipt string params
func (o *CartGetReceiptStringParams) WithHTTPClient(client *http.Client) *CartGetReceiptStringParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cart get receipt string params
func (o *CartGetReceiptStringParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithReceiptSettingsID adds the receiptSettingsID to the cart get receipt string params
func (o *CartGetReceiptStringParams) WithReceiptSettingsID(receiptSettingsID string) *CartGetReceiptStringParams {
	o.SetReceiptSettingsID(receiptSettingsID)
	return o
}

// SetReceiptSettingsID adds the receiptSettingsId to the cart get receipt string params
func (o *CartGetReceiptStringParams) SetReceiptSettingsID(receiptSettingsID string) {
	o.ReceiptSettingsID = receiptSettingsID
}

// WithSessionKey adds the sessionKey to the cart get receipt string params
func (o *CartGetReceiptStringParams) WithSessionKey(sessionKey string) *CartGetReceiptStringParams {
	o.SetSessionKey(sessionKey)
	return o
}

// SetSessionKey adds the sessionKey to the cart get receipt string params
func (o *CartGetReceiptStringParams) SetSessionKey(sessionKey string) {
	o.SessionKey = sessionKey
}

// WithTargetFormat adds the targetFormat to the cart get receipt string params
func (o *CartGetReceiptStringParams) WithTargetFormat(targetFormat *string) *CartGetReceiptStringParams {
	o.SetTargetFormat(targetFormat)
	return o
}

// SetTargetFormat adds the targetFormat to the cart get receipt string params
func (o *CartGetReceiptStringParams) SetTargetFormat(targetFormat *string) {
	o.TargetFormat = targetFormat
}

// WriteToRequest writes these params to a swagger request
func (o *CartGetReceiptStringParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param receiptSettingsId
	qrReceiptSettingsID := o.ReceiptSettingsID
	qReceiptSettingsID := qrReceiptSettingsID
	if qReceiptSettingsID != "" {

		if err := r.SetQueryParam("receiptSettingsId", qReceiptSettingsID); err != nil {
			return err
		}
	}

	// path param sessionKey
	if err := r.SetPathParam("sessionKey", o.SessionKey); err != nil {
		return err
	}

	if o.TargetFormat != nil {

		// query param targetFormat
		var qrTargetFormat string

		if o.TargetFormat != nil {
			qrTargetFormat = *o.TargetFormat
		}
		qTargetFormat := qrTargetFormat
		if qTargetFormat != "" {

			if err := r.SetQueryParam("targetFormat", qTargetFormat); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
