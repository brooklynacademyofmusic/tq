// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPortfoliosGetParams creates a new PortfoliosGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPortfoliosGetParams() *PortfoliosGetParams {
	return &PortfoliosGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPortfoliosGetParamsWithTimeout creates a new PortfoliosGetParams object
// with the ability to set a timeout on a request.
func NewPortfoliosGetParamsWithTimeout(timeout time.Duration) *PortfoliosGetParams {
	return &PortfoliosGetParams{
		timeout: timeout,
	}
}

// NewPortfoliosGetParamsWithContext creates a new PortfoliosGetParams object
// with the ability to set a context for a request.
func NewPortfoliosGetParamsWithContext(ctx context.Context) *PortfoliosGetParams {
	return &PortfoliosGetParams{
		Context: ctx,
	}
}

// NewPortfoliosGetParamsWithHTTPClient creates a new PortfoliosGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewPortfoliosGetParamsWithHTTPClient(client *http.Client) *PortfoliosGetParams {
	return &PortfoliosGetParams{
		HTTPClient: client,
	}
}

/*
PortfoliosGetParams contains all the parameters to send to the API endpoint

	for the portfolios get operation.

	Typically these are written to a http.Request.
*/
type PortfoliosGetParams struct {

	/* ConstituentID.

	   Limit results by constituent
	*/
	ConstituentID *string

	// Page.
	Page *string

	// PageSize.
	PageSize *string

	// PlanCustomColumns.
	PlanCustomColumns *string

	// PortfolioCustomColumns.
	PortfolioCustomColumns *string

	// PrimaryOnly.
	PrimaryOnly *string

	// StatusIds.
	StatusIds *string

	// WorkerRoleIds.
	WorkerRoleIds *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the portfolios get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PortfoliosGetParams) WithDefaults() *PortfoliosGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the portfolios get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PortfoliosGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the portfolios get params
func (o *PortfoliosGetParams) WithTimeout(timeout time.Duration) *PortfoliosGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the portfolios get params
func (o *PortfoliosGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the portfolios get params
func (o *PortfoliosGetParams) WithContext(ctx context.Context) *PortfoliosGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the portfolios get params
func (o *PortfoliosGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the portfolios get params
func (o *PortfoliosGetParams) WithHTTPClient(client *http.Client) *PortfoliosGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the portfolios get params
func (o *PortfoliosGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConstituentID adds the constituentID to the portfolios get params
func (o *PortfoliosGetParams) WithConstituentID(constituentID *string) *PortfoliosGetParams {
	o.SetConstituentID(constituentID)
	return o
}

// SetConstituentID adds the constituentId to the portfolios get params
func (o *PortfoliosGetParams) SetConstituentID(constituentID *string) {
	o.ConstituentID = constituentID
}

// WithPage adds the page to the portfolios get params
func (o *PortfoliosGetParams) WithPage(page *string) *PortfoliosGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the portfolios get params
func (o *PortfoliosGetParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the portfolios get params
func (o *PortfoliosGetParams) WithPageSize(pageSize *string) *PortfoliosGetParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the portfolios get params
func (o *PortfoliosGetParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithPlanCustomColumns adds the planCustomColumns to the portfolios get params
func (o *PortfoliosGetParams) WithPlanCustomColumns(planCustomColumns *string) *PortfoliosGetParams {
	o.SetPlanCustomColumns(planCustomColumns)
	return o
}

// SetPlanCustomColumns adds the planCustomColumns to the portfolios get params
func (o *PortfoliosGetParams) SetPlanCustomColumns(planCustomColumns *string) {
	o.PlanCustomColumns = planCustomColumns
}

// WithPortfolioCustomColumns adds the portfolioCustomColumns to the portfolios get params
func (o *PortfoliosGetParams) WithPortfolioCustomColumns(portfolioCustomColumns *string) *PortfoliosGetParams {
	o.SetPortfolioCustomColumns(portfolioCustomColumns)
	return o
}

// SetPortfolioCustomColumns adds the portfolioCustomColumns to the portfolios get params
func (o *PortfoliosGetParams) SetPortfolioCustomColumns(portfolioCustomColumns *string) {
	o.PortfolioCustomColumns = portfolioCustomColumns
}

// WithPrimaryOnly adds the primaryOnly to the portfolios get params
func (o *PortfoliosGetParams) WithPrimaryOnly(primaryOnly *string) *PortfoliosGetParams {
	o.SetPrimaryOnly(primaryOnly)
	return o
}

// SetPrimaryOnly adds the primaryOnly to the portfolios get params
func (o *PortfoliosGetParams) SetPrimaryOnly(primaryOnly *string) {
	o.PrimaryOnly = primaryOnly
}

// WithStatusIds adds the statusIds to the portfolios get params
func (o *PortfoliosGetParams) WithStatusIds(statusIds *string) *PortfoliosGetParams {
	o.SetStatusIds(statusIds)
	return o
}

// SetStatusIds adds the statusIds to the portfolios get params
func (o *PortfoliosGetParams) SetStatusIds(statusIds *string) {
	o.StatusIds = statusIds
}

// WithWorkerRoleIds adds the workerRoleIds to the portfolios get params
func (o *PortfoliosGetParams) WithWorkerRoleIds(workerRoleIds *string) *PortfoliosGetParams {
	o.SetWorkerRoleIds(workerRoleIds)
	return o
}

// SetWorkerRoleIds adds the workerRoleIds to the portfolios get params
func (o *PortfoliosGetParams) SetWorkerRoleIds(workerRoleIds *string) {
	o.WorkerRoleIds = workerRoleIds
}

// WriteToRequest writes these params to a swagger request
func (o *PortfoliosGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConstituentID != nil {

		// query param constituentId
		var qrConstituentID string

		if o.ConstituentID != nil {
			qrConstituentID = *o.ConstituentID
		}
		qConstituentID := qrConstituentID
		if qConstituentID != "" {

			if err := r.SetQueryParam("constituentId", qConstituentID); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PlanCustomColumns != nil {

		// query param planCustomColumns
		var qrPlanCustomColumns string

		if o.PlanCustomColumns != nil {
			qrPlanCustomColumns = *o.PlanCustomColumns
		}
		qPlanCustomColumns := qrPlanCustomColumns
		if qPlanCustomColumns != "" {

			if err := r.SetQueryParam("planCustomColumns", qPlanCustomColumns); err != nil {
				return err
			}
		}
	}

	if o.PortfolioCustomColumns != nil {

		// query param portfolioCustomColumns
		var qrPortfolioCustomColumns string

		if o.PortfolioCustomColumns != nil {
			qrPortfolioCustomColumns = *o.PortfolioCustomColumns
		}
		qPortfolioCustomColumns := qrPortfolioCustomColumns
		if qPortfolioCustomColumns != "" {

			if err := r.SetQueryParam("portfolioCustomColumns", qPortfolioCustomColumns); err != nil {
				return err
			}
		}
	}

	if o.PrimaryOnly != nil {

		// query param primaryOnly
		var qrPrimaryOnly string

		if o.PrimaryOnly != nil {
			qrPrimaryOnly = *o.PrimaryOnly
		}
		qPrimaryOnly := qrPrimaryOnly
		if qPrimaryOnly != "" {

			if err := r.SetQueryParam("primaryOnly", qPrimaryOnly); err != nil {
				return err
			}
		}
	}

	if o.StatusIds != nil {

		// query param statusIds
		var qrStatusIds string

		if o.StatusIds != nil {
			qrStatusIds = *o.StatusIds
		}
		qStatusIds := qrStatusIds
		if qStatusIds != "" {

			if err := r.SetQueryParam("statusIds", qStatusIds); err != nil {
				return err
			}
		}
	}

	if o.WorkerRoleIds != nil {

		// query param workerRoleIds
		var qrWorkerRoleIds string

		if o.WorkerRoleIds != nil {
			qrWorkerRoleIds = *o.WorkerRoleIds
		}
		qWorkerRoleIds := qrWorkerRoleIds
		if qWorkerRoleIds != "" {

			if err := r.SetQueryParam("workerRoleIds", qWorkerRoleIds); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
