// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewElectronicAddressesGetAllParams creates a new ElectronicAddressesGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewElectronicAddressesGetAllParams() *ElectronicAddressesGetAllParams {
	return &ElectronicAddressesGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewElectronicAddressesGetAllParamsWithTimeout creates a new ElectronicAddressesGetAllParams object
// with the ability to set a timeout on a request.
func NewElectronicAddressesGetAllParamsWithTimeout(timeout time.Duration) *ElectronicAddressesGetAllParams {
	return &ElectronicAddressesGetAllParams{
		timeout: timeout,
	}
}

// NewElectronicAddressesGetAllParamsWithContext creates a new ElectronicAddressesGetAllParams object
// with the ability to set a context for a request.
func NewElectronicAddressesGetAllParamsWithContext(ctx context.Context) *ElectronicAddressesGetAllParams {
	return &ElectronicAddressesGetAllParams{
		Context: ctx,
	}
}

// NewElectronicAddressesGetAllParamsWithHTTPClient creates a new ElectronicAddressesGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewElectronicAddressesGetAllParamsWithHTTPClient(client *http.Client) *ElectronicAddressesGetAllParams {
	return &ElectronicAddressesGetAllParams{
		HTTPClient: client,
	}
}

/*
ElectronicAddressesGetAllParams contains all the parameters to send to the API endpoint

	for the electronic addresses get all operation.

	Typically these are written to a http.Request.
*/
type ElectronicAddressesGetAllParams struct {

	/* Address.

	   Exact match search on address.  Can be used by itself or with useGeneralPublic.  When searching for specific address, the request only searches existing constituents OR general public, but not both in the same request.
	*/
	Address *string

	/* ConstituentIds.

	   A comma separated list of constituent ids.  The parameter useGeneralPublic cannot be used with this parameter.
	*/
	ConstituentIds *string

	/* ElectronicAddressTypeID.

	   Filter results to only provided electronic address types.
	*/
	ElectronicAddressTypeID *string

	/* IncludeAffiliations.

	   Include electronic addresses for affiliated constituents.  Ignored when useGeneralPublic is true.
	*/
	IncludeAffiliations *string

	/* IncludeFromAffiliations.

	   Include electronic addresses assigned to affiliations of the constituents provided. Ignored when useGeneralPublic is true.
	*/
	IncludeFromAffiliations *string

	/* PrimaryOnly.

	   Only return primary electronic addresses.  Ignored when useGeneralPublic is true.
	*/
	PrimaryOnly *string

	/* UseGeneralPublic.

	   Default to false. If true, only general public will be searched.  When false, general public is not included in results. Address is required when set to true.
	*/
	UseGeneralPublic *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the electronic addresses get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ElectronicAddressesGetAllParams) WithDefaults() *ElectronicAddressesGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the electronic addresses get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ElectronicAddressesGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithTimeout(timeout time.Duration) *ElectronicAddressesGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithContext(ctx context.Context) *ElectronicAddressesGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithHTTPClient(client *http.Client) *ElectronicAddressesGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithAddress(address *string) *ElectronicAddressesGetAllParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetAddress(address *string) {
	o.Address = address
}

// WithConstituentIds adds the constituentIds to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithConstituentIds(constituentIds *string) *ElectronicAddressesGetAllParams {
	o.SetConstituentIds(constituentIds)
	return o
}

// SetConstituentIds adds the constituentIds to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetConstituentIds(constituentIds *string) {
	o.ConstituentIds = constituentIds
}

// WithElectronicAddressTypeID adds the electronicAddressTypeID to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithElectronicAddressTypeID(electronicAddressTypeID *string) *ElectronicAddressesGetAllParams {
	o.SetElectronicAddressTypeID(electronicAddressTypeID)
	return o
}

// SetElectronicAddressTypeID adds the electronicAddressTypeId to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetElectronicAddressTypeID(electronicAddressTypeID *string) {
	o.ElectronicAddressTypeID = electronicAddressTypeID
}

// WithIncludeAffiliations adds the includeAffiliations to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithIncludeAffiliations(includeAffiliations *string) *ElectronicAddressesGetAllParams {
	o.SetIncludeAffiliations(includeAffiliations)
	return o
}

// SetIncludeAffiliations adds the includeAffiliations to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetIncludeAffiliations(includeAffiliations *string) {
	o.IncludeAffiliations = includeAffiliations
}

// WithIncludeFromAffiliations adds the includeFromAffiliations to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithIncludeFromAffiliations(includeFromAffiliations *string) *ElectronicAddressesGetAllParams {
	o.SetIncludeFromAffiliations(includeFromAffiliations)
	return o
}

// SetIncludeFromAffiliations adds the includeFromAffiliations to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetIncludeFromAffiliations(includeFromAffiliations *string) {
	o.IncludeFromAffiliations = includeFromAffiliations
}

// WithPrimaryOnly adds the primaryOnly to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithPrimaryOnly(primaryOnly *string) *ElectronicAddressesGetAllParams {
	o.SetPrimaryOnly(primaryOnly)
	return o
}

// SetPrimaryOnly adds the primaryOnly to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetPrimaryOnly(primaryOnly *string) {
	o.PrimaryOnly = primaryOnly
}

// WithUseGeneralPublic adds the useGeneralPublic to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) WithUseGeneralPublic(useGeneralPublic *string) *ElectronicAddressesGetAllParams {
	o.SetUseGeneralPublic(useGeneralPublic)
	return o
}

// SetUseGeneralPublic adds the useGeneralPublic to the electronic addresses get all params
func (o *ElectronicAddressesGetAllParams) SetUseGeneralPublic(useGeneralPublic *string) {
	o.UseGeneralPublic = useGeneralPublic
}

// WriteToRequest writes these params to a swagger request
func (o *ElectronicAddressesGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Address != nil {

		// query param address
		var qrAddress string

		if o.Address != nil {
			qrAddress = *o.Address
		}
		qAddress := qrAddress
		if qAddress != "" {

			if err := r.SetQueryParam("address", qAddress); err != nil {
				return err
			}
		}
	}

	if o.ConstituentIds != nil {

		// query param constituentIds
		var qrConstituentIds string

		if o.ConstituentIds != nil {
			qrConstituentIds = *o.ConstituentIds
		}
		qConstituentIds := qrConstituentIds
		if qConstituentIds != "" {

			if err := r.SetQueryParam("constituentIds", qConstituentIds); err != nil {
				return err
			}
		}
	}

	if o.ElectronicAddressTypeID != nil {

		// query param electronicAddressTypeId
		var qrElectronicAddressTypeID string

		if o.ElectronicAddressTypeID != nil {
			qrElectronicAddressTypeID = *o.ElectronicAddressTypeID
		}
		qElectronicAddressTypeID := qrElectronicAddressTypeID
		if qElectronicAddressTypeID != "" {

			if err := r.SetQueryParam("electronicAddressTypeId", qElectronicAddressTypeID); err != nil {
				return err
			}
		}
	}

	if o.IncludeAffiliations != nil {

		// query param includeAffiliations
		var qrIncludeAffiliations string

		if o.IncludeAffiliations != nil {
			qrIncludeAffiliations = *o.IncludeAffiliations
		}
		qIncludeAffiliations := qrIncludeAffiliations
		if qIncludeAffiliations != "" {

			if err := r.SetQueryParam("includeAffiliations", qIncludeAffiliations); err != nil {
				return err
			}
		}
	}

	if o.IncludeFromAffiliations != nil {

		// query param includeFromAffiliations
		var qrIncludeFromAffiliations string

		if o.IncludeFromAffiliations != nil {
			qrIncludeFromAffiliations = *o.IncludeFromAffiliations
		}
		qIncludeFromAffiliations := qrIncludeFromAffiliations
		if qIncludeFromAffiliations != "" {

			if err := r.SetQueryParam("includeFromAffiliations", qIncludeFromAffiliations); err != nil {
				return err
			}
		}
	}

	if o.PrimaryOnly != nil {

		// query param primaryOnly
		var qrPrimaryOnly string

		if o.PrimaryOnly != nil {
			qrPrimaryOnly = *o.PrimaryOnly
		}
		qPrimaryOnly := qrPrimaryOnly
		if qPrimaryOnly != "" {

			if err := r.SetQueryParam("primaryOnly", qPrimaryOnly); err != nil {
				return err
			}
		}
	}

	if o.UseGeneralPublic != nil {

		// query param useGeneralPublic
		var qrUseGeneralPublic string

		if o.UseGeneralPublic != nil {
			qrUseGeneralPublic = *o.UseGeneralPublic
		}
		qUseGeneralPublic := qrUseGeneralPublic
		if qUseGeneralPublic != "" {

			if err := r.SetQueryParam("useGeneralPublic", qUseGeneralPublic); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
