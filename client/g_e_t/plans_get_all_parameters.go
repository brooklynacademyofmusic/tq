// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPlansGetAllParams creates a new PlansGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPlansGetAllParams() *PlansGetAllParams {
	return &PlansGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPlansGetAllParamsWithTimeout creates a new PlansGetAllParams object
// with the ability to set a timeout on a request.
func NewPlansGetAllParamsWithTimeout(timeout time.Duration) *PlansGetAllParams {
	return &PlansGetAllParams{
		timeout: timeout,
	}
}

// NewPlansGetAllParamsWithContext creates a new PlansGetAllParams object
// with the ability to set a context for a request.
func NewPlansGetAllParamsWithContext(ctx context.Context) *PlansGetAllParams {
	return &PlansGetAllParams{
		Context: ctx,
	}
}

// NewPlansGetAllParamsWithHTTPClient creates a new PlansGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewPlansGetAllParamsWithHTTPClient(client *http.Client) *PlansGetAllParams {
	return &PlansGetAllParams{
		HTTPClient: client,
	}
}

/*
PlansGetAllParams contains all the parameters to send to the API endpoint

	for the plans get all operation.

	Typically these are written to a http.Request.
*/
type PlansGetAllParams struct {

	/* CampaignID.

	   Campaign of the Plan(s).
	*/
	CampaignID *string

	/* ConstituentID.

	   Constituent Id
	*/
	ConstituentID *string

	// ContributionDesignationID.
	ContributionDesignationID *string

	// FundID.
	FundID *string

	/* IncludeAffiliations.

	   Include all of the constituent's affiliates in the results (default: true)
	*/
	IncludeAffiliations *string

	// IncludeAssociates.
	IncludeAssociates *string

	// ListID.
	ListID *string

	// OnlyNullFund.
	OnlyNullFund *string

	// WorkerID.
	WorkerID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the plans get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PlansGetAllParams) WithDefaults() *PlansGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the plans get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PlansGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the plans get all params
func (o *PlansGetAllParams) WithTimeout(timeout time.Duration) *PlansGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the plans get all params
func (o *PlansGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the plans get all params
func (o *PlansGetAllParams) WithContext(ctx context.Context) *PlansGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the plans get all params
func (o *PlansGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the plans get all params
func (o *PlansGetAllParams) WithHTTPClient(client *http.Client) *PlansGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the plans get all params
func (o *PlansGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCampaignID adds the campaignID to the plans get all params
func (o *PlansGetAllParams) WithCampaignID(campaignID *string) *PlansGetAllParams {
	o.SetCampaignID(campaignID)
	return o
}

// SetCampaignID adds the campaignId to the plans get all params
func (o *PlansGetAllParams) SetCampaignID(campaignID *string) {
	o.CampaignID = campaignID
}

// WithConstituentID adds the constituentID to the plans get all params
func (o *PlansGetAllParams) WithConstituentID(constituentID *string) *PlansGetAllParams {
	o.SetConstituentID(constituentID)
	return o
}

// SetConstituentID adds the constituentId to the plans get all params
func (o *PlansGetAllParams) SetConstituentID(constituentID *string) {
	o.ConstituentID = constituentID
}

// WithContributionDesignationID adds the contributionDesignationID to the plans get all params
func (o *PlansGetAllParams) WithContributionDesignationID(contributionDesignationID *string) *PlansGetAllParams {
	o.SetContributionDesignationID(contributionDesignationID)
	return o
}

// SetContributionDesignationID adds the contributionDesignationId to the plans get all params
func (o *PlansGetAllParams) SetContributionDesignationID(contributionDesignationID *string) {
	o.ContributionDesignationID = contributionDesignationID
}

// WithFundID adds the fundID to the plans get all params
func (o *PlansGetAllParams) WithFundID(fundID *string) *PlansGetAllParams {
	o.SetFundID(fundID)
	return o
}

// SetFundID adds the fundId to the plans get all params
func (o *PlansGetAllParams) SetFundID(fundID *string) {
	o.FundID = fundID
}

// WithIncludeAffiliations adds the includeAffiliations to the plans get all params
func (o *PlansGetAllParams) WithIncludeAffiliations(includeAffiliations *string) *PlansGetAllParams {
	o.SetIncludeAffiliations(includeAffiliations)
	return o
}

// SetIncludeAffiliations adds the includeAffiliations to the plans get all params
func (o *PlansGetAllParams) SetIncludeAffiliations(includeAffiliations *string) {
	o.IncludeAffiliations = includeAffiliations
}

// WithIncludeAssociates adds the includeAssociates to the plans get all params
func (o *PlansGetAllParams) WithIncludeAssociates(includeAssociates *string) *PlansGetAllParams {
	o.SetIncludeAssociates(includeAssociates)
	return o
}

// SetIncludeAssociates adds the includeAssociates to the plans get all params
func (o *PlansGetAllParams) SetIncludeAssociates(includeAssociates *string) {
	o.IncludeAssociates = includeAssociates
}

// WithListID adds the listID to the plans get all params
func (o *PlansGetAllParams) WithListID(listID *string) *PlansGetAllParams {
	o.SetListID(listID)
	return o
}

// SetListID adds the listId to the plans get all params
func (o *PlansGetAllParams) SetListID(listID *string) {
	o.ListID = listID
}

// WithOnlyNullFund adds the onlyNullFund to the plans get all params
func (o *PlansGetAllParams) WithOnlyNullFund(onlyNullFund *string) *PlansGetAllParams {
	o.SetOnlyNullFund(onlyNullFund)
	return o
}

// SetOnlyNullFund adds the onlyNullFund to the plans get all params
func (o *PlansGetAllParams) SetOnlyNullFund(onlyNullFund *string) {
	o.OnlyNullFund = onlyNullFund
}

// WithWorkerID adds the workerID to the plans get all params
func (o *PlansGetAllParams) WithWorkerID(workerID *string) *PlansGetAllParams {
	o.SetWorkerID(workerID)
	return o
}

// SetWorkerID adds the workerId to the plans get all params
func (o *PlansGetAllParams) SetWorkerID(workerID *string) {
	o.WorkerID = workerID
}

// WriteToRequest writes these params to a swagger request
func (o *PlansGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CampaignID != nil {

		// query param campaignId
		var qrCampaignID string

		if o.CampaignID != nil {
			qrCampaignID = *o.CampaignID
		}
		qCampaignID := qrCampaignID
		if qCampaignID != "" {

			if err := r.SetQueryParam("campaignId", qCampaignID); err != nil {
				return err
			}
		}
	}

	if o.ConstituentID != nil {

		// query param constituentId
		var qrConstituentID string

		if o.ConstituentID != nil {
			qrConstituentID = *o.ConstituentID
		}
		qConstituentID := qrConstituentID
		if qConstituentID != "" {

			if err := r.SetQueryParam("constituentId", qConstituentID); err != nil {
				return err
			}
		}
	}

	if o.ContributionDesignationID != nil {

		// query param contributionDesignationId
		var qrContributionDesignationID string

		if o.ContributionDesignationID != nil {
			qrContributionDesignationID = *o.ContributionDesignationID
		}
		qContributionDesignationID := qrContributionDesignationID
		if qContributionDesignationID != "" {

			if err := r.SetQueryParam("contributionDesignationId", qContributionDesignationID); err != nil {
				return err
			}
		}
	}

	if o.FundID != nil {

		// query param fundId
		var qrFundID string

		if o.FundID != nil {
			qrFundID = *o.FundID
		}
		qFundID := qrFundID
		if qFundID != "" {

			if err := r.SetQueryParam("fundId", qFundID); err != nil {
				return err
			}
		}
	}

	if o.IncludeAffiliations != nil {

		// query param includeAffiliations
		var qrIncludeAffiliations string

		if o.IncludeAffiliations != nil {
			qrIncludeAffiliations = *o.IncludeAffiliations
		}
		qIncludeAffiliations := qrIncludeAffiliations
		if qIncludeAffiliations != "" {

			if err := r.SetQueryParam("includeAffiliations", qIncludeAffiliations); err != nil {
				return err
			}
		}
	}

	if o.IncludeAssociates != nil {

		// query param includeAssociates
		var qrIncludeAssociates string

		if o.IncludeAssociates != nil {
			qrIncludeAssociates = *o.IncludeAssociates
		}
		qIncludeAssociates := qrIncludeAssociates
		if qIncludeAssociates != "" {

			if err := r.SetQueryParam("includeAssociates", qIncludeAssociates); err != nil {
				return err
			}
		}
	}

	if o.ListID != nil {

		// query param listId
		var qrListID string

		if o.ListID != nil {
			qrListID = *o.ListID
		}
		qListID := qrListID
		if qListID != "" {

			if err := r.SetQueryParam("listId", qListID); err != nil {
				return err
			}
		}
	}

	if o.OnlyNullFund != nil {

		// query param onlyNullFund
		var qrOnlyNullFund string

		if o.OnlyNullFund != nil {
			qrOnlyNullFund = *o.OnlyNullFund
		}
		qOnlyNullFund := qrOnlyNullFund
		if qOnlyNullFund != "" {

			if err := r.SetQueryParam("onlyNullFund", qOnlyNullFund); err != nil {
				return err
			}
		}
	}

	if o.WorkerID != nil {

		// query param workerId
		var qrWorkerID string

		if o.WorkerID != nil {
			qrWorkerID = *o.WorkerID
		}
		qWorkerID := qrWorkerID
		if qWorkerID != "" {

			if err := r.SetQueryParam("workerId", qWorkerID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
