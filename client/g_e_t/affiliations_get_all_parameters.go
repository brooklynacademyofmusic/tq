// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAffiliationsGetAllParams creates a new AffiliationsGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAffiliationsGetAllParams() *AffiliationsGetAllParams {
	return &AffiliationsGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAffiliationsGetAllParamsWithTimeout creates a new AffiliationsGetAllParams object
// with the ability to set a timeout on a request.
func NewAffiliationsGetAllParamsWithTimeout(timeout time.Duration) *AffiliationsGetAllParams {
	return &AffiliationsGetAllParams{
		timeout: timeout,
	}
}

// NewAffiliationsGetAllParamsWithContext creates a new AffiliationsGetAllParams object
// with the ability to set a context for a request.
func NewAffiliationsGetAllParamsWithContext(ctx context.Context) *AffiliationsGetAllParams {
	return &AffiliationsGetAllParams{
		Context: ctx,
	}
}

// NewAffiliationsGetAllParamsWithHTTPClient creates a new AffiliationsGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewAffiliationsGetAllParamsWithHTTPClient(client *http.Client) *AffiliationsGetAllParams {
	return &AffiliationsGetAllParams{
		HTTPClient: client,
	}
}

/*
AffiliationsGetAllParams contains all the parameters to send to the API endpoint

	for the affiliations get all operation.

	Typically these are written to a http.Request.
*/
type AffiliationsGetAllParams struct {

	// EndActiveDate.
	EndActiveDate *string

	// GroupConstituentID.
	GroupConstituentID *string

	// IndividualConstituentID.
	IndividualConstituentID *string

	// PrimaryOnly.
	PrimaryOnly *string

	// ShowWithGroup.
	ShowWithGroup *string

	// StartActiveDate.
	StartActiveDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the affiliations get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AffiliationsGetAllParams) WithDefaults() *AffiliationsGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the affiliations get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AffiliationsGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the affiliations get all params
func (o *AffiliationsGetAllParams) WithTimeout(timeout time.Duration) *AffiliationsGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the affiliations get all params
func (o *AffiliationsGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the affiliations get all params
func (o *AffiliationsGetAllParams) WithContext(ctx context.Context) *AffiliationsGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the affiliations get all params
func (o *AffiliationsGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the affiliations get all params
func (o *AffiliationsGetAllParams) WithHTTPClient(client *http.Client) *AffiliationsGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the affiliations get all params
func (o *AffiliationsGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndActiveDate adds the endActiveDate to the affiliations get all params
func (o *AffiliationsGetAllParams) WithEndActiveDate(endActiveDate *string) *AffiliationsGetAllParams {
	o.SetEndActiveDate(endActiveDate)
	return o
}

// SetEndActiveDate adds the endActiveDate to the affiliations get all params
func (o *AffiliationsGetAllParams) SetEndActiveDate(endActiveDate *string) {
	o.EndActiveDate = endActiveDate
}

// WithGroupConstituentID adds the groupConstituentID to the affiliations get all params
func (o *AffiliationsGetAllParams) WithGroupConstituentID(groupConstituentID *string) *AffiliationsGetAllParams {
	o.SetGroupConstituentID(groupConstituentID)
	return o
}

// SetGroupConstituentID adds the groupConstituentId to the affiliations get all params
func (o *AffiliationsGetAllParams) SetGroupConstituentID(groupConstituentID *string) {
	o.GroupConstituentID = groupConstituentID
}

// WithIndividualConstituentID adds the individualConstituentID to the affiliations get all params
func (o *AffiliationsGetAllParams) WithIndividualConstituentID(individualConstituentID *string) *AffiliationsGetAllParams {
	o.SetIndividualConstituentID(individualConstituentID)
	return o
}

// SetIndividualConstituentID adds the individualConstituentId to the affiliations get all params
func (o *AffiliationsGetAllParams) SetIndividualConstituentID(individualConstituentID *string) {
	o.IndividualConstituentID = individualConstituentID
}

// WithPrimaryOnly adds the primaryOnly to the affiliations get all params
func (o *AffiliationsGetAllParams) WithPrimaryOnly(primaryOnly *string) *AffiliationsGetAllParams {
	o.SetPrimaryOnly(primaryOnly)
	return o
}

// SetPrimaryOnly adds the primaryOnly to the affiliations get all params
func (o *AffiliationsGetAllParams) SetPrimaryOnly(primaryOnly *string) {
	o.PrimaryOnly = primaryOnly
}

// WithShowWithGroup adds the showWithGroup to the affiliations get all params
func (o *AffiliationsGetAllParams) WithShowWithGroup(showWithGroup *string) *AffiliationsGetAllParams {
	o.SetShowWithGroup(showWithGroup)
	return o
}

// SetShowWithGroup adds the showWithGroup to the affiliations get all params
func (o *AffiliationsGetAllParams) SetShowWithGroup(showWithGroup *string) {
	o.ShowWithGroup = showWithGroup
}

// WithStartActiveDate adds the startActiveDate to the affiliations get all params
func (o *AffiliationsGetAllParams) WithStartActiveDate(startActiveDate *string) *AffiliationsGetAllParams {
	o.SetStartActiveDate(startActiveDate)
	return o
}

// SetStartActiveDate adds the startActiveDate to the affiliations get all params
func (o *AffiliationsGetAllParams) SetStartActiveDate(startActiveDate *string) {
	o.StartActiveDate = startActiveDate
}

// WriteToRequest writes these params to a swagger request
func (o *AffiliationsGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndActiveDate != nil {

		// query param endActiveDate
		var qrEndActiveDate string

		if o.EndActiveDate != nil {
			qrEndActiveDate = *o.EndActiveDate
		}
		qEndActiveDate := qrEndActiveDate
		if qEndActiveDate != "" {

			if err := r.SetQueryParam("endActiveDate", qEndActiveDate); err != nil {
				return err
			}
		}
	}

	if o.GroupConstituentID != nil {

		// query param groupConstituentId
		var qrGroupConstituentID string

		if o.GroupConstituentID != nil {
			qrGroupConstituentID = *o.GroupConstituentID
		}
		qGroupConstituentID := qrGroupConstituentID
		if qGroupConstituentID != "" {

			if err := r.SetQueryParam("groupConstituentId", qGroupConstituentID); err != nil {
				return err
			}
		}
	}

	if o.IndividualConstituentID != nil {

		// query param individualConstituentId
		var qrIndividualConstituentID string

		if o.IndividualConstituentID != nil {
			qrIndividualConstituentID = *o.IndividualConstituentID
		}
		qIndividualConstituentID := qrIndividualConstituentID
		if qIndividualConstituentID != "" {

			if err := r.SetQueryParam("individualConstituentId", qIndividualConstituentID); err != nil {
				return err
			}
		}
	}

	if o.PrimaryOnly != nil {

		// query param primaryOnly
		var qrPrimaryOnly string

		if o.PrimaryOnly != nil {
			qrPrimaryOnly = *o.PrimaryOnly
		}
		qPrimaryOnly := qrPrimaryOnly
		if qPrimaryOnly != "" {

			if err := r.SetQueryParam("primaryOnly", qPrimaryOnly); err != nil {
				return err
			}
		}
	}

	if o.ShowWithGroup != nil {

		// query param showWithGroup
		var qrShowWithGroup string

		if o.ShowWithGroup != nil {
			qrShowWithGroup = *o.ShowWithGroup
		}
		qShowWithGroup := qrShowWithGroup
		if qShowWithGroup != "" {

			if err := r.SetQueryParam("showWithGroup", qShowWithGroup); err != nil {
				return err
			}
		}
	}

	if o.StartActiveDate != nil {

		// query param startActiveDate
		var qrStartActiveDate string

		if o.StartActiveDate != nil {
			qrStartActiveDate = *o.StartActiveDate
		}
		qStartActiveDate := qrStartActiveDate
		if qStartActiveDate != "" {

			if err := r.SetQueryParam("startActiveDate", qStartActiveDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
