// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPerformancesGetSeatFeesParams creates a new PerformancesGetSeatFeesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPerformancesGetSeatFeesParams() *PerformancesGetSeatFeesParams {
	return &PerformancesGetSeatFeesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPerformancesGetSeatFeesParamsWithTimeout creates a new PerformancesGetSeatFeesParams object
// with the ability to set a timeout on a request.
func NewPerformancesGetSeatFeesParamsWithTimeout(timeout time.Duration) *PerformancesGetSeatFeesParams {
	return &PerformancesGetSeatFeesParams{
		timeout: timeout,
	}
}

// NewPerformancesGetSeatFeesParamsWithContext creates a new PerformancesGetSeatFeesParams object
// with the ability to set a context for a request.
func NewPerformancesGetSeatFeesParamsWithContext(ctx context.Context) *PerformancesGetSeatFeesParams {
	return &PerformancesGetSeatFeesParams{
		Context: ctx,
	}
}

// NewPerformancesGetSeatFeesParamsWithHTTPClient creates a new PerformancesGetSeatFeesParams object
// with the ability to set a custom HTTPClient for a request.
func NewPerformancesGetSeatFeesParamsWithHTTPClient(client *http.Client) *PerformancesGetSeatFeesParams {
	return &PerformancesGetSeatFeesParams{
		HTTPClient: client,
	}
}

/*
PerformancesGetSeatFeesParams contains all the parameters to send to the API endpoint

	for the performances get seat fees operation.

	Typically these are written to a http.Request.
*/
type PerformancesGetSeatFeesParams struct {

	/* AsOfDateTime.

	   Date for pricing. Defaults to today
	*/
	AsOfDateTime *string

	/* ModeOfSaleID.

	   Required, Must be a valid id from TR_MOS
	*/
	ModeOfSaleID *string

	// PerformanceID.
	PerformanceID string

	/* PriceTypeIds.

	   A list of valid ids from TR_PRICE_TYPE. Filters the results
	*/
	PriceTypeIds *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the performances get seat fees params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesGetSeatFeesParams) WithDefaults() *PerformancesGetSeatFeesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the performances get seat fees params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesGetSeatFeesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) WithTimeout(timeout time.Duration) *PerformancesGetSeatFeesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) WithContext(ctx context.Context) *PerformancesGetSeatFeesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) WithHTTPClient(client *http.Client) *PerformancesGetSeatFeesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsOfDateTime adds the asOfDateTime to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) WithAsOfDateTime(asOfDateTime *string) *PerformancesGetSeatFeesParams {
	o.SetAsOfDateTime(asOfDateTime)
	return o
}

// SetAsOfDateTime adds the asOfDateTime to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) SetAsOfDateTime(asOfDateTime *string) {
	o.AsOfDateTime = asOfDateTime
}

// WithModeOfSaleID adds the modeOfSaleID to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) WithModeOfSaleID(modeOfSaleID *string) *PerformancesGetSeatFeesParams {
	o.SetModeOfSaleID(modeOfSaleID)
	return o
}

// SetModeOfSaleID adds the modeOfSaleId to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) SetModeOfSaleID(modeOfSaleID *string) {
	o.ModeOfSaleID = modeOfSaleID
}

// WithPerformanceID adds the performanceID to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) WithPerformanceID(performanceID string) *PerformancesGetSeatFeesParams {
	o.SetPerformanceID(performanceID)
	return o
}

// SetPerformanceID adds the performanceId to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) SetPerformanceID(performanceID string) {
	o.PerformanceID = performanceID
}

// WithPriceTypeIds adds the priceTypeIds to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) WithPriceTypeIds(priceTypeIds *string) *PerformancesGetSeatFeesParams {
	o.SetPriceTypeIds(priceTypeIds)
	return o
}

// SetPriceTypeIds adds the priceTypeIds to the performances get seat fees params
func (o *PerformancesGetSeatFeesParams) SetPriceTypeIds(priceTypeIds *string) {
	o.PriceTypeIds = priceTypeIds
}

// WriteToRequest writes these params to a swagger request
func (o *PerformancesGetSeatFeesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AsOfDateTime != nil {

		// query param asOfDateTime
		var qrAsOfDateTime string

		if o.AsOfDateTime != nil {
			qrAsOfDateTime = *o.AsOfDateTime
		}
		qAsOfDateTime := qrAsOfDateTime
		if qAsOfDateTime != "" {

			if err := r.SetQueryParam("asOfDateTime", qAsOfDateTime); err != nil {
				return err
			}
		}
	}

	if o.ModeOfSaleID != nil {

		// query param modeOfSaleId
		var qrModeOfSaleID string

		if o.ModeOfSaleID != nil {
			qrModeOfSaleID = *o.ModeOfSaleID
		}
		qModeOfSaleID := qrModeOfSaleID
		if qModeOfSaleID != "" {

			if err := r.SetQueryParam("modeOfSaleId", qModeOfSaleID); err != nil {
				return err
			}
		}
	}

	// path param performanceId
	if err := r.SetPathParam("performanceId", o.PerformanceID); err != nil {
		return err
	}

	if o.PriceTypeIds != nil {

		// query param priceTypeIds
		var qrPriceTypeIds string

		if o.PriceTypeIds != nil {
			qrPriceTypeIds = *o.PriceTypeIds
		}
		qPriceTypeIds := qrPriceTypeIds
		if qPriceTypeIds != "" {

			if err := r.SetQueryParam("priceTypeIds", qPriceTypeIds); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
