// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPerformancesGetAuditEntriesParams creates a new PerformancesGetAuditEntriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPerformancesGetAuditEntriesParams() *PerformancesGetAuditEntriesParams {
	return &PerformancesGetAuditEntriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPerformancesGetAuditEntriesParamsWithTimeout creates a new PerformancesGetAuditEntriesParams object
// with the ability to set a timeout on a request.
func NewPerformancesGetAuditEntriesParamsWithTimeout(timeout time.Duration) *PerformancesGetAuditEntriesParams {
	return &PerformancesGetAuditEntriesParams{
		timeout: timeout,
	}
}

// NewPerformancesGetAuditEntriesParamsWithContext creates a new PerformancesGetAuditEntriesParams object
// with the ability to set a context for a request.
func NewPerformancesGetAuditEntriesParamsWithContext(ctx context.Context) *PerformancesGetAuditEntriesParams {
	return &PerformancesGetAuditEntriesParams{
		Context: ctx,
	}
}

// NewPerformancesGetAuditEntriesParamsWithHTTPClient creates a new PerformancesGetAuditEntriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewPerformancesGetAuditEntriesParamsWithHTTPClient(client *http.Client) *PerformancesGetAuditEntriesParams {
	return &PerformancesGetAuditEntriesParams{
		HTTPClient: client,
	}
}

/*
PerformancesGetAuditEntriesParams contains all the parameters to send to the API endpoint

	for the performances get audit entries operation.

	Typically these are written to a http.Request.
*/
type PerformancesGetAuditEntriesParams struct {

	/* Actions.

	   Comma separated list of actions to filter: I - insert, U - update, D - delete.  Passing actions=I,U,D is the same as omitting the parameter.
	*/
	Actions *string

	/* Columns.

	   Comma separated list of column names to filter entries. Inclusive of table names if used. Optional.
	*/
	Columns *string

	/* EndDateTime.

	   Optional. Bound audit entries to on or before this date/time.
	*/
	EndDateTime *string

	/* GreaterThanID.

	   Filters to entries having Ids higher than the value provided. Can be used for synchronization polling.
	*/
	GreaterThanID *string

	/* OrderByIDAsc.

	   If true, sorts entries by audit Id ascending. Default is false, which sorts most current audit item first.
	*/
	OrderByIDAsc *string

	// Page.
	Page *string

	// PageSize.
	PageSize *string

	/* PerformanceIds.

	   Comma separated list of performance ids. Optional.
	*/
	PerformanceIds *string

	/* StartDateTime.

	   Required. Filter to audit entries on or after this date/time.
	*/
	StartDateTime *string

	/* Tables.

	   Comma separated list of table names to filter entries. Available values are T_PERF or T_INVENTORY. Optional.
	*/
	Tables *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the performances get audit entries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesGetAuditEntriesParams) WithDefaults() *PerformancesGetAuditEntriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the performances get audit entries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesGetAuditEntriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithTimeout(timeout time.Duration) *PerformancesGetAuditEntriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithContext(ctx context.Context) *PerformancesGetAuditEntriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithHTTPClient(client *http.Client) *PerformancesGetAuditEntriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActions adds the actions to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithActions(actions *string) *PerformancesGetAuditEntriesParams {
	o.SetActions(actions)
	return o
}

// SetActions adds the actions to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetActions(actions *string) {
	o.Actions = actions
}

// WithColumns adds the columns to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithColumns(columns *string) *PerformancesGetAuditEntriesParams {
	o.SetColumns(columns)
	return o
}

// SetColumns adds the columns to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetColumns(columns *string) {
	o.Columns = columns
}

// WithEndDateTime adds the endDateTime to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithEndDateTime(endDateTime *string) *PerformancesGetAuditEntriesParams {
	o.SetEndDateTime(endDateTime)
	return o
}

// SetEndDateTime adds the endDateTime to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetEndDateTime(endDateTime *string) {
	o.EndDateTime = endDateTime
}

// WithGreaterThanID adds the greaterThanID to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithGreaterThanID(greaterThanID *string) *PerformancesGetAuditEntriesParams {
	o.SetGreaterThanID(greaterThanID)
	return o
}

// SetGreaterThanID adds the greaterThanId to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetGreaterThanID(greaterThanID *string) {
	o.GreaterThanID = greaterThanID
}

// WithOrderByIDAsc adds the orderByIDAsc to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithOrderByIDAsc(orderByIDAsc *string) *PerformancesGetAuditEntriesParams {
	o.SetOrderByIDAsc(orderByIDAsc)
	return o
}

// SetOrderByIDAsc adds the orderByIdAsc to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetOrderByIDAsc(orderByIDAsc *string) {
	o.OrderByIDAsc = orderByIDAsc
}

// WithPage adds the page to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithPage(page *string) *PerformancesGetAuditEntriesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithPageSize(pageSize *string) *PerformancesGetAuditEntriesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithPerformanceIds adds the performanceIds to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithPerformanceIds(performanceIds *string) *PerformancesGetAuditEntriesParams {
	o.SetPerformanceIds(performanceIds)
	return o
}

// SetPerformanceIds adds the performanceIds to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetPerformanceIds(performanceIds *string) {
	o.PerformanceIds = performanceIds
}

// WithStartDateTime adds the startDateTime to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithStartDateTime(startDateTime *string) *PerformancesGetAuditEntriesParams {
	o.SetStartDateTime(startDateTime)
	return o
}

// SetStartDateTime adds the startDateTime to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetStartDateTime(startDateTime *string) {
	o.StartDateTime = startDateTime
}

// WithTables adds the tables to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) WithTables(tables *string) *PerformancesGetAuditEntriesParams {
	o.SetTables(tables)
	return o
}

// SetTables adds the tables to the performances get audit entries params
func (o *PerformancesGetAuditEntriesParams) SetTables(tables *string) {
	o.Tables = tables
}

// WriteToRequest writes these params to a swagger request
func (o *PerformancesGetAuditEntriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Actions != nil {

		// query param actions
		var qrActions string

		if o.Actions != nil {
			qrActions = *o.Actions
		}
		qActions := qrActions
		if qActions != "" {

			if err := r.SetQueryParam("actions", qActions); err != nil {
				return err
			}
		}
	}

	if o.Columns != nil {

		// query param columns
		var qrColumns string

		if o.Columns != nil {
			qrColumns = *o.Columns
		}
		qColumns := qrColumns
		if qColumns != "" {

			if err := r.SetQueryParam("columns", qColumns); err != nil {
				return err
			}
		}
	}

	if o.EndDateTime != nil {

		// query param endDateTime
		var qrEndDateTime string

		if o.EndDateTime != nil {
			qrEndDateTime = *o.EndDateTime
		}
		qEndDateTime := qrEndDateTime
		if qEndDateTime != "" {

			if err := r.SetQueryParam("endDateTime", qEndDateTime); err != nil {
				return err
			}
		}
	}

	if o.GreaterThanID != nil {

		// query param greaterThanId
		var qrGreaterThanID string

		if o.GreaterThanID != nil {
			qrGreaterThanID = *o.GreaterThanID
		}
		qGreaterThanID := qrGreaterThanID
		if qGreaterThanID != "" {

			if err := r.SetQueryParam("greaterThanId", qGreaterThanID); err != nil {
				return err
			}
		}
	}

	if o.OrderByIDAsc != nil {

		// query param orderByIdAsc
		var qrOrderByIDAsc string

		if o.OrderByIDAsc != nil {
			qrOrderByIDAsc = *o.OrderByIDAsc
		}
		qOrderByIDAsc := qrOrderByIDAsc
		if qOrderByIDAsc != "" {

			if err := r.SetQueryParam("orderByIdAsc", qOrderByIDAsc); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PerformanceIds != nil {

		// query param performanceIds
		var qrPerformanceIds string

		if o.PerformanceIds != nil {
			qrPerformanceIds = *o.PerformanceIds
		}
		qPerformanceIds := qrPerformanceIds
		if qPerformanceIds != "" {

			if err := r.SetQueryParam("performanceIds", qPerformanceIds); err != nil {
				return err
			}
		}
	}

	if o.StartDateTime != nil {

		// query param startDateTime
		var qrStartDateTime string

		if o.StartDateTime != nil {
			qrStartDateTime = *o.StartDateTime
		}
		qStartDateTime := qrStartDateTime
		if qStartDateTime != "" {

			if err := r.SetQueryParam("startDateTime", qStartDateTime); err != nil {
				return err
			}
		}
	}

	if o.Tables != nil {

		// query param tables
		var qrTables string

		if o.Tables != nil {
			qrTables = *o.Tables
		}
		qTables := qrTables
		if qTables != "" {

			if err := r.SetQueryParam("tables", qTables); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
