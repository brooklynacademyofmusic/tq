// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPriceTypeUserGroupsGetAllParams creates a new PriceTypeUserGroupsGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPriceTypeUserGroupsGetAllParams() *PriceTypeUserGroupsGetAllParams {
	return &PriceTypeUserGroupsGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPriceTypeUserGroupsGetAllParamsWithTimeout creates a new PriceTypeUserGroupsGetAllParams object
// with the ability to set a timeout on a request.
func NewPriceTypeUserGroupsGetAllParamsWithTimeout(timeout time.Duration) *PriceTypeUserGroupsGetAllParams {
	return &PriceTypeUserGroupsGetAllParams{
		timeout: timeout,
	}
}

// NewPriceTypeUserGroupsGetAllParamsWithContext creates a new PriceTypeUserGroupsGetAllParams object
// with the ability to set a context for a request.
func NewPriceTypeUserGroupsGetAllParamsWithContext(ctx context.Context) *PriceTypeUserGroupsGetAllParams {
	return &PriceTypeUserGroupsGetAllParams{
		Context: ctx,
	}
}

// NewPriceTypeUserGroupsGetAllParamsWithHTTPClient creates a new PriceTypeUserGroupsGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewPriceTypeUserGroupsGetAllParamsWithHTTPClient(client *http.Client) *PriceTypeUserGroupsGetAllParams {
	return &PriceTypeUserGroupsGetAllParams{
		HTTPClient: client,
	}
}

/*
PriceTypeUserGroupsGetAllParams contains all the parameters to send to the API endpoint

	for the price type user groups get all operation.

	Typically these are written to a http.Request.
*/
type PriceTypeUserGroupsGetAllParams struct {

	/* PriceTypeID.

	   Only return mappings for the specified PriceType.
	*/
	PriceTypeID *string

	/* UserGroup.

	   Only return mappings for the specified UserGroup.
	*/
	UserGroup *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the price type user groups get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PriceTypeUserGroupsGetAllParams) WithDefaults() *PriceTypeUserGroupsGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the price type user groups get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PriceTypeUserGroupsGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) WithTimeout(timeout time.Duration) *PriceTypeUserGroupsGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) WithContext(ctx context.Context) *PriceTypeUserGroupsGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) WithHTTPClient(client *http.Client) *PriceTypeUserGroupsGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPriceTypeID adds the priceTypeID to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) WithPriceTypeID(priceTypeID *string) *PriceTypeUserGroupsGetAllParams {
	o.SetPriceTypeID(priceTypeID)
	return o
}

// SetPriceTypeID adds the priceTypeId to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) SetPriceTypeID(priceTypeID *string) {
	o.PriceTypeID = priceTypeID
}

// WithUserGroup adds the userGroup to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) WithUserGroup(userGroup *string) *PriceTypeUserGroupsGetAllParams {
	o.SetUserGroup(userGroup)
	return o
}

// SetUserGroup adds the userGroup to the price type user groups get all params
func (o *PriceTypeUserGroupsGetAllParams) SetUserGroup(userGroup *string) {
	o.UserGroup = userGroup
}

// WriteToRequest writes these params to a swagger request
func (o *PriceTypeUserGroupsGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PriceTypeID != nil {

		// query param priceTypeId
		var qrPriceTypeID string

		if o.PriceTypeID != nil {
			qrPriceTypeID = *o.PriceTypeID
		}
		qPriceTypeID := qrPriceTypeID
		if qPriceTypeID != "" {

			if err := r.SetQueryParam("priceTypeId", qPriceTypeID); err != nil {
				return err
			}
		}
	}

	if o.UserGroup != nil {

		// query param userGroup
		var qrUserGroup string

		if o.UserGroup != nil {
			qrUserGroup = *o.UserGroup
		}
		qUserGroup := qrUserGroup
		if qUserGroup != "" {

			if err := r.SetQueryParam("userGroup", qUserGroup); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
