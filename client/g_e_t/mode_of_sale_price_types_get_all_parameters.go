// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewModeOfSalePriceTypesGetAllParams creates a new ModeOfSalePriceTypesGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewModeOfSalePriceTypesGetAllParams() *ModeOfSalePriceTypesGetAllParams {
	return &ModeOfSalePriceTypesGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewModeOfSalePriceTypesGetAllParamsWithTimeout creates a new ModeOfSalePriceTypesGetAllParams object
// with the ability to set a timeout on a request.
func NewModeOfSalePriceTypesGetAllParamsWithTimeout(timeout time.Duration) *ModeOfSalePriceTypesGetAllParams {
	return &ModeOfSalePriceTypesGetAllParams{
		timeout: timeout,
	}
}

// NewModeOfSalePriceTypesGetAllParamsWithContext creates a new ModeOfSalePriceTypesGetAllParams object
// with the ability to set a context for a request.
func NewModeOfSalePriceTypesGetAllParamsWithContext(ctx context.Context) *ModeOfSalePriceTypesGetAllParams {
	return &ModeOfSalePriceTypesGetAllParams{
		Context: ctx,
	}
}

// NewModeOfSalePriceTypesGetAllParamsWithHTTPClient creates a new ModeOfSalePriceTypesGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewModeOfSalePriceTypesGetAllParamsWithHTTPClient(client *http.Client) *ModeOfSalePriceTypesGetAllParams {
	return &ModeOfSalePriceTypesGetAllParams{
		HTTPClient: client,
	}
}

/*
ModeOfSalePriceTypesGetAllParams contains all the parameters to send to the API endpoint

	for the mode of sale price types get all operation.

	Typically these are written to a http.Request.
*/
type ModeOfSalePriceTypesGetAllParams struct {

	// ModeOfSaleID.
	ModeOfSaleID *string

	// PriceTypeID.
	PriceTypeID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the mode of sale price types get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ModeOfSalePriceTypesGetAllParams) WithDefaults() *ModeOfSalePriceTypesGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the mode of sale price types get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ModeOfSalePriceTypesGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) WithTimeout(timeout time.Duration) *ModeOfSalePriceTypesGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) WithContext(ctx context.Context) *ModeOfSalePriceTypesGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) WithHTTPClient(client *http.Client) *ModeOfSalePriceTypesGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModeOfSaleID adds the modeOfSaleID to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) WithModeOfSaleID(modeOfSaleID *string) *ModeOfSalePriceTypesGetAllParams {
	o.SetModeOfSaleID(modeOfSaleID)
	return o
}

// SetModeOfSaleID adds the modeOfSaleId to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) SetModeOfSaleID(modeOfSaleID *string) {
	o.ModeOfSaleID = modeOfSaleID
}

// WithPriceTypeID adds the priceTypeID to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) WithPriceTypeID(priceTypeID *string) *ModeOfSalePriceTypesGetAllParams {
	o.SetPriceTypeID(priceTypeID)
	return o
}

// SetPriceTypeID adds the priceTypeId to the mode of sale price types get all params
func (o *ModeOfSalePriceTypesGetAllParams) SetPriceTypeID(priceTypeID *string) {
	o.PriceTypeID = priceTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *ModeOfSalePriceTypesGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ModeOfSaleID != nil {

		// query param modeOfSaleId
		var qrModeOfSaleID string

		if o.ModeOfSaleID != nil {
			qrModeOfSaleID = *o.ModeOfSaleID
		}
		qModeOfSaleID := qrModeOfSaleID
		if qModeOfSaleID != "" {

			if err := r.SetQueryParam("modeOfSaleId", qModeOfSaleID); err != nil {
				return err
			}
		}
	}

	if o.PriceTypeID != nil {

		// query param priceTypeId
		var qrPriceTypeID string

		if o.PriceTypeID != nil {
			qrPriceTypeID = *o.PriceTypeID
		}
		qPriceTypeID := qrPriceTypeID
		if qPriceTypeID != "" {

			if err := r.SetQueryParam("priceTypeId", qPriceTypeID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
