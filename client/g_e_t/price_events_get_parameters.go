// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPriceEventsGetParams creates a new PriceEventsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPriceEventsGetParams() *PriceEventsGetParams {
	return &PriceEventsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPriceEventsGetParamsWithTimeout creates a new PriceEventsGetParams object
// with the ability to set a timeout on a request.
func NewPriceEventsGetParamsWithTimeout(timeout time.Duration) *PriceEventsGetParams {
	return &PriceEventsGetParams{
		timeout: timeout,
	}
}

// NewPriceEventsGetParamsWithContext creates a new PriceEventsGetParams object
// with the ability to set a context for a request.
func NewPriceEventsGetParamsWithContext(ctx context.Context) *PriceEventsGetParams {
	return &PriceEventsGetParams{
		Context: ctx,
	}
}

// NewPriceEventsGetParamsWithHTTPClient creates a new PriceEventsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewPriceEventsGetParamsWithHTTPClient(client *http.Client) *PriceEventsGetParams {
	return &PriceEventsGetParams{
		HTTPClient: client,
	}
}

/*
PriceEventsGetParams contains all the parameters to send to the API endpoint

	for the price events get operation.

	Typically these are written to a http.Request.
*/
type PriceEventsGetParams struct {

	// PriceEventID.
	PriceEventID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the price events get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PriceEventsGetParams) WithDefaults() *PriceEventsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the price events get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PriceEventsGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the price events get params
func (o *PriceEventsGetParams) WithTimeout(timeout time.Duration) *PriceEventsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the price events get params
func (o *PriceEventsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the price events get params
func (o *PriceEventsGetParams) WithContext(ctx context.Context) *PriceEventsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the price events get params
func (o *PriceEventsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the price events get params
func (o *PriceEventsGetParams) WithHTTPClient(client *http.Client) *PriceEventsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the price events get params
func (o *PriceEventsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPriceEventID adds the priceEventID to the price events get params
func (o *PriceEventsGetParams) WithPriceEventID(priceEventID string) *PriceEventsGetParams {
	o.SetPriceEventID(priceEventID)
	return o
}

// SetPriceEventID adds the priceEventId to the price events get params
func (o *PriceEventsGetParams) SetPriceEventID(priceEventID string) {
	o.PriceEventID = priceEventID
}

// WriteToRequest writes these params to a swagger request
func (o *PriceEventsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param priceEventId
	if err := r.SetPathParam("priceEventId", o.PriceEventID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
