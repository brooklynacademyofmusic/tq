// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWorkerQualificationsGetAllParams creates a new WorkerQualificationsGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWorkerQualificationsGetAllParams() *WorkerQualificationsGetAllParams {
	return &WorkerQualificationsGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewWorkerQualificationsGetAllParamsWithTimeout creates a new WorkerQualificationsGetAllParams object
// with the ability to set a timeout on a request.
func NewWorkerQualificationsGetAllParamsWithTimeout(timeout time.Duration) *WorkerQualificationsGetAllParams {
	return &WorkerQualificationsGetAllParams{
		timeout: timeout,
	}
}

// NewWorkerQualificationsGetAllParamsWithContext creates a new WorkerQualificationsGetAllParams object
// with the ability to set a context for a request.
func NewWorkerQualificationsGetAllParamsWithContext(ctx context.Context) *WorkerQualificationsGetAllParams {
	return &WorkerQualificationsGetAllParams{
		Context: ctx,
	}
}

// NewWorkerQualificationsGetAllParamsWithHTTPClient creates a new WorkerQualificationsGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewWorkerQualificationsGetAllParamsWithHTTPClient(client *http.Client) *WorkerQualificationsGetAllParams {
	return &WorkerQualificationsGetAllParams{
		HTTPClient: client,
	}
}

/*
WorkerQualificationsGetAllParams contains all the parameters to send to the API endpoint

	for the worker qualifications get all operation.

	Typically these are written to a http.Request.
*/
type WorkerQualificationsGetAllParams struct {

	/* ConstituentIds.

	   A comma separated list of constituent IDs
	*/
	ConstituentIds *string

	/* IncludeAffiliations.

	   Include all of the constituent's affiliates in the results (default: false)
	*/
	IncludeAffiliations *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the worker qualifications get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkerQualificationsGetAllParams) WithDefaults() *WorkerQualificationsGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the worker qualifications get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkerQualificationsGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) WithTimeout(timeout time.Duration) *WorkerQualificationsGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) WithContext(ctx context.Context) *WorkerQualificationsGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) WithHTTPClient(client *http.Client) *WorkerQualificationsGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConstituentIds adds the constituentIds to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) WithConstituentIds(constituentIds *string) *WorkerQualificationsGetAllParams {
	o.SetConstituentIds(constituentIds)
	return o
}

// SetConstituentIds adds the constituentIds to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) SetConstituentIds(constituentIds *string) {
	o.ConstituentIds = constituentIds
}

// WithIncludeAffiliations adds the includeAffiliations to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) WithIncludeAffiliations(includeAffiliations *string) *WorkerQualificationsGetAllParams {
	o.SetIncludeAffiliations(includeAffiliations)
	return o
}

// SetIncludeAffiliations adds the includeAffiliations to the worker qualifications get all params
func (o *WorkerQualificationsGetAllParams) SetIncludeAffiliations(includeAffiliations *string) {
	o.IncludeAffiliations = includeAffiliations
}

// WriteToRequest writes these params to a swagger request
func (o *WorkerQualificationsGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConstituentIds != nil {

		// query param constituentIds
		var qrConstituentIds string

		if o.ConstituentIds != nil {
			qrConstituentIds = *o.ConstituentIds
		}
		qConstituentIds := qrConstituentIds
		if qConstituentIds != "" {

			if err := r.SetQueryParam("constituentIds", qConstituentIds); err != nil {
				return err
			}
		}
	}

	if o.IncludeAffiliations != nil {

		// query param includeAffiliations
		var qrIncludeAffiliations string

		if o.IncludeAffiliations != nil {
			qrIncludeAffiliations = *o.IncludeAffiliations
		}
		qIncludeAffiliations := qrIncludeAffiliations
		if qIncludeAffiliations != "" {

			if err := r.SetQueryParam("includeAffiliations", qIncludeAffiliations); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
