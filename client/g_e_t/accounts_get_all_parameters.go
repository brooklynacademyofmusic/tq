// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAccountsGetAllParams creates a new AccountsGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAccountsGetAllParams() *AccountsGetAllParams {
	return &AccountsGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAccountsGetAllParamsWithTimeout creates a new AccountsGetAllParams object
// with the ability to set a timeout on a request.
func NewAccountsGetAllParamsWithTimeout(timeout time.Duration) *AccountsGetAllParams {
	return &AccountsGetAllParams{
		timeout: timeout,
	}
}

// NewAccountsGetAllParamsWithContext creates a new AccountsGetAllParams object
// with the ability to set a context for a request.
func NewAccountsGetAllParamsWithContext(ctx context.Context) *AccountsGetAllParams {
	return &AccountsGetAllParams{
		Context: ctx,
	}
}

// NewAccountsGetAllParamsWithHTTPClient creates a new AccountsGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewAccountsGetAllParamsWithHTTPClient(client *http.Client) *AccountsGetAllParams {
	return &AccountsGetAllParams{
		HTTPClient: client,
	}
}

/*
AccountsGetAllParams contains all the parameters to send to the API endpoint

	for the accounts get all operation.

	Typically these are written to a http.Request.
*/
type AccountsGetAllParams struct {

	/* AccountTypeID.

	   Filter by account type ID.
	*/
	AccountTypeID *string

	/* ConstituentID.

	   Limit results by constituent
	*/
	ConstituentID *string

	/* IncludeAffiliates.

	   Accounts for visible affiliates are shown by default (true).
	*/
	IncludeAffiliates *string

	/* IncludeInactive.

	   Inactive accounts are included by default (true).
	*/
	IncludeInactive *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the accounts get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccountsGetAllParams) WithDefaults() *AccountsGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the accounts get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccountsGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the accounts get all params
func (o *AccountsGetAllParams) WithTimeout(timeout time.Duration) *AccountsGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the accounts get all params
func (o *AccountsGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the accounts get all params
func (o *AccountsGetAllParams) WithContext(ctx context.Context) *AccountsGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the accounts get all params
func (o *AccountsGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the accounts get all params
func (o *AccountsGetAllParams) WithHTTPClient(client *http.Client) *AccountsGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the accounts get all params
func (o *AccountsGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountTypeID adds the accountTypeID to the accounts get all params
func (o *AccountsGetAllParams) WithAccountTypeID(accountTypeID *string) *AccountsGetAllParams {
	o.SetAccountTypeID(accountTypeID)
	return o
}

// SetAccountTypeID adds the accountTypeId to the accounts get all params
func (o *AccountsGetAllParams) SetAccountTypeID(accountTypeID *string) {
	o.AccountTypeID = accountTypeID
}

// WithConstituentID adds the constituentID to the accounts get all params
func (o *AccountsGetAllParams) WithConstituentID(constituentID *string) *AccountsGetAllParams {
	o.SetConstituentID(constituentID)
	return o
}

// SetConstituentID adds the constituentId to the accounts get all params
func (o *AccountsGetAllParams) SetConstituentID(constituentID *string) {
	o.ConstituentID = constituentID
}

// WithIncludeAffiliates adds the includeAffiliates to the accounts get all params
func (o *AccountsGetAllParams) WithIncludeAffiliates(includeAffiliates *string) *AccountsGetAllParams {
	o.SetIncludeAffiliates(includeAffiliates)
	return o
}

// SetIncludeAffiliates adds the includeAffiliates to the accounts get all params
func (o *AccountsGetAllParams) SetIncludeAffiliates(includeAffiliates *string) {
	o.IncludeAffiliates = includeAffiliates
}

// WithIncludeInactive adds the includeInactive to the accounts get all params
func (o *AccountsGetAllParams) WithIncludeInactive(includeInactive *string) *AccountsGetAllParams {
	o.SetIncludeInactive(includeInactive)
	return o
}

// SetIncludeInactive adds the includeInactive to the accounts get all params
func (o *AccountsGetAllParams) SetIncludeInactive(includeInactive *string) {
	o.IncludeInactive = includeInactive
}

// WriteToRequest writes these params to a swagger request
func (o *AccountsGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountTypeID != nil {

		// query param accountTypeId
		var qrAccountTypeID string

		if o.AccountTypeID != nil {
			qrAccountTypeID = *o.AccountTypeID
		}
		qAccountTypeID := qrAccountTypeID
		if qAccountTypeID != "" {

			if err := r.SetQueryParam("accountTypeId", qAccountTypeID); err != nil {
				return err
			}
		}
	}

	if o.ConstituentID != nil {

		// query param constituentId
		var qrConstituentID string

		if o.ConstituentID != nil {
			qrConstituentID = *o.ConstituentID
		}
		qConstituentID := qrConstituentID
		if qConstituentID != "" {

			if err := r.SetQueryParam("constituentId", qConstituentID); err != nil {
				return err
			}
		}
	}

	if o.IncludeAffiliates != nil {

		// query param includeAffiliates
		var qrIncludeAffiliates string

		if o.IncludeAffiliates != nil {
			qrIncludeAffiliates = *o.IncludeAffiliates
		}
		qIncludeAffiliates := qrIncludeAffiliates
		if qIncludeAffiliates != "" {

			if err := r.SetQueryParam("includeAffiliates", qIncludeAffiliates); err != nil {
				return err
			}
		}
	}

	if o.IncludeInactive != nil {

		// query param includeInactive
		var qrIncludeInactive string

		if o.IncludeInactive != nil {
			qrIncludeInactive = *o.IncludeInactive
		}
		qIncludeInactive := qrIncludeInactive
		if qIncludeInactive != "" {

			if err := r.SetQueryParam("includeInactive", qIncludeInactive); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
