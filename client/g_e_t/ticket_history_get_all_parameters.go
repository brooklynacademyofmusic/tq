// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewTicketHistoryGetAllParams creates a new TicketHistoryGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTicketHistoryGetAllParams() *TicketHistoryGetAllParams {
	return &TicketHistoryGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTicketHistoryGetAllParamsWithTimeout creates a new TicketHistoryGetAllParams object
// with the ability to set a timeout on a request.
func NewTicketHistoryGetAllParamsWithTimeout(timeout time.Duration) *TicketHistoryGetAllParams {
	return &TicketHistoryGetAllParams{
		timeout: timeout,
	}
}

// NewTicketHistoryGetAllParamsWithContext creates a new TicketHistoryGetAllParams object
// with the ability to set a context for a request.
func NewTicketHistoryGetAllParamsWithContext(ctx context.Context) *TicketHistoryGetAllParams {
	return &TicketHistoryGetAllParams{
		Context: ctx,
	}
}

// NewTicketHistoryGetAllParamsWithHTTPClient creates a new TicketHistoryGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewTicketHistoryGetAllParamsWithHTTPClient(client *http.Client) *TicketHistoryGetAllParams {
	return &TicketHistoryGetAllParams{
		HTTPClient: client,
	}
}

/*
TicketHistoryGetAllParams contains all the parameters to send to the API endpoint

	for the ticket history get all operation.

	Typically these are written to a http.Request.
*/
type TicketHistoryGetAllParams struct {

	/* ConstituentID.

	   Limit results by constituent
	*/
	ConstituentID *string

	/* IncludeAffiliations.

	   Include all of the constituent's affiliates in the results (default: true)
	*/
	IncludeAffiliations *string

	// OrderEndDate.
	OrderEndDate *string

	// OrderStartDate.
	OrderStartDate *string

	// PerformanceEndDate.
	PerformanceEndDate *string

	// PerformanceID.
	PerformanceID *string

	// PerformanceStartDate.
	PerformanceStartDate *string

	// ProductionSeasonID.
	ProductionSeasonID *string

	// SeasonID.
	SeasonID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the ticket history get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TicketHistoryGetAllParams) WithDefaults() *TicketHistoryGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the ticket history get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TicketHistoryGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithTimeout(timeout time.Duration) *TicketHistoryGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithContext(ctx context.Context) *TicketHistoryGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithHTTPClient(client *http.Client) *TicketHistoryGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConstituentID adds the constituentID to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithConstituentID(constituentID *string) *TicketHistoryGetAllParams {
	o.SetConstituentID(constituentID)
	return o
}

// SetConstituentID adds the constituentId to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetConstituentID(constituentID *string) {
	o.ConstituentID = constituentID
}

// WithIncludeAffiliations adds the includeAffiliations to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithIncludeAffiliations(includeAffiliations *string) *TicketHistoryGetAllParams {
	o.SetIncludeAffiliations(includeAffiliations)
	return o
}

// SetIncludeAffiliations adds the includeAffiliations to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetIncludeAffiliations(includeAffiliations *string) {
	o.IncludeAffiliations = includeAffiliations
}

// WithOrderEndDate adds the orderEndDate to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithOrderEndDate(orderEndDate *string) *TicketHistoryGetAllParams {
	o.SetOrderEndDate(orderEndDate)
	return o
}

// SetOrderEndDate adds the orderEndDate to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetOrderEndDate(orderEndDate *string) {
	o.OrderEndDate = orderEndDate
}

// WithOrderStartDate adds the orderStartDate to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithOrderStartDate(orderStartDate *string) *TicketHistoryGetAllParams {
	o.SetOrderStartDate(orderStartDate)
	return o
}

// SetOrderStartDate adds the orderStartDate to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetOrderStartDate(orderStartDate *string) {
	o.OrderStartDate = orderStartDate
}

// WithPerformanceEndDate adds the performanceEndDate to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithPerformanceEndDate(performanceEndDate *string) *TicketHistoryGetAllParams {
	o.SetPerformanceEndDate(performanceEndDate)
	return o
}

// SetPerformanceEndDate adds the performanceEndDate to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetPerformanceEndDate(performanceEndDate *string) {
	o.PerformanceEndDate = performanceEndDate
}

// WithPerformanceID adds the performanceID to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithPerformanceID(performanceID *string) *TicketHistoryGetAllParams {
	o.SetPerformanceID(performanceID)
	return o
}

// SetPerformanceID adds the performanceId to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetPerformanceID(performanceID *string) {
	o.PerformanceID = performanceID
}

// WithPerformanceStartDate adds the performanceStartDate to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithPerformanceStartDate(performanceStartDate *string) *TicketHistoryGetAllParams {
	o.SetPerformanceStartDate(performanceStartDate)
	return o
}

// SetPerformanceStartDate adds the performanceStartDate to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetPerformanceStartDate(performanceStartDate *string) {
	o.PerformanceStartDate = performanceStartDate
}

// WithProductionSeasonID adds the productionSeasonID to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithProductionSeasonID(productionSeasonID *string) *TicketHistoryGetAllParams {
	o.SetProductionSeasonID(productionSeasonID)
	return o
}

// SetProductionSeasonID adds the productionSeasonId to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetProductionSeasonID(productionSeasonID *string) {
	o.ProductionSeasonID = productionSeasonID
}

// WithSeasonID adds the seasonID to the ticket history get all params
func (o *TicketHistoryGetAllParams) WithSeasonID(seasonID *string) *TicketHistoryGetAllParams {
	o.SetSeasonID(seasonID)
	return o
}

// SetSeasonID adds the seasonId to the ticket history get all params
func (o *TicketHistoryGetAllParams) SetSeasonID(seasonID *string) {
	o.SeasonID = seasonID
}

// WriteToRequest writes these params to a swagger request
func (o *TicketHistoryGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConstituentID != nil {

		// query param constituentId
		var qrConstituentID string

		if o.ConstituentID != nil {
			qrConstituentID = *o.ConstituentID
		}
		qConstituentID := qrConstituentID
		if qConstituentID != "" {

			if err := r.SetQueryParam("constituentId", qConstituentID); err != nil {
				return err
			}
		}
	}

	if o.IncludeAffiliations != nil {

		// query param includeAffiliations
		var qrIncludeAffiliations string

		if o.IncludeAffiliations != nil {
			qrIncludeAffiliations = *o.IncludeAffiliations
		}
		qIncludeAffiliations := qrIncludeAffiliations
		if qIncludeAffiliations != "" {

			if err := r.SetQueryParam("includeAffiliations", qIncludeAffiliations); err != nil {
				return err
			}
		}
	}

	if o.OrderEndDate != nil {

		// query param orderEndDate
		var qrOrderEndDate string

		if o.OrderEndDate != nil {
			qrOrderEndDate = *o.OrderEndDate
		}
		qOrderEndDate := qrOrderEndDate
		if qOrderEndDate != "" {

			if err := r.SetQueryParam("orderEndDate", qOrderEndDate); err != nil {
				return err
			}
		}
	}

	if o.OrderStartDate != nil {

		// query param orderStartDate
		var qrOrderStartDate string

		if o.OrderStartDate != nil {
			qrOrderStartDate = *o.OrderStartDate
		}
		qOrderStartDate := qrOrderStartDate
		if qOrderStartDate != "" {

			if err := r.SetQueryParam("orderStartDate", qOrderStartDate); err != nil {
				return err
			}
		}
	}

	if o.PerformanceEndDate != nil {

		// query param performanceEndDate
		var qrPerformanceEndDate string

		if o.PerformanceEndDate != nil {
			qrPerformanceEndDate = *o.PerformanceEndDate
		}
		qPerformanceEndDate := qrPerformanceEndDate
		if qPerformanceEndDate != "" {

			if err := r.SetQueryParam("performanceEndDate", qPerformanceEndDate); err != nil {
				return err
			}
		}
	}

	if o.PerformanceID != nil {

		// query param performanceId
		var qrPerformanceID string

		if o.PerformanceID != nil {
			qrPerformanceID = *o.PerformanceID
		}
		qPerformanceID := qrPerformanceID
		if qPerformanceID != "" {

			if err := r.SetQueryParam("performanceId", qPerformanceID); err != nil {
				return err
			}
		}
	}

	if o.PerformanceStartDate != nil {

		// query param performanceStartDate
		var qrPerformanceStartDate string

		if o.PerformanceStartDate != nil {
			qrPerformanceStartDate = *o.PerformanceStartDate
		}
		qPerformanceStartDate := qrPerformanceStartDate
		if qPerformanceStartDate != "" {

			if err := r.SetQueryParam("performanceStartDate", qPerformanceStartDate); err != nil {
				return err
			}
		}
	}

	if o.ProductionSeasonID != nil {

		// query param productionSeasonId
		var qrProductionSeasonID string

		if o.ProductionSeasonID != nil {
			qrProductionSeasonID = *o.ProductionSeasonID
		}
		qProductionSeasonID := qrProductionSeasonID
		if qProductionSeasonID != "" {

			if err := r.SetQueryParam("productionSeasonId", qProductionSeasonID); err != nil {
				return err
			}
		}
	}

	if o.SeasonID != nil {

		// query param seasonId
		var qrSeasonID string

		if o.SeasonID != nil {
			qrSeasonID = *o.SeasonID
		}
		qSeasonID := qrSeasonID
		if qSeasonID != "" {

			if err := r.SetQueryParam("seasonId", qSeasonID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
