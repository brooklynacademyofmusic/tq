// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPriceTypesGetValidPriceTypesParams creates a new PriceTypesGetValidPriceTypesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPriceTypesGetValidPriceTypesParams() *PriceTypesGetValidPriceTypesParams {
	return &PriceTypesGetValidPriceTypesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPriceTypesGetValidPriceTypesParamsWithTimeout creates a new PriceTypesGetValidPriceTypesParams object
// with the ability to set a timeout on a request.
func NewPriceTypesGetValidPriceTypesParamsWithTimeout(timeout time.Duration) *PriceTypesGetValidPriceTypesParams {
	return &PriceTypesGetValidPriceTypesParams{
		timeout: timeout,
	}
}

// NewPriceTypesGetValidPriceTypesParamsWithContext creates a new PriceTypesGetValidPriceTypesParams object
// with the ability to set a context for a request.
func NewPriceTypesGetValidPriceTypesParamsWithContext(ctx context.Context) *PriceTypesGetValidPriceTypesParams {
	return &PriceTypesGetValidPriceTypesParams{
		Context: ctx,
	}
}

// NewPriceTypesGetValidPriceTypesParamsWithHTTPClient creates a new PriceTypesGetValidPriceTypesParams object
// with the ability to set a custom HTTPClient for a request.
func NewPriceTypesGetValidPriceTypesParamsWithHTTPClient(client *http.Client) *PriceTypesGetValidPriceTypesParams {
	return &PriceTypesGetValidPriceTypesParams{
		HTTPClient: client,
	}
}

/*
PriceTypesGetValidPriceTypesParams contains all the parameters to send to the API endpoint

	for the price types get valid price types operation.

	Typically these are written to a http.Request.
*/
type PriceTypesGetValidPriceTypesParams struct {

	// ModeOfSaleID.
	ModeOfSaleID *string

	// OrderDateTime.
	OrderDateTime *string

	// PackageID.
	PackageID *string

	// PerformanceIds.
	PerformanceIds *string

	// SourceID.
	SourceID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the price types get valid price types params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PriceTypesGetValidPriceTypesParams) WithDefaults() *PriceTypesGetValidPriceTypesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the price types get valid price types params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PriceTypesGetValidPriceTypesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) WithTimeout(timeout time.Duration) *PriceTypesGetValidPriceTypesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) WithContext(ctx context.Context) *PriceTypesGetValidPriceTypesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) WithHTTPClient(client *http.Client) *PriceTypesGetValidPriceTypesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModeOfSaleID adds the modeOfSaleID to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) WithModeOfSaleID(modeOfSaleID *string) *PriceTypesGetValidPriceTypesParams {
	o.SetModeOfSaleID(modeOfSaleID)
	return o
}

// SetModeOfSaleID adds the modeOfSaleId to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) SetModeOfSaleID(modeOfSaleID *string) {
	o.ModeOfSaleID = modeOfSaleID
}

// WithOrderDateTime adds the orderDateTime to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) WithOrderDateTime(orderDateTime *string) *PriceTypesGetValidPriceTypesParams {
	o.SetOrderDateTime(orderDateTime)
	return o
}

// SetOrderDateTime adds the orderDateTime to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) SetOrderDateTime(orderDateTime *string) {
	o.OrderDateTime = orderDateTime
}

// WithPackageID adds the packageID to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) WithPackageID(packageID *string) *PriceTypesGetValidPriceTypesParams {
	o.SetPackageID(packageID)
	return o
}

// SetPackageID adds the packageId to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) SetPackageID(packageID *string) {
	o.PackageID = packageID
}

// WithPerformanceIds adds the performanceIds to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) WithPerformanceIds(performanceIds *string) *PriceTypesGetValidPriceTypesParams {
	o.SetPerformanceIds(performanceIds)
	return o
}

// SetPerformanceIds adds the performanceIds to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) SetPerformanceIds(performanceIds *string) {
	o.PerformanceIds = performanceIds
}

// WithSourceID adds the sourceID to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) WithSourceID(sourceID *string) *PriceTypesGetValidPriceTypesParams {
	o.SetSourceID(sourceID)
	return o
}

// SetSourceID adds the sourceId to the price types get valid price types params
func (o *PriceTypesGetValidPriceTypesParams) SetSourceID(sourceID *string) {
	o.SourceID = sourceID
}

// WriteToRequest writes these params to a swagger request
func (o *PriceTypesGetValidPriceTypesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ModeOfSaleID != nil {

		// query param modeOfSaleId
		var qrModeOfSaleID string

		if o.ModeOfSaleID != nil {
			qrModeOfSaleID = *o.ModeOfSaleID
		}
		qModeOfSaleID := qrModeOfSaleID
		if qModeOfSaleID != "" {

			if err := r.SetQueryParam("modeOfSaleId", qModeOfSaleID); err != nil {
				return err
			}
		}
	}

	if o.OrderDateTime != nil {

		// query param orderDateTime
		var qrOrderDateTime string

		if o.OrderDateTime != nil {
			qrOrderDateTime = *o.OrderDateTime
		}
		qOrderDateTime := qrOrderDateTime
		if qOrderDateTime != "" {

			if err := r.SetQueryParam("orderDateTime", qOrderDateTime); err != nil {
				return err
			}
		}
	}

	if o.PackageID != nil {

		// query param packageId
		var qrPackageID string

		if o.PackageID != nil {
			qrPackageID = *o.PackageID
		}
		qPackageID := qrPackageID
		if qPackageID != "" {

			if err := r.SetQueryParam("packageId", qPackageID); err != nil {
				return err
			}
		}
	}

	if o.PerformanceIds != nil {

		// query param performanceIds
		var qrPerformanceIds string

		if o.PerformanceIds != nil {
			qrPerformanceIds = *o.PerformanceIds
		}
		qPerformanceIds := qrPerformanceIds
		if qPerformanceIds != "" {

			if err := r.SetQueryParam("performanceIds", qPerformanceIds); err != nil {
				return err
			}
		}
	}

	if o.SourceID != nil {

		// query param sourceId
		var qrSourceID string

		if o.SourceID != nil {
			qrSourceID = *o.SourceID
		}
		qSourceID := qrSourceID
		if qSourceID != "" {

			if err := r.SetQueryParam("sourceId", qSourceID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
