// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skysyzygy/tq/models"
)

// PaymentsAvailableForRefundReader is a Reader for the PaymentsAvailableForRefund structure.
type PaymentsAvailableForRefundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PaymentsAvailableForRefundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPaymentsAvailableForRefundOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /TXN/Payments/AvailableForRefund] Payments_AvailableForRefund", response, response.Code())
	}
}

// NewPaymentsAvailableForRefundOK creates a PaymentsAvailableForRefundOK with default headers values
func NewPaymentsAvailableForRefundOK() *PaymentsAvailableForRefundOK {
	return &PaymentsAvailableForRefundOK{}
}

/*
PaymentsAvailableForRefundOK describes a response with status code 200, with default header values.

OK
*/
type PaymentsAvailableForRefundOK struct {
	Payload []*models.PaymentAvailableForRefund
}

// IsSuccess returns true when this payments available for refund o k response has a 2xx status code
func (o *PaymentsAvailableForRefundOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this payments available for refund o k response has a 3xx status code
func (o *PaymentsAvailableForRefundOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payments available for refund o k response has a 4xx status code
func (o *PaymentsAvailableForRefundOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this payments available for refund o k response has a 5xx status code
func (o *PaymentsAvailableForRefundOK) IsServerError() bool {
	return false
}

// IsCode returns true when this payments available for refund o k response a status code equal to that given
func (o *PaymentsAvailableForRefundOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the payments available for refund o k response
func (o *PaymentsAvailableForRefundOK) Code() int {
	return 200
}

func (o *PaymentsAvailableForRefundOK) Error() string {
	return fmt.Sprintf("[GET /TXN/Payments/AvailableForRefund][%d] paymentsAvailableForRefundOK  %+v", 200, o.Payload)
}

func (o *PaymentsAvailableForRefundOK) String() string {
	return fmt.Sprintf("[GET /TXN/Payments/AvailableForRefund][%d] paymentsAvailableForRefundOK  %+v", 200, o.Payload)
}

func (o *PaymentsAvailableForRefundOK) GetPayload() []*models.PaymentAvailableForRefund {
	return o.Payload
}

func (o *PaymentsAvailableForRefundOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
