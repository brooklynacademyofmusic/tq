// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSessionOrderSearchParams creates a new SessionOrderSearchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSessionOrderSearchParams() *SessionOrderSearchParams {
	return &SessionOrderSearchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSessionOrderSearchParamsWithTimeout creates a new SessionOrderSearchParams object
// with the ability to set a timeout on a request.
func NewSessionOrderSearchParamsWithTimeout(timeout time.Duration) *SessionOrderSearchParams {
	return &SessionOrderSearchParams{
		timeout: timeout,
	}
}

// NewSessionOrderSearchParamsWithContext creates a new SessionOrderSearchParams object
// with the ability to set a context for a request.
func NewSessionOrderSearchParamsWithContext(ctx context.Context) *SessionOrderSearchParams {
	return &SessionOrderSearchParams{
		Context: ctx,
	}
}

// NewSessionOrderSearchParamsWithHTTPClient creates a new SessionOrderSearchParams object
// with the ability to set a custom HTTPClient for a request.
func NewSessionOrderSearchParamsWithHTTPClient(client *http.Client) *SessionOrderSearchParams {
	return &SessionOrderSearchParams{
		HTTPClient: client,
	}
}

/*
SessionOrderSearchParams contains all the parameters to send to the API endpoint

	for the session order search operation.

	Typically these are written to a http.Request.
*/
type SessionOrderSearchParams struct {

	// DeliveryMethodID.
	DeliveryMethodID *string

	/* IncludeAffiliations.

	   Include all of the constituent's affiliates in the results (default: false)
	*/
	IncludeAffiliations *string

	/* IncludeUnfulfilledRollovers.

	   Include unfulfilled rollovers in the results (default: true)
	*/
	IncludeUnfulfilledRollovers *string

	// ModeOfSaleID.
	ModeOfSaleID *string

	// PerfEndDate.
	PerfEndDate *string

	// PerfStartDate.
	PerfStartDate *string

	// RenewalsOnly.
	RenewalsOnly *string

	// SeasonID.
	SeasonID *string

	// SessionKey.
	SessionKey string

	// UnprintedOnly.
	UnprintedOnly *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the session order search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SessionOrderSearchParams) WithDefaults() *SessionOrderSearchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the session order search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SessionOrderSearchParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the session order search params
func (o *SessionOrderSearchParams) WithTimeout(timeout time.Duration) *SessionOrderSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the session order search params
func (o *SessionOrderSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the session order search params
func (o *SessionOrderSearchParams) WithContext(ctx context.Context) *SessionOrderSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the session order search params
func (o *SessionOrderSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the session order search params
func (o *SessionOrderSearchParams) WithHTTPClient(client *http.Client) *SessionOrderSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the session order search params
func (o *SessionOrderSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeliveryMethodID adds the deliveryMethodID to the session order search params
func (o *SessionOrderSearchParams) WithDeliveryMethodID(deliveryMethodID *string) *SessionOrderSearchParams {
	o.SetDeliveryMethodID(deliveryMethodID)
	return o
}

// SetDeliveryMethodID adds the deliveryMethodId to the session order search params
func (o *SessionOrderSearchParams) SetDeliveryMethodID(deliveryMethodID *string) {
	o.DeliveryMethodID = deliveryMethodID
}

// WithIncludeAffiliations adds the includeAffiliations to the session order search params
func (o *SessionOrderSearchParams) WithIncludeAffiliations(includeAffiliations *string) *SessionOrderSearchParams {
	o.SetIncludeAffiliations(includeAffiliations)
	return o
}

// SetIncludeAffiliations adds the includeAffiliations to the session order search params
func (o *SessionOrderSearchParams) SetIncludeAffiliations(includeAffiliations *string) {
	o.IncludeAffiliations = includeAffiliations
}

// WithIncludeUnfulfilledRollovers adds the includeUnfulfilledRollovers to the session order search params
func (o *SessionOrderSearchParams) WithIncludeUnfulfilledRollovers(includeUnfulfilledRollovers *string) *SessionOrderSearchParams {
	o.SetIncludeUnfulfilledRollovers(includeUnfulfilledRollovers)
	return o
}

// SetIncludeUnfulfilledRollovers adds the includeUnfulfilledRollovers to the session order search params
func (o *SessionOrderSearchParams) SetIncludeUnfulfilledRollovers(includeUnfulfilledRollovers *string) {
	o.IncludeUnfulfilledRollovers = includeUnfulfilledRollovers
}

// WithModeOfSaleID adds the modeOfSaleID to the session order search params
func (o *SessionOrderSearchParams) WithModeOfSaleID(modeOfSaleID *string) *SessionOrderSearchParams {
	o.SetModeOfSaleID(modeOfSaleID)
	return o
}

// SetModeOfSaleID adds the modeOfSaleId to the session order search params
func (o *SessionOrderSearchParams) SetModeOfSaleID(modeOfSaleID *string) {
	o.ModeOfSaleID = modeOfSaleID
}

// WithPerfEndDate adds the perfEndDate to the session order search params
func (o *SessionOrderSearchParams) WithPerfEndDate(perfEndDate *string) *SessionOrderSearchParams {
	o.SetPerfEndDate(perfEndDate)
	return o
}

// SetPerfEndDate adds the perfEndDate to the session order search params
func (o *SessionOrderSearchParams) SetPerfEndDate(perfEndDate *string) {
	o.PerfEndDate = perfEndDate
}

// WithPerfStartDate adds the perfStartDate to the session order search params
func (o *SessionOrderSearchParams) WithPerfStartDate(perfStartDate *string) *SessionOrderSearchParams {
	o.SetPerfStartDate(perfStartDate)
	return o
}

// SetPerfStartDate adds the perfStartDate to the session order search params
func (o *SessionOrderSearchParams) SetPerfStartDate(perfStartDate *string) {
	o.PerfStartDate = perfStartDate
}

// WithRenewalsOnly adds the renewalsOnly to the session order search params
func (o *SessionOrderSearchParams) WithRenewalsOnly(renewalsOnly *string) *SessionOrderSearchParams {
	o.SetRenewalsOnly(renewalsOnly)
	return o
}

// SetRenewalsOnly adds the renewalsOnly to the session order search params
func (o *SessionOrderSearchParams) SetRenewalsOnly(renewalsOnly *string) {
	o.RenewalsOnly = renewalsOnly
}

// WithSeasonID adds the seasonID to the session order search params
func (o *SessionOrderSearchParams) WithSeasonID(seasonID *string) *SessionOrderSearchParams {
	o.SetSeasonID(seasonID)
	return o
}

// SetSeasonID adds the seasonId to the session order search params
func (o *SessionOrderSearchParams) SetSeasonID(seasonID *string) {
	o.SeasonID = seasonID
}

// WithSessionKey adds the sessionKey to the session order search params
func (o *SessionOrderSearchParams) WithSessionKey(sessionKey string) *SessionOrderSearchParams {
	o.SetSessionKey(sessionKey)
	return o
}

// SetSessionKey adds the sessionKey to the session order search params
func (o *SessionOrderSearchParams) SetSessionKey(sessionKey string) {
	o.SessionKey = sessionKey
}

// WithUnprintedOnly adds the unprintedOnly to the session order search params
func (o *SessionOrderSearchParams) WithUnprintedOnly(unprintedOnly *string) *SessionOrderSearchParams {
	o.SetUnprintedOnly(unprintedOnly)
	return o
}

// SetUnprintedOnly adds the unprintedOnly to the session order search params
func (o *SessionOrderSearchParams) SetUnprintedOnly(unprintedOnly *string) {
	o.UnprintedOnly = unprintedOnly
}

// WriteToRequest writes these params to a swagger request
func (o *SessionOrderSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeliveryMethodID != nil {

		// query param deliveryMethodId
		var qrDeliveryMethodID string

		if o.DeliveryMethodID != nil {
			qrDeliveryMethodID = *o.DeliveryMethodID
		}
		qDeliveryMethodID := qrDeliveryMethodID
		if qDeliveryMethodID != "" {

			if err := r.SetQueryParam("deliveryMethodId", qDeliveryMethodID); err != nil {
				return err
			}
		}
	}

	if o.IncludeAffiliations != nil {

		// query param includeAffiliations
		var qrIncludeAffiliations string

		if o.IncludeAffiliations != nil {
			qrIncludeAffiliations = *o.IncludeAffiliations
		}
		qIncludeAffiliations := qrIncludeAffiliations
		if qIncludeAffiliations != "" {

			if err := r.SetQueryParam("includeAffiliations", qIncludeAffiliations); err != nil {
				return err
			}
		}
	}

	if o.IncludeUnfulfilledRollovers != nil {

		// query param includeUnfulfilledRollovers
		var qrIncludeUnfulfilledRollovers string

		if o.IncludeUnfulfilledRollovers != nil {
			qrIncludeUnfulfilledRollovers = *o.IncludeUnfulfilledRollovers
		}
		qIncludeUnfulfilledRollovers := qrIncludeUnfulfilledRollovers
		if qIncludeUnfulfilledRollovers != "" {

			if err := r.SetQueryParam("includeUnfulfilledRollovers", qIncludeUnfulfilledRollovers); err != nil {
				return err
			}
		}
	}

	if o.ModeOfSaleID != nil {

		// query param modeOfSaleId
		var qrModeOfSaleID string

		if o.ModeOfSaleID != nil {
			qrModeOfSaleID = *o.ModeOfSaleID
		}
		qModeOfSaleID := qrModeOfSaleID
		if qModeOfSaleID != "" {

			if err := r.SetQueryParam("modeOfSaleId", qModeOfSaleID); err != nil {
				return err
			}
		}
	}

	if o.PerfEndDate != nil {

		// query param perfEndDate
		var qrPerfEndDate string

		if o.PerfEndDate != nil {
			qrPerfEndDate = *o.PerfEndDate
		}
		qPerfEndDate := qrPerfEndDate
		if qPerfEndDate != "" {

			if err := r.SetQueryParam("perfEndDate", qPerfEndDate); err != nil {
				return err
			}
		}
	}

	if o.PerfStartDate != nil {

		// query param perfStartDate
		var qrPerfStartDate string

		if o.PerfStartDate != nil {
			qrPerfStartDate = *o.PerfStartDate
		}
		qPerfStartDate := qrPerfStartDate
		if qPerfStartDate != "" {

			if err := r.SetQueryParam("perfStartDate", qPerfStartDate); err != nil {
				return err
			}
		}
	}

	if o.RenewalsOnly != nil {

		// query param renewalsOnly
		var qrRenewalsOnly string

		if o.RenewalsOnly != nil {
			qrRenewalsOnly = *o.RenewalsOnly
		}
		qRenewalsOnly := qrRenewalsOnly
		if qRenewalsOnly != "" {

			if err := r.SetQueryParam("renewalsOnly", qRenewalsOnly); err != nil {
				return err
			}
		}
	}

	if o.SeasonID != nil {

		// query param seasonId
		var qrSeasonID string

		if o.SeasonID != nil {
			qrSeasonID = *o.SeasonID
		}
		qSeasonID := qrSeasonID
		if qSeasonID != "" {

			if err := r.SetQueryParam("seasonId", qSeasonID); err != nil {
				return err
			}
		}
	}

	// path param sessionKey
	if err := r.SetPathParam("sessionKey", o.SessionKey); err != nil {
		return err
	}

	if o.UnprintedOnly != nil {

		// query param unprintedOnly
		var qrUnprintedOnly string

		if o.UnprintedOnly != nil {
			qrUnprintedOnly = *o.UnprintedOnly
		}
		qUnprintedOnly := qrUnprintedOnly
		if qUnprintedOnly != "" {

			if err := r.SetQueryParam("unprintedOnly", qUnprintedOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
