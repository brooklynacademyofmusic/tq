// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPaymentMethodUserGroupsGetAllParams creates a new PaymentMethodUserGroupsGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPaymentMethodUserGroupsGetAllParams() *PaymentMethodUserGroupsGetAllParams {
	return &PaymentMethodUserGroupsGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPaymentMethodUserGroupsGetAllParamsWithTimeout creates a new PaymentMethodUserGroupsGetAllParams object
// with the ability to set a timeout on a request.
func NewPaymentMethodUserGroupsGetAllParamsWithTimeout(timeout time.Duration) *PaymentMethodUserGroupsGetAllParams {
	return &PaymentMethodUserGroupsGetAllParams{
		timeout: timeout,
	}
}

// NewPaymentMethodUserGroupsGetAllParamsWithContext creates a new PaymentMethodUserGroupsGetAllParams object
// with the ability to set a context for a request.
func NewPaymentMethodUserGroupsGetAllParamsWithContext(ctx context.Context) *PaymentMethodUserGroupsGetAllParams {
	return &PaymentMethodUserGroupsGetAllParams{
		Context: ctx,
	}
}

// NewPaymentMethodUserGroupsGetAllParamsWithHTTPClient creates a new PaymentMethodUserGroupsGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewPaymentMethodUserGroupsGetAllParamsWithHTTPClient(client *http.Client) *PaymentMethodUserGroupsGetAllParams {
	return &PaymentMethodUserGroupsGetAllParams{
		HTTPClient: client,
	}
}

/*
PaymentMethodUserGroupsGetAllParams contains all the parameters to send to the API endpoint

	for the payment method user groups get all operation.

	Typically these are written to a http.Request.
*/
type PaymentMethodUserGroupsGetAllParams struct {

	/* Amount.

	   If a negative amount is specified, return mappings where the PaymentMethod allows refunds and has a MaxRefund &gt;= the absolute value of amount.  If a positive amount is specified, return mappings where the IncomeIndicator is true and the PaymentMethod is of type Income.  Amount is not allowed if maintenanceMode="true"
	*/
	Amount *string

	/* MaintenanceMode.

	   If "true", all mappings will be returned.  Effectively the same as not specifying a UserGroup.
	*/
	MaintenanceMode *string

	/* UserGroup.

	   Only return mappings for the specified UserGroup.
	*/
	UserGroup *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the payment method user groups get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentMethodUserGroupsGetAllParams) WithDefaults() *PaymentMethodUserGroupsGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the payment method user groups get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentMethodUserGroupsGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) WithTimeout(timeout time.Duration) *PaymentMethodUserGroupsGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) WithContext(ctx context.Context) *PaymentMethodUserGroupsGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) WithHTTPClient(client *http.Client) *PaymentMethodUserGroupsGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmount adds the amount to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) WithAmount(amount *string) *PaymentMethodUserGroupsGetAllParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) SetAmount(amount *string) {
	o.Amount = amount
}

// WithMaintenanceMode adds the maintenanceMode to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) WithMaintenanceMode(maintenanceMode *string) *PaymentMethodUserGroupsGetAllParams {
	o.SetMaintenanceMode(maintenanceMode)
	return o
}

// SetMaintenanceMode adds the maintenanceMode to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) SetMaintenanceMode(maintenanceMode *string) {
	o.MaintenanceMode = maintenanceMode
}

// WithUserGroup adds the userGroup to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) WithUserGroup(userGroup *string) *PaymentMethodUserGroupsGetAllParams {
	o.SetUserGroup(userGroup)
	return o
}

// SetUserGroup adds the userGroup to the payment method user groups get all params
func (o *PaymentMethodUserGroupsGetAllParams) SetUserGroup(userGroup *string) {
	o.UserGroup = userGroup
}

// WriteToRequest writes these params to a swagger request
func (o *PaymentMethodUserGroupsGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Amount != nil {

		// query param amount
		var qrAmount string

		if o.Amount != nil {
			qrAmount = *o.Amount
		}
		qAmount := qrAmount
		if qAmount != "" {

			if err := r.SetQueryParam("amount", qAmount); err != nil {
				return err
			}
		}
	}

	if o.MaintenanceMode != nil {

		// query param maintenanceMode
		var qrMaintenanceMode string

		if o.MaintenanceMode != nil {
			qrMaintenanceMode = *o.MaintenanceMode
		}
		qMaintenanceMode := qrMaintenanceMode
		if qMaintenanceMode != "" {

			if err := r.SetQueryParam("maintenanceMode", qMaintenanceMode); err != nil {
				return err
			}
		}
	}

	if o.UserGroup != nil {

		// query param userGroup
		var qrUserGroup string

		if o.UserGroup != nil {
			qrUserGroup = *o.UserGroup
		}
		qUserGroup := qrUserGroup
		if qUserGroup != "" {

			if err := r.SetQueryParam("userGroup", qUserGroup); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
