// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPackagesGetPricesParams creates a new PackagesGetPricesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPackagesGetPricesParams() *PackagesGetPricesParams {
	return &PackagesGetPricesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPackagesGetPricesParamsWithTimeout creates a new PackagesGetPricesParams object
// with the ability to set a timeout on a request.
func NewPackagesGetPricesParamsWithTimeout(timeout time.Duration) *PackagesGetPricesParams {
	return &PackagesGetPricesParams{
		timeout: timeout,
	}
}

// NewPackagesGetPricesParamsWithContext creates a new PackagesGetPricesParams object
// with the ability to set a context for a request.
func NewPackagesGetPricesParamsWithContext(ctx context.Context) *PackagesGetPricesParams {
	return &PackagesGetPricesParams{
		Context: ctx,
	}
}

// NewPackagesGetPricesParamsWithHTTPClient creates a new PackagesGetPricesParams object
// with the ability to set a custom HTTPClient for a request.
func NewPackagesGetPricesParamsWithHTTPClient(client *http.Client) *PackagesGetPricesParams {
	return &PackagesGetPricesParams{
		HTTPClient: client,
	}
}

/*
PackagesGetPricesParams contains all the parameters to send to the API endpoint

	for the packages get prices operation.

	Typically these are written to a http.Request.
*/
type PackagesGetPricesParams struct {

	/* AsOfDateTime.

	   pass to get prices effective as of the date and time
	*/
	AsOfDateTime *string

	/* ExpandPerformancePriceType.

	   When set to True, price details for each price layer on the performance are broken out
	*/
	ExpandPerformancePriceType *string

	/* IncludeOnlyBasePrice.

	   When set to True, only the price type marked as the base price for the performance is returned
	*/
	IncludeOnlyBasePrice *string

	// ModeOfSaleID.
	ModeOfSaleID *string

	// PackageID.
	PackageID string

	/* PerformanceIds.

	   A list of performance IDs for performances in a package to return pricing for
	*/
	PerformanceIds *string

	// PriceTypeID.
	PriceTypeID *string

	/* SourceID.

	   When a source code is passed, prices associated with offers tied to that source will be noted in the response with Offer=true
	*/
	SourceID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the packages get prices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PackagesGetPricesParams) WithDefaults() *PackagesGetPricesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the packages get prices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PackagesGetPricesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the packages get prices params
func (o *PackagesGetPricesParams) WithTimeout(timeout time.Duration) *PackagesGetPricesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the packages get prices params
func (o *PackagesGetPricesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the packages get prices params
func (o *PackagesGetPricesParams) WithContext(ctx context.Context) *PackagesGetPricesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the packages get prices params
func (o *PackagesGetPricesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the packages get prices params
func (o *PackagesGetPricesParams) WithHTTPClient(client *http.Client) *PackagesGetPricesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the packages get prices params
func (o *PackagesGetPricesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsOfDateTime adds the asOfDateTime to the packages get prices params
func (o *PackagesGetPricesParams) WithAsOfDateTime(asOfDateTime *string) *PackagesGetPricesParams {
	o.SetAsOfDateTime(asOfDateTime)
	return o
}

// SetAsOfDateTime adds the asOfDateTime to the packages get prices params
func (o *PackagesGetPricesParams) SetAsOfDateTime(asOfDateTime *string) {
	o.AsOfDateTime = asOfDateTime
}

// WithExpandPerformancePriceType adds the expandPerformancePriceType to the packages get prices params
func (o *PackagesGetPricesParams) WithExpandPerformancePriceType(expandPerformancePriceType *string) *PackagesGetPricesParams {
	o.SetExpandPerformancePriceType(expandPerformancePriceType)
	return o
}

// SetExpandPerformancePriceType adds the expandPerformancePriceType to the packages get prices params
func (o *PackagesGetPricesParams) SetExpandPerformancePriceType(expandPerformancePriceType *string) {
	o.ExpandPerformancePriceType = expandPerformancePriceType
}

// WithIncludeOnlyBasePrice adds the includeOnlyBasePrice to the packages get prices params
func (o *PackagesGetPricesParams) WithIncludeOnlyBasePrice(includeOnlyBasePrice *string) *PackagesGetPricesParams {
	o.SetIncludeOnlyBasePrice(includeOnlyBasePrice)
	return o
}

// SetIncludeOnlyBasePrice adds the includeOnlyBasePrice to the packages get prices params
func (o *PackagesGetPricesParams) SetIncludeOnlyBasePrice(includeOnlyBasePrice *string) {
	o.IncludeOnlyBasePrice = includeOnlyBasePrice
}

// WithModeOfSaleID adds the modeOfSaleID to the packages get prices params
func (o *PackagesGetPricesParams) WithModeOfSaleID(modeOfSaleID *string) *PackagesGetPricesParams {
	o.SetModeOfSaleID(modeOfSaleID)
	return o
}

// SetModeOfSaleID adds the modeOfSaleId to the packages get prices params
func (o *PackagesGetPricesParams) SetModeOfSaleID(modeOfSaleID *string) {
	o.ModeOfSaleID = modeOfSaleID
}

// WithPackageID adds the packageID to the packages get prices params
func (o *PackagesGetPricesParams) WithPackageID(packageID string) *PackagesGetPricesParams {
	o.SetPackageID(packageID)
	return o
}

// SetPackageID adds the packageId to the packages get prices params
func (o *PackagesGetPricesParams) SetPackageID(packageID string) {
	o.PackageID = packageID
}

// WithPerformanceIds adds the performanceIds to the packages get prices params
func (o *PackagesGetPricesParams) WithPerformanceIds(performanceIds *string) *PackagesGetPricesParams {
	o.SetPerformanceIds(performanceIds)
	return o
}

// SetPerformanceIds adds the performanceIds to the packages get prices params
func (o *PackagesGetPricesParams) SetPerformanceIds(performanceIds *string) {
	o.PerformanceIds = performanceIds
}

// WithPriceTypeID adds the priceTypeID to the packages get prices params
func (o *PackagesGetPricesParams) WithPriceTypeID(priceTypeID *string) *PackagesGetPricesParams {
	o.SetPriceTypeID(priceTypeID)
	return o
}

// SetPriceTypeID adds the priceTypeId to the packages get prices params
func (o *PackagesGetPricesParams) SetPriceTypeID(priceTypeID *string) {
	o.PriceTypeID = priceTypeID
}

// WithSourceID adds the sourceID to the packages get prices params
func (o *PackagesGetPricesParams) WithSourceID(sourceID *string) *PackagesGetPricesParams {
	o.SetSourceID(sourceID)
	return o
}

// SetSourceID adds the sourceId to the packages get prices params
func (o *PackagesGetPricesParams) SetSourceID(sourceID *string) {
	o.SourceID = sourceID
}

// WriteToRequest writes these params to a swagger request
func (o *PackagesGetPricesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AsOfDateTime != nil {

		// query param asOfDateTime
		var qrAsOfDateTime string

		if o.AsOfDateTime != nil {
			qrAsOfDateTime = *o.AsOfDateTime
		}
		qAsOfDateTime := qrAsOfDateTime
		if qAsOfDateTime != "" {

			if err := r.SetQueryParam("asOfDateTime", qAsOfDateTime); err != nil {
				return err
			}
		}
	}

	if o.ExpandPerformancePriceType != nil {

		// query param expandPerformancePriceType
		var qrExpandPerformancePriceType string

		if o.ExpandPerformancePriceType != nil {
			qrExpandPerformancePriceType = *o.ExpandPerformancePriceType
		}
		qExpandPerformancePriceType := qrExpandPerformancePriceType
		if qExpandPerformancePriceType != "" {

			if err := r.SetQueryParam("expandPerformancePriceType", qExpandPerformancePriceType); err != nil {
				return err
			}
		}
	}

	if o.IncludeOnlyBasePrice != nil {

		// query param includeOnlyBasePrice
		var qrIncludeOnlyBasePrice string

		if o.IncludeOnlyBasePrice != nil {
			qrIncludeOnlyBasePrice = *o.IncludeOnlyBasePrice
		}
		qIncludeOnlyBasePrice := qrIncludeOnlyBasePrice
		if qIncludeOnlyBasePrice != "" {

			if err := r.SetQueryParam("includeOnlyBasePrice", qIncludeOnlyBasePrice); err != nil {
				return err
			}
		}
	}

	if o.ModeOfSaleID != nil {

		// query param modeOfSaleId
		var qrModeOfSaleID string

		if o.ModeOfSaleID != nil {
			qrModeOfSaleID = *o.ModeOfSaleID
		}
		qModeOfSaleID := qrModeOfSaleID
		if qModeOfSaleID != "" {

			if err := r.SetQueryParam("modeOfSaleId", qModeOfSaleID); err != nil {
				return err
			}
		}
	}

	// path param packageId
	if err := r.SetPathParam("packageId", o.PackageID); err != nil {
		return err
	}

	if o.PerformanceIds != nil {

		// query param performanceIds
		var qrPerformanceIds string

		if o.PerformanceIds != nil {
			qrPerformanceIds = *o.PerformanceIds
		}
		qPerformanceIds := qrPerformanceIds
		if qPerformanceIds != "" {

			if err := r.SetQueryParam("performanceIds", qPerformanceIds); err != nil {
				return err
			}
		}
	}

	if o.PriceTypeID != nil {

		// query param priceTypeId
		var qrPriceTypeID string

		if o.PriceTypeID != nil {
			qrPriceTypeID = *o.PriceTypeID
		}
		qPriceTypeID := qrPriceTypeID
		if qPriceTypeID != "" {

			if err := r.SetQueryParam("priceTypeId", qPriceTypeID); err != nil {
				return err
			}
		}
	}

	if o.SourceID != nil {

		// query param sourceId
		var qrSourceID string

		if o.SourceID != nil {
			qrSourceID = *o.SourceID
		}
		qSourceID := qrSourceID
		if qSourceID != "" {

			if err := r.SetQueryParam("sourceId", qSourceID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
