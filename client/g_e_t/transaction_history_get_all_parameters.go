// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewTransactionHistoryGetAllParams creates a new TransactionHistoryGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTransactionHistoryGetAllParams() *TransactionHistoryGetAllParams {
	return &TransactionHistoryGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTransactionHistoryGetAllParamsWithTimeout creates a new TransactionHistoryGetAllParams object
// with the ability to set a timeout on a request.
func NewTransactionHistoryGetAllParamsWithTimeout(timeout time.Duration) *TransactionHistoryGetAllParams {
	return &TransactionHistoryGetAllParams{
		timeout: timeout,
	}
}

// NewTransactionHistoryGetAllParamsWithContext creates a new TransactionHistoryGetAllParams object
// with the ability to set a context for a request.
func NewTransactionHistoryGetAllParamsWithContext(ctx context.Context) *TransactionHistoryGetAllParams {
	return &TransactionHistoryGetAllParams{
		Context: ctx,
	}
}

// NewTransactionHistoryGetAllParamsWithHTTPClient creates a new TransactionHistoryGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewTransactionHistoryGetAllParamsWithHTTPClient(client *http.Client) *TransactionHistoryGetAllParams {
	return &TransactionHistoryGetAllParams{
		HTTPClient: client,
	}
}

/*
TransactionHistoryGetAllParams contains all the parameters to send to the API endpoint

	for the transaction history get all operation.

	Typically these are written to a http.Request.
*/
type TransactionHistoryGetAllParams struct {

	/* ConstituentID.

	   Limit results by constituent.
	*/
	ConstituentID *string

	/* EndDate.

	   Return results dated before this date.
	*/
	EndDate *string

	/* IncludeAffiliations.

	   Include all constituent affiliates in the result.
	*/
	IncludeAffiliations *string

	/* Page.

	   Default is 1.
	*/
	Page *string

	/* PageSize.

	   Default is 100.
	*/
	PageSize *string

	/* PaymentID.

	   Search transactions by payment ID number.
	*/
	PaymentID *string

	/* ReferenceID.

	   Search by transaction reference ID number (T_TRANSACTION.ref_no).
	*/
	ReferenceID *string

	/* SortByDirection.

	   Asc or desc.
	*/
	SortByDirection *string

	/* SortByField.

	   Sort by date or by amount.
	*/
	SortByField *string

	/* StartDate.

	   Return results dated after this date.
	*/
	StartDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the transaction history get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TransactionHistoryGetAllParams) WithDefaults() *TransactionHistoryGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the transaction history get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TransactionHistoryGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithTimeout(timeout time.Duration) *TransactionHistoryGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithContext(ctx context.Context) *TransactionHistoryGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithHTTPClient(client *http.Client) *TransactionHistoryGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConstituentID adds the constituentID to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithConstituentID(constituentID *string) *TransactionHistoryGetAllParams {
	o.SetConstituentID(constituentID)
	return o
}

// SetConstituentID adds the constituentId to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetConstituentID(constituentID *string) {
	o.ConstituentID = constituentID
}

// WithEndDate adds the endDate to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithEndDate(endDate *string) *TransactionHistoryGetAllParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithIncludeAffiliations adds the includeAffiliations to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithIncludeAffiliations(includeAffiliations *string) *TransactionHistoryGetAllParams {
	o.SetIncludeAffiliations(includeAffiliations)
	return o
}

// SetIncludeAffiliations adds the includeAffiliations to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetIncludeAffiliations(includeAffiliations *string) {
	o.IncludeAffiliations = includeAffiliations
}

// WithPage adds the page to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithPage(page *string) *TransactionHistoryGetAllParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithPageSize(pageSize *string) *TransactionHistoryGetAllParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithPaymentID adds the paymentID to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithPaymentID(paymentID *string) *TransactionHistoryGetAllParams {
	o.SetPaymentID(paymentID)
	return o
}

// SetPaymentID adds the paymentId to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetPaymentID(paymentID *string) {
	o.PaymentID = paymentID
}

// WithReferenceID adds the referenceID to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithReferenceID(referenceID *string) *TransactionHistoryGetAllParams {
	o.SetReferenceID(referenceID)
	return o
}

// SetReferenceID adds the referenceId to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetReferenceID(referenceID *string) {
	o.ReferenceID = referenceID
}

// WithSortByDirection adds the sortByDirection to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithSortByDirection(sortByDirection *string) *TransactionHistoryGetAllParams {
	o.SetSortByDirection(sortByDirection)
	return o
}

// SetSortByDirection adds the sortByDirection to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetSortByDirection(sortByDirection *string) {
	o.SortByDirection = sortByDirection
}

// WithSortByField adds the sortByField to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithSortByField(sortByField *string) *TransactionHistoryGetAllParams {
	o.SetSortByField(sortByField)
	return o
}

// SetSortByField adds the sortByField to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetSortByField(sortByField *string) {
	o.SortByField = sortByField
}

// WithStartDate adds the startDate to the transaction history get all params
func (o *TransactionHistoryGetAllParams) WithStartDate(startDate *string) *TransactionHistoryGetAllParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the transaction history get all params
func (o *TransactionHistoryGetAllParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *TransactionHistoryGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConstituentID != nil {

		// query param constituentId
		var qrConstituentID string

		if o.ConstituentID != nil {
			qrConstituentID = *o.ConstituentID
		}
		qConstituentID := qrConstituentID
		if qConstituentID != "" {

			if err := r.SetQueryParam("constituentId", qConstituentID); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.IncludeAffiliations != nil {

		// query param includeAffiliations
		var qrIncludeAffiliations string

		if o.IncludeAffiliations != nil {
			qrIncludeAffiliations = *o.IncludeAffiliations
		}
		qIncludeAffiliations := qrIncludeAffiliations
		if qIncludeAffiliations != "" {

			if err := r.SetQueryParam("includeAffiliations", qIncludeAffiliations); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PaymentID != nil {

		// query param paymentId
		var qrPaymentID string

		if o.PaymentID != nil {
			qrPaymentID = *o.PaymentID
		}
		qPaymentID := qrPaymentID
		if qPaymentID != "" {

			if err := r.SetQueryParam("paymentId", qPaymentID); err != nil {
				return err
			}
		}
	}

	if o.ReferenceID != nil {

		// query param referenceId
		var qrReferenceID string

		if o.ReferenceID != nil {
			qrReferenceID = *o.ReferenceID
		}
		qReferenceID := qrReferenceID
		if qReferenceID != "" {

			if err := r.SetQueryParam("referenceId", qReferenceID); err != nil {
				return err
			}
		}
	}

	if o.SortByDirection != nil {

		// query param sortByDirection
		var qrSortByDirection string

		if o.SortByDirection != nil {
			qrSortByDirection = *o.SortByDirection
		}
		qSortByDirection := qrSortByDirection
		if qSortByDirection != "" {

			if err := r.SetQueryParam("sortByDirection", qSortByDirection); err != nil {
				return err
			}
		}
	}

	if o.SortByField != nil {

		// query param sortByField
		var qrSortByField string

		if o.SortByField != nil {
			qrSortByField = *o.SortByField
		}
		qSortByField := qrSortByField
		if qSortByField != "" {

			if err := r.SetQueryParam("sortByField", qSortByField); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
