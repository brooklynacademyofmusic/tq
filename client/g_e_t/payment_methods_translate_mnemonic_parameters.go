// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPaymentMethodsTranslateMnemonicParams creates a new PaymentMethodsTranslateMnemonicParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPaymentMethodsTranslateMnemonicParams() *PaymentMethodsTranslateMnemonicParams {
	return &PaymentMethodsTranslateMnemonicParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPaymentMethodsTranslateMnemonicParamsWithTimeout creates a new PaymentMethodsTranslateMnemonicParams object
// with the ability to set a timeout on a request.
func NewPaymentMethodsTranslateMnemonicParamsWithTimeout(timeout time.Duration) *PaymentMethodsTranslateMnemonicParams {
	return &PaymentMethodsTranslateMnemonicParams{
		timeout: timeout,
	}
}

// NewPaymentMethodsTranslateMnemonicParamsWithContext creates a new PaymentMethodsTranslateMnemonicParams object
// with the ability to set a context for a request.
func NewPaymentMethodsTranslateMnemonicParamsWithContext(ctx context.Context) *PaymentMethodsTranslateMnemonicParams {
	return &PaymentMethodsTranslateMnemonicParams{
		Context: ctx,
	}
}

// NewPaymentMethodsTranslateMnemonicParamsWithHTTPClient creates a new PaymentMethodsTranslateMnemonicParams object
// with the ability to set a custom HTTPClient for a request.
func NewPaymentMethodsTranslateMnemonicParamsWithHTTPClient(client *http.Client) *PaymentMethodsTranslateMnemonicParams {
	return &PaymentMethodsTranslateMnemonicParams{
		HTTPClient: client,
	}
}

/*
PaymentMethodsTranslateMnemonicParams contains all the parameters to send to the API endpoint

	for the payment methods translate mnemonic operation.

	Typically these are written to a http.Request.
*/
type PaymentMethodsTranslateMnemonicParams struct {

	// CardReaderTypeID.
	CardReaderTypeID string

	// Mnemonic.
	Mnemonic string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the payment methods translate mnemonic params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentMethodsTranslateMnemonicParams) WithDefaults() *PaymentMethodsTranslateMnemonicParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the payment methods translate mnemonic params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentMethodsTranslateMnemonicParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) WithTimeout(timeout time.Duration) *PaymentMethodsTranslateMnemonicParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) WithContext(ctx context.Context) *PaymentMethodsTranslateMnemonicParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) WithHTTPClient(client *http.Client) *PaymentMethodsTranslateMnemonicParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCardReaderTypeID adds the cardReaderTypeID to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) WithCardReaderTypeID(cardReaderTypeID string) *PaymentMethodsTranslateMnemonicParams {
	o.SetCardReaderTypeID(cardReaderTypeID)
	return o
}

// SetCardReaderTypeID adds the cardReaderTypeId to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) SetCardReaderTypeID(cardReaderTypeID string) {
	o.CardReaderTypeID = cardReaderTypeID
}

// WithMnemonic adds the mnemonic to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) WithMnemonic(mnemonic string) *PaymentMethodsTranslateMnemonicParams {
	o.SetMnemonic(mnemonic)
	return o
}

// SetMnemonic adds the mnemonic to the payment methods translate mnemonic params
func (o *PaymentMethodsTranslateMnemonicParams) SetMnemonic(mnemonic string) {
	o.Mnemonic = mnemonic
}

// WriteToRequest writes these params to a swagger request
func (o *PaymentMethodsTranslateMnemonicParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param cardReaderTypeId
	qrCardReaderTypeID := o.CardReaderTypeID
	qCardReaderTypeID := qrCardReaderTypeID
	if qCardReaderTypeID != "" {

		if err := r.SetQueryParam("cardReaderTypeId", qCardReaderTypeID); err != nil {
			return err
		}
	}

	// query param mnemonic
	qrMnemonic := o.Mnemonic
	qMnemonic := qrMnemonic
	if qMnemonic != "" {

		if err := r.SetQueryParam("mnemonic", qMnemonic); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
