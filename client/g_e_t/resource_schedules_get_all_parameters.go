// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewResourceSchedulesGetAllParams creates a new ResourceSchedulesGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewResourceSchedulesGetAllParams() *ResourceSchedulesGetAllParams {
	return &ResourceSchedulesGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewResourceSchedulesGetAllParamsWithTimeout creates a new ResourceSchedulesGetAllParams object
// with the ability to set a timeout on a request.
func NewResourceSchedulesGetAllParamsWithTimeout(timeout time.Duration) *ResourceSchedulesGetAllParams {
	return &ResourceSchedulesGetAllParams{
		timeout: timeout,
	}
}

// NewResourceSchedulesGetAllParamsWithContext creates a new ResourceSchedulesGetAllParams object
// with the ability to set a context for a request.
func NewResourceSchedulesGetAllParamsWithContext(ctx context.Context) *ResourceSchedulesGetAllParams {
	return &ResourceSchedulesGetAllParams{
		Context: ctx,
	}
}

// NewResourceSchedulesGetAllParamsWithHTTPClient creates a new ResourceSchedulesGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewResourceSchedulesGetAllParamsWithHTTPClient(client *http.Client) *ResourceSchedulesGetAllParams {
	return &ResourceSchedulesGetAllParams{
		HTTPClient: client,
	}
}

/*
ResourceSchedulesGetAllParams contains all the parameters to send to the API endpoint

	for the resource schedules get all operation.

	Typically these are written to a http.Request.
*/
type ResourceSchedulesGetAllParams struct {

	/* ConstituentIds.

	   A comma separated list of constituent ids.
	*/
	ConstituentIds *string

	// EndDate.
	EndDate *string

	/* ResourceIds.

	   A comma separated list of resource ids.
	*/
	ResourceIds *string

	// StartDate.
	StartDate *string

	/* TypeIds.

	   A comma separated list of type ids (from TR_SCHEDULE_TYPE). If not provided all types would be returned.
	*/
	TypeIds *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the resource schedules get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResourceSchedulesGetAllParams) WithDefaults() *ResourceSchedulesGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the resource schedules get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResourceSchedulesGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) WithTimeout(timeout time.Duration) *ResourceSchedulesGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) WithContext(ctx context.Context) *ResourceSchedulesGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) WithHTTPClient(client *http.Client) *ResourceSchedulesGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConstituentIds adds the constituentIds to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) WithConstituentIds(constituentIds *string) *ResourceSchedulesGetAllParams {
	o.SetConstituentIds(constituentIds)
	return o
}

// SetConstituentIds adds the constituentIds to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) SetConstituentIds(constituentIds *string) {
	o.ConstituentIds = constituentIds
}

// WithEndDate adds the endDate to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) WithEndDate(endDate *string) *ResourceSchedulesGetAllParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithResourceIds adds the resourceIds to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) WithResourceIds(resourceIds *string) *ResourceSchedulesGetAllParams {
	o.SetResourceIds(resourceIds)
	return o
}

// SetResourceIds adds the resourceIds to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) SetResourceIds(resourceIds *string) {
	o.ResourceIds = resourceIds
}

// WithStartDate adds the startDate to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) WithStartDate(startDate *string) *ResourceSchedulesGetAllParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WithTypeIds adds the typeIds to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) WithTypeIds(typeIds *string) *ResourceSchedulesGetAllParams {
	o.SetTypeIds(typeIds)
	return o
}

// SetTypeIds adds the typeIds to the resource schedules get all params
func (o *ResourceSchedulesGetAllParams) SetTypeIds(typeIds *string) {
	o.TypeIds = typeIds
}

// WriteToRequest writes these params to a swagger request
func (o *ResourceSchedulesGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConstituentIds != nil {

		// query param constituentIds
		var qrConstituentIds string

		if o.ConstituentIds != nil {
			qrConstituentIds = *o.ConstituentIds
		}
		qConstituentIds := qrConstituentIds
		if qConstituentIds != "" {

			if err := r.SetQueryParam("constituentIds", qConstituentIds); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.ResourceIds != nil {

		// query param resourceIds
		var qrResourceIds string

		if o.ResourceIds != nil {
			qrResourceIds = *o.ResourceIds
		}
		qResourceIds := qrResourceIds
		if qResourceIds != "" {

			if err := r.SetQueryParam("resourceIds", qResourceIds); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}
	}

	if o.TypeIds != nil {

		// query param typeIds
		var qrTypeIds string

		if o.TypeIds != nil {
			qrTypeIds = *o.TypeIds
		}
		qTypeIds := qrTypeIds
		if qTypeIds != "" {

			if err := r.SetQueryParam("typeIds", qTypeIds); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
