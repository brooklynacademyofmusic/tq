// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSecurityUserGroupsGetDefaultUserGroupParams creates a new SecurityUserGroupsGetDefaultUserGroupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSecurityUserGroupsGetDefaultUserGroupParams() *SecurityUserGroupsGetDefaultUserGroupParams {
	return &SecurityUserGroupsGetDefaultUserGroupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSecurityUserGroupsGetDefaultUserGroupParamsWithTimeout creates a new SecurityUserGroupsGetDefaultUserGroupParams object
// with the ability to set a timeout on a request.
func NewSecurityUserGroupsGetDefaultUserGroupParamsWithTimeout(timeout time.Duration) *SecurityUserGroupsGetDefaultUserGroupParams {
	return &SecurityUserGroupsGetDefaultUserGroupParams{
		timeout: timeout,
	}
}

// NewSecurityUserGroupsGetDefaultUserGroupParamsWithContext creates a new SecurityUserGroupsGetDefaultUserGroupParams object
// with the ability to set a context for a request.
func NewSecurityUserGroupsGetDefaultUserGroupParamsWithContext(ctx context.Context) *SecurityUserGroupsGetDefaultUserGroupParams {
	return &SecurityUserGroupsGetDefaultUserGroupParams{
		Context: ctx,
	}
}

// NewSecurityUserGroupsGetDefaultUserGroupParamsWithHTTPClient creates a new SecurityUserGroupsGetDefaultUserGroupParams object
// with the ability to set a custom HTTPClient for a request.
func NewSecurityUserGroupsGetDefaultUserGroupParamsWithHTTPClient(client *http.Client) *SecurityUserGroupsGetDefaultUserGroupParams {
	return &SecurityUserGroupsGetDefaultUserGroupParams{
		HTTPClient: client,
	}
}

/*
SecurityUserGroupsGetDefaultUserGroupParams contains all the parameters to send to the API endpoint

	for the security user groups get default user group operation.

	Typically these are written to a http.Request.
*/
type SecurityUserGroupsGetDefaultUserGroupParams struct {

	// UserName.
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the security user groups get default user group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityUserGroupsGetDefaultUserGroupParams) WithDefaults() *SecurityUserGroupsGetDefaultUserGroupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the security user groups get default user group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityUserGroupsGetDefaultUserGroupParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the security user groups get default user group params
func (o *SecurityUserGroupsGetDefaultUserGroupParams) WithTimeout(timeout time.Duration) *SecurityUserGroupsGetDefaultUserGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the security user groups get default user group params
func (o *SecurityUserGroupsGetDefaultUserGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the security user groups get default user group params
func (o *SecurityUserGroupsGetDefaultUserGroupParams) WithContext(ctx context.Context) *SecurityUserGroupsGetDefaultUserGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the security user groups get default user group params
func (o *SecurityUserGroupsGetDefaultUserGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the security user groups get default user group params
func (o *SecurityUserGroupsGetDefaultUserGroupParams) WithHTTPClient(client *http.Client) *SecurityUserGroupsGetDefaultUserGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the security user groups get default user group params
func (o *SecurityUserGroupsGetDefaultUserGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserName adds the userName to the security user groups get default user group params
func (o *SecurityUserGroupsGetDefaultUserGroupParams) WithUserName(userName *string) *SecurityUserGroupsGetDefaultUserGroupParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the security user groups get default user group params
func (o *SecurityUserGroupsGetDefaultUserGroupParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *SecurityUserGroupsGetDefaultUserGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UserName != nil {

		// query param userName
		var qrUserName string

		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("userName", qUserName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
