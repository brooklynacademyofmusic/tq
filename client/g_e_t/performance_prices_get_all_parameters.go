// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPerformancePricesGetAllParams creates a new PerformancePricesGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPerformancePricesGetAllParams() *PerformancePricesGetAllParams {
	return &PerformancePricesGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPerformancePricesGetAllParamsWithTimeout creates a new PerformancePricesGetAllParams object
// with the ability to set a timeout on a request.
func NewPerformancePricesGetAllParamsWithTimeout(timeout time.Duration) *PerformancePricesGetAllParams {
	return &PerformancePricesGetAllParams{
		timeout: timeout,
	}
}

// NewPerformancePricesGetAllParamsWithContext creates a new PerformancePricesGetAllParams object
// with the ability to set a context for a request.
func NewPerformancePricesGetAllParamsWithContext(ctx context.Context) *PerformancePricesGetAllParams {
	return &PerformancePricesGetAllParams{
		Context: ctx,
	}
}

// NewPerformancePricesGetAllParamsWithHTTPClient creates a new PerformancePricesGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewPerformancePricesGetAllParamsWithHTTPClient(client *http.Client) *PerformancePricesGetAllParams {
	return &PerformancePricesGetAllParams{
		HTTPClient: client,
	}
}

/*
PerformancePricesGetAllParams contains all the parameters to send to the API endpoint

	for the performance prices get all operation.

	Typically these are written to a http.Request.
*/
type PerformancePricesGetAllParams struct {

	// AsOfDateTime.
	AsOfDateTime *string

	// PerformancePriceTypeIds.
	PerformancePriceTypeIds *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the performance prices get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancePricesGetAllParams) WithDefaults() *PerformancePricesGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the performance prices get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancePricesGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the performance prices get all params
func (o *PerformancePricesGetAllParams) WithTimeout(timeout time.Duration) *PerformancePricesGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the performance prices get all params
func (o *PerformancePricesGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the performance prices get all params
func (o *PerformancePricesGetAllParams) WithContext(ctx context.Context) *PerformancePricesGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the performance prices get all params
func (o *PerformancePricesGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the performance prices get all params
func (o *PerformancePricesGetAllParams) WithHTTPClient(client *http.Client) *PerformancePricesGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the performance prices get all params
func (o *PerformancePricesGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsOfDateTime adds the asOfDateTime to the performance prices get all params
func (o *PerformancePricesGetAllParams) WithAsOfDateTime(asOfDateTime *string) *PerformancePricesGetAllParams {
	o.SetAsOfDateTime(asOfDateTime)
	return o
}

// SetAsOfDateTime adds the asOfDateTime to the performance prices get all params
func (o *PerformancePricesGetAllParams) SetAsOfDateTime(asOfDateTime *string) {
	o.AsOfDateTime = asOfDateTime
}

// WithPerformancePriceTypeIds adds the performancePriceTypeIds to the performance prices get all params
func (o *PerformancePricesGetAllParams) WithPerformancePriceTypeIds(performancePriceTypeIds *string) *PerformancePricesGetAllParams {
	o.SetPerformancePriceTypeIds(performancePriceTypeIds)
	return o
}

// SetPerformancePriceTypeIds adds the performancePriceTypeIds to the performance prices get all params
func (o *PerformancePricesGetAllParams) SetPerformancePriceTypeIds(performancePriceTypeIds *string) {
	o.PerformancePriceTypeIds = performancePriceTypeIds
}

// WriteToRequest writes these params to a swagger request
func (o *PerformancePricesGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AsOfDateTime != nil {

		// query param asOfDateTime
		var qrAsOfDateTime string

		if o.AsOfDateTime != nil {
			qrAsOfDateTime = *o.AsOfDateTime
		}
		qAsOfDateTime := qrAsOfDateTime
		if qAsOfDateTime != "" {

			if err := r.SetQueryParam("asOfDateTime", qAsOfDateTime); err != nil {
				return err
			}
		}
	}

	if o.PerformancePriceTypeIds != nil {

		// query param performancePriceTypeIds
		var qrPerformancePriceTypeIds string

		if o.PerformancePriceTypeIds != nil {
			qrPerformancePriceTypeIds = *o.PerformancePriceTypeIds
		}
		qPerformancePriceTypeIds := qrPerformancePriceTypeIds
		if qPerformancePriceTypeIds != "" {

			if err := r.SetQueryParam("performancePriceTypeIds", qPerformancePriceTypeIds); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
