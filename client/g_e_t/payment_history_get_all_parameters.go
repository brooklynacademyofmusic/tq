// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPaymentHistoryGetAllParams creates a new PaymentHistoryGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPaymentHistoryGetAllParams() *PaymentHistoryGetAllParams {
	return &PaymentHistoryGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPaymentHistoryGetAllParamsWithTimeout creates a new PaymentHistoryGetAllParams object
// with the ability to set a timeout on a request.
func NewPaymentHistoryGetAllParamsWithTimeout(timeout time.Duration) *PaymentHistoryGetAllParams {
	return &PaymentHistoryGetAllParams{
		timeout: timeout,
	}
}

// NewPaymentHistoryGetAllParamsWithContext creates a new PaymentHistoryGetAllParams object
// with the ability to set a context for a request.
func NewPaymentHistoryGetAllParamsWithContext(ctx context.Context) *PaymentHistoryGetAllParams {
	return &PaymentHistoryGetAllParams{
		Context: ctx,
	}
}

// NewPaymentHistoryGetAllParamsWithHTTPClient creates a new PaymentHistoryGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewPaymentHistoryGetAllParamsWithHTTPClient(client *http.Client) *PaymentHistoryGetAllParams {
	return &PaymentHistoryGetAllParams{
		HTTPClient: client,
	}
}

/*
PaymentHistoryGetAllParams contains all the parameters to send to the API endpoint

	for the payment history get all operation.

	Typically these are written to a http.Request.
*/
type PaymentHistoryGetAllParams struct {

	/* ConstituentID.

	   Limit results by constituent
	*/
	ConstituentID *string

	// EndDate.
	EndDate *string

	// IncludeAffiliates.
	IncludeAffiliates *string

	// Page.
	Page *string

	// PageSize.
	PageSize *string

	// PaymentTypeID.
	PaymentTypeID *string

	// SortByDirection.
	SortByDirection *string

	// SortByField.
	SortByField *string

	// StartDate.
	StartDate *string

	// TransactionID.
	TransactionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the payment history get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentHistoryGetAllParams) WithDefaults() *PaymentHistoryGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the payment history get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentHistoryGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithTimeout(timeout time.Duration) *PaymentHistoryGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithContext(ctx context.Context) *PaymentHistoryGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithHTTPClient(client *http.Client) *PaymentHistoryGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConstituentID adds the constituentID to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithConstituentID(constituentID *string) *PaymentHistoryGetAllParams {
	o.SetConstituentID(constituentID)
	return o
}

// SetConstituentID adds the constituentId to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetConstituentID(constituentID *string) {
	o.ConstituentID = constituentID
}

// WithEndDate adds the endDate to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithEndDate(endDate *string) *PaymentHistoryGetAllParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithIncludeAffiliates adds the includeAffiliates to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithIncludeAffiliates(includeAffiliates *string) *PaymentHistoryGetAllParams {
	o.SetIncludeAffiliates(includeAffiliates)
	return o
}

// SetIncludeAffiliates adds the includeAffiliates to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetIncludeAffiliates(includeAffiliates *string) {
	o.IncludeAffiliates = includeAffiliates
}

// WithPage adds the page to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithPage(page *string) *PaymentHistoryGetAllParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithPageSize(pageSize *string) *PaymentHistoryGetAllParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithPaymentTypeID adds the paymentTypeID to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithPaymentTypeID(paymentTypeID *string) *PaymentHistoryGetAllParams {
	o.SetPaymentTypeID(paymentTypeID)
	return o
}

// SetPaymentTypeID adds the paymentTypeId to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetPaymentTypeID(paymentTypeID *string) {
	o.PaymentTypeID = paymentTypeID
}

// WithSortByDirection adds the sortByDirection to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithSortByDirection(sortByDirection *string) *PaymentHistoryGetAllParams {
	o.SetSortByDirection(sortByDirection)
	return o
}

// SetSortByDirection adds the sortByDirection to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetSortByDirection(sortByDirection *string) {
	o.SortByDirection = sortByDirection
}

// WithSortByField adds the sortByField to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithSortByField(sortByField *string) *PaymentHistoryGetAllParams {
	o.SetSortByField(sortByField)
	return o
}

// SetSortByField adds the sortByField to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetSortByField(sortByField *string) {
	o.SortByField = sortByField
}

// WithStartDate adds the startDate to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithStartDate(startDate *string) *PaymentHistoryGetAllParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WithTransactionID adds the transactionID to the payment history get all params
func (o *PaymentHistoryGetAllParams) WithTransactionID(transactionID *string) *PaymentHistoryGetAllParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the payment history get all params
func (o *PaymentHistoryGetAllParams) SetTransactionID(transactionID *string) {
	o.TransactionID = transactionID
}

// WriteToRequest writes these params to a swagger request
func (o *PaymentHistoryGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConstituentID != nil {

		// query param constituentId
		var qrConstituentID string

		if o.ConstituentID != nil {
			qrConstituentID = *o.ConstituentID
		}
		qConstituentID := qrConstituentID
		if qConstituentID != "" {

			if err := r.SetQueryParam("constituentId", qConstituentID); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.IncludeAffiliates != nil {

		// query param includeAffiliates
		var qrIncludeAffiliates string

		if o.IncludeAffiliates != nil {
			qrIncludeAffiliates = *o.IncludeAffiliates
		}
		qIncludeAffiliates := qrIncludeAffiliates
		if qIncludeAffiliates != "" {

			if err := r.SetQueryParam("includeAffiliates", qIncludeAffiliates); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PaymentTypeID != nil {

		// query param paymentTypeId
		var qrPaymentTypeID string

		if o.PaymentTypeID != nil {
			qrPaymentTypeID = *o.PaymentTypeID
		}
		qPaymentTypeID := qrPaymentTypeID
		if qPaymentTypeID != "" {

			if err := r.SetQueryParam("paymentTypeId", qPaymentTypeID); err != nil {
				return err
			}
		}
	}

	if o.SortByDirection != nil {

		// query param sortByDirection
		var qrSortByDirection string

		if o.SortByDirection != nil {
			qrSortByDirection = *o.SortByDirection
		}
		qSortByDirection := qrSortByDirection
		if qSortByDirection != "" {

			if err := r.SetQueryParam("sortByDirection", qSortByDirection); err != nil {
				return err
			}
		}
	}

	if o.SortByField != nil {

		// query param sortByField
		var qrSortByField string

		if o.SortByField != nil {
			qrSortByField = *o.SortByField
		}
		qSortByField := qrSortByField
		if qSortByField != "" {

			if err := r.SetQueryParam("sortByField", qSortByField); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}
	}

	if o.TransactionID != nil {

		// query param transactionId
		var qrTransactionID string

		if o.TransactionID != nil {
			qrTransactionID = *o.TransactionID
		}
		qTransactionID := qrTransactionID
		if qTransactionID != "" {

			if err := r.SetQueryParam("transactionId", qTransactionID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
