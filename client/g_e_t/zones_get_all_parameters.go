// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewZonesGetAllParams creates a new ZonesGetAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewZonesGetAllParams() *ZonesGetAllParams {
	return &ZonesGetAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewZonesGetAllParamsWithTimeout creates a new ZonesGetAllParams object
// with the ability to set a timeout on a request.
func NewZonesGetAllParamsWithTimeout(timeout time.Duration) *ZonesGetAllParams {
	return &ZonesGetAllParams{
		timeout: timeout,
	}
}

// NewZonesGetAllParamsWithContext creates a new ZonesGetAllParams object
// with the ability to set a context for a request.
func NewZonesGetAllParamsWithContext(ctx context.Context) *ZonesGetAllParams {
	return &ZonesGetAllParams{
		Context: ctx,
	}
}

// NewZonesGetAllParamsWithHTTPClient creates a new ZonesGetAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewZonesGetAllParamsWithHTTPClient(client *http.Client) *ZonesGetAllParams {
	return &ZonesGetAllParams{
		HTTPClient: client,
	}
}

/*
ZonesGetAllParams contains all the parameters to send to the API endpoint

	for the zones get all operation.

	Typically these are written to a http.Request.
*/
type ZonesGetAllParams struct {

	// ZoneMapIds.
	ZoneMapIds *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the zones get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ZonesGetAllParams) WithDefaults() *ZonesGetAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the zones get all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ZonesGetAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the zones get all params
func (o *ZonesGetAllParams) WithTimeout(timeout time.Duration) *ZonesGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the zones get all params
func (o *ZonesGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the zones get all params
func (o *ZonesGetAllParams) WithContext(ctx context.Context) *ZonesGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the zones get all params
func (o *ZonesGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the zones get all params
func (o *ZonesGetAllParams) WithHTTPClient(client *http.Client) *ZonesGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the zones get all params
func (o *ZonesGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithZoneMapIds adds the zoneMapIds to the zones get all params
func (o *ZonesGetAllParams) WithZoneMapIds(zoneMapIds *string) *ZonesGetAllParams {
	o.SetZoneMapIds(zoneMapIds)
	return o
}

// SetZoneMapIds adds the zoneMapIds to the zones get all params
func (o *ZonesGetAllParams) SetZoneMapIds(zoneMapIds *string) {
	o.ZoneMapIds = zoneMapIds
}

// WriteToRequest writes these params to a swagger request
func (o *ZonesGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ZoneMapIds != nil {

		// query param zoneMapIds
		var qrZoneMapIds string

		if o.ZoneMapIds != nil {
			qrZoneMapIds = *o.ZoneMapIds
		}
		qZoneMapIds := qrZoneMapIds
		if qZoneMapIds != "" {

			if err := r.SetQueryParam("zoneMapIds", qZoneMapIds); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
