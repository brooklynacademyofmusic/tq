// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPerformancesGetSeatHoldDetailsParams creates a new PerformancesGetSeatHoldDetailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPerformancesGetSeatHoldDetailsParams() *PerformancesGetSeatHoldDetailsParams {
	return &PerformancesGetSeatHoldDetailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPerformancesGetSeatHoldDetailsParamsWithTimeout creates a new PerformancesGetSeatHoldDetailsParams object
// with the ability to set a timeout on a request.
func NewPerformancesGetSeatHoldDetailsParamsWithTimeout(timeout time.Duration) *PerformancesGetSeatHoldDetailsParams {
	return &PerformancesGetSeatHoldDetailsParams{
		timeout: timeout,
	}
}

// NewPerformancesGetSeatHoldDetailsParamsWithContext creates a new PerformancesGetSeatHoldDetailsParams object
// with the ability to set a context for a request.
func NewPerformancesGetSeatHoldDetailsParamsWithContext(ctx context.Context) *PerformancesGetSeatHoldDetailsParams {
	return &PerformancesGetSeatHoldDetailsParams{
		Context: ctx,
	}
}

// NewPerformancesGetSeatHoldDetailsParamsWithHTTPClient creates a new PerformancesGetSeatHoldDetailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPerformancesGetSeatHoldDetailsParamsWithHTTPClient(client *http.Client) *PerformancesGetSeatHoldDetailsParams {
	return &PerformancesGetSeatHoldDetailsParams{
		HTTPClient: client,
	}
}

/*
PerformancesGetSeatHoldDetailsParams contains all the parameters to send to the API endpoint

	for the performances get seat hold details operation.

	Typically these are written to a http.Request.
*/
type PerformancesGetSeatHoldDetailsParams struct {

	/* HoldCodeIds.

	   List of hold code Ids, optional
	*/
	HoldCodeIds *string

	/* IncludeAllHolds.

	   Pass true to return all layered holds, including those with a priority other than 1
	*/
	IncludeAllHolds *string

	// PerformanceID.
	PerformanceID string

	/* SeatIds.

	   List of seat Ids to return, optional
	*/
	SeatIds *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the performances get seat hold details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesGetSeatHoldDetailsParams) WithDefaults() *PerformancesGetSeatHoldDetailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the performances get seat hold details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesGetSeatHoldDetailsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) WithTimeout(timeout time.Duration) *PerformancesGetSeatHoldDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) WithContext(ctx context.Context) *PerformancesGetSeatHoldDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) WithHTTPClient(client *http.Client) *PerformancesGetSeatHoldDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHoldCodeIds adds the holdCodeIds to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) WithHoldCodeIds(holdCodeIds *string) *PerformancesGetSeatHoldDetailsParams {
	o.SetHoldCodeIds(holdCodeIds)
	return o
}

// SetHoldCodeIds adds the holdCodeIds to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) SetHoldCodeIds(holdCodeIds *string) {
	o.HoldCodeIds = holdCodeIds
}

// WithIncludeAllHolds adds the includeAllHolds to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) WithIncludeAllHolds(includeAllHolds *string) *PerformancesGetSeatHoldDetailsParams {
	o.SetIncludeAllHolds(includeAllHolds)
	return o
}

// SetIncludeAllHolds adds the includeAllHolds to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) SetIncludeAllHolds(includeAllHolds *string) {
	o.IncludeAllHolds = includeAllHolds
}

// WithPerformanceID adds the performanceID to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) WithPerformanceID(performanceID string) *PerformancesGetSeatHoldDetailsParams {
	o.SetPerformanceID(performanceID)
	return o
}

// SetPerformanceID adds the performanceId to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) SetPerformanceID(performanceID string) {
	o.PerformanceID = performanceID
}

// WithSeatIds adds the seatIds to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) WithSeatIds(seatIds *string) *PerformancesGetSeatHoldDetailsParams {
	o.SetSeatIds(seatIds)
	return o
}

// SetSeatIds adds the seatIds to the performances get seat hold details params
func (o *PerformancesGetSeatHoldDetailsParams) SetSeatIds(seatIds *string) {
	o.SeatIds = seatIds
}

// WriteToRequest writes these params to a swagger request
func (o *PerformancesGetSeatHoldDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HoldCodeIds != nil {

		// query param holdCodeIds
		var qrHoldCodeIds string

		if o.HoldCodeIds != nil {
			qrHoldCodeIds = *o.HoldCodeIds
		}
		qHoldCodeIds := qrHoldCodeIds
		if qHoldCodeIds != "" {

			if err := r.SetQueryParam("holdCodeIds", qHoldCodeIds); err != nil {
				return err
			}
		}
	}

	if o.IncludeAllHolds != nil {

		// query param includeAllHolds
		var qrIncludeAllHolds string

		if o.IncludeAllHolds != nil {
			qrIncludeAllHolds = *o.IncludeAllHolds
		}
		qIncludeAllHolds := qrIncludeAllHolds
		if qIncludeAllHolds != "" {

			if err := r.SetQueryParam("includeAllHolds", qIncludeAllHolds); err != nil {
				return err
			}
		}
	}

	// path param performanceId
	if err := r.SetPathParam("performanceId", o.PerformanceID); err != nil {
		return err
	}

	if o.SeatIds != nil {

		// query param seatIds
		var qrSeatIds string

		if o.SeatIds != nil {
			qrSeatIds = *o.SeatIds
		}
		qSeatIds := qrSeatIds
		if qSeatIds != "" {

			if err := r.SetQueryParam("seatIds", qSeatIds); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
