// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUsersGetUserInformationForActiveDirectoryUserParams creates a new UsersGetUserInformationForActiveDirectoryUserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUsersGetUserInformationForActiveDirectoryUserParams() *UsersGetUserInformationForActiveDirectoryUserParams {
	return &UsersGetUserInformationForActiveDirectoryUserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUsersGetUserInformationForActiveDirectoryUserParamsWithTimeout creates a new UsersGetUserInformationForActiveDirectoryUserParams object
// with the ability to set a timeout on a request.
func NewUsersGetUserInformationForActiveDirectoryUserParamsWithTimeout(timeout time.Duration) *UsersGetUserInformationForActiveDirectoryUserParams {
	return &UsersGetUserInformationForActiveDirectoryUserParams{
		timeout: timeout,
	}
}

// NewUsersGetUserInformationForActiveDirectoryUserParamsWithContext creates a new UsersGetUserInformationForActiveDirectoryUserParams object
// with the ability to set a context for a request.
func NewUsersGetUserInformationForActiveDirectoryUserParamsWithContext(ctx context.Context) *UsersGetUserInformationForActiveDirectoryUserParams {
	return &UsersGetUserInformationForActiveDirectoryUserParams{
		Context: ctx,
	}
}

// NewUsersGetUserInformationForActiveDirectoryUserParamsWithHTTPClient creates a new UsersGetUserInformationForActiveDirectoryUserParams object
// with the ability to set a custom HTTPClient for a request.
func NewUsersGetUserInformationForActiveDirectoryUserParamsWithHTTPClient(client *http.Client) *UsersGetUserInformationForActiveDirectoryUserParams {
	return &UsersGetUserInformationForActiveDirectoryUserParams{
		HTTPClient: client,
	}
}

/*
UsersGetUserInformationForActiveDirectoryUserParams contains all the parameters to send to the API endpoint

	for the users get user information for active directory user operation.

	Typically these are written to a http.Request.
*/
type UsersGetUserInformationForActiveDirectoryUserParams struct {

	// ActiveDirectoryUsername.
	ActiveDirectoryUsername *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the users get user information for active directory user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersGetUserInformationForActiveDirectoryUserParams) WithDefaults() *UsersGetUserInformationForActiveDirectoryUserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the users get user information for active directory user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersGetUserInformationForActiveDirectoryUserParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the users get user information for active directory user params
func (o *UsersGetUserInformationForActiveDirectoryUserParams) WithTimeout(timeout time.Duration) *UsersGetUserInformationForActiveDirectoryUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users get user information for active directory user params
func (o *UsersGetUserInformationForActiveDirectoryUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users get user information for active directory user params
func (o *UsersGetUserInformationForActiveDirectoryUserParams) WithContext(ctx context.Context) *UsersGetUserInformationForActiveDirectoryUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users get user information for active directory user params
func (o *UsersGetUserInformationForActiveDirectoryUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users get user information for active directory user params
func (o *UsersGetUserInformationForActiveDirectoryUserParams) WithHTTPClient(client *http.Client) *UsersGetUserInformationForActiveDirectoryUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users get user information for active directory user params
func (o *UsersGetUserInformationForActiveDirectoryUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActiveDirectoryUsername adds the activeDirectoryUsername to the users get user information for active directory user params
func (o *UsersGetUserInformationForActiveDirectoryUserParams) WithActiveDirectoryUsername(activeDirectoryUsername *string) *UsersGetUserInformationForActiveDirectoryUserParams {
	o.SetActiveDirectoryUsername(activeDirectoryUsername)
	return o
}

// SetActiveDirectoryUsername adds the activeDirectoryUsername to the users get user information for active directory user params
func (o *UsersGetUserInformationForActiveDirectoryUserParams) SetActiveDirectoryUsername(activeDirectoryUsername *string) {
	o.ActiveDirectoryUsername = activeDirectoryUsername
}

// WriteToRequest writes these params to a swagger request
func (o *UsersGetUserInformationForActiveDirectoryUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActiveDirectoryUsername != nil {

		// query param activeDirectoryUsername
		var qrActiveDirectoryUsername string

		if o.ActiveDirectoryUsername != nil {
			qrActiveDirectoryUsername = *o.ActiveDirectoryUsername
		}
		qActiveDirectoryUsername := qrActiveDirectoryUsername
		if qActiveDirectoryUsername != "" {

			if err := r.SetQueryParam("activeDirectoryUsername", qActiveDirectoryUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
