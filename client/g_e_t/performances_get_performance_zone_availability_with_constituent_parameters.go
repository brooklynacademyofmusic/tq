// Code generated by go-swagger; DO NOT EDIT.

package g_e_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPerformancesGetPerformanceZoneAvailabilityWithConstituentParams creates a new PerformancesGetPerformanceZoneAvailabilityWithConstituentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPerformancesGetPerformanceZoneAvailabilityWithConstituentParams() *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	return &PerformancesGetPerformanceZoneAvailabilityWithConstituentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPerformancesGetPerformanceZoneAvailabilityWithConstituentParamsWithTimeout creates a new PerformancesGetPerformanceZoneAvailabilityWithConstituentParams object
// with the ability to set a timeout on a request.
func NewPerformancesGetPerformanceZoneAvailabilityWithConstituentParamsWithTimeout(timeout time.Duration) *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	return &PerformancesGetPerformanceZoneAvailabilityWithConstituentParams{
		timeout: timeout,
	}
}

// NewPerformancesGetPerformanceZoneAvailabilityWithConstituentParamsWithContext creates a new PerformancesGetPerformanceZoneAvailabilityWithConstituentParams object
// with the ability to set a context for a request.
func NewPerformancesGetPerformanceZoneAvailabilityWithConstituentParamsWithContext(ctx context.Context) *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	return &PerformancesGetPerformanceZoneAvailabilityWithConstituentParams{
		Context: ctx,
	}
}

// NewPerformancesGetPerformanceZoneAvailabilityWithConstituentParamsWithHTTPClient creates a new PerformancesGetPerformanceZoneAvailabilityWithConstituentParams object
// with the ability to set a custom HTTPClient for a request.
func NewPerformancesGetPerformanceZoneAvailabilityWithConstituentParamsWithHTTPClient(client *http.Client) *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	return &PerformancesGetPerformanceZoneAvailabilityWithConstituentParams{
		HTTPClient: client,
	}
}

/*
PerformancesGetPerformanceZoneAvailabilityWithConstituentParams contains all the parameters to send to the API endpoint

	for the performances get performance zone availability with constituent operation.

	Typically these are written to a http.Request.
*/
type PerformancesGetPerformanceZoneAvailabilityWithConstituentParams struct {

	/* ConstituentID.

	   The constituent to use to calculate allocation availability based on the constituent rank and MOS.  Required if modeOfSale is specified
	*/
	ConstituentID *string

	/* ModeOfSaleID.

	   Required if constituentId is provided
	*/
	ModeOfSaleID *string

	/* PerformanceIds.

	   A list of valid performance Ids
	*/
	PerformanceIds string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the performances get performance zone availability with constituent params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) WithDefaults() *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the performances get performance zone availability with constituent params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) WithTimeout(timeout time.Duration) *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) WithContext(ctx context.Context) *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) WithHTTPClient(client *http.Client) *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConstituentID adds the constituentID to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) WithConstituentID(constituentID *string) *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	o.SetConstituentID(constituentID)
	return o
}

// SetConstituentID adds the constituentId to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) SetConstituentID(constituentID *string) {
	o.ConstituentID = constituentID
}

// WithModeOfSaleID adds the modeOfSaleID to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) WithModeOfSaleID(modeOfSaleID *string) *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	o.SetModeOfSaleID(modeOfSaleID)
	return o
}

// SetModeOfSaleID adds the modeOfSaleId to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) SetModeOfSaleID(modeOfSaleID *string) {
	o.ModeOfSaleID = modeOfSaleID
}

// WithPerformanceIds adds the performanceIds to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) WithPerformanceIds(performanceIds string) *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams {
	o.SetPerformanceIds(performanceIds)
	return o
}

// SetPerformanceIds adds the performanceIds to the performances get performance zone availability with constituent params
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) SetPerformanceIds(performanceIds string) {
	o.PerformanceIds = performanceIds
}

// WriteToRequest writes these params to a swagger request
func (o *PerformancesGetPerformanceZoneAvailabilityWithConstituentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConstituentID != nil {

		// query param constituentId
		var qrConstituentID string

		if o.ConstituentID != nil {
			qrConstituentID = *o.ConstituentID
		}
		qConstituentID := qrConstituentID
		if qConstituentID != "" {

			if err := r.SetQueryParam("constituentId", qConstituentID); err != nil {
				return err
			}
		}
	}

	if o.ModeOfSaleID != nil {

		// query param modeOfSaleId
		var qrModeOfSaleID string

		if o.ModeOfSaleID != nil {
			qrModeOfSaleID = *o.ModeOfSaleID
		}
		qModeOfSaleID := qrModeOfSaleID
		if qModeOfSaleID != "" {

			if err := r.SetQueryParam("modeOfSaleId", qModeOfSaleID); err != nil {
				return err
			}
		}
	}

	// query param performanceIds
	qrPerformanceIds := o.PerformanceIds
	qPerformanceIds := qrPerformanceIds
	if qPerformanceIds != "" {

		if err := r.SetQueryParam("performanceIds", qPerformanceIds); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
