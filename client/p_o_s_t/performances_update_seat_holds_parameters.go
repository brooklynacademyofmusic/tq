// Code generated by go-swagger; DO NOT EDIT.

package p_o_s_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/skysyzygy/tq/models"
)

// NewPerformancesUpdateSeatHoldsParams creates a new PerformancesUpdateSeatHoldsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPerformancesUpdateSeatHoldsParams() *PerformancesUpdateSeatHoldsParams {
	return &PerformancesUpdateSeatHoldsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPerformancesUpdateSeatHoldsParamsWithTimeout creates a new PerformancesUpdateSeatHoldsParams object
// with the ability to set a timeout on a request.
func NewPerformancesUpdateSeatHoldsParamsWithTimeout(timeout time.Duration) *PerformancesUpdateSeatHoldsParams {
	return &PerformancesUpdateSeatHoldsParams{
		timeout: timeout,
	}
}

// NewPerformancesUpdateSeatHoldsParamsWithContext creates a new PerformancesUpdateSeatHoldsParams object
// with the ability to set a context for a request.
func NewPerformancesUpdateSeatHoldsParamsWithContext(ctx context.Context) *PerformancesUpdateSeatHoldsParams {
	return &PerformancesUpdateSeatHoldsParams{
		Context: ctx,
	}
}

// NewPerformancesUpdateSeatHoldsParamsWithHTTPClient creates a new PerformancesUpdateSeatHoldsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPerformancesUpdateSeatHoldsParamsWithHTTPClient(client *http.Client) *PerformancesUpdateSeatHoldsParams {
	return &PerformancesUpdateSeatHoldsParams{
		HTTPClient: client,
	}
}

/*
PerformancesUpdateSeatHoldsParams contains all the parameters to send to the API endpoint

	for the performances update seat holds operation.

	Typically these are written to a http.Request.
*/
type PerformancesUpdateSeatHoldsParams struct {

	// PerformanceID.
	PerformanceID string

	// UpdateSeatHoldRequest.
	UpdateSeatHoldRequest *models.UpdateSeatHoldRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the performances update seat holds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesUpdateSeatHoldsParams) WithDefaults() *PerformancesUpdateSeatHoldsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the performances update seat holds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesUpdateSeatHoldsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) WithTimeout(timeout time.Duration) *PerformancesUpdateSeatHoldsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) WithContext(ctx context.Context) *PerformancesUpdateSeatHoldsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) WithHTTPClient(client *http.Client) *PerformancesUpdateSeatHoldsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPerformanceID adds the performanceID to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) WithPerformanceID(performanceID string) *PerformancesUpdateSeatHoldsParams {
	o.SetPerformanceID(performanceID)
	return o
}

// SetPerformanceID adds the performanceId to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) SetPerformanceID(performanceID string) {
	o.PerformanceID = performanceID
}

// WithUpdateSeatHoldRequest adds the updateSeatHoldRequest to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) WithUpdateSeatHoldRequest(updateSeatHoldRequest *models.UpdateSeatHoldRequest) *PerformancesUpdateSeatHoldsParams {
	o.SetUpdateSeatHoldRequest(updateSeatHoldRequest)
	return o
}

// SetUpdateSeatHoldRequest adds the updateSeatHoldRequest to the performances update seat holds params
func (o *PerformancesUpdateSeatHoldsParams) SetUpdateSeatHoldRequest(updateSeatHoldRequest *models.UpdateSeatHoldRequest) {
	o.UpdateSeatHoldRequest = updateSeatHoldRequest
}

// WriteToRequest writes these params to a swagger request
func (o *PerformancesUpdateSeatHoldsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param performanceId
	if err := r.SetPathParam("performanceId", o.PerformanceID); err != nil {
		return err
	}
	if o.UpdateSeatHoldRequest != nil {
		if err := r.SetBodyParam(o.UpdateSeatHoldRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
