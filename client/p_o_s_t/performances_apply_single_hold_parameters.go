// Code generated by go-swagger; DO NOT EDIT.

package p_o_s_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/skysyzygy/tq/models"
)

// NewPerformancesApplySingleHoldParams creates a new PerformancesApplySingleHoldParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPerformancesApplySingleHoldParams() *PerformancesApplySingleHoldParams {
	return &PerformancesApplySingleHoldParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPerformancesApplySingleHoldParamsWithTimeout creates a new PerformancesApplySingleHoldParams object
// with the ability to set a timeout on a request.
func NewPerformancesApplySingleHoldParamsWithTimeout(timeout time.Duration) *PerformancesApplySingleHoldParams {
	return &PerformancesApplySingleHoldParams{
		timeout: timeout,
	}
}

// NewPerformancesApplySingleHoldParamsWithContext creates a new PerformancesApplySingleHoldParams object
// with the ability to set a context for a request.
func NewPerformancesApplySingleHoldParamsWithContext(ctx context.Context) *PerformancesApplySingleHoldParams {
	return &PerformancesApplySingleHoldParams{
		Context: ctx,
	}
}

// NewPerformancesApplySingleHoldParamsWithHTTPClient creates a new PerformancesApplySingleHoldParams object
// with the ability to set a custom HTTPClient for a request.
func NewPerformancesApplySingleHoldParamsWithHTTPClient(client *http.Client) *PerformancesApplySingleHoldParams {
	return &PerformancesApplySingleHoldParams{
		HTTPClient: client,
	}
}

/*
PerformancesApplySingleHoldParams contains all the parameters to send to the API endpoint

	for the performances apply single hold operation.

	Typically these are written to a http.Request.
*/
type PerformancesApplySingleHoldParams struct {

	/* PerformanceID.

	   The performance id.
	*/
	PerformanceID string

	// Request.
	Request *models.ApplySingleHoldRequest

	/* SeatID.

	   The seat id.
	*/
	SeatID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the performances apply single hold params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesApplySingleHoldParams) WithDefaults() *PerformancesApplySingleHoldParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the performances apply single hold params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesApplySingleHoldParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) WithTimeout(timeout time.Duration) *PerformancesApplySingleHoldParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) WithContext(ctx context.Context) *PerformancesApplySingleHoldParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) WithHTTPClient(client *http.Client) *PerformancesApplySingleHoldParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPerformanceID adds the performanceID to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) WithPerformanceID(performanceID string) *PerformancesApplySingleHoldParams {
	o.SetPerformanceID(performanceID)
	return o
}

// SetPerformanceID adds the performanceId to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) SetPerformanceID(performanceID string) {
	o.PerformanceID = performanceID
}

// WithRequest adds the request to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) WithRequest(request *models.ApplySingleHoldRequest) *PerformancesApplySingleHoldParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) SetRequest(request *models.ApplySingleHoldRequest) {
	o.Request = request
}

// WithSeatID adds the seatID to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) WithSeatID(seatID string) *PerformancesApplySingleHoldParams {
	o.SetSeatID(seatID)
	return o
}

// SetSeatID adds the seatId to the performances apply single hold params
func (o *PerformancesApplySingleHoldParams) SetSeatID(seatID string) {
	o.SeatID = seatID
}

// WriteToRequest writes these params to a swagger request
func (o *PerformancesApplySingleHoldParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param performanceId
	if err := r.SetPathParam("performanceId", o.PerformanceID); err != nil {
		return err
	}
	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	// path param seatId
	if err := r.SetPathParam("seatId", o.SeatID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
