// Code generated by go-swagger; DO NOT EDIT.

package p_o_s_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new p o s t API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new p o s t API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new p o s t API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for p o s t API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// WithContentTypeTextXML sets the Content-Type header to "text/xml".
func WithContentTypeTextXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// WithAcceptTextJSON sets the Accept header to "text/json".
func WithAcceptTextJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/json"}
}

// WithAcceptTextXML sets the Accept header to "text/xml".
func WithAcceptTextXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AccountTypesCreate(params *AccountTypesCreateParams, opts ...ClientOption) (*AccountTypesCreateOK, error)

	AccountsCreateCardNumberAccount(params *AccountsCreateCardNumberAccountParams, opts ...ClientOption) (*AccountsCreateCardNumberAccountOK, error)

	AccountsCreateDirectDebitAccount(params *AccountsCreateDirectDebitAccountParams, opts ...ClientOption) (*AccountsCreateDirectDebitAccountOK, error)

	AccountsCreateSepaAccount(params *AccountsCreateSepaAccountParams, opts ...ClientOption) (*AccountsCreateSepaAccountOK, error)

	AccountsCreateVantivEncryptedCardAccount(params *AccountsCreateVantivEncryptedCardAccountParams, opts ...ClientOption) (*AccountsCreateVantivEncryptedCardAccountOK, error)

	ActionTypesCreate(params *ActionTypesCreateParams, opts ...ClientOption) (*ActionTypesCreateOK, error)

	ActionsCreate(params *ActionsCreateParams, opts ...ClientOption) (*ActionsCreateOK, error)

	ActivityCategoriesCreate(params *ActivityCategoriesCreateParams, opts ...ClientOption) (*ActivityCategoriesCreateOK, error)

	ActivityTypesCreate(params *ActivityTypesCreateParams, opts ...ClientOption) (*ActivityTypesCreateOK, error)

	AddressTypesCreate(params *AddressTypesCreateParams, opts ...ClientOption) (*AddressTypesCreateOK, error)

	AddressesCreate(params *AddressesCreateParams, opts ...ClientOption) (*AddressesCreateOK, error)

	AffiliationInfoPostAffiliation(params *AffiliationInfoPostAffiliationParams, opts ...ClientOption) (*AffiliationInfoPostAffiliationOK, error)

	AffiliationTypesCreate(params *AffiliationTypesCreateParams, opts ...ClientOption) (*AffiliationTypesCreateOK, error)

	AffiliationsCreate(params *AffiliationsCreateParams, opts ...ClientOption) (*AffiliationsCreateOK, error)

	AliasTypesCreate(params *AliasTypesCreateParams, opts ...ClientOption) (*AliasTypesCreateOK, error)

	AliasesCreate(params *AliasesCreateParams, opts ...ClientOption) (*AliasesCreateOK, error)

	AnalyticsReportsCreate(params *AnalyticsReportsCreateParams, opts ...ClientOption) (*AnalyticsReportsCreateOK, error)

	AppealCategoriesCreate(params *AppealCategoriesCreateParams, opts ...ClientOption) (*AppealCategoriesCreateOK, error)

	ArtistsCreate(params *ArtistsCreateParams, opts ...ClientOption) (*ArtistsCreateOK, error)

	AssetTypesCreate(params *AssetTypesCreateParams, opts ...ClientOption) (*AssetTypesCreateOK, error)

	AssetsCreate(params *AssetsCreateParams, opts ...ClientOption) (*AssetsCreateOK, error)

	AssociationTypesCreate(params *AssociationTypesCreateParams, opts ...ClientOption) (*AssociationTypesCreateOK, error)

	AssociationsCreate(params *AssociationsCreateParams, opts ...ClientOption) (*AssociationsCreateOK, error)

	AttributesCreate(params *AttributesCreateParams, opts ...ClientOption) (*AttributesCreateOK, error)

	AuthenticateAuthenticate(params *AuthenticateAuthenticateParams, opts ...ClientOption) (*AuthenticateAuthenticateOK, error)

	AuthenticateAuthenticateWindows(params *AuthenticateAuthenticateWindowsParams, opts ...ClientOption) (*AuthenticateAuthenticateWindowsOK, error)

	AuthenticateGenerateToken(params *AuthenticateGenerateTokenParams, opts ...ClientOption) (*AuthenticateGenerateTokenOK, error)

	AuthenticateGenerateTokenWindows(params *AuthenticateGenerateTokenWindowsParams, opts ...ClientOption) (*AuthenticateGenerateTokenWindowsOK, error)

	AuthenticateValidateToken(params *AuthenticateValidateTokenParams, opts ...ClientOption) (*AuthenticateValidateTokenOK, error)

	AuthorizationAuthorize(params *AuthorizationAuthorizeParams, opts ...ClientOption) (*AuthorizationAuthorizeOK, error)

	AuthorizationConfirm(params *AuthorizationConfirmParams, opts ...ClientOption) (*AuthorizationConfirmOK, error)

	AuthorizationConfirmPayByLink(params *AuthorizationConfirmPayByLinkParams, opts ...ClientOption) (*AuthorizationConfirmPayByLinkOK, error)

	AuthorizationFinalize(params *AuthorizationFinalizeParams, opts ...ClientOption) (*AuthorizationFinalizeOK, error)

	AuthorizationLink(params *AuthorizationLinkParams, opts ...ClientOption) (*AuthorizationLinkOK, error)

	AuthorizationReverse(params *AuthorizationReverseParams, opts ...ClientOption) (*AuthorizationReverseOK, error)

	BatchMaintenanceCreate(params *BatchMaintenanceCreateParams, opts ...ClientOption) (*BatchMaintenanceCreateOK, error)

	BatchTypeGroupsCreate(params *BatchTypeGroupsCreateParams, opts ...ClientOption) (*BatchTypeGroupsCreateOK, error)

	BatchTypesCreate(params *BatchTypesCreateParams, opts ...ClientOption) (*BatchTypesCreateOK, error)

	BatchSample(params *BatchSampleParams, opts ...ClientOption) (*BatchSampleOK, error)

	BillingSchedulesCreate(params *BillingSchedulesCreateParams, opts ...ClientOption) (*BillingSchedulesCreateOK, error)

	BillingTypesCreate(params *BillingTypesCreateParams, opts ...ClientOption) (*BillingTypesCreateOK, error)

	BookingCategoriesCreate(params *BookingCategoriesCreateParams, opts ...ClientOption) (*BookingCategoriesCreateOK, error)

	BookingTemplatesCreate(params *BookingTemplatesCreateParams, opts ...ClientOption) (*BookingTemplatesCreateOK, error)

	BookingsAddDocument(params *BookingsAddDocumentParams, opts ...ClientOption) (*BookingsAddDocumentOK, error)

	BookingsCreate(params *BookingsCreateParams, opts ...ClientOption) (*BookingsCreateOK, error)

	BookingsCreateFromTemplate(params *BookingsCreateFromTemplateParams, opts ...ClientOption) (*BookingsCreateFromTemplateOK, error)

	BulkCopySetsCopyDay(params *BulkCopySetsCopyDayParams, opts ...ClientOption) (*BulkCopySetsCopyDayNoContent, error)

	BulkCopySetsCopyEvent(params *BulkCopySetsCopyEventParams, opts ...ClientOption) (*BulkCopySetsCopyEventOK, error)

	BulkCopySetsCreate(params *BulkCopySetsCreateParams, opts ...ClientOption) (*BulkCopySetsCreateOK, error)

	BulkCopySetsReplaceExclusions(params *BulkCopySetsReplaceExclusionsParams, opts ...ClientOption) (*BulkCopySetsReplaceExclusionsOK, error)

	BulkDailyCopyExclusionsCreate(params *BulkDailyCopyExclusionsCreateParams, opts ...ClientOption) (*BulkDailyCopyExclusionsCreateOK, error)

	BusinessUnitsCreate(params *BusinessUnitsCreateParams, opts ...ClientOption) (*BusinessUnitsCreateOK, error)

	CampaignDesignationsCreate(params *CampaignDesignationsCreateParams, opts ...ClientOption) (*CampaignDesignationsCreateOK, error)

	CampaignFundsCreate(params *CampaignFundsCreateParams, opts ...ClientOption) (*CampaignFundsCreateOK, error)

	CardReaderTypesCreate(params *CardReaderTypesCreateParams, opts ...ClientOption) (*CardReaderTypesCreateOK, error)

	CartAddBooking(params *CartAddBookingParams, opts ...ClientOption) (*CartAddBookingNoContent, error)

	CartAddContribution(params *CartAddContributionParams, opts ...ClientOption) (*CartAddContributionOK, error)

	CartAddGiftCertificate(params *CartAddGiftCertificateParams, opts ...ClientOption) (*CartAddGiftCertificateOK, error)

	CartAddNFSPackagePerformanceItem(params *CartAddNFSPackagePerformanceItemParams, opts ...ClientOption) (*CartAddNFSPackagePerformanceItemOK, error)

	CartAddOnAccount(params *CartAddOnAccountParams, opts ...ClientOption) (*CartAddOnAccountOK, error)

	CartAddPackageItem(params *CartAddPackageItemParams, opts ...ClientOption) (*CartAddPackageItemOK, error)

	CartAddPaymentPlan(params *CartAddPaymentPlanParams, opts ...ClientOption) (*CartAddPaymentPlanOK, error)

	CartAddPaymentPlanBasedOnBillingSchedule(params *CartAddPaymentPlanBasedOnBillingScheduleParams, opts ...ClientOption) (*CartAddPaymentPlanBasedOnBillingScheduleOK, error)

	CartAddPaymentPlanInstallments(params *CartAddPaymentPlanInstallmentsParams, opts ...ClientOption) (*CartAddPaymentPlanInstallmentsOK, error)

	CartAddSubPackageItem(params *CartAddSubPackageItemParams, opts ...ClientOption) (*CartAddSubPackageItemOK, error)

	CartAddUpdateFee(params *CartAddUpdateFeeParams, opts ...ClientOption) (*CartAddUpdateFeeOK, error)

	CartApplyCashPayment(params *CartApplyCashPaymentParams, opts ...ClientOption) (*CartApplyCashPaymentOK, error)

	CartApplyCheckPayment(params *CartApplyCheckPaymentParams, opts ...ClientOption) (*CartApplyCheckPaymentOK, error)

	CartApplyGiftCertificate(params *CartApplyGiftCertificateParams, opts ...ClientOption) (*CartApplyGiftCertificateOK, error)

	CartApplyInvoicePayment(params *CartApplyInvoicePaymentParams, opts ...ClientOption) (*CartApplyInvoicePaymentOK, error)

	CartApplyOnAccountPayment(params *CartApplyOnAccountPaymentParams, opts ...ClientOption) (*CartApplyOnAccountPaymentOK, error)

	CartApplyOtherPayment(params *CartApplyOtherPaymentParams, opts ...ClientOption) (*CartApplyOtherPaymentOK, error)

	CartAuthorize(params *CartAuthorizeParams, opts ...ClientOption) (*CartAuthorizeOK, error)

	CartCheckout(params *CartCheckoutParams, opts ...ClientOption) (*CartCheckoutOK, error)

	CartCheckoutWithCard(params *CartCheckoutWithCardParams, opts ...ClientOption) (*CartCheckoutWithCardOK, error)

	CartPreviewPaymentPlanBasedOnBillingSchedule(params *CartPreviewPaymentPlanBasedOnBillingScheduleParams, opts ...ClientOption) (*CartPreviewPaymentPlanBasedOnBillingScheduleOK, error)

	CartPrice(params *CartPriceParams, opts ...ClientOption) (*CartPriceNoContent, error)

	CartPrintEmail(params *CartPrintEmailParams, opts ...ClientOption) (*CartPrintEmailOK, error)

	CartPrintPrintStrings(params *CartPrintPrintStringsParams, opts ...ClientOption) (*CartPrintPrintStringsOK, error)

	CartPrintTicketElements(params *CartPrintTicketElementsParams, opts ...ClientOption) (*CartPrintTicketElementsOK, error)

	CartReserveTickets(params *CartReserveTicketsParams, opts ...ClientOption) (*CartReserveTicketsOK, error)

	CartReserveTicketsForLineItem(params *CartReserveTicketsForLineItemParams, opts ...ClientOption) (*CartReserveTicketsForLineItemOK, error)

	CartReturnTicket(params *CartReturnTicketParams, opts ...ClientOption) (*CartReturnTicketNoContent, error)

	CartReturnTicketWithSeat(params *CartReturnTicketWithSeatParams, opts ...ClientOption) (*CartReturnTicketWithSeatNoContent, error)

	CartValidate(params *CartValidateParams, opts ...ClientOption) (*CartValidateOK, error)

	CartValidateLimits(params *CartValidateLimitsParams, opts ...ClientOption) (*CartValidateLimitsNoContent, error)

	ColorsCreate(params *ColorsCreateParams, opts ...ClientOption) (*ColorsCreateOK, error)

	ComposersCreate(params *ComposersCreateParams, opts ...ClientOption) (*ComposersCreateOK, error)

	ConstituenciesCreate(params *ConstituenciesCreateParams, opts ...ClientOption) (*ConstituenciesCreateOK, error)

	ConstituencyTypesCreate(params *ConstituencyTypesCreateParams, opts ...ClientOption) (*ConstituencyTypesCreateOK, error)

	ConstituentDocumentsCreate(params *ConstituentDocumentsCreateParams, opts ...ClientOption) (*ConstituentDocumentsCreateOK, error)

	ConstituentGroupsCreate(params *ConstituentGroupsCreateParams, opts ...ClientOption) (*ConstituentGroupsCreateOK, error)

	ConstituentInactivesCreate(params *ConstituentInactivesCreateParams, opts ...ClientOption) (*ConstituentInactivesCreateOK, error)

	ConstituentProtectionTypesCreate(params *ConstituentProtectionTypesCreateParams, opts ...ClientOption) (*ConstituentProtectionTypesCreateOK, error)

	ConstituentTypeAffiliatesCreate(params *ConstituentTypeAffiliatesCreateParams, opts ...ClientOption) (*ConstituentTypeAffiliatesCreateOK, error)

	ConstituentTypesCreate(params *ConstituentTypesCreateParams, opts ...ClientOption) (*ConstituentTypesCreateOK, error)

	ConstituentsConvertGroupToIndividual(params *ConstituentsConvertGroupToIndividualParams, opts ...ClientOption) (*ConstituentsConvertGroupToIndividualOK, error)

	ConstituentsConvertIndividualToHousehold(params *ConstituentsConvertIndividualToHouseholdParams, opts ...ClientOption) (*ConstituentsConvertIndividualToHouseholdOK, error)

	ConstituentsConvertIndividualToOrganization(params *ConstituentsConvertIndividualToOrganizationParams, opts ...ClientOption) (*ConstituentsConvertIndividualToOrganizationOK, error)

	ConstituentsCreateConstituent(params *ConstituentsCreateConstituentParams, opts ...ClientOption) (*ConstituentsCreateConstituentOK, error)

	ConstituentsCreateConstituentUsingSnapshot(params *ConstituentsCreateConstituentUsingSnapshotParams, opts ...ClientOption) (*ConstituentsCreateConstituentUsingSnapshotOK, error)

	ConstituentsSchedulePurge(params *ConstituentsSchedulePurgeParams, opts ...ClientOption) (*ConstituentsSchedulePurgeOK, error)

	ConstituentsSearchByCardNumber(params *ConstituentsSearchByCardNumberParams, opts ...ClientOption) (*ConstituentsSearchByCardNumberOK, error)

	ConstituentsSwapConstituentA1A2(params *ConstituentsSwapConstituentA1A2Params, opts ...ClientOption) (*ConstituentsSwapConstituentA1A2OK, error)

	ConstituentsUnschedulePurge(params *ConstituentsUnschedulePurgeParams, opts ...ClientOption) (*ConstituentsUnschedulePurgeOK, error)

	ContactPermissionCategoriesCreate(params *ContactPermissionCategoriesCreateParams, opts ...ClientOption) (*ContactPermissionCategoriesCreateOK, error)

	ContactPermissionTypesCreate(params *ContactPermissionTypesCreateParams, opts ...ClientOption) (*ContactPermissionTypesCreateOK, error)

	ContactPermissionsCreate(params *ContactPermissionsCreateParams, opts ...ClientOption) (*ContactPermissionsCreateOK, error)

	ContactPermissionsForTransaction(params *ContactPermissionsForTransactionParams, opts ...ClientOption) (*ContactPermissionsForTransactionOK, error)

	ContactPointCategoriesCreate(params *ContactPointCategoriesCreateParams, opts ...ClientOption) (*ContactPointCategoriesCreateOK, error)

	ContactPointCategoryPurposesCreate(params *ContactPointCategoryPurposesCreateParams, opts ...ClientOption) (*ContactPointCategoryPurposesCreateOK, error)

	ContactPointPurposeCategoriesCreate(params *ContactPointPurposeCategoriesCreateParams, opts ...ClientOption) (*ContactPointPurposeCategoriesCreateOK, error)

	ContactPointPurposeMapsCreate(params *ContactPointPurposeMapsCreateParams, opts ...ClientOption) (*ContactPointPurposeMapsCreateOK, error)

	ContactPointPurposesCreate(params *ContactPointPurposesCreateParams, opts ...ClientOption) (*ContactPointPurposesCreateOK, error)

	ContactTypesCreate(params *ContactTypesCreateParams, opts ...ClientOption) (*ContactTypesCreateOK, error)

	ContributionDesignationsCreate(params *ContributionDesignationsCreateParams, opts ...ClientOption) (*ContributionDesignationsCreateOK, error)

	ContributionImportSetsCreate(params *ContributionImportSetsCreateParams, opts ...ClientOption) (*ContributionImportSetsCreateOK, error)

	ContributionsCreate(params *ContributionsCreateParams, opts ...ClientOption) (*ContributionsCreateOK, error)

	ControlGroupUserGroupsCreate(params *ControlGroupUserGroupsCreateParams, opts ...ClientOption) (*ControlGroupUserGroupsCreateOK, error)

	ControlGroupsCreate(params *ControlGroupsCreateParams, opts ...ClientOption) (*ControlGroupsCreateOK, error)

	CoreIdentitySign(params *CoreIdentitySignParams, opts ...ClientOption) (*CoreIdentitySignOK, error)

	CountriesCreate(params *CountriesCreateParams, opts ...ClientOption) (*CountriesCreateOK, error)

	CrediteeTypesCreate(params *CrediteeTypesCreateParams, opts ...ClientOption) (*CrediteeTypesCreateOK, error)

	CurrencyTypesCreate(params *CurrencyTypesCreateParams, opts ...ClientOption) (*CurrencyTypesCreateOK, error)

	CustomDefaultCategoriesCreate(params *CustomDefaultCategoriesCreateParams, opts ...ClientOption) (*CustomDefaultCategoriesCreateOK, error)

	CustomDefaultsCreate(params *CustomDefaultsCreateParams, opts ...ClientOption) (*CustomDefaultsCreateOK, error)

	CustomExecuteLocalProcedure(params *CustomExecuteLocalProcedureParams, opts ...ClientOption) (*CustomExecuteLocalProcedureOK, error)

	CustomExecuteLocalProcedureWithMultipleResultSets(params *CustomExecuteLocalProcedureWithMultipleResultSetsParams, opts ...ClientOption) (*CustomExecuteLocalProcedureWithMultipleResultSetsOK, error)

	DeliveryMethodsCreate(params *DeliveryMethodsCreateParams, opts ...ClientOption) (*DeliveryMethodsCreateOK, error)

	DesignationCodesCreate(params *DesignationCodesCreateParams, opts ...ClientOption) (*DesignationCodesCreateOK, error)

	DiagnosticsCheck(params *DiagnosticsCheckParams, opts ...ClientOption) (*DiagnosticsCheckOK, error)

	DirectDebitAccountTypesCreate(params *DirectDebitAccountTypesCreateParams, opts ...ClientOption) (*DirectDebitAccountTypesCreateOK, error)

	DiscountTypesCreate(params *DiscountTypesCreateParams, opts ...ClientOption) (*DiscountTypesCreateOK, error)

	DocumentCategoriesCreate(params *DocumentCategoriesCreateParams, opts ...ClientOption) (*DocumentCategoriesCreateOK, error)

	DonationLevelsCreate(params *DonationLevelsCreateParams, opts ...ClientOption) (*DonationLevelsCreateOK, error)

	EMVAuthorization(params *EMVAuthorizationParams, opts ...ClientOption) (*EMVAuthorizationOK, error)

	EMVCreateLane(params *EMVCreateLaneParams, opts ...ClientOption) (*EMVCreateLaneOK, error)

	EMVSignature(params *EMVSignatureParams, opts ...ClientOption) (*EMVSignatureOK, error)

	EMVTokenCreate(params *EMVTokenCreateParams, opts ...ClientOption) (*EMVTokenCreateOK, error)

	ElectronicAddressTypesCreate(params *ElectronicAddressTypesCreateParams, opts ...ClientOption) (*ElectronicAddressTypesCreateOK, error)

	ElectronicAddressesCreate(params *ElectronicAddressesCreateParams, opts ...ClientOption) (*ElectronicAddressesCreateOK, error)

	ElectronicAddressesMove(params *ElectronicAddressesMoveParams, opts ...ClientOption) (*ElectronicAddressesMoveOK, error)

	EmailProfilesCreate(params *EmailProfilesCreateParams, opts ...ClientOption) (*EmailProfilesCreateOK, error)

	EmailResponsesUpdateAppeal(params *EmailResponsesUpdateAppealParams, opts ...ClientOption) (*EmailResponsesUpdateAppealNoContent, error)

	EmailsSend(params *EmailsSendParams, opts ...ClientOption) (*EmailsSendNoContent, error)

	EmailsSendConstituentInfo(params *EmailsSendConstituentInfoParams, opts ...ClientOption) (*EmailsSendConstituentInfoNoContent, error)

	EmailsSendLoginCredentials(params *EmailsSendLoginCredentialsParams, opts ...ClientOption) (*EmailsSendLoginCredentialsNoContent, error)

	EmailsSendOrderConfirmation(params *EmailsSendOrderConfirmationParams, opts ...ClientOption) (*EmailsSendOrderConfirmationNoContent, error)

	EmailsSendTickets(params *EmailsSendTicketsParams, opts ...ClientOption) (*EmailsSendTicketsNoContent, error)

	EmarketIndicatorsCreate(params *EmarketIndicatorsCreateParams, opts ...ClientOption) (*EmarketIndicatorsCreateOK, error)

	ErasCreate(params *ErasCreateParams, opts ...ClientOption) (*ErasCreateOK, error)

	FacilitiesCreate(params *FacilitiesCreateParams, opts ...ClientOption) (*FacilitiesCreateOK, error)

	GendersCreate(params *GendersCreateParams, opts ...ClientOption) (*GendersCreateOK, error)

	GiftAidContactMethodsCreate(params *GiftAidContactMethodsCreateParams, opts ...ClientOption) (*GiftAidContactMethodsCreateOK, error)

	GiftAidDeclarationsCreate(params *GiftAidDeclarationsCreateParams, opts ...ClientOption) (*GiftAidDeclarationsCreateOK, error)

	GiftAidDocumentStatusesCreate(params *GiftAidDocumentStatusesCreateParams, opts ...ClientOption) (*GiftAidDocumentStatusesCreateOK, error)

	GiftAidIneligibleReasonsCreate(params *GiftAidIneligibleReasonsCreateParams, opts ...ClientOption) (*GiftAidIneligibleReasonsCreateOK, error)

	GiftAidRatesCreate(params *GiftAidRatesCreateParams, opts ...ClientOption) (*GiftAidRatesCreateOK, error)

	GiftAidStatusesCreate(params *GiftAidStatusesCreateParams, opts ...ClientOption) (*GiftAidStatusesCreateOK, error)

	GiftAidTypesCreate(params *GiftAidTypesCreateParams, opts ...ClientOption) (*GiftAidTypesCreateOK, error)

	GiftCertificatesTransactionDetailsForRedemption(params *GiftCertificatesTransactionDetailsForRedemptionParams, opts ...ClientOption) (*GiftCertificatesTransactionDetailsForRedemptionOK, error)

	GiftCertificatesUnlock(params *GiftCertificatesUnlockParams, opts ...ClientOption) (*GiftCertificatesUnlockOK, error)

	HoldCodeCategoriesCreate(params *HoldCodeCategoriesCreateParams, opts ...ClientOption) (*HoldCodeCategoriesCreateOK, error)

	HoldCodeUserGroupsCreate(params *HoldCodeUserGroupsCreateParams, opts ...ClientOption) (*HoldCodeUserGroupsCreateOK, error)

	HoldCodesCreate(params *HoldCodesCreateParams, opts ...ClientOption) (*HoldCodesCreateOK, error)

	InactiveReasonsCreate(params *InactiveReasonsCreateParams, opts ...ClientOption) (*InactiveReasonsCreateOK, error)

	IntegrationDefaultsCreate(params *IntegrationDefaultsCreateParams, opts ...ClientOption) (*IntegrationDefaultsCreateOK, error)

	IntegrationsCreate(params *IntegrationsCreateParams, opts ...ClientOption) (*IntegrationsCreateOK, error)

	InterestCategoriesCreate(params *InterestCategoriesCreateParams, opts ...ClientOption) (*InterestCategoriesCreateOK, error)

	InterestTypesCreate(params *InterestTypesCreateParams, opts ...ClientOption) (*InterestTypesCreateOK, error)

	InterestsCreate(params *InterestsCreateParams, opts ...ClientOption) (*InterestsCreateOK, error)

	InterestsCreateOrUpdate(params *InterestsCreateOrUpdateParams, opts ...ClientOption) (*InterestsCreateOrUpdateOK, error)

	InternalCreate(params *InternalCreateParams, opts ...ClientOption) (*InternalCreateOK, error)

	InventoryContactPermissionTypesCreate(params *InventoryContactPermissionTypesCreateParams, opts ...ClientOption) (*InventoryContactPermissionTypesCreateOK, error)

	InventoryWebContentsCreate(params *InventoryWebContentsCreateParams, opts ...ClientOption) (*InventoryWebContentsCreateOK, error)

	InvoiceBillingBillInvoices(params *InvoiceBillingBillInvoicesParams, opts ...ClientOption) (*InvoiceBillingBillInvoicesOK, error)

	IssuesCreate(params *IssuesCreateParams, opts ...ClientOption) (*IssuesCreateOK, error)

	KeywordCategoriesCreate(params *KeywordCategoriesCreateParams, opts ...ClientOption) (*KeywordCategoriesCreateOK, error)

	KeywordsCreate(params *KeywordsCreateParams, opts ...ClientOption) (*KeywordsCreateOK, error)

	LanguagesCreate(params *LanguagesCreateParams, opts ...ClientOption) (*LanguagesCreateOK, error)

	ListCategoriesCreate(params *ListCategoriesCreateParams, opts ...ClientOption) (*ListCategoriesCreateOK, error)

	ListsCreate(params *ListsCreateParams, opts ...ClientOption) (*ListsCreateOK, error)

	ListsGenerate(params *ListsGenerateParams, opts ...ClientOption) (*ListsGenerateOK, error)

	ListsResults(params *ListsResultsParams, opts ...ClientOption) (*ListsResultsOK, error)

	ListsSearch(params *ListsSearchParams, opts ...ClientOption) (*ListsSearchOK, error)

	LoginTypesCreate(params *LoginTypesCreateParams, opts ...ClientOption) (*LoginTypesCreateOK, error)

	MachineSettingsCreate(params *MachineSettingsCreateParams, opts ...ClientOption) (*MachineSettingsCreateOK, error)

	MailIndicatorsCreate(params *MailIndicatorsCreateParams, opts ...ClientOption) (*MailIndicatorsCreateOK, error)

	MediaTypesCreate(params *MediaTypesCreateParams, opts ...ClientOption) (*MediaTypesCreateOK, error)

	MembershipLevelCategoriesCreate(params *MembershipLevelCategoriesCreateParams, opts ...ClientOption) (*MembershipLevelCategoriesCreateOK, error)

	MembershipsCalculate(params *MembershipsCalculateParams, opts ...ClientOption) (*MembershipsCalculateOK, error)

	ModeOfSaleCategoriesCreate(params *ModeOfSaleCategoriesCreateParams, opts ...ClientOption) (*ModeOfSaleCategoriesCreateOK, error)

	ModeOfSaleOffersCreate(params *ModeOfSaleOffersCreateParams, opts ...ClientOption) (*ModeOfSaleOffersCreateOK, error)

	ModeOfSalePriceTypesCreate(params *ModeOfSalePriceTypesCreateParams, opts ...ClientOption) (*ModeOfSalePriceTypesCreateOK, error)

	ModeOfSaleSurveyQuestionsCreate(params *ModeOfSaleSurveyQuestionsCreateParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsCreateOK, error)

	ModeOfSaleUserGroupsCreate(params *ModeOfSaleUserGroupsCreateParams, opts ...ClientOption) (*ModeOfSaleUserGroupsCreateOK, error)

	ModesOfSaleCreate(params *ModesOfSaleCreateParams, opts ...ClientOption) (*ModesOfSaleCreateOK, error)

	NScanAccessAreasCreate(params *NScanAccessAreasCreateParams, opts ...ClientOption) (*NScanAccessAreasCreateOK, error)

	NameStatusesCreate(params *NameStatusesCreateParams, opts ...ClientOption) (*NameStatusesCreateOK, error)

	ObjectPermissionsCreate(params *ObjectPermissionsCreateParams, opts ...ClientOption) (*ObjectPermissionsCreateOK, error)

	OrderBillingBillOrders(params *OrderBillingBillOrdersParams, opts ...ClientOption) (*OrderBillingBillOrdersOK, error)

	OrderCategoriesCreate(params *OrderCategoriesCreateParams, opts ...ClientOption) (*OrderCategoriesCreateOK, error)

	OrdersCreate(params *OrdersCreateParams, opts ...ClientOption) (*OrdersCreateOK, error)

	OrdersGetOrdersForDelivery(params *OrdersGetOrdersForDeliveryParams, opts ...ClientOption) (*OrdersGetOrdersForDeliveryOK, error)

	OrdersPrice(params *OrdersPriceParams, opts ...ClientOption) (*OrdersPriceOK, error)

	OrdersPrintHTMLTickets(params *OrdersPrintHTMLTicketsParams, opts ...ClientOption) (*OrdersPrintHTMLTicketsOK, error)

	OrdersPrintTicketElements(params *OrdersPrintTicketElementsParams, opts ...ClientOption) (*OrdersPrintTicketElementsOK, error)

	OrganizationsCreate(params *OrganizationsCreateParams, opts ...ClientOption) (*OrganizationsCreateOK, error)

	OriginalSourcesCreate(params *OriginalSourcesCreateParams, opts ...ClientOption) (*OriginalSourcesCreateOK, error)

	OriginsCreate(params *OriginsCreateParams, opts ...ClientOption) (*OriginsCreateOK, error)

	OutputSetsCreate(params *OutputSetsCreateParams, opts ...ClientOption) (*OutputSetsCreateOK, error)

	PackagePriceTypesCreate(params *PackagePriceTypesCreateParams, opts ...ClientOption) (*PackagePriceTypesCreateOK, error)

	PackageTypesCreate(params *PackageTypesCreateParams, opts ...ClientOption) (*PackageTypesCreateOK, error)

	PackageWebContentsCreate(params *PackageWebContentsCreateParams, opts ...ClientOption) (*PackageWebContentsCreateOK, error)

	PackagesSearch(params *PackagesSearchParams, opts ...ClientOption) (*PackagesSearchOK, error)

	PaymentComponentGetPaymentComponent(params *PaymentComponentGetPaymentComponentParams, opts ...ClientOption) (*PaymentComponentGetPaymentComponentOK, error)

	PaymentGatewayAccountsCreateAccount(params *PaymentGatewayAccountsCreateAccountParams, opts ...ClientOption) (*PaymentGatewayAccountsCreateAccountOK, error)

	PaymentGatewayAccountsStoreToken(params *PaymentGatewayAccountsStoreTokenParams, opts ...ClientOption) (*PaymentGatewayAccountsStoreTokenOK, error)

	PaymentGatewayActivitiesCreate(params *PaymentGatewayActivitiesCreateParams, opts ...ClientOption) (*PaymentGatewayActivitiesCreateOK, error)

	PaymentGatewayCredentialsGetCredential(params *PaymentGatewayCredentialsGetCredentialParams, opts ...ClientOption) (*PaymentGatewayCredentialsGetCredentialOK, error)

	PaymentGatewayNotificationsCreateNotificationEvent(params *PaymentGatewayNotificationsCreateNotificationEventParams, opts ...ClientOption) (*PaymentGatewayNotificationsCreateNotificationEventOK, error)

	PaymentGatewayTransactionTypesCreate(params *PaymentGatewayTransactionTypesCreateParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesCreateOK, error)

	PaymentMethodGroupsCreate(params *PaymentMethodGroupsCreateParams, opts ...ClientOption) (*PaymentMethodGroupsCreateOK, error)

	PaymentMethodUserGroupsCreate(params *PaymentMethodUserGroupsCreateParams, opts ...ClientOption) (*PaymentMethodUserGroupsCreateOK, error)

	PaymentMethodsCreate(params *PaymentMethodsCreateParams, opts ...ClientOption) (*PaymentMethodsCreateOK, error)

	PaymentSignaturesCreate(params *PaymentSignaturesCreateParams, opts ...ClientOption) (*PaymentSignaturesCreateOK, error)

	PaymentSignaturesPostForOrder(params *PaymentSignaturesPostForOrderParams, opts ...ClientOption) (*PaymentSignaturesPostForOrderOK, error)

	PaymentTypesCreate(params *PaymentTypesCreateParams, opts ...ClientOption) (*PaymentTypesCreateOK, error)

	PaymentsReserveIds(params *PaymentsReserveIdsParams, opts ...ClientOption) (*PaymentsReserveIdsOK, error)

	PerformanceGroupsCreate(params *PerformanceGroupsCreateParams, opts ...ClientOption) (*PerformanceGroupsCreateOK, error)

	PerformancePackageModeOfSalesCreate(params *PerformancePackageModeOfSalesCreateParams, opts ...ClientOption) (*PerformancePackageModeOfSalesCreateOK, error)

	PerformancePriceLayersCreate(params *PerformancePriceLayersCreateParams, opts ...ClientOption) (*PerformancePriceLayersCreateOK, error)

	PerformancePriceLayersPostSummaries(params *PerformancePriceLayersPostSummariesParams, opts ...ClientOption) (*PerformancePriceLayersPostSummariesNoContent, error)

	PerformancePriceLayersSearch(params *PerformancePriceLayersSearchParams, opts ...ClientOption) (*PerformancePriceLayersSearchOK, error)

	PerformancePriceLayersSearchSummaries(params *PerformancePriceLayersSearchSummariesParams, opts ...ClientOption) (*PerformancePriceLayersSearchSummariesOK, error)

	PerformancePriceTypesCreate(params *PerformancePriceTypesCreateParams, opts ...ClientOption) (*PerformancePriceTypesCreateOK, error)

	PerformancePricesCreate(params *PerformancePricesCreateParams, opts ...ClientOption) (*PerformancePricesCreateOK, error)

	PerformanceStatusesCreate(params *PerformanceStatusesCreateParams, opts ...ClientOption) (*PerformanceStatusesCreateOK, error)

	PerformanceTypesCreate(params *PerformanceTypesCreateParams, opts ...ClientOption) (*PerformanceTypesCreateOK, error)

	PerformancesApplySingleHold(params *PerformancesApplySingleHoldParams, opts ...ClientOption) (*PerformancesApplySingleHoldOK, error)

	PerformancesCopy(params *PerformancesCopyParams, opts ...ClientOption) (*PerformancesCopyNoContent, error)

	PerformancesReschedule(params *PerformancesRescheduleParams, opts ...ClientOption) (*PerformancesRescheduleNoContent, error)

	PerformancesSearch(params *PerformancesSearchParams, opts ...ClientOption) (*PerformancesSearchOK, error)

	PerformancesUpdateSeatHolds(params *PerformancesUpdateSeatHoldsParams, opts ...ClientOption) (*PerformancesUpdateSeatHoldsOK, error)

	PhilanthropyTypesCreate(params *PhilanthropyTypesCreateParams, opts ...ClientOption) (*PhilanthropyTypesCreateOK, error)

	PhilanthropyCreate(params *PhilanthropyCreateParams, opts ...ClientOption) (*PhilanthropyCreateOK, error)

	PhoneIndicatorsCreate(params *PhoneIndicatorsCreateParams, opts ...ClientOption) (*PhoneIndicatorsCreateOK, error)

	PhoneTypesCreate(params *PhoneTypesCreateParams, opts ...ClientOption) (*PhoneTypesCreateOK, error)

	PhonesCreate(params *PhonesCreateParams, opts ...ClientOption) (*PhonesCreateOK, error)

	PlanPrioritiesCreate(params *PlanPrioritiesCreateParams, opts ...ClientOption) (*PlanPrioritiesCreateOK, error)

	PlanSourcesCreate(params *PlanSourcesCreateParams, opts ...ClientOption) (*PlanSourcesCreateOK, error)

	PlanStatusesCreate(params *PlanStatusesCreateParams, opts ...ClientOption) (*PlanStatusesCreateOK, error)

	PlanTypesCreate(params *PlanTypesCreateParams, opts ...ClientOption) (*PlanTypesCreateOK, error)

	PlanWorkersCreate(params *PlanWorkersCreateParams, opts ...ClientOption) (*PlanWorkersCreateOK, error)

	PlansCreate(params *PlansCreateParams, opts ...ClientOption) (*PlansCreateOK, error)

	PledgeBillingBillPledges(params *PledgeBillingBillPledgesParams, opts ...ClientOption) (*PledgeBillingBillPledgesOK, error)

	PortfolioCustomElementsCreate(params *PortfolioCustomElementsCreateParams, opts ...ClientOption) (*PortfolioCustomElementsCreateOK, error)

	PrefixesCreate(params *PrefixesCreateParams, opts ...ClientOption) (*PrefixesCreateOK, error)

	PremieresCreate(params *PremieresCreateParams, opts ...ClientOption) (*PremieresCreateOK, error)

	PriceCategoriesCreate(params *PriceCategoriesCreateParams, opts ...ClientOption) (*PriceCategoriesCreateOK, error)

	PriceLayerTypesCreate(params *PriceLayerTypesCreateParams, opts ...ClientOption) (*PriceLayerTypesCreateOK, error)

	PriceTemplatesCreate(params *PriceTemplatesCreateParams, opts ...ClientOption) (*PriceTemplatesCreateOK, error)

	PriceTypeCategoriesCreate(params *PriceTypeCategoriesCreateParams, opts ...ClientOption) (*PriceTypeCategoriesCreateOK, error)

	PriceTypeGroupsCreate(params *PriceTypeGroupsCreateParams, opts ...ClientOption) (*PriceTypeGroupsCreateOK, error)

	PriceTypeReasonsCreate(params *PriceTypeReasonsCreateParams, opts ...ClientOption) (*PriceTypeReasonsCreateOK, error)

	PriceTypeUserGroupsCreate(params *PriceTypeUserGroupsCreateParams, opts ...ClientOption) (*PriceTypeUserGroupsCreateOK, error)

	PriceTypesCreate(params *PriceTypesCreateParams, opts ...ClientOption) (*PriceTypesCreateOK, error)

	PricingRuleCategoriesCreate(params *PricingRuleCategoriesCreateParams, opts ...ClientOption) (*PricingRuleCategoriesCreateOK, error)

	PricingRuleMessageTypesCreate(params *PricingRuleMessageTypesCreateParams, opts ...ClientOption) (*PricingRuleMessageTypesCreateOK, error)

	PricingRuleSetsCreate(params *PricingRuleSetsCreateParams, opts ...ClientOption) (*PricingRuleSetsCreateOK, error)

	PricingRulesCreate(params *PricingRulesCreateParams, opts ...ClientOption) (*PricingRulesCreateOK, error)

	PrintersCreate(params *PrintersCreateParams, opts ...ClientOption) (*PrintersCreateOK, error)

	ProductionSeasonMembershipOrganizationsCreate(params *ProductionSeasonMembershipOrganizationsCreateParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsCreateOK, error)

	ProductionSeasonsSearch(params *ProductionSeasonsSearchParams, opts ...ClientOption) (*ProductionSeasonsSearchOK, error)

	ProductsDescribe(params *ProductsDescribeParams, opts ...ClientOption) (*ProductsDescribeOK, error)

	ProductsSearch(params *ProductsSearchParams, opts ...ClientOption) (*ProductsSearchOK, error)

	ProgramListingsCreate(params *ProgramListingsCreateParams, opts ...ClientOption) (*ProgramListingsCreateOK, error)

	ProgramsCreate(params *ProgramsCreateParams, opts ...ClientOption) (*ProgramsCreateOK, error)

	PronounsCreate(params *PronounsCreateParams, opts ...ClientOption) (*PronounsCreateOK, error)

	QualificationCategoriesCreate(params *QualificationCategoriesCreateParams, opts ...ClientOption) (*QualificationCategoriesCreateOK, error)

	QualificationsCreate(params *QualificationsCreateParams, opts ...ClientOption) (*QualificationsCreateOK, error)

	QueryElementFiltersCreate(params *QueryElementFiltersCreateParams, opts ...ClientOption) (*QueryElementFiltersCreateOK, error)

	QueryElementGroupsCreate(params *QueryElementGroupsCreateParams, opts ...ClientOption) (*QueryElementGroupsCreateOK, error)

	QueryElementsCreate(params *QueryElementsCreateParams, opts ...ClientOption) (*QueryElementsCreateOK, error)

	RankTypesCreate(params *RankTypesCreateParams, opts ...ClientOption) (*RankTypesCreateOK, error)

	RankingsCreate(params *RankingsCreateParams, opts ...ClientOption) (*RankingsCreateOK, error)

	ReceiptSettingsCreate(params *ReceiptSettingsCreateParams, opts ...ClientOption) (*ReceiptSettingsCreateOK, error)

	RecordAttendanceRecordTicket(params *RecordAttendanceRecordTicketParams, opts ...ClientOption) (*RecordAttendanceRecordTicketOK, error)

	ReferenceTableUserGroupsCreate(params *ReferenceTableUserGroupsCreateParams, opts ...ClientOption) (*ReferenceTableUserGroupsCreateOK, error)

	RegistrationRegister(params *RegistrationRegisterParams, opts ...ClientOption) (*RegistrationRegisterOK, error)

	RelationshipCategoriesCreate(params *RelationshipCategoriesCreateParams, opts ...ClientOption) (*RelationshipCategoriesCreateOK, error)

	ReportRequestsCreate(params *ReportRequestsCreateParams, opts ...ClientOption) (*ReportRequestsCreateOK, error)

	ReportRequestsGenerateScheduled(params *ReportRequestsGenerateScheduledParams, opts ...ClientOption) (*ReportRequestsGenerateScheduledOK, error)

	ReportSchedulesCalculateNextRun(params *ReportSchedulesCalculateNextRunParams, opts ...ClientOption) (*ReportSchedulesCalculateNextRunOK, error)

	ReportSchedulesSave(params *ReportSchedulesSaveParams, opts ...ClientOption) (*ReportSchedulesSaveOK, error)

	ReportUserGroupsCreate(params *ReportUserGroupsCreateParams, opts ...ClientOption) (*ReportUserGroupsCreateOK, error)

	ReportsGetParameterValues(params *ReportsGetParameterValuesParams, opts ...ClientOption) (*ReportsGetParameterValuesOK, error)

	ResearchTypesCreate(params *ResearchTypesCreateParams, opts ...ClientOption) (*ResearchTypesCreateOK, error)

	ResearchCreate(params *ResearchCreateParams, opts ...ClientOption) (*ResearchCreateOK, error)

	ResourceCategoriesCreate(params *ResourceCategoriesCreateParams, opts ...ClientOption) (*ResourceCategoriesCreateOK, error)

	ResourceSchedulesCreate(params *ResourceSchedulesCreateParams, opts ...ClientOption) (*ResourceSchedulesCreateOK, error)

	ResourceTypesCreate(params *ResourceTypesCreateParams, opts ...ClientOption) (*ResourceTypesCreateOK, error)

	ResourcesCreate(params *ResourcesCreateParams, opts ...ClientOption) (*ResourcesCreateOK, error)

	ResourcesFindAvailableResources(params *ResourcesFindAvailableResourcesParams, opts ...ClientOption) (*ResourcesFindAvailableResourcesOK, error)

	ResourcesGetScheduleOccurrences(params *ResourcesGetScheduleOccurrencesParams, opts ...ClientOption) (*ResourcesGetScheduleOccurrencesOK, error)

	SalesChannelsCreate(params *SalesChannelsCreateParams, opts ...ClientOption) (*SalesChannelsCreateOK, error)

	SalesLayoutButtonTypesCreate(params *SalesLayoutButtonTypesCreateParams, opts ...ClientOption) (*SalesLayoutButtonTypesCreateOK, error)

	SalesLayoutsCreate(params *SalesLayoutsCreateParams, opts ...ClientOption) (*SalesLayoutsCreateOK, error)

	SalutationTypesCreate(params *SalutationTypesCreateParams, opts ...ClientOption) (*SalutationTypesCreateOK, error)

	SalutationsCreate(params *SalutationsCreateParams, opts ...ClientOption) (*SalutationsCreateOK, error)

	SchedulePatternTypesCreate(params *SchedulePatternTypesCreateParams, opts ...ClientOption) (*SchedulePatternTypesCreateOK, error)

	ScheduleTypesCreate(params *ScheduleTypesCreateParams, opts ...ClientOption) (*ScheduleTypesCreateOK, error)

	SeasonTypesCreate(params *SeasonTypesCreateParams, opts ...ClientOption) (*SeasonTypesCreateOK, error)

	SeasonsCreate(params *SeasonsCreateParams, opts ...ClientOption) (*SeasonsCreateOK, error)

	SeatCodesCreate(params *SeatCodesCreateParams, opts ...ClientOption) (*SeatCodesCreateOK, error)

	SeatStatusesCreate(params *SeatStatusesCreateParams, opts ...ClientOption) (*SeatStatusesCreateOK, error)

	SectionsCreate(params *SectionsCreateParams, opts ...ClientOption) (*SectionsCreateOK, error)

	ServiceResourceUserGroupsCreate(params *ServiceResourceUserGroupsCreateParams, opts ...ClientOption) (*ServiceResourceUserGroupsCreateOK, error)

	SessionAddVariable(params *SessionAddVariableParams, opts ...ClientOption) (*SessionAddVariableOK, error)

	SessionCreateBusinessFacingSession(params *SessionCreateBusinessFacingSessionParams, opts ...ClientOption) (*SessionCreateBusinessFacingSessionOK, error)

	SessionCreateSession(params *SessionCreateSessionParams, opts ...ClientOption) (*SessionCreateSessionOK, error)

	SessionCreateWebLogin(params *SessionCreateWebLoginParams, opts ...ClientOption) (*SessionCreateWebLoginOK, error)

	SessionGetPromoCode(params *SessionGetPromoCodeParams, opts ...ClientOption) (*SessionGetPromoCodeOK, error)

	SessionLoadOrder(params *SessionLoadOrderParams, opts ...ClientOption) (*SessionLoadOrderOK, error)

	SessionLogin(params *SessionLoginParams, opts ...ClientOption) (*SessionLoginOK, error)

	SessionLoginAsGuest(params *SessionLoginAsGuestParams, opts ...ClientOption) (*SessionLoginAsGuestOK, error)

	SessionLoginUsingConstituentInfo(params *SessionLoginUsingConstituentInfoParams, opts ...ClientOption) (*SessionLoginUsingConstituentInfoOK, error)

	SessionLoginUsingEmail(params *SessionLoginUsingEmailParams, opts ...ClientOption) (*SessionLoginUsingEmailOK, error)

	SessionLoginUsingExternal(params *SessionLoginUsingExternalParams, opts ...ClientOption) (*SessionLoginUsingExternalOK, error)

	SessionLoginUsingToken(params *SessionLoginUsingTokenParams, opts ...ClientOption) (*SessionLoginUsingTokenOK, error)

	SessionLogout(params *SessionLogoutParams, opts ...ClientOption) (*SessionLogoutNoContent, error)

	SessionReprint(params *SessionReprintParams, opts ...ClientOption) (*SessionReprintNoContent, error)

	SessionSendLoginCredentials(params *SessionSendLoginCredentialsParams, opts ...ClientOption) (*SessionSendLoginCredentialsOK, error)

	SessionTransferSession(params *SessionTransferSessionParams, opts ...ClientOption) (*SessionTransferSessionNoContent, error)

	SourceGroupsCreate(params *SourceGroupsCreateParams, opts ...ClientOption) (*SourceGroupsCreateOK, error)

	SpecialActivitiesCreate(params *SpecialActivitiesCreateParams, opts ...ClientOption) (*SpecialActivitiesCreateOK, error)

	SpecialActivityStatusesCreate(params *SpecialActivityStatusesCreateParams, opts ...ClientOption) (*SpecialActivityStatusesCreateOK, error)

	SpecialActivityTypesCreate(params *SpecialActivityTypesCreateParams, opts ...ClientOption) (*SpecialActivityTypesCreateOK, error)

	StatesCreate(params *StatesCreateParams, opts ...ClientOption) (*StatesCreateOK, error)

	StepTypesCreate(params *StepTypesCreateParams, opts ...ClientOption) (*StepTypesCreateOK, error)

	StepsAddDocument(params *StepsAddDocumentParams, opts ...ClientOption) (*StepsAddDocumentOK, error)

	StepsCreate(params *StepsCreateParams, opts ...ClientOption) (*StepsCreateOK, error)

	SubLineItemStatusesCreate(params *SubLineItemStatusesCreateParams, opts ...ClientOption) (*SubLineItemStatusesCreateOK, error)

	SuffixesCreate(params *SuffixesCreateParams, opts ...ClientOption) (*SuffixesCreateOK, error)

	SurveyQuestionsCreate(params *SurveyQuestionsCreateParams, opts ...ClientOption) (*SurveyQuestionsCreateOK, error)

	SurveyResponsesCreate(params *SurveyResponsesCreateParams, opts ...ClientOption) (*SurveyResponsesCreateOK, error)

	TemplateCategoriesCreate(params *TemplateCategoriesCreateParams, opts ...ClientOption) (*TemplateCategoriesCreateOK, error)

	TemplatePriceTypesBatchCreate(params *TemplatePriceTypesBatchCreateParams, opts ...ClientOption) (*TemplatePriceTypesBatchCreateOK, error)

	TemplatePriceTypesCreate(params *TemplatePriceTypesCreateParams, opts ...ClientOption) (*TemplatePriceTypesCreateOK, error)

	TemplatePricesBatchCreate(params *TemplatePricesBatchCreateParams, opts ...ClientOption) (*TemplatePricesBatchCreateOK, error)

	TemplatePricesCreate(params *TemplatePricesCreateParams, opts ...ClientOption) (*TemplatePricesCreateOK, error)

	TemplatesCreate(params *TemplatesCreateParams, opts ...ClientOption) (*TemplatesCreateOK, error)

	TemplatesGetConstituentInfo(params *TemplatesGetConstituentInfoParams, opts ...ClientOption) (*TemplatesGetConstituentInfoOK, error)

	TemplatesGetLoginCredentials(params *TemplatesGetLoginCredentialsParams, opts ...ClientOption) (*TemplatesGetLoginCredentialsOK, error)

	TemplatesGetOrderConfirmation(params *TemplatesGetOrderConfirmationParams, opts ...ClientOption) (*TemplatesGetOrderConfirmationOK, error)

	TemplatesGetTickets(params *TemplatesGetTicketsParams, opts ...ClientOption) (*TemplatesGetTicketsOK, error)

	TemplatesRenderConstituentInfo(params *TemplatesRenderConstituentInfoParams, opts ...ClientOption) (*TemplatesRenderConstituentInfoOK, error)

	TemplatesRenderLoginCredentials(params *TemplatesRenderLoginCredentialsParams, opts ...ClientOption) (*TemplatesRenderLoginCredentialsOK, error)

	TemplatesRenderOrderConfirmation(params *TemplatesRenderOrderConfirmationParams, opts ...ClientOption) (*TemplatesRenderOrderConfirmationOK, error)

	TemplatesRenderTickets(params *TemplatesRenderTicketsParams, opts ...ClientOption) (*TemplatesRenderTicketsOK, error)

	TheatersCreate(params *TheatersCreateParams, opts ...ClientOption) (*TheatersCreateOK, error)

	TimeSlotsCreate(params *TimeSlotsCreateParams, opts ...ClientOption) (*TimeSlotsCreateOK, error)

	TriPOSCloudConfigurationsCreate(params *TriPOSCloudConfigurationsCreateParams, opts ...ClientOption) (*TriPOSCloudConfigurationsCreateOK, error)

	UpgradeCategoriesCreate(params *UpgradeCategoriesCreateParams, opts ...ClientOption) (*UpgradeCategoriesCreateOK, error)

	UpgradeLogsCreate(params *UpgradeLogsCreateParams, opts ...ClientOption) (*UpgradeLogsCreateOK, error)

	UserPreferencesCreate(params *UserPreferencesCreateParams, opts ...ClientOption) (*UserPreferencesCreateOK, error)

	UserPreferencesSaveBatch(params *UserPreferencesSaveBatchParams, opts ...ClientOption) (*UserPreferencesSaveBatchOK, error)

	UsersChangePassword(params *UsersChangePasswordParams, opts ...ClientOption) (*UsersChangePasswordOK, error)

	ValidateWebLoginCreate(params *ValidateWebLoginCreateParams, opts ...ClientOption) (*ValidateWebLoginCreateOK, error)

	WebContentTypesCreate(params *WebContentTypesCreateParams, opts ...ClientOption) (*WebContentTypesCreateOK, error)

	WebLoginsCreate(params *WebLoginsCreateParams, opts ...ClientOption) (*WebLoginsCreateOK, error)

	WorkerQualificationsCreate(params *WorkerQualificationsCreateParams, opts ...ClientOption) (*WorkerQualificationsCreateOK, error)

	WorkerRolesCreate(params *WorkerRolesCreateParams, opts ...ClientOption) (*WorkerRolesCreateOK, error)

	WorkerTypesCreate(params *WorkerTypesCreateParams, opts ...ClientOption) (*WorkerTypesCreateOK, error)

	WorkersCreate(params *WorkersCreateParams, opts ...ClientOption) (*WorkersCreateOK, error)

	ZoneGroupsCreate(params *ZoneGroupsCreateParams, opts ...ClientOption) (*ZoneGroupsCreateOK, error)

	ZoneMapsCreate(params *ZoneMapsCreateParams, opts ...ClientOption) (*ZoneMapsCreateOK, error)

	ZonesCreate(params *ZonesCreateParams, opts ...ClientOption) (*ZonesCreateOK, error)

	ZonesSearch(params *ZonesSearchParams, opts ...ClientOption) (*ZonesSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccountTypesCreate creates a new account type
*/
func (a *Client) AccountTypesCreate(params *AccountTypesCreateParams, opts ...ClientOption) (*AccountTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/AccountTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AccountsCreateCardNumberAccount creates a credit card account storing the card number will create and store a token if tokenization is enabled
*/
func (a *Client) AccountsCreateCardNumberAccount(params *AccountsCreateCardNumberAccountParams, opts ...ClientOption) (*AccountsCreateCardNumberAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsCreateCardNumberAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_CreateCardNumberAccount",
		Method:             "POST",
		PathPattern:        "/CRM/Accounts/CardNumber",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsCreateCardNumberAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsCreateCardNumberAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountsCreateCardNumberAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AccountsCreateDirectDebitAccount stores a direct debit account
*/
func (a *Client) AccountsCreateDirectDebitAccount(params *AccountsCreateDirectDebitAccountParams, opts ...ClientOption) (*AccountsCreateDirectDebitAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsCreateDirectDebitAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_CreateDirectDebitAccount",
		Method:             "POST",
		PathPattern:        "/CRM/Accounts/DirectDebit",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsCreateDirectDebitAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsCreateDirectDebitAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountsCreateDirectDebitAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AccountsCreateSepaAccount stores a s e p a direct debit account
*/
func (a *Client) AccountsCreateSepaAccount(params *AccountsCreateSepaAccountParams, opts ...ClientOption) (*AccountsCreateSepaAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsCreateSepaAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_CreateSepaAccount",
		Method:             "POST",
		PathPattern:        "/CRM/Accounts/SEPA",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsCreateSepaAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsCreateSepaAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountsCreateSepaAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AccountsCreateVantivEncryptedCardAccount creates a credit card account from a vantiv encrypted reader using tokenization
*/
func (a *Client) AccountsCreateVantivEncryptedCardAccount(params *AccountsCreateVantivEncryptedCardAccountParams, opts ...ClientOption) (*AccountsCreateVantivEncryptedCardAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsCreateVantivEncryptedCardAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_CreateVantivEncryptedCardAccount",
		Method:             "POST",
		PathPattern:        "/CRM/Accounts/VantivEncryptedCard",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsCreateVantivEncryptedCardAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsCreateVantivEncryptedCardAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountsCreateVantivEncryptedCardAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionTypesCreate creates a new action type
*/
func (a *Client) ActionTypesCreate(params *ActionTypesCreateParams, opts ...ClientOption) (*ActionTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ActionTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionsCreate creates an issue action for a constituent
*/
func (a *Client) ActionsCreate(params *ActionsCreateParams, opts ...ClientOption) (*ActionsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Actions_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Actions",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActivityCategoriesCreate creates a new activity category
*/
func (a *Client) ActivityCategoriesCreate(params *ActivityCategoriesCreateParams, opts ...ClientOption) (*ActivityCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ActivityCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActivityCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActivityTypesCreate creates a new activity type
*/
func (a *Client) ActivityTypesCreate(params *ActivityTypesCreateParams, opts ...ClientOption) (*ActivityTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ActivityTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActivityTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AddressTypesCreate creates a new address type
*/
func (a *Client) AddressTypesCreate(params *AddressTypesCreateParams, opts ...ClientOption) (*AddressTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddressTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/AddressTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddressTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AddressesCreate creates a new address for a constituent by sending an XML or JSON representation of an address object using HTTP p o s t
*/
func (a *Client) AddressesCreate(params *AddressesCreateParams, opts ...ClientOption) (*AddressesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Addresses_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Addresses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddressesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AffiliationInfoPostAffiliation creates affiliation between a group constituent and its related constituent if the related constituent does not exist then create the related constituent as well before creating the affiliation
*/
func (a *Client) AffiliationInfoPostAffiliation(params *AffiliationInfoPostAffiliationParams, opts ...ClientOption) (*AffiliationInfoPostAffiliationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationInfoPostAffiliationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AffiliationInfo_PostAffiliation",
		Method:             "POST",
		PathPattern:        "/CRM/AffiliationInfo",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationInfoPostAffiliationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationInfoPostAffiliationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AffiliationInfoPostAffiliationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AffiliationTypesCreate creates a new affiliation type
*/
func (a *Client) AffiliationTypesCreate(params *AffiliationTypesCreateParams, opts ...ClientOption) (*AffiliationTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AffiliationTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/AffiliationTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AffiliationTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AffiliationsCreate creates a new affiliation
*/
func (a *Client) AffiliationsCreate(params *AffiliationsCreateParams, opts ...ClientOption) (*AffiliationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Affiliations_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Affiliations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AffiliationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AliasTypesCreate creates a new alias type
*/
func (a *Client) AliasTypesCreate(params *AliasTypesCreateParams, opts ...ClientOption) (*AliasTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AliasTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/AliasTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AliasTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AliasesCreate creates a new alias
*/
func (a *Client) AliasesCreate(params *AliasesCreateParams, opts ...ClientOption) (*AliasesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Aliases_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Aliases",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AliasesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AnalyticsReportsCreate creates s s r s reports for display in analytics
*/
func (a *Client) AnalyticsReportsCreate(params *AnalyticsReportsCreateParams, opts ...ClientOption) (*AnalyticsReportsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyticsReportsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnalyticsReports_Create",
		Method:             "POST",
		PathPattern:        "/Reporting/AnalyticsReports",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnalyticsReportsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyticsReportsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AnalyticsReportsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppealCategoriesCreate creates a new appeal category
*/
func (a *Client) AppealCategoriesCreate(params *AppealCategoriesCreateParams, opts ...ClientOption) (*AppealCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppealCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppealCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/AppealCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppealCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppealCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppealCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArtistsCreate creates a new artist
*/
func (a *Client) ArtistsCreate(params *ArtistsCreateParams, opts ...ClientOption) (*ArtistsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtistsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Artists_Create",
		Method:             "POST",
		PathPattern:        "/TXN/Artists",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArtistsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArtistsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArtistsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssetTypesCreate creates a new asset type
*/
func (a *Client) AssetTypesCreate(params *AssetTypesCreateParams, opts ...ClientOption) (*AssetTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/AssetTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssetsCreate creates an asset for a constituent
*/
func (a *Client) AssetsCreate(params *AssetsCreateParams, opts ...ClientOption) (*AssetsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Assets_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Assets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssociationTypesCreate creates a new association type
*/
func (a *Client) AssociationTypesCreate(params *AssociationTypesCreateParams, opts ...ClientOption) (*AssociationTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssociationTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/AssociationTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssociationTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssociationsCreate creates a new association
*/
func (a *Client) AssociationsCreate(params *AssociationsCreateParams, opts ...ClientOption) (*AssociationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Associations_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Associations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssociationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AttributesCreate creates a new attribute
*/
func (a *Client) AttributesCreate(params *AttributesCreateParams, opts ...ClientOption) (*AttributesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttributesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Attributes_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Attributes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttributesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttributesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AttributesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticateAuthenticate authenticates the provided credentials
*/
func (a *Client) AuthenticateAuthenticate(params *AuthenticateAuthenticateParams, opts ...ClientOption) (*AuthenticateAuthenticateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateAuthenticateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authenticate_Authenticate",
		Method:             "POST",
		PathPattern:        "/Security/Authenticate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateAuthenticateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateAuthenticateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticateAuthenticateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticateAuthenticateWindows authenticates the provided credentials
*/
func (a *Client) AuthenticateAuthenticateWindows(params *AuthenticateAuthenticateWindowsParams, opts ...ClientOption) (*AuthenticateAuthenticateWindowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateAuthenticateWindowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authenticate_AuthenticateWindows",
		Method:             "POST",
		PathPattern:        "/Security/Authenticate/Windows",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateAuthenticateWindowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateAuthenticateWindowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticateAuthenticateWindowsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticateGenerateToken authenticates the provided credentials and return a timed token that can be used to proxy this result
*/
func (a *Client) AuthenticateGenerateToken(params *AuthenticateGenerateTokenParams, opts ...ClientOption) (*AuthenticateGenerateTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateGenerateTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authenticate_GenerateToken",
		Method:             "POST",
		PathPattern:        "/Security/Authenticate/Token/Generate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateGenerateTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateGenerateTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticateGenerateTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticateGenerateTokenWindows authenticates the provided credentials and return a timed token that can be used to proxy this result
*/
func (a *Client) AuthenticateGenerateTokenWindows(params *AuthenticateGenerateTokenWindowsParams, opts ...ClientOption) (*AuthenticateGenerateTokenWindowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateGenerateTokenWindowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authenticate_GenerateTokenWindows",
		Method:             "POST",
		PathPattern:        "/Security/Authenticate/Token/Generate/Windows",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateGenerateTokenWindowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateGenerateTokenWindowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticateGenerateTokenWindowsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticateValidateToken validates an authentication token and returns the standard authentication response
*/
func (a *Client) AuthenticateValidateToken(params *AuthenticateValidateTokenParams, opts ...ClientOption) (*AuthenticateValidateTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateValidateTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authenticate_ValidateToken",
		Method:             "POST",
		PathPattern:        "/Security/Authenticate/Token/Validate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateValidateTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateValidateTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticateValidateTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthorizationAuthorize authorizes a payment using a manually keyed swiped or encrypted card data including payments made using the tessitura merchant services payment component
*/
func (a *Client) AuthorizationAuthorize(params *AuthorizationAuthorizeParams, opts ...ClientOption) (*AuthorizationAuthorizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizationAuthorizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authorization_Authorize",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Authorization/Authorize",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthorizationAuthorizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizationAuthorizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthorizationAuthorizeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthorizationConfirm confirms an authorization using its reference number for all gateways this results in a confirm transaction being written to t p a y m e n t g a t e w a y a c t i v i t y for e pay gateway the confirm endpoint also sends a capture transaction
*/
func (a *Client) AuthorizationConfirm(params *AuthorizationConfirmParams, opts ...ClientOption) (*AuthorizationConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizationConfirmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authorization_Confirm",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Authorization/{referenceNumber}/Confirm",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthorizationConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizationConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthorizationConfirmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthorizationConfirmPayByLink ns o t e t h i s i s f o r t e s s i t u r a u s e o n l y custom implementations of this endpoint are not supported check to see if a pay by link has been authorized for tessitura merchant services only
*/
func (a *Client) AuthorizationConfirmPayByLink(params *AuthorizationConfirmPayByLinkParams, opts ...ClientOption) (*AuthorizationConfirmPayByLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizationConfirmPayByLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authorization_ConfirmPayByLink",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Authorization/Link/{paymentId}/Confirm",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthorizationConfirmPayByLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizationConfirmPayByLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthorizationConfirmPayByLinkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthorizationFinalize finalizes an authorization for use with tessitura merchant services only finalizes a payment authorization derived from the authorize request
*/
func (a *Client) AuthorizationFinalize(params *AuthorizationFinalizeParams, opts ...ClientOption) (*AuthorizationFinalizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizationFinalizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authorization_Finalize",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Authorization/Finalize",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthorizationFinalizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizationFinalizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthorizationFinalizeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthorizationLink ns o t e t h i s i s f o r t e s s i t u r a u s e o n l y custom implementations of this endpoint are not supported create a payment link to a hosted payment form where shoppers can pay for tessitura merchant services only
*/
func (a *Client) AuthorizationLink(params *AuthorizationLinkParams, opts ...ClientOption) (*AuthorizationLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizationLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authorization_Link",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Authorization/Link",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthorizationLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizationLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthorizationLinkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthorizationReverse reverses a payment authorization using its reference number
*/
func (a *Client) AuthorizationReverse(params *AuthorizationReverseParams, opts ...ClientOption) (*AuthorizationReverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizationReverseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authorization_Reverse",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Authorization/{referenceNumber}/Reverse",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthorizationReverseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizationReverseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthorizationReverseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BatchMaintenanceCreate creates a new batch
*/
func (a *Client) BatchMaintenanceCreate(params *BatchMaintenanceCreateParams, opts ...ClientOption) (*BatchMaintenanceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchMaintenanceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchMaintenance_Create",
		Method:             "POST",
		PathPattern:        "/Finance/BatchMaintenance",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchMaintenanceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchMaintenanceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BatchMaintenanceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BatchTypeGroupsCreate creates a new batch type group
*/
func (a *Client) BatchTypeGroupsCreate(params *BatchTypeGroupsCreateParams, opts ...ClientOption) (*BatchTypeGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypeGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypeGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/BatchTypeGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypeGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypeGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BatchTypeGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BatchTypesCreate creates a new batch type
*/
func (a *Client) BatchTypesCreate(params *BatchTypesCreateParams, opts ...ClientOption) (*BatchTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/BatchTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BatchTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BatchSample batch sample API
*/
func (a *Client) BatchSample(params *BatchSampleParams, opts ...ClientOption) (*BatchSampleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchSampleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Batch_Sample",
		Method:             "POST",
		PathPattern:        "/Batch/Sample",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchSampleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchSampleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BatchSampleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BillingSchedulesCreate creates a new billing schedule
*/
func (a *Client) BillingSchedulesCreate(params *BillingSchedulesCreateParams, opts ...ClientOption) (*BillingSchedulesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSchedulesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingSchedules_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/BillingSchedules",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSchedulesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingSchedulesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BillingSchedulesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BillingTypesCreate creates a new billing type
*/
func (a *Client) BillingTypesCreate(params *BillingTypesCreateParams, opts ...ClientOption) (*BillingTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/BillingTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BillingTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BookingCategoriesCreate creates a new booking category
*/
func (a *Client) BookingCategoriesCreate(params *BookingCategoriesCreateParams, opts ...ClientOption) (*BookingCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/BookingCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BookingCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BookingTemplatesCreate creates a new booking template
*/
func (a *Client) BookingTemplatesCreate(params *BookingTemplatesCreateParams, opts ...ClientOption) (*BookingTemplatesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingTemplatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingTemplates_Create",
		Method:             "POST",
		PathPattern:        "/EventsManagement/BookingTemplates",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingTemplatesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingTemplatesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BookingTemplatesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BookingsAddDocument adds a document to the booking
*/
func (a *Client) BookingsAddDocument(params *BookingsAddDocumentParams, opts ...ClientOption) (*BookingsAddDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsAddDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_AddDocument",
		Method:             "POST",
		PathPattern:        "/EventsManagement/Bookings/{bookingId}/Documents",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsAddDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsAddDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BookingsAddDocumentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BookingsCreate creates a new booking
*/
func (a *Client) BookingsCreate(params *BookingsCreateParams, opts ...ClientOption) (*BookingsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_Create",
		Method:             "POST",
		PathPattern:        "/EventsManagement/Bookings",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BookingsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BookingsCreateFromTemplate creates a new booking using the details and resource type assignments from a booking template
*/
func (a *Client) BookingsCreateFromTemplate(params *BookingsCreateFromTemplateParams, opts ...ClientOption) (*BookingsCreateFromTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsCreateFromTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_CreateFromTemplate",
		Method:             "POST",
		PathPattern:        "/EventsManagement/Bookings/CreateFromTemplate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsCreateFromTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsCreateFromTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BookingsCreateFromTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BulkCopySetsCopyDay copies the packages performances groups and performances from a day defined in the bulk copy set to the day specified in the request
*/
func (a *Client) BulkCopySetsCopyDay(params *BulkCopySetsCopyDayParams, opts ...ClientOption) (*BulkCopySetsCopyDayNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsCopyDayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_CopyDay",
		Method:             "POST",
		PathPattern:        "/TXN/BulkCopySets/{bulkCopySetId}/CopyDay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsCopyDayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsCopyDayNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BulkCopySetsCopyDayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BulkCopySetsCopyEvent copies the performance specified in the bulk copy set to the date and time specified in the request
*/
func (a *Client) BulkCopySetsCopyEvent(params *BulkCopySetsCopyEventParams, opts ...ClientOption) (*BulkCopySetsCopyEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsCopyEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_CopyEvent",
		Method:             "POST",
		PathPattern:        "/TXN/BulkCopySets/{bulkCopySetId}/CopyEvent",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsCopyEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsCopyEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BulkCopySetsCopyEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BulkCopySetsCreate creates a new bulk copy set
*/
func (a *Client) BulkCopySetsCreate(params *BulkCopySetsCreateParams, opts ...ClientOption) (*BulkCopySetsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_Create",
		Method:             "POST",
		PathPattern:        "/TXN/BulkCopySets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BulkCopySetsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BulkCopySetsReplaceExclusions replaces bulk copy exclusions for a given set by deleting them and inserting the new collection
*/
func (a *Client) BulkCopySetsReplaceExclusions(params *BulkCopySetsReplaceExclusionsParams, opts ...ClientOption) (*BulkCopySetsReplaceExclusionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsReplaceExclusionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_ReplaceExclusions",
		Method:             "POST",
		PathPattern:        "/TXN/BulkCopySets/{bulkCopySetId}/ReplaceExclusions",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsReplaceExclusionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsReplaceExclusionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BulkCopySetsReplaceExclusionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BulkDailyCopyExclusionsCreate creates a bulk daily copy exclusion
*/
func (a *Client) BulkDailyCopyExclusionsCreate(params *BulkDailyCopyExclusionsCreateParams, opts ...ClientOption) (*BulkDailyCopyExclusionsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDailyCopyExclusionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDailyCopyExclusions_Create",
		Method:             "POST",
		PathPattern:        "/TXN/BulkDailyCopyExclusions",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkDailyCopyExclusionsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDailyCopyExclusionsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BulkDailyCopyExclusionsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BusinessUnitsCreate creates a new business unit
*/
func (a *Client) BusinessUnitsCreate(params *BusinessUnitsCreateParams, opts ...ClientOption) (*BusinessUnitsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusinessUnitsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BusinessUnits_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/BusinessUnits",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BusinessUnitsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BusinessUnitsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BusinessUnitsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CampaignDesignationsCreate creates a new association between a designation and a campaign
*/
func (a *Client) CampaignDesignationsCreate(params *CampaignDesignationsCreateParams, opts ...ClientOption) (*CampaignDesignationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignDesignationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignDesignations_Create",
		Method:             "POST",
		PathPattern:        "/Finance/CampaignDesignations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignDesignationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignDesignationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CampaignDesignationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CampaignFundsCreate creates a new fund association to a campaign
*/
func (a *Client) CampaignFundsCreate(params *CampaignFundsCreateParams, opts ...ClientOption) (*CampaignFundsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignFundsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignFunds_Create",
		Method:             "POST",
		PathPattern:        "/Finance/CampaignFunds",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignFundsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignFundsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CampaignFundsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CardReaderTypesCreate creates a new card reader type
*/
func (a *Client) CardReaderTypesCreate(params *CardReaderTypesCreateParams, opts ...ClientOption) (*CardReaderTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardReaderTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CardReaderTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/CardReaderTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardReaderTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardReaderTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CardReaderTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddBooking attaches an existing booking to the cart
*/
func (a *Client) CartAddBooking(params *CartAddBookingParams, opts ...ClientOption) (*CartAddBookingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddBookingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddBooking",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Bookings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddBookingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddBookingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddBookingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddContribution adds a contribution to the cart the donation must be applied directly to a fund this method also allows a specific membership level ID to be specified
*/
func (a *Client) CartAddContribution(params *CartAddContributionParams, opts ...ClientOption) (*CartAddContributionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddContributionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddContribution",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Contributions",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddContributionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddContributionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddContributionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddGiftCertificate adds a gift certificate for the specified amount to the cart the resulting gift certificate number can be found with web cart g e t
*/
func (a *Client) CartAddGiftCertificate(params *CartAddGiftCertificateParams, opts ...ClientOption) (*CartAddGiftCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddGiftCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddGiftCertificate",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/GiftCertificates",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddGiftCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddGiftCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddGiftCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddNFSPackagePerformanceItem adds a new nfs package item to the cart this method adds a seated or unseated non fixed seat n f s or flex package to the cart by adding the component performances when the package is seated the best seating function can be used or specific seat numbers can be passed for use with s y o s functionality a n f s or flex package line item is created when the first component performance is added to the cart the ID number from the package line item is required when the remaining component performances are added it is returned as n f s package line item Id in the method s response web cart validation can be called at any time setting the validate n f s packages boolean to true to determine whether all of the rules for the package have been met with items in the shopping cart this method will allow the reservation of held seats to enable this functionality add the key reserve held seats to t d e f a u l t s with a value of yes under the tessitura web parent table or organization name if operating in a consortium environment
*/
func (a *Client) CartAddNFSPackagePerformanceItem(params *CartAddNFSPackagePerformanceItemParams, opts ...ClientOption) (*CartAddNFSPackagePerformanceItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddNFSPackagePerformanceItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddNFSPackagePerformanceItem",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Packages/Nfs",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddNFSPackagePerformanceItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddNFSPackagePerformanceItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddNFSPackagePerformanceItemDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddOnAccount adds an on account balance to the cart checkout will not be allowed for a general public order if on account balance is added
*/
func (a *Client) CartAddOnAccount(params *CartAddOnAccountParams, opts ...ClientOption) (*CartAddOnAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddOnAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddOnAccount",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/OnAccount",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddOnAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddOnAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddOnAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddPackageItem adds a new fixed seat package item to the cart adds a seated or unseated fixed seat package line item to the cart and reserves seats using either the best seat function or reserves specific seats package Id line items can be added as alternate upgrade line items to another line item in the cart to add an alternate upgrade line item the parent line item ID must be retrieved using web cart g e t and then passed as the parent package line item Id parameter value for this method this method will allow the reservation of held seats to enable this functionality add the key reserve held seats to t d e f a u l t s with a value of yes under the tessitura web parent table or organization name if operating in a consortium environment
*/
func (a *Client) CartAddPackageItem(params *CartAddPackageItemParams, opts ...ClientOption) (*CartAddPackageItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddPackageItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddPackageItem",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Packages/Fixed",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddPackageItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddPackageItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddPackageItemDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddPaymentPlan sets a payment plan on the cart using a start date end date and a specific number of payments to be spread across the date range the due date for the first payment is set to the entered beginning date and the due date for subsequent payments is calculated by adding an equal number of days to each previous payment based on the amount of time between the beginning and ending dates
*/
func (a *Client) CartAddPaymentPlan(params *CartAddPaymentPlanParams, opts ...ClientOption) (*CartAddPaymentPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddPaymentPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddPaymentPlan",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Plan/NumberOfPayments",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddPaymentPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddPaymentPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddPaymentPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddPaymentPlanBasedOnBillingSchedule sets a payment plan on the cart using a start date end date and a pre defined billing schedule the number of payments payment amounts and payment due dates are calculated based on the selected billing schedule for details on setting up billing schedules see the t r b i l l i n g s c h e d u l e section of the system tables document
*/
func (a *Client) CartAddPaymentPlanBasedOnBillingSchedule(params *CartAddPaymentPlanBasedOnBillingScheduleParams, opts ...ClientOption) (*CartAddPaymentPlanBasedOnBillingScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddPaymentPlanBasedOnBillingScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddPaymentPlanBasedOnBillingSchedule",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Plan/Schedule",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddPaymentPlanBasedOnBillingScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddPaymentPlanBasedOnBillingScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddPaymentPlanBasedOnBillingScheduleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddPaymentPlanInstallments sets a payment plan on the cart using a start date end date and a list of installments with amount and due date the total of the installment amounts must add up to the cart total web cart validation can be used to validate that the payment plan is correct by passing true for validate payment plan in that method
*/
func (a *Client) CartAddPaymentPlanInstallments(params *CartAddPaymentPlanInstallmentsParams, opts ...ClientOption) (*CartAddPaymentPlanInstallmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddPaymentPlanInstallmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddPaymentPlanInstallments",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Plan/Installments",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddPaymentPlanInstallmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddPaymentPlanInstallmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddPaymentPlanInstallmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddSubPackageItem adds a new sub package item to the cart this method is used to add a seated or unseated super package line item to the cart for the specified session by adding the component sub packages when the package is seated the best seating function can be used or specific seat numbers can be passed for use with s y o s functionality the method must be called once for each sub package a super package line item is created when the first sub package is added to the cart the ID number from the super package line item is required when the remaining component sub packages are added it is returned as super package line item Id in the response super package line items can be added as alternate upgrade line items to another super package line item in the cart to add an alternate upgrade line item the parent line item ID must be passed as the parent super package line item Id parameter value for this method the parent line item ID can be retrieved using the web cart g e t method
*/
func (a *Client) CartAddSubPackageItem(params *CartAddSubPackageItemParams, opts ...ClientOption) (*CartAddSubPackageItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddSubPackageItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddSubPackageItem",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Packages/Super",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddSubPackageItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddSubPackageItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddSubPackageItemDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAddUpdateFee adds or updates a fee only user defined fees can be added seat based fees can be overridden to zero only while order based or user defined fees can be overridden to any amount as allowed by the rules in fee setup to add and edit a user defined fee call this method twice once to add the fee and once to override the amount
*/
func (a *Client) CartAddUpdateFee(params *CartAddUpdateFeeParams, opts ...ClientOption) (*CartAddUpdateFeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAddUpdateFeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_AddUpdateFee",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Fees",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAddUpdateFeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAddUpdateFeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAddUpdateFeeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartApplyCashPayment applies a cash payment to the cart
*/
func (a *Client) CartApplyCashPayment(params *CartApplyCashPaymentParams, opts ...ClientOption) (*CartApplyCashPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartApplyCashPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ApplyCashPayment",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Cash",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartApplyCashPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartApplyCashPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartApplyCashPaymentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartApplyCheckPayment applies a check payment to the cart
*/
func (a *Client) CartApplyCheckPayment(params *CartApplyCheckPaymentParams, opts ...ClientOption) (*CartApplyCheckPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartApplyCheckPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ApplyCheckPayment",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Check",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartApplyCheckPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartApplyCheckPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartApplyCheckPaymentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartApplyGiftCertificate applies a gift certificate as payment for a cart
*/
func (a *Client) CartApplyGiftCertificate(params *CartApplyGiftCertificateParams, opts ...ClientOption) (*CartApplyGiftCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartApplyGiftCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ApplyGiftCertificate",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/GiftCertificate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartApplyGiftCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartApplyGiftCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartApplyGiftCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartApplyInvoicePayment applies an invoice payment to the cart checkout will not be allowed for a general public order if an invoice payment is applied
*/
func (a *Client) CartApplyInvoicePayment(params *CartApplyInvoicePaymentParams, opts ...ClientOption) (*CartApplyInvoicePaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartApplyInvoicePaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ApplyInvoicePayment",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Invoice",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartApplyInvoicePaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartApplyInvoicePaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartApplyInvoicePaymentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartApplyOnAccountPayment applies an on account payment to the cart not valid for a general public cart
*/
func (a *Client) CartApplyOnAccountPayment(params *CartApplyOnAccountPaymentParams, opts ...ClientOption) (*CartApplyOnAccountPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartApplyOnAccountPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ApplyOnAccountPayment",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/OnAccount",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartApplyOnAccountPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartApplyOnAccountPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartApplyOnAccountPaymentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartApplyOtherPayment applies an other payment to the cart
*/
func (a *Client) CartApplyOtherPayment(params *CartApplyOtherPaymentParams, opts ...ClientOption) (*CartApplyOtherPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartApplyOtherPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ApplyOtherPayment",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Other",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartApplyOtherPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartApplyOtherPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartApplyOtherPaymentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartAuthorize authorizes payment using a card reader in a web based transaction
*/
func (a *Client) CartAuthorize(params *CartAuthorizeParams, opts ...ClientOption) (*CartAuthorizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartAuthorizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_Authorize",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/EMV/Authorize",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartAuthorizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartAuthorizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartAuthorizeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartCheckout validates processes payment for and saves an order for a specified session payment information can be provided as follows the full card details can be provided in the request the request includes parameters for use with the 3 d secure protocol used by credit card verification services such as verified by visa and master card secure code the method also allows the credit card authorization process to be skipped which allows the use of third party authorizations the account ID property in the request can be used in place of specifying credit card information when a valid id value from c r m accounts is provided and the stored card data belongs to either the session owner or the session initiator then that card data is passed through for authorization if the account is invalid or does not belong to the session owner or initiator then an error is returned additionally this method has two additional address verification parameters allowing a calling application to optionally specify the street address and zip code that represents the billing address for the credit card when the method is run the status of the order is checked to ensure checkout has not started the procedure will set the status in t w e b c h e c k o u t to one of the following values s ave in progress c ompleted save e rror when saving the response includes a status and message details about the status possible status results are save in progress save complete error in order to facilitate the use of the interceptor capability the checkout method now makes a p o s t call to txn orders by default this call does nothing unless a developer has added interceptor plug in code to the exposure
*/
func (a *Client) CartCheckout(params *CartCheckoutParams, opts ...ClientOption) (*CartCheckoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartCheckoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_Checkout",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Checkout",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartCheckoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartCheckoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartCheckoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartCheckoutWithCard processes checkout for the cart using card swipe information for payment used by t r b o when the method is run the status of the order is checked to ensure checkout has not started the procedure will set the status in t w e b c h e c k o u t to one of the following values s ave in progress c ompleted save e rror when saving the response includes a status and message details about the status possible status results are save in progress save complete error in order to facilitate the use of the interceptor capability the checkout method now makes a p o s t call to txn orders by default this call does nothing unless a developer has added interceptor plug in code to the exposure
*/
func (a *Client) CartCheckoutWithCard(params *CartCheckoutWithCardParams, opts ...ClientOption) (*CartCheckoutWithCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartCheckoutWithCardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_CheckoutWithCard",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/CheckoutWithCard",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartCheckoutWithCardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartCheckoutWithCardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartCheckoutWithCardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartPreviewPaymentPlanBasedOnBillingSchedule returns the payment schedule that would be applied to the current cart for the selected billing schedule without applying it to the cart the number of payments payment amounts and payment due dates are calculated based on the selected billing schedule for details on setting up billing schedules see the t r b i l l i n g s c h e d u l e section of the system tables document
*/
func (a *Client) CartPreviewPaymentPlanBasedOnBillingSchedule(params *CartPreviewPaymentPlanBasedOnBillingScheduleParams, opts ...ClientOption) (*CartPreviewPaymentPlanBasedOnBillingScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartPreviewPaymentPlanBasedOnBillingScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_PreviewPaymentPlanBasedOnBillingSchedule",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Plan/Schedule/Preview",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartPreviewPaymentPlanBasedOnBillingScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartPreviewPaymentPlanBasedOnBillingScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartPreviewPaymentPlanBasedOnBillingScheduleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartPrice prices the current web cart associated with the specified session key
*/
func (a *Client) CartPrice(params *CartPriceParams, opts ...ClientOption) (*CartPriceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartPriceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_Price",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartPriceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartPriceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartPriceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartPrintEmail prints tickets for specified order lineitems or sublineitems and returns a formatted html body and attachments the method returns tickets for unprinted fully paid orders or reprints printed tickets specified via order number one or more line item numbers or one or more sub line item numbers in the case of partially paid orders only line items or sub line items which have been fully paid will be eligible for printing only tickets belonging to the customer associated via the current web session can be returned ticket information can be returned in the default design specified for the ticket price type or you may specify a ticket design to utilize via the request parameters after the tickets have been returned via the API seats will be flagged as ticketed in tessitura when reprinting tickets one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number if printer type b ticket designs with images are not supported
*/
func (a *Client) CartPrintEmail(params *CartPrintEmailParams, opts ...ClientOption) (*CartPrintEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartPrintEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_PrintEmail",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Print/Email",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartPrintEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartPrintEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartPrintEmailDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartPrintPrintStrings prints tickets for specified order lineitems or sublineitems and returns a collection of formatted strings based on printer type the returned strings can then be sent to the appropriate printer n o t e currently only zebra printer types are supported by this method printer type z the method returns tickets for unprinted fully paid orders or reprints printed tickets specified via order number one or more line item numbers or one or more sub line item numbers in the case of partially paid orders only line items or sub line items which have been fully paid will be eligible for printing only tickets belonging to the customer associated via the current web session can be returned ticket information can be returned in the default design specified for the ticket price type or you may specify a ticket design to utilize via the request parameters after the tickets have been returned via the API seats will be flagged as ticketed in tessitura when reprinting tickets one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number
*/
func (a *Client) CartPrintPrintStrings(params *CartPrintPrintStringsParams, opts ...ClientOption) (*CartPrintPrintStringsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartPrintPrintStringsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_PrintPrintStrings",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Print/PrintStrings",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartPrintPrintStringsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartPrintPrintStringsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartPrintPrintStringsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartPrintTicketElements prints tickets for specified order lineitems or sublineitems and returns all ticket elements the method returns ticket data for unprinted fully paid orders or reprints printed tickets specified via order number one or more line item numbers or one or more sub line item numbers in the case of partially paid orders only line items or sub line items which have been fully paid will be eligible for printing only tickets belonging to the customer associated via the current web session can be returned ticket information can be returned in the default design specified for the ticket price type or you may specify a ticket design to utilize via the request parameters after the ticket data has been returned via the API seats will be flagged as ticketed in tessitura when reprinting tickets one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number
*/
func (a *Client) CartPrintTicketElements(params *CartPrintTicketElementsParams, opts ...ClientOption) (*CartPrintTicketElementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartPrintTicketElementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_PrintTicketElements",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Print/TicketElements",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartPrintTicketElementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartPrintTicketElementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartPrintTicketElementsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartReserveTickets reserves tickets in cart adds a seated or unseated performance line item to the cart and reserves seats using either the best seat function or reserves specific seats this method will allow the reservation of held seats to enable this functionality add the key reserve held seats to t d e f a u l t s with a value of yes under the tessitura web parent table or organization name if operating in a consortium environment
*/
func (a *Client) CartReserveTickets(params *CartReserveTicketsParams, opts ...ClientOption) (*CartReserveTicketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartReserveTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ReserveTickets",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Tickets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartReserveTicketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartReserveTicketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartReserveTicketsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartReserveTicketsForLineItem reserves tickets in cart for an existing line item performance Id specified must be valid for the line item
*/
func (a *Client) CartReserveTicketsForLineItem(params *CartReserveTicketsForLineItemParams, opts ...ClientOption) (*CartReserveTicketsForLineItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartReserveTicketsForLineItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ReserveTicketsForLineItem",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/Tickets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartReserveTicketsForLineItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartReserveTicketsForLineItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartReserveTicketsForLineItemDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartReturnTicket returns a ticket by ticket number this method is used to return tickets generally for exchanges the method can also be used to donate a ticket for resale returning a ticket will generate a credit on the ticket order the credit must be applied to another line item performance package etc fee contribution or on account payment method donating a ticket uses the standard tessitura donate for resale function which releases the seat without generating a credit
*/
func (a *Client) CartReturnTicket(params *CartReturnTicketParams, opts ...ClientOption) (*CartReturnTicketNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartReturnTicketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ReturnTicket",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Tickets/Return",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartReturnTicketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartReturnTicketNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartReturnTicketDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartReturnTicketWithSeat returns a ticket by seat number this method is used to return tickets generally for exchanges the method can also be used to donate a ticket for resale returning a ticket will generate a credit on the ticket order the credit must be applied to another line item performance package etc fee contribution or on account payment method donating a ticket uses the standard tessitura donate for resale function which releases the seat without generating a credit
*/
func (a *Client) CartReturnTicketWithSeat(params *CartReturnTicketWithSeatParams, opts ...ClientOption) (*CartReturnTicketWithSeatNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartReturnTicketWithSeatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ReturnTicketWithSeat",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Tickets/ReturnWithSeat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartReturnTicketWithSeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartReturnTicketWithSeatNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartReturnTicketWithSeatDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartValidate validates various aspects of the cart payment plans fixed seat packages non fixed seat flex packages and super packages can be validated by setting the appropriate boolean in the request
*/
func (a *Client) CartValidate(params *CartValidateParams, opts ...ClientOption) (*CartValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartValidateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_Validate",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/Validate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartValidateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartValidateLimits validates ticket limits offer limits are evaluated for the specified price type and seat count using the cart source code requires either a performance ID or a package ID to enable ticket limit validation add the field name e n f o r c e s e a t l i m i t f o r o r d e r s under the impresario parent table with a value of yes this setting applies to both the web API and the tessitura client application
*/
func (a *Client) CartValidateLimits(params *CartValidateLimitsParams, opts ...ClientOption) (*CartValidateLimitsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartValidateLimitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ValidateLimits",
		Method:             "POST",
		PathPattern:        "/Web/Cart/{sessionKey}/ValidateLimits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartValidateLimitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartValidateLimitsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartValidateLimitsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColorsCreate creates a new color
*/
func (a *Client) ColorsCreate(params *ColorsCreateParams, opts ...ClientOption) (*ColorsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColorsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Colors_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Colors",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ColorsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColorsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColorsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ComposersCreate creates a new composer
*/
func (a *Client) ComposersCreate(params *ComposersCreateParams, opts ...ClientOption) (*ComposersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComposersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Composers_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Composers",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ComposersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComposersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ComposersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituenciesCreate creates a new constituency
*/
func (a *Client) ConstituenciesCreate(params *ConstituenciesCreateParams, opts ...ClientOption) (*ConstituenciesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituenciesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituencies_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Constituencies",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituenciesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituenciesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituenciesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituencyTypesCreate creates a new constituency type
*/
func (a *Client) ConstituencyTypesCreate(params *ConstituencyTypesCreateParams, opts ...ClientOption) (*ConstituencyTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituencyTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituencyTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ConstituencyTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituencyTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituencyTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituencyTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentDocumentsCreate creates document for a constituent
*/
func (a *Client) ConstituentDocumentsCreate(params *ConstituentDocumentsCreateParams, opts ...ClientOption) (*ConstituentDocumentsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentDocumentsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentDocuments_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Documents",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentDocumentsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentDocumentsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentDocumentsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentGroupsCreate creates a new constituent group
*/
func (a *Client) ConstituentGroupsCreate(params *ConstituentGroupsCreateParams, opts ...ClientOption) (*ConstituentGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ConstituentGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentInactivesCreate creates a new constituent inactive
*/
func (a *Client) ConstituentInactivesCreate(params *ConstituentInactivesCreateParams, opts ...ClientOption) (*ConstituentInactivesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentInactivesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentInactives_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ConstituentInactives",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentInactivesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentInactivesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentInactivesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentProtectionTypesCreate creates a new constituent protection type
*/
func (a *Client) ConstituentProtectionTypesCreate(params *ConstituentProtectionTypesCreateParams, opts ...ClientOption) (*ConstituentProtectionTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentProtectionTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentProtectionTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ConstituentProtectionTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentProtectionTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentProtectionTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentProtectionTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentTypeAffiliatesCreate creates a new constituent type affiliate
*/
func (a *Client) ConstituentTypeAffiliatesCreate(params *ConstituentTypeAffiliatesCreateParams, opts ...ClientOption) (*ConstituentTypeAffiliatesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypeAffiliatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypeAffiliates_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ConstituentTypeAffiliates",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypeAffiliatesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypeAffiliatesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentTypeAffiliatesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentTypesCreate creates a new constituent type
*/
func (a *Client) ConstituentTypesCreate(params *ConstituentTypesCreateParams, opts ...ClientOption) (*ConstituentTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ConstituentTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsConvertGroupToIndividual converts existing household to an individual
*/
func (a *Client) ConstituentsConvertGroupToIndividual(params *ConstituentsConvertGroupToIndividualParams, opts ...ClientOption) (*ConstituentsConvertGroupToIndividualOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsConvertGroupToIndividualParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_ConvertGroupToIndividual",
		Method:             "POST",
		PathPattern:        "/CRM/Constituents/{constituentId}/ConvertToIndividual",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsConvertGroupToIndividualReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsConvertGroupToIndividualOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsConvertGroupToIndividualDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsConvertIndividualToHousehold converts existing individual constituent to a household
*/
func (a *Client) ConstituentsConvertIndividualToHousehold(params *ConstituentsConvertIndividualToHouseholdParams, opts ...ClientOption) (*ConstituentsConvertIndividualToHouseholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsConvertIndividualToHouseholdParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_ConvertIndividualToHousehold",
		Method:             "POST",
		PathPattern:        "/CRM/Constituents/{constituentId}/ConvertToHousehold",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsConvertIndividualToHouseholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsConvertIndividualToHouseholdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsConvertIndividualToHouseholdDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsConvertIndividualToOrganization converts existing individual constituent to an organization
*/
func (a *Client) ConstituentsConvertIndividualToOrganization(params *ConstituentsConvertIndividualToOrganizationParams, opts ...ClientOption) (*ConstituentsConvertIndividualToOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsConvertIndividualToOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_ConvertIndividualToOrganization",
		Method:             "POST",
		PathPattern:        "/CRM/Constituents/{constituentId}/ConvertToOrganization",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsConvertIndividualToOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsConvertIndividualToOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsConvertIndividualToOrganizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsCreateConstituent creates a new constituent with addresses electronic addresses salutations and phones
*/
func (a *Client) ConstituentsCreateConstituent(params *ConstituentsCreateConstituentParams, opts ...ClientOption) (*ConstituentsCreateConstituentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsCreateConstituentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_CreateConstituent",
		Method:             "POST",
		PathPattern:        "/CRM/Constituents/Detail",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsCreateConstituentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsCreateConstituentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsCreateConstituentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsCreateConstituentUsingSnapshot creates a constituent optionally with primary address primary salutation primary electronic address primary and amp general phones and affiliates information
*/
func (a *Client) ConstituentsCreateConstituentUsingSnapshot(params *ConstituentsCreateConstituentUsingSnapshotParams, opts ...ClientOption) (*ConstituentsCreateConstituentUsingSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsCreateConstituentUsingSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_CreateConstituentUsingSnapshot",
		Method:             "POST",
		PathPattern:        "/CRM/Constituents/Snapshot",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsCreateConstituentUsingSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsCreateConstituentUsingSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsCreateConstituentUsingSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsSchedulePurge schedules a constituent to be purged this only marks a constituent for purge but does not actually purge the constituent if constituent has open transactions or an order for a future performance a bad request will be returned indicating open transactions pass ignore warnings true in request to bypass and schedule
*/
func (a *Client) ConstituentsSchedulePurge(params *ConstituentsSchedulePurgeParams, opts ...ClientOption) (*ConstituentsSchedulePurgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsSchedulePurgeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_SchedulePurge",
		Method:             "POST",
		PathPattern:        "/CRM/Constituents/{constituentId}/Purge/Schedule",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsSchedulePurgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsSchedulePurgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsSchedulePurgeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsSearchByCardNumber searches for constituents by card number
*/
func (a *Client) ConstituentsSearchByCardNumber(params *ConstituentsSearchByCardNumberParams, opts ...ClientOption) (*ConstituentsSearchByCardNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsSearchByCardNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_SearchByCardNumber",
		Method:             "POST",
		PathPattern:        "/CRM/Constituents/Search/ByCardNumber",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsSearchByCardNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsSearchByCardNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsSearchByCardNumberDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsSwapConstituentA1A2 swaps a1 a2 names on a household account and regenerates its salutation
*/
func (a *Client) ConstituentsSwapConstituentA1A2(params *ConstituentsSwapConstituentA1A2Params, opts ...ClientOption) (*ConstituentsSwapConstituentA1A2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsSwapConstituentA1A2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_SwapConstituentA1A2",
		Method:             "POST",
		PathPattern:        "/CRM/Constituents/{constituentId}/Snapshot/SwapA1A2",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsSwapConstituentA1A2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsSwapConstituentA1A2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsSwapConstituentA1A2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsUnschedulePurge unschedules a constituent that has been previously set to be purged if a purge has been completed an error will be returned
*/
func (a *Client) ConstituentsUnschedulePurge(params *ConstituentsUnschedulePurgeParams, opts ...ClientOption) (*ConstituentsUnschedulePurgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsUnschedulePurgeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_UnschedulePurge",
		Method:             "POST",
		PathPattern:        "/CRM/Constituents/{constituentId}/Purge/Unschedule",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsUnschedulePurgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsUnschedulePurgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsUnschedulePurgeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPermissionCategoriesCreate creates a new contact permission category
*/
func (a *Client) ContactPermissionCategoriesCreate(params *ContactPermissionCategoriesCreateParams, opts ...ClientOption) (*ContactPermissionCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ContactPermissionCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPermissionCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPermissionTypesCreate creates a new contact permission type
*/
func (a *Client) ContactPermissionTypesCreate(params *ContactPermissionTypesCreateParams, opts ...ClientOption) (*ContactPermissionTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ContactPermissionTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPermissionTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPermissionsCreate creates a new contact permission
*/
func (a *Client) ContactPermissionsCreate(params *ContactPermissionsCreateParams, opts ...ClientOption) (*ContactPermissionsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissions_Create",
		Method:             "POST",
		PathPattern:        "/CRM/ContactPermissions",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPermissionsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPermissionsForTransaction requests a set of contact permissions relevant to an order or contribution context send request with return required only to true to only send back permissions that require constituent ask
*/
func (a *Client) ContactPermissionsForTransaction(params *ContactPermissionsForTransactionParams, opts ...ClientOption) (*ContactPermissionsForTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionsForTransactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissions_ForTransaction",
		Method:             "POST",
		PathPattern:        "/CRM/ContactPermissions/ForTransaction",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionsForTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionsForTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPermissionsForTransactionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointCategoriesCreate creates a new contact point category
*/
func (a *Client) ContactPointCategoriesCreate(params *ContactPointCategoriesCreateParams, opts ...ClientOption) (*ContactPointCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ContactPointCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointCategoryPurposesCreate creates a new contact point category purpose
*/
func (a *Client) ContactPointCategoryPurposesCreate(params *ContactPointCategoryPurposesCreateParams, opts ...ClientOption) (*ContactPointCategoryPurposesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoryPurposesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategoryPurposes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ContactPointCategoryPurposes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoryPurposesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoryPurposesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointCategoryPurposesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointPurposeCategoriesCreate creates a new contact point purpose category
*/
func (a *Client) ContactPointPurposeCategoriesCreate(params *ContactPointPurposeCategoriesCreateParams, opts ...ClientOption) (*ContactPointPurposeCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ContactPointPurposeCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointPurposeCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointPurposeMapsCreate creates a new contact point purpose
*/
func (a *Client) ContactPointPurposeMapsCreate(params *ContactPointPurposeMapsCreateParams, opts ...ClientOption) (*ContactPointPurposeMapsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeMapsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeMaps_Create",
		Method:             "POST",
		PathPattern:        "/CRM/ContactPointPurposeMaps",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeMapsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeMapsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointPurposeMapsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointPurposesCreate creates a new contact point purpose
*/
func (a *Client) ContactPointPurposesCreate(params *ContactPointPurposesCreateParams, opts ...ClientOption) (*ContactPointPurposesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ContactPointPurposes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointPurposesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactTypesCreate creates a new contact type
*/
func (a *Client) ContactTypesCreate(params *ContactTypesCreateParams, opts ...ClientOption) (*ContactTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ContactTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContributionDesignationsCreate creates a new contribution designation
*/
func (a *Client) ContributionDesignationsCreate(params *ContributionDesignationsCreateParams, opts ...ClientOption) (*ContributionDesignationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionDesignationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionDesignations_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ContributionDesignations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionDesignationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionDesignationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContributionDesignationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContributionImportSetsCreate creates a new contribution import set
*/
func (a *Client) ContributionImportSetsCreate(params *ContributionImportSetsCreateParams, opts ...ClientOption) (*ContributionImportSetsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionImportSetsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionImportSets_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ContributionImportSets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionImportSetsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionImportSetsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContributionImportSetsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContributionsCreate this resource is currently strictly for interceptor plugin use this is called any time a new contribution is saved from the contribution editor in the client application only Id ref no is provided in the request content
*/
func (a *Client) ContributionsCreate(params *ContributionsCreateParams, opts ...ClientOption) (*ContributionsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Contributions_Create",
		Method:             "POST",
		PathPattern:        "/TXN/Contributions",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContributionsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ControlGroupUserGroupsCreate creates a new control group user group mapping
*/
func (a *Client) ControlGroupUserGroupsCreate(params *ControlGroupUserGroupsCreateParams, opts ...ClientOption) (*ControlGroupUserGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupUserGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroupUserGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ControlGroupUserGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupUserGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupUserGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ControlGroupUserGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ControlGroupsCreate creates a new control group
*/
func (a *Client) ControlGroupsCreate(params *ControlGroupsCreateParams, opts ...ClientOption) (*ControlGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ControlGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ControlGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CoreIdentitySign core identity sign API
*/
func (a *Client) CoreIdentitySign(params *CoreIdentitySignParams, opts ...ClientOption) (*CoreIdentitySignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreIdentitySignParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CoreIdentity_Sign",
		Method:             "POST",
		PathPattern:        "/Security/CoreIdentity/Sign",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CoreIdentitySignReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreIdentitySignOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreIdentitySignDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CountriesCreate creates a new country
*/
func (a *Client) CountriesCreate(params *CountriesCreateParams, opts ...ClientOption) (*CountriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCountriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Countries_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Countries",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CountriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CountriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CountriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CrediteeTypesCreate creates a new creditee type
*/
func (a *Client) CrediteeTypesCreate(params *CrediteeTypesCreateParams, opts ...ClientOption) (*CrediteeTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrediteeTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CrediteeTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/CrediteeTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrediteeTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrediteeTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CrediteeTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CurrencyTypesCreate creates a new currency type
*/
func (a *Client) CurrencyTypesCreate(params *CurrencyTypesCreateParams, opts ...ClientOption) (*CurrencyTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCurrencyTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CurrencyTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/CurrencyTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CurrencyTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CurrencyTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CurrencyTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomDefaultCategoriesCreate creates a new custom default category
*/
func (a *Client) CustomDefaultCategoriesCreate(params *CustomDefaultCategoriesCreateParams, opts ...ClientOption) (*CustomDefaultCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaultCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/CustomDefaultCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomDefaultCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomDefaultsCreate creates a new custom default
*/
func (a *Client) CustomDefaultsCreate(params *CustomDefaultsCreateParams, opts ...ClientOption) (*CustomDefaultsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaults_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/CustomDefaults",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomDefaultsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomExecuteLocalProcedure executes a local procedure defined in t r l o c a l p r o c e d u r e this will only return a collection of the first result set in a registered procedure for the result set null values in each data row are not returned as properties
*/
func (a *Client) CustomExecuteLocalProcedure(params *CustomExecuteLocalProcedureParams, opts ...ClientOption) (*CustomExecuteLocalProcedureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomExecuteLocalProcedureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Custom_ExecuteLocalProcedure",
		Method:             "POST",
		PathPattern:        "/Custom/Execute",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomExecuteLocalProcedureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomExecuteLocalProcedureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomExecuteLocalProcedureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomExecuteLocalProcedureWithMultipleResultSets executes a local procedure defined in t r l o c a l p r o c e d u r e this resource supports multiple result sets in a registered procedure the response object is different from custom execute for each result set null values are not returned as properties
*/
func (a *Client) CustomExecuteLocalProcedureWithMultipleResultSets(params *CustomExecuteLocalProcedureWithMultipleResultSetsParams, opts ...ClientOption) (*CustomExecuteLocalProcedureWithMultipleResultSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomExecuteLocalProcedureWithMultipleResultSetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Custom_ExecuteLocalProcedureWithMultipleResultSets",
		Method:             "POST",
		PathPattern:        "/Custom/Execute/MultipleResultSets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomExecuteLocalProcedureWithMultipleResultSetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomExecuteLocalProcedureWithMultipleResultSetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomExecuteLocalProcedureWithMultipleResultSetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeliveryMethodsCreate creates a new delivery method
*/
func (a *Client) DeliveryMethodsCreate(params *DeliveryMethodsCreateParams, opts ...ClientOption) (*DeliveryMethodsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliveryMethodsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeliveryMethods_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/DeliveryMethods",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeliveryMethodsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeliveryMethodsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeliveryMethodsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DesignationCodesCreate creates a new designation code
*/
func (a *Client) DesignationCodesCreate(params *DesignationCodesCreateParams, opts ...ClientOption) (*DesignationCodesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDesignationCodesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DesignationCodes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/DesignationCodes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DesignationCodesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DesignationCodesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DesignationCodesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DiagnosticsCheck checks connection information
*/
func (a *Client) DiagnosticsCheck(params *DiagnosticsCheckParams, opts ...ClientOption) (*DiagnosticsCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiagnosticsCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Diagnostics_Check",
		Method:             "POST",
		PathPattern:        "/Diagnostics/Check",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiagnosticsCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiagnosticsCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiagnosticsCheckDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DirectDebitAccountTypesCreate creates a new direct debit account type
*/
func (a *Client) DirectDebitAccountTypesCreate(params *DirectDebitAccountTypesCreateParams, opts ...ClientOption) (*DirectDebitAccountTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDirectDebitAccountTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DirectDebitAccountTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/DirectDebitAccountTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DirectDebitAccountTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DirectDebitAccountTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DirectDebitAccountTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DiscountTypesCreate creates a new discount type
*/
func (a *Client) DiscountTypesCreate(params *DiscountTypesCreateParams, opts ...ClientOption) (*DiscountTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/DiscountTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiscountTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiscountTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DocumentCategoriesCreate creates a new document category
*/
func (a *Client) DocumentCategoriesCreate(params *DocumentCategoriesCreateParams, opts ...ClientOption) (*DocumentCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DocumentCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/DocumentCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DocumentCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DonationLevelsCreate creates a new donation level
*/
func (a *Client) DonationLevelsCreate(params *DonationLevelsCreateParams, opts ...ClientOption) (*DonationLevelsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDonationLevelsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DonationLevels_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/DonationLevels",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DonationLevelsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DonationLevelsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DonationLevelsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EMVAuthorization authorizes a payment via a payment express h i t tri p o s cloud or adyen device
*/
func (a *Client) EMVAuthorization(params *EMVAuthorizationParams, opts ...ClientOption) (*EMVAuthorizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVAuthorizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_Authorization",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/EMV/Authorization",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVAuthorizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVAuthorizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EMVAuthorizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EMVCreateLane adds a new lane to merchant
*/
func (a *Client) EMVCreateLane(params *EMVCreateLaneParams, opts ...ClientOption) (*EMVCreateLaneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVCreateLaneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_CreateLane",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/EMV/TriPosLanes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVCreateLaneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVCreateLaneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EMVCreateLaneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EMVSignature accepts the signature for a payment express h i t authorization
*/
func (a *Client) EMVSignature(params *EMVSignatureParams, opts ...ClientOption) (*EMVSignatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVSignatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_Signature",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/EMV/Signature",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVSignatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVSignatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EMVSignatureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EMVTokenCreate creates a token on the specified constituent via a payment express h i t tri p o s cloud or adyen device without authorizing a transaction
*/
func (a *Client) EMVTokenCreate(params *EMVTokenCreateParams, opts ...ClientOption) (*EMVTokenCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVTokenCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_TokenCreate",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/EMV/TokenCreate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVTokenCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVTokenCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EMVTokenCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ElectronicAddressTypesCreate creates a new electronic address type
*/
func (a *Client) ElectronicAddressTypesCreate(params *ElectronicAddressTypesCreateParams, opts ...ClientOption) (*ElectronicAddressTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddressTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ElectronicAddressTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ElectronicAddressTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ElectronicAddressesCreate creates a new electronic address
*/
func (a *Client) ElectronicAddressesCreate(params *ElectronicAddressesCreateParams, opts ...ClientOption) (*ElectronicAddressesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddresses_Create",
		Method:             "POST",
		PathPattern:        "/CRM/ElectronicAddresses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ElectronicAddressesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ElectronicAddressesMove changes the ownership of the electronic address to a new constituent
*/
func (a *Client) ElectronicAddressesMove(params *ElectronicAddressesMoveParams, opts ...ClientOption) (*ElectronicAddressesMoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressesMoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddresses_Move",
		Method:             "POST",
		PathPattern:        "/CRM/ElectronicAddresses/{electronicAddressId}/MoveTo/{constituentId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressesMoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressesMoveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ElectronicAddressesMoveDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailProfilesCreate creates a new email profile
*/
func (a *Client) EmailProfilesCreate(params *EmailProfilesCreateParams, opts ...ClientOption) (*EmailProfilesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailProfilesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmailProfiles_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/EmailProfiles",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailProfilesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailProfilesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailProfilesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailResponsesUpdateAppeal updates an appeal with customer data in response to an email event event name should be one of open click hard bounce soft bounce or opt out
*/
func (a *Client) EmailResponsesUpdateAppeal(params *EmailResponsesUpdateAppealParams, opts ...ClientOption) (*EmailResponsesUpdateAppealNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailResponsesUpdateAppealParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmailResponses_UpdateAppeal",
		Method:             "POST",
		PathPattern:        "/TXN/EmailResponses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailResponsesUpdateAppealReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailResponsesUpdateAppealNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailResponsesUpdateAppealDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailsSend sends an email via SMTP
*/
func (a *Client) EmailsSend(params *EmailsSendParams, opts ...ClientOption) (*EmailsSendNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailsSendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_Send",
		Method:             "POST",
		PathPattern:        "/Emails/Send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsSendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsSendNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailsSendDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailsSendConstituentInfo queues a constituents info email
*/
func (a *Client) EmailsSendConstituentInfo(params *EmailsSendConstituentInfoParams, opts ...ClientOption) (*EmailsSendConstituentInfoNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailsSendConstituentInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_SendConstituentInfo",
		Method:             "POST",
		PathPattern:        "/Emails/ConstituentInfo/{constituentId}/Send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsSendConstituentInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsSendConstituentInfoNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailsSendConstituentInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailsSendLoginCredentials queues a login credentials email this endpoint will not generate a password token and should be used for testing a login credentials template use the send credentials endpoint in web session to send a login credentials email with a generated password token
*/
func (a *Client) EmailsSendLoginCredentials(params *EmailsSendLoginCredentialsParams, opts ...ClientOption) (*EmailsSendLoginCredentialsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailsSendLoginCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_SendLoginCredentials",
		Method:             "POST",
		PathPattern:        "/Emails/LoginCredentials/{loginId}/Send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsSendLoginCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsSendLoginCredentialsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailsSendLoginCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailsSendOrderConfirmation queues an order confirmation email
*/
func (a *Client) EmailsSendOrderConfirmation(params *EmailsSendOrderConfirmationParams, opts ...ClientOption) (*EmailsSendOrderConfirmationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailsSendOrderConfirmationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_SendOrderConfirmation",
		Method:             "POST",
		PathPattern:        "/Emails/OrderConfirmation/{orderId}/Send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsSendOrderConfirmationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsSendOrderConfirmationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailsSendOrderConfirmationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailsSendTickets queues a ticket email
*/
func (a *Client) EmailsSendTickets(params *EmailsSendTicketsParams, opts ...ClientOption) (*EmailsSendTicketsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailsSendTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_SendTickets",
		Method:             "POST",
		PathPattern:        "/Emails/Orders/{orderId}/Tickets/Send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsSendTicketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsSendTicketsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailsSendTicketsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmarketIndicatorsCreate creates a new emarket indicator
*/
func (a *Client) EmarketIndicatorsCreate(params *EmarketIndicatorsCreateParams, opts ...ClientOption) (*EmarketIndicatorsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmarketIndicatorsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmarketIndicators_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/EmarketIndicators",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmarketIndicatorsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmarketIndicatorsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmarketIndicatorsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ErasCreate creates a new era
*/
func (a *Client) ErasCreate(params *ErasCreateParams, opts ...ClientOption) (*ErasCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErasCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Eras_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Eras",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErasCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ErasCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ErasCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FacilitiesCreate creates a new facility
*/
func (a *Client) FacilitiesCreate(params *FacilitiesCreateParams, opts ...ClientOption) (*FacilitiesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFacilitiesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Facilities_Create",
		Method:             "POST",
		PathPattern:        "/TXN/Facilities",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FacilitiesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FacilitiesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FacilitiesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GendersCreate creates a new gender
*/
func (a *Client) GendersCreate(params *GendersCreateParams, opts ...ClientOption) (*GendersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGendersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Genders_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Genders",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GendersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GendersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GendersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidContactMethodsCreate creates a new gift aid contact method
*/
func (a *Client) GiftAidContactMethodsCreate(params *GiftAidContactMethodsCreateParams, opts ...ClientOption) (*GiftAidContactMethodsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidContactMethodsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidContactMethods_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/GiftAidContactMethods",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidContactMethodsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidContactMethodsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidContactMethodsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidDeclarationsCreate creates a gift aid declaration
*/
func (a *Client) GiftAidDeclarationsCreate(params *GiftAidDeclarationsCreateParams, opts ...ClientOption) (*GiftAidDeclarationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDeclarationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDeclarations_Create",
		Method:             "POST",
		PathPattern:        "/CRM/GiftAidDeclarations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDeclarationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDeclarationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidDeclarationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidDocumentStatusesCreate creates a new gift aid document status
*/
func (a *Client) GiftAidDocumentStatusesCreate(params *GiftAidDocumentStatusesCreateParams, opts ...ClientOption) (*GiftAidDocumentStatusesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDocumentStatusesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDocumentStatuses_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/GiftAidDocumentStatuses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDocumentStatusesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDocumentStatusesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidDocumentStatusesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidIneligibleReasonsCreate creates a new gift aid ineligible reason
*/
func (a *Client) GiftAidIneligibleReasonsCreate(params *GiftAidIneligibleReasonsCreateParams, opts ...ClientOption) (*GiftAidIneligibleReasonsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidIneligibleReasonsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidIneligibleReasons_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/GiftAidIneligibleReasons",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidIneligibleReasonsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidIneligibleReasonsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidIneligibleReasonsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidRatesCreate creates a new gift aid rate
*/
func (a *Client) GiftAidRatesCreate(params *GiftAidRatesCreateParams, opts ...ClientOption) (*GiftAidRatesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidRatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidRates_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/GiftAidRates",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidRatesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidRatesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidRatesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidStatusesCreate creates a new gift aid status
*/
func (a *Client) GiftAidStatusesCreate(params *GiftAidStatusesCreateParams, opts ...ClientOption) (*GiftAidStatusesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidStatusesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidStatuses_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/GiftAidStatuses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidStatusesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidStatusesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidStatusesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidTypesCreate creates a new gift aid type
*/
func (a *Client) GiftAidTypesCreate(params *GiftAidTypesCreateParams, opts ...ClientOption) (*GiftAidTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/GiftAidTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftCertificatesTransactionDetailsForRedemption gets transaction details for a gift certificate and lock it for redemption in a specific batch
*/
func (a *Client) GiftCertificatesTransactionDetailsForRedemption(params *GiftCertificatesTransactionDetailsForRedemptionParams, opts ...ClientOption) (*GiftCertificatesTransactionDetailsForRedemptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftCertificatesTransactionDetailsForRedemptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftCertificates_TransactionDetailsForRedemption",
		Method:             "POST",
		PathPattern:        "/Finance/GiftCertificates/TransactionDetailsForRedemption",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftCertificatesTransactionDetailsForRedemptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftCertificatesTransactionDetailsForRedemptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftCertificatesTransactionDetailsForRedemptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftCertificatesUnlock removes lock for gift certificate from any batch
*/
func (a *Client) GiftCertificatesUnlock(params *GiftCertificatesUnlockParams, opts ...ClientOption) (*GiftCertificatesUnlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftCertificatesUnlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftCertificates_Unlock",
		Method:             "POST",
		PathPattern:        "/Finance/GiftCertificates/{giftCertificateNumber}/Unlock",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftCertificatesUnlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftCertificatesUnlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftCertificatesUnlockDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HoldCodeCategoriesCreate creates a new hold code category
*/
func (a *Client) HoldCodeCategoriesCreate(params *HoldCodeCategoriesCreateParams, opts ...ClientOption) (*HoldCodeCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/HoldCodeCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HoldCodeCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HoldCodeUserGroupsCreate creates a new hold code user group mapping
*/
func (a *Client) HoldCodeUserGroupsCreate(params *HoldCodeUserGroupsCreateParams, opts ...ClientOption) (*HoldCodeUserGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeUserGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeUserGroups_Create",
		Method:             "POST",
		PathPattern:        "/TXN/HoldCodeUserGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeUserGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeUserGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HoldCodeUserGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HoldCodesCreate creates a hold code
*/
func (a *Client) HoldCodesCreate(params *HoldCodesCreateParams, opts ...ClientOption) (*HoldCodesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodes_Create",
		Method:             "POST",
		PathPattern:        "/TXN/HoldCodes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HoldCodesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InactiveReasonsCreate creates a new inactive reason
*/
func (a *Client) InactiveReasonsCreate(params *InactiveReasonsCreateParams, opts ...ClientOption) (*InactiveReasonsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInactiveReasonsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InactiveReasons_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/InactiveReasons",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InactiveReasonsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InactiveReasonsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InactiveReasonsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IntegrationDefaultsCreate creates a new integration default
*/
func (a *Client) IntegrationDefaultsCreate(params *IntegrationDefaultsCreateParams, opts ...ClientOption) (*IntegrationDefaultsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationDefaultsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationDefaults_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/IntegrationDefaults",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationDefaultsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationDefaultsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationDefaultsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IntegrationsCreate creates a new action type
*/
func (a *Client) IntegrationsCreate(params *IntegrationsCreateParams, opts ...ClientOption) (*IntegrationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Integrations_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Integrations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InterestCategoriesCreate creates a new interest category
*/
func (a *Client) InterestCategoriesCreate(params *InterestCategoriesCreateParams, opts ...ClientOption) (*InterestCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/InterestCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InterestCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InterestTypesCreate creates a new interest type
*/
func (a *Client) InterestTypesCreate(params *InterestTypesCreateParams, opts ...ClientOption) (*InterestTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/InterestTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InterestTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InterestsCreate creates a new interest associating an interest type to a constituent for bulk interest edits consider the c r m interests create or update batching resource which allows multiple interests to be created updated or removed in a single request
*/
func (a *Client) InterestsCreate(params *InterestsCreateParams, opts ...ClientOption) (*InterestsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Interests_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Interests",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InterestsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InterestsCreateOrUpdate creates updates or deletes interests passed as a collection we recommend that this resource be used for making multiple edits to constituent interests in a single API request interests that exist will be updated with provided weight and selected values if an existing interest is provided with a weight of 0 or n u l l and a selected false the interest will be deleted new interests should be created with an Id of 999 or n u l l
*/
func (a *Client) InterestsCreateOrUpdate(params *InterestsCreateOrUpdateParams, opts ...ClientOption) (*InterestsCreateOrUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestsCreateOrUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Interests_CreateOrUpdate",
		Method:             "POST",
		PathPattern:        "/CRM/Interests/CreateOrUpdate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestsCreateOrUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestsCreateOrUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InterestsCreateOrUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InternalCreate creates a new address along with the phones and attach all the phones to the address by default first phone is of phone type 1 second phone is of phone type 2 and third phone is of phone type 3
*/
func (a *Client) InternalCreate(params *InternalCreateParams, opts ...ClientOption) (*InternalCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Internal_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Internal/AddressDetails",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InternalCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InternalCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InternalCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InventoryContactPermissionTypesCreate creates an inventory contact permission type
*/
func (a *Client) InventoryContactPermissionTypesCreate(params *InventoryContactPermissionTypesCreateParams, opts ...ClientOption) (*InventoryContactPermissionTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryContactPermissionTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryContactPermissionTypes_Create",
		Method:             "POST",
		PathPattern:        "/TXN/InventoryContactPermissionTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryContactPermissionTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryContactPermissionTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InventoryContactPermissionTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InventoryWebContentsCreate creates an inventory web content
*/
func (a *Client) InventoryWebContentsCreate(params *InventoryWebContentsCreateParams, opts ...ClientOption) (*InventoryWebContentsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryWebContentsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryWebContents_Create",
		Method:             "POST",
		PathPattern:        "/Txn/InventoryWebContents",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryWebContentsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryWebContentsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InventoryWebContentsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InvoiceBillingBillInvoices invoices billing
*/
func (a *Client) InvoiceBillingBillInvoices(params *InvoiceBillingBillInvoicesParams, opts ...ClientOption) (*InvoiceBillingBillInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoiceBillingBillInvoicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InvoiceBilling_BillInvoices",
		Method:             "POST",
		PathPattern:        "/TXN/InvoiceBilling",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoiceBillingBillInvoicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoiceBillingBillInvoicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InvoiceBillingBillInvoicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IssuesCreate creates an issue for a constituent
*/
func (a *Client) IssuesCreate(params *IssuesCreateParams, opts ...ClientOption) (*IssuesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssuesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Issues_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Issues",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IssuesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssuesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IssuesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KeywordCategoriesCreate creates a new keyword category
*/
func (a *Client) KeywordCategoriesCreate(params *KeywordCategoriesCreateParams, opts ...ClientOption) (*KeywordCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KeywordCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/KeywordCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KeywordCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KeywordsCreate creates a new keyword
*/
func (a *Client) KeywordsCreate(params *KeywordsCreateParams, opts ...ClientOption) (*KeywordsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Keywords_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Keywords",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KeywordsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LanguagesCreate creates a new language
*/
func (a *Client) LanguagesCreate(params *LanguagesCreateParams, opts ...ClientOption) (*LanguagesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLanguagesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Languages_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Languages",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LanguagesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LanguagesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LanguagesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListCategoriesCreate creates a new list category
*/
func (a *Client) ListCategoriesCreate(params *ListCategoriesCreateParams, opts ...ClientOption) (*ListCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ListCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListsCreate creates a list
*/
func (a *Client) ListsCreate(params *ListsCreateParams, opts ...ClientOption) (*ListsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_Create",
		Method:             "POST",
		PathPattern:        "/Reporting/Lists",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListsGenerate generates a list
*/
func (a *Client) ListsGenerate(params *ListsGenerateParams, opts ...ClientOption) (*ListsGenerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsGenerateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_Generate",
		Method:             "POST",
		PathPattern:        "/Reporting/Lists/{listId}/Generate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsGenerateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsGenerateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListsGenerateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListsResults gets results for list and output set combination if no output set Id is passed in the request a default output set must be set for the list response returns custom HTTP headers x page x page size and x total count default page is 1 and default page size is 100
*/
func (a *Client) ListsResults(params *ListsResultsParams, opts ...ClientOption) (*ListsResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_Results",
		Method:             "POST",
		PathPattern:        "/Reporting/Lists/{listId}/Results",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListsResultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListsSearch searches for list response returns custom HTTP headers x page x page size and x total count default page is 1 and default page size is 50
*/
func (a *Client) ListsSearch(params *ListsSearchParams, opts ...ClientOption) (*ListsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_Search",
		Method:             "POST",
		PathPattern:        "/Reporting/Lists/Search",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListsSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LoginTypesCreate creates a new login type
*/
func (a *Client) LoginTypesCreate(params *LoginTypesCreateParams, opts ...ClientOption) (*LoginTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/LoginTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MachineSettingsCreate creates a new machine setting
*/
func (a *Client) MachineSettingsCreate(params *MachineSettingsCreateParams, opts ...ClientOption) (*MachineSettingsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineSettingsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MachineSettings_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/MachineSettings",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineSettingsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineSettingsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MachineSettingsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MailIndicatorsCreate creates a new mail indicator
*/
func (a *Client) MailIndicatorsCreate(params *MailIndicatorsCreateParams, opts ...ClientOption) (*MailIndicatorsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailIndicatorsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MailIndicators_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/MailIndicators",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailIndicatorsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailIndicatorsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MailIndicatorsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MediaTypesCreate creates a new media type
*/
func (a *Client) MediaTypesCreate(params *MediaTypesCreateParams, opts ...ClientOption) (*MediaTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/MediaTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MediaTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MembershipLevelCategoriesCreate creates a new membership level category
*/
func (a *Client) MembershipLevelCategoriesCreate(params *MembershipLevelCategoriesCreateParams, opts ...ClientOption) (*MembershipLevelCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipLevelCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipLevelCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/MembershipLevelCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipLevelCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipLevelCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MembershipLevelCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MembershipsCalculate this returns a result of calculated changes to a constituent membership this resource makes no actual changes and only returns calculated membership data for information purposes n o t e as part of the upcoming changes to membership functionality this resource will change significantly in an upcoming major tessitura release and likely break code that references it please make a note that code that references it will need to be revisited as part of that upgrade process
*/
func (a *Client) MembershipsCalculate(params *MembershipsCalculateParams, opts ...ClientOption) (*MembershipsCalculateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipsCalculateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Memberships_Calculate",
		Method:             "POST",
		PathPattern:        "/CRM/Memberships/Calculate",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipsCalculateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipsCalculateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MembershipsCalculateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSaleCategoriesCreate creates a new mode of sale category
*/
func (a *Client) ModeOfSaleCategoriesCreate(params *ModeOfSaleCategoriesCreateParams, opts ...ClientOption) (*ModeOfSaleCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleCategories_Create",
		Method:             "POST",
		PathPattern:        "/TXN/ModeOfSaleCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSaleCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSaleOffersCreate creates a new mode of sale offer
*/
func (a *Client) ModeOfSaleOffersCreate(params *ModeOfSaleOffersCreateParams, opts ...ClientOption) (*ModeOfSaleOffersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleOffersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleOffers_Create",
		Method:             "POST",
		PathPattern:        "/TXN/ModeOfSaleOffers",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleOffersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleOffersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSaleOffersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSalePriceTypesCreate creates a new mode of sale price type
*/
func (a *Client) ModeOfSalePriceTypesCreate(params *ModeOfSalePriceTypesCreateParams, opts ...ClientOption) (*ModeOfSalePriceTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSalePriceTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSalePriceTypes_Create",
		Method:             "POST",
		PathPattern:        "/TXN/ModeOfSalePriceTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSalePriceTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSalePriceTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSalePriceTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSaleSurveyQuestionsCreate creates a new mode of sale survey question
*/
func (a *Client) ModeOfSaleSurveyQuestionsCreate(params *ModeOfSaleSurveyQuestionsCreateParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleSurveyQuestionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleSurveyQuestions_Create",
		Method:             "POST",
		PathPattern:        "/TXN/ModeOfSaleSurveyQuestions",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleSurveyQuestionsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleSurveyQuestionsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSaleSurveyQuestionsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSaleUserGroupsCreate creates a new mode of sale user group mapping
*/
func (a *Client) ModeOfSaleUserGroupsCreate(params *ModeOfSaleUserGroupsCreateParams, opts ...ClientOption) (*ModeOfSaleUserGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleUserGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleUserGroups_Create",
		Method:             "POST",
		PathPattern:        "/TXN/ModeOfSaleUserGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleUserGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleUserGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSaleUserGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModesOfSaleCreate creates a new mode of sale
*/
func (a *Client) ModesOfSaleCreate(params *ModesOfSaleCreateParams, opts ...ClientOption) (*ModesOfSaleCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModesOfSaleCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModesOfSale_Create",
		Method:             "POST",
		PathPattern:        "/TXN/ModesOfSale",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModesOfSaleCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModesOfSaleCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModesOfSaleCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NScanAccessAreasCreate creates a new n scan access area
*/
func (a *Client) NScanAccessAreasCreate(params *NScanAccessAreasCreateParams, opts ...ClientOption) (*NScanAccessAreasCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNScanAccessAreasCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NScanAccessAreas_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/NScanAccessAreas",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NScanAccessAreasCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NScanAccessAreasCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NScanAccessAreasCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NameStatusesCreate creates a new name status
*/
func (a *Client) NameStatusesCreate(params *NameStatusesCreateParams, opts ...ClientOption) (*NameStatusesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNameStatusesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NameStatuses_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/NameStatuses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NameStatusesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NameStatusesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NameStatusesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ObjectPermissionsCreate creates a new object permission
*/
func (a *Client) ObjectPermissionsCreate(params *ObjectPermissionsCreateParams, opts ...ClientOption) (*ObjectPermissionsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectPermissionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ObjectPermissions_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ObjectPermissions",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObjectPermissionsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectPermissionsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ObjectPermissionsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrderBillingBillOrders orders billing
*/
func (a *Client) OrderBillingBillOrders(params *OrderBillingBillOrdersParams, opts ...ClientOption) (*OrderBillingBillOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderBillingBillOrdersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrderBilling_BillOrders",
		Method:             "POST",
		PathPattern:        "/TXN/OrderBilling",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderBillingBillOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderBillingBillOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrderBillingBillOrdersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrderCategoriesCreate creates a new order category
*/
func (a *Client) OrderCategoriesCreate(params *OrderCategoriesCreateParams, opts ...ClientOption) (*OrderCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrderCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/OrderCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrderCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrdersCreate this resource is currently only for interceptor plugin use this is called any time a new order is saved via the API or from the client application only order Id is provided in the request content this resource will be invoked from a cart checkout
*/
func (a *Client) OrdersCreate(params *OrdersCreateParams, opts ...ClientOption) (*OrdersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Orders_Create",
		Method:             "POST",
		PathPattern:        "/TXN/Orders",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrdersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrdersGetOrdersForDelivery gets all the orders for delivery
*/
func (a *Client) OrdersGetOrdersForDelivery(params *OrdersGetOrdersForDeliveryParams, opts ...ClientOption) (*OrdersGetOrdersForDeliveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersGetOrdersForDeliveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Orders_GetOrdersForDelivery",
		Method:             "POST",
		PathPattern:        "/TXN/Orders/ForDelivery",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersGetOrdersForDeliveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersGetOrdersForDeliveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrdersGetOrdersForDeliveryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrdersPrice prices an order including pricing rules should have at least one line item with each line item having at least one sub line item individual sub line items can be ignored for pricing by passing apply pricing false on those sub line items
*/
func (a *Client) OrdersPrice(params *OrdersPriceParams, opts ...ClientOption) (*OrdersPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersPriceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Orders_Price",
		Method:             "POST",
		PathPattern:        "/TXN/Orders/Price",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersPriceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersPriceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrdersPriceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrdersPrintHTMLTickets returns a collection of tickets in HTML format for the order tickets are built using an HTML ticket template ticket number Id and seat information are also included composite tickets are not currently supported so a request to print one will instead return ticket elements for each performance as if no composite ticket design had been selected for the package
*/
func (a *Client) OrdersPrintHTMLTickets(params *OrdersPrintHTMLTicketsParams, opts ...ClientOption) (*OrdersPrintHTMLTicketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersPrintHTMLTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Orders_PrintHtmlTickets",
		Method:             "POST",
		PathPattern:        "/TXN/Orders/{orderId}/PrintHtmlTickets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersPrintHTMLTicketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersPrintHTMLTicketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrdersPrintHTMLTicketsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrdersPrintTicketElements returns ticket elements by header receipts and tickets created primarily for use for building HTML ticket templates the method returns ticket data for unprinted fully paid orders or reprints printed tickets specified via order number one or more line item numbers or one or more sub line item numbers in the case of partially paid orders only line items or sub line items which have been fully paid will be eligible for printing ticket information can be returned in the default design specified for the ticket price type or you may specify a ticket design to utilize via the request parameters after the ticket data has been returned via the API seats will be flagged as ticketed in tessitura when reprinting tickets one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number composite tickets are not currently supported so a request to print one will instead return ticket elements for each performance as if no composite ticket design had been selected for the package
*/
func (a *Client) OrdersPrintTicketElements(params *OrdersPrintTicketElementsParams, opts ...ClientOption) (*OrdersPrintTicketElementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersPrintTicketElementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Orders_PrintTicketElements",
		Method:             "POST",
		PathPattern:        "/TXN/Orders/{orderId}/PrintTicketElements",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersPrintTicketElementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersPrintTicketElementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrdersPrintTicketElementsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrganizationsCreate creates a new organization
*/
func (a *Client) OrganizationsCreate(params *OrganizationsCreateParams, opts ...ClientOption) (*OrganizationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Organizations_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Organizations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OriginalSourcesCreate creates a new original source
*/
func (a *Client) OriginalSourcesCreate(params *OriginalSourcesCreateParams, opts ...ClientOption) (*OriginalSourcesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginalSourcesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OriginalSources_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/OriginalSources",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginalSourcesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginalSourcesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OriginalSourcesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OriginsCreate creates a new origin
*/
func (a *Client) OriginsCreate(params *OriginsCreateParams, opts ...ClientOption) (*OriginsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Origins_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Origins",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OriginsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OutputSetsCreate creates an output set
*/
func (a *Client) OutputSetsCreate(params *OutputSetsCreateParams, opts ...ClientOption) (*OutputSetsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutputSetsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OutputSets_Create",
		Method:             "POST",
		PathPattern:        "/Reporting/OutputSets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OutputSetsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutputSetsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OutputSetsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PackagePriceTypesCreate creates a new package price type
*/
func (a *Client) PackagePriceTypesCreate(params *PackagePriceTypesCreateParams, opts ...ClientOption) (*PackagePriceTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagePriceTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackagePriceTypes_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PackagePriceTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagePriceTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagePriceTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PackagePriceTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PackageTypesCreate creates a new package type
*/
func (a *Client) PackageTypesCreate(params *PackageTypesCreateParams, opts ...ClientOption) (*PackageTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PackageTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PackageTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PackageWebContentsCreate creates a package web content
*/
func (a *Client) PackageWebContentsCreate(params *PackageWebContentsCreateParams, opts ...ClientOption) (*PackageWebContentsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageWebContentsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageWebContents_Create",
		Method:             "POST",
		PathPattern:        "/Txn/PackageWebContents",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageWebContentsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageWebContentsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PackageWebContentsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PackagesSearch searches for packages
*/
func (a *Client) PackagesSearch(params *PackagesSearchParams, opts ...ClientOption) (*PackagesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Packages_Search",
		Method:             "POST",
		PathPattern:        "/TXN/Packages/Search",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagesSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PackagesSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentComponentGetPaymentComponent this request is used to configure a transaction and retrieve the java script location for implementing the tessitura merchant services payment component for complete documentation on how to implement the payment component please visit https bitbucket org t n web share tessituramerchantservicesintegrationsample
*/
func (a *Client) PaymentComponentGetPaymentComponent(params *PaymentComponentGetPaymentComponentParams, opts ...ClientOption) (*PaymentComponentGetPaymentComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentComponentGetPaymentComponentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentComponent_GetPaymentComponent",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/PaymentComponent",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentComponentGetPaymentComponentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentComponentGetPaymentComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentComponentGetPaymentComponentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGatewayAccountsCreateAccount generates a payment card token from a reference number obtained from a previous authorization request vantiv only
*/
func (a *Client) PaymentGatewayAccountsCreateAccount(params *PaymentGatewayAccountsCreateAccountParams, opts ...ClientOption) (*PaymentGatewayAccountsCreateAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayAccountsCreateAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayAccounts_CreateAccount",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Accounts/ReferenceNumber",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayAccountsCreateAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayAccountsCreateAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGatewayAccountsCreateAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGatewayAccountsStoreToken stores an externally generated payment card token in tessitura note that for this call to function the card mnemonic column in t r a c c o u n t t y p e must be filled in appropriately for your credit card processor look for the t r a c c o u n t t y p e topic in the tessitura help documentation for more information on the card mnemonic column
*/
func (a *Client) PaymentGatewayAccountsStoreToken(params *PaymentGatewayAccountsStoreTokenParams, opts ...ClientOption) (*PaymentGatewayAccountsStoreTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayAccountsStoreTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayAccounts_StoreToken",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Accounts/Token",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayAccountsStoreTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayAccountsStoreTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGatewayAccountsStoreTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGatewayActivitiesCreate creates a new payment gateway activity
*/
func (a *Client) PaymentGatewayActivitiesCreate(params *PaymentGatewayActivitiesCreateParams, opts ...ClientOption) (*PaymentGatewayActivitiesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayActivitiesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayActivities_Create",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/PaymentGatewayActivities",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayActivitiesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayActivitiesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGatewayActivitiesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGatewayCredentialsGetCredential payment gateway credentials get credential API
*/
func (a *Client) PaymentGatewayCredentialsGetCredential(params *PaymentGatewayCredentialsGetCredentialParams, opts ...ClientOption) (*PaymentGatewayCredentialsGetCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayCredentialsGetCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayCredentials_GetCredential",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayCredentialsGetCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayCredentialsGetCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGatewayCredentialsGetCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGatewayNotificationsCreateNotificationEvent creates a new notification event
*/
func (a *Client) PaymentGatewayNotificationsCreateNotificationEvent(params *PaymentGatewayNotificationsCreateNotificationEventParams, opts ...ClientOption) (*PaymentGatewayNotificationsCreateNotificationEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayNotificationsCreateNotificationEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayNotifications_CreateNotificationEvent",
		Method:             "POST",
		PathPattern:        "/PaymentGateway/Notifications/Events",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayNotificationsCreateNotificationEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayNotificationsCreateNotificationEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGatewayNotificationsCreateNotificationEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGatewayTransactionTypesCreate creates a new payment gateway transaction type
*/
func (a *Client) PaymentGatewayTransactionTypesCreate(params *PaymentGatewayTransactionTypesCreateParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayTransactionTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayTransactionTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PaymentGatewayTransactionTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayTransactionTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayTransactionTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGatewayTransactionTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentMethodGroupsCreate creates a new payment method group
*/
func (a *Client) PaymentMethodGroupsCreate(params *PaymentMethodGroupsCreateParams, opts ...ClientOption) (*PaymentMethodGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PaymentMethodGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentMethodGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentMethodUserGroupsCreate creates a new payment method user group mapping
*/
func (a *Client) PaymentMethodUserGroupsCreate(params *PaymentMethodUserGroupsCreateParams, opts ...ClientOption) (*PaymentMethodUserGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodUserGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodUserGroups_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PaymentMethodUserGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodUserGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodUserGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentMethodUserGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentMethodsCreate creates a new payment method
*/
func (a *Client) PaymentMethodsCreate(params *PaymentMethodsCreateParams, opts ...ClientOption) (*PaymentMethodsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethods_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PaymentMethods",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentMethodsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentSignaturesCreate creates a new payment signature
*/
func (a *Client) PaymentSignaturesCreate(params *PaymentSignaturesCreateParams, opts ...ClientOption) (*PaymentSignaturesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentSignaturesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentSignatures_Create",
		Method:             "POST",
		PathPattern:        "/TXN/Payment/Signatures",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentSignaturesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentSignaturesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentSignaturesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentSignaturesPostForOrder creates a new payment signature
*/
func (a *Client) PaymentSignaturesPostForOrder(params *PaymentSignaturesPostForOrderParams, opts ...ClientOption) (*PaymentSignaturesPostForOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentSignaturesPostForOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentSignatures_PostForOrder",
		Method:             "POST",
		PathPattern:        "/TXN/Payment/Signatures/Order/{orderId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentSignaturesPostForOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentSignaturesPostForOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentSignaturesPostForOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentTypesCreate creates a new payment type
*/
func (a *Client) PaymentTypesCreate(params *PaymentTypesCreateParams, opts ...ClientOption) (*PaymentTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PaymentTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentsReserveIds reserves a payment id generated per the request s required increment parameter increment number must be greater than 0
*/
func (a *Client) PaymentsReserveIds(params *PaymentsReserveIdsParams, opts ...ClientOption) (*PaymentsReserveIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentsReserveIdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payments_ReserveIds",
		Method:             "POST",
		PathPattern:        "/TXN/Payments/ReserveIds",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentsReserveIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentsReserveIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentsReserveIdsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformanceGroupsCreate creates a new performance group
*/
func (a *Client) PerformanceGroupsCreate(params *PerformanceGroupsCreateParams, opts ...ClientOption) (*PerformanceGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceGroups_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PerformanceGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformanceGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePackageModeOfSalesCreate creates a new performance package mode of sale
*/
func (a *Client) PerformancePackageModeOfSalesCreate(params *PerformancePackageModeOfSalesCreateParams, opts ...ClientOption) (*PerformancePackageModeOfSalesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePackageModeOfSalesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePackageModeOfSales_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PerformancePackageModeOfSales",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePackageModeOfSalesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePackageModeOfSalesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePackageModeOfSalesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceLayersCreate creates a new performance price layer
*/
func (a *Client) PerformancePriceLayersCreate(params *PerformancePriceLayersCreateParams, opts ...ClientOption) (*PerformancePriceLayersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PerformancePriceLayers",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceLayersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceLayersPostSummaries creates update the prices for a set of performances
*/
func (a *Client) PerformancePriceLayersPostSummaries(params *PerformancePriceLayersPostSummariesParams, opts ...ClientOption) (*PerformancePriceLayersPostSummariesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersPostSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_PostSummaries",
		Method:             "POST",
		PathPattern:        "/TXN/PerformancePriceLayers/Summaries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersPostSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersPostSummariesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceLayersPostSummariesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceLayersSearch gets all performance price layers for the list of performances only one of as of date time or as of relative date can be specified to get prices effective for that date time
*/
func (a *Client) PerformancePriceLayersSearch(params *PerformancePriceLayersSearchParams, opts ...ClientOption) (*PerformancePriceLayersSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_Search",
		Method:             "POST",
		PathPattern:        "/TXN/PerformancePriceLayers/Search",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceLayersSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceLayersSearchSummaries gets all performance price layers for the list of performances only one of as of date time or as of relative date can be specified to get prices effective for that date time
*/
func (a *Client) PerformancePriceLayersSearchSummaries(params *PerformancePriceLayersSearchSummariesParams, opts ...ClientOption) (*PerformancePriceLayersSearchSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersSearchSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_SearchSummaries",
		Method:             "POST",
		PathPattern:        "/TXN/PerformancePriceLayers/Summaries/Search",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersSearchSummariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersSearchSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceLayersSearchSummariesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceTypesCreate creates a new performance price type
*/
func (a *Client) PerformancePriceTypesCreate(params *PerformancePriceTypesCreateParams, opts ...ClientOption) (*PerformancePriceTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceTypes_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PerformancePriceTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePricesCreate creates a new performance price
*/
func (a *Client) PerformancePricesCreate(params *PerformancePricesCreateParams, opts ...ClientOption) (*PerformancePricesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePricesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePrices_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PerformancePrices",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePricesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePricesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePricesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformanceStatusesCreate creates a new performance status
*/
func (a *Client) PerformanceStatusesCreate(params *PerformanceStatusesCreateParams, opts ...ClientOption) (*PerformanceStatusesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceStatusesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceStatuses_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PerformanceStatuses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceStatusesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceStatusesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformanceStatusesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformanceTypesCreate creates a new performance type
*/
func (a *Client) PerformanceTypesCreate(params *PerformanceTypesCreateParams, opts ...ClientOption) (*PerformanceTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PerformanceTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformanceTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancesApplySingleHold applies a single hold on a performance seat
*/
func (a *Client) PerformancesApplySingleHold(params *PerformancesApplySingleHoldParams, opts ...ClientOption) (*PerformancesApplySingleHoldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesApplySingleHoldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_ApplySingleHold",
		Method:             "POST",
		PathPattern:        "/TXN/Performances/{performanceId}/Seats/{seatId}/SingleHold",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesApplySingleHoldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesApplySingleHoldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancesApplySingleHoldDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancesCopy copies existing performance to a new performance with options
*/
func (a *Client) PerformancesCopy(params *PerformancesCopyParams, opts ...ClientOption) (*PerformancesCopyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_Copy",
		Method:             "POST",
		PathPattern:        "/TXN/Performances/Copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesCopyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesCopyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancesCopyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancesReschedule reschedules an existing performance according to the provided options
*/
func (a *Client) PerformancesReschedule(params *PerformancesRescheduleParams, opts ...ClientOption) (*PerformancesRescheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesRescheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_Reschedule",
		Method:             "POST",
		PathPattern:        "/TXN/Performances/Reschedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesRescheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesRescheduleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancesRescheduleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancesSearch searches for performances based on provided criteria
*/
func (a *Client) PerformancesSearch(params *PerformancesSearchParams, opts ...ClientOption) (*PerformancesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_Search",
		Method:             "POST",
		PathPattern:        "/TXN/Performances/Search",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancesSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancesUpdateSeatHolds updates seat holds for a performance can be used to add or remove holds from seats for the specified performance specifying a hold code of 1 for a seat will remove all hold codes from that seat
*/
func (a *Client) PerformancesUpdateSeatHolds(params *PerformancesUpdateSeatHoldsParams, opts ...ClientOption) (*PerformancesUpdateSeatHoldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesUpdateSeatHoldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_UpdateSeatHolds",
		Method:             "POST",
		PathPattern:        "/TXN/Performances/{performanceId}/Seats/Holds",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesUpdateSeatHoldsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesUpdateSeatHoldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancesUpdateSeatHoldsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhilanthropyTypesCreate creates a new philosophy type
*/
func (a *Client) PhilanthropyTypesCreate(params *PhilanthropyTypesCreateParams, opts ...ClientOption) (*PhilanthropyTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhilanthropyTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PhilanthropyTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhilanthropyTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhilanthropyCreate creates an philanthropy entry for a constituent
*/
func (a *Client) PhilanthropyCreate(params *PhilanthropyCreateParams, opts ...ClientOption) (*PhilanthropyCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Philanthropy_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Philanthropy",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhilanthropyCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhoneIndicatorsCreate creates a new phone indicator
*/
func (a *Client) PhoneIndicatorsCreate(params *PhoneIndicatorsCreateParams, opts ...ClientOption) (*PhoneIndicatorsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneIndicatorsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneIndicators_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PhoneIndicators",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneIndicatorsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneIndicatorsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhoneIndicatorsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhoneTypesCreate creates a new phone type
*/
func (a *Client) PhoneTypesCreate(params *PhoneTypesCreateParams, opts ...ClientOption) (*PhoneTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PhoneTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhoneTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhonesCreate creates a new phone
*/
func (a *Client) PhonesCreate(params *PhonesCreateParams, opts ...ClientOption) (*PhonesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Phones",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhonesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanPrioritiesCreate creates a new plan priority
*/
func (a *Client) PlanPrioritiesCreate(params *PlanPrioritiesCreateParams, opts ...ClientOption) (*PlanPrioritiesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanPrioritiesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanPriorities_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PlanPriorities",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanPrioritiesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanPrioritiesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanPrioritiesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanSourcesCreate creates a new plan source
*/
func (a *Client) PlanSourcesCreate(params *PlanSourcesCreateParams, opts ...ClientOption) (*PlanSourcesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanSourcesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanSources_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PlanSources",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanSourcesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanSourcesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanSourcesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanStatusesCreate creates a new plan status
*/
func (a *Client) PlanStatusesCreate(params *PlanStatusesCreateParams, opts ...ClientOption) (*PlanStatusesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanStatusesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanStatuses_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PlanStatuses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanStatusesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanStatusesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanStatusesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanTypesCreate creates a new plan type
*/
func (a *Client) PlanTypesCreate(params *PlanTypesCreateParams, opts ...ClientOption) (*PlanTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PlanTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanWorkersCreate creates a new plan worker
*/
func (a *Client) PlanWorkersCreate(params *PlanWorkersCreateParams, opts ...ClientOption) (*PlanWorkersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanWorkersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanWorkers_Create",
		Method:             "POST",
		PathPattern:        "/Finance/PlanWorkers",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanWorkersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanWorkersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanWorkersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlansCreate creates a new plan
*/
func (a *Client) PlansCreate(params *PlansCreateParams, opts ...ClientOption) (*PlansCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlansCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Plans_Create",
		Method:             "POST",
		PathPattern:        "/Finance/Plans",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlansCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlansCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlansCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PledgeBillingBillPledges this is not intended for use outside of the tessitura application there is no standard way to return billing details for a run for a given campaign funds bill types etc it raises bills for all those scheduled payments that have due date between given start and end dates it also checks to see that a bill was not raised after a given cut off date
*/
func (a *Client) PledgeBillingBillPledges(params *PledgeBillingBillPledgesParams, opts ...ClientOption) (*PledgeBillingBillPledgesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPledgeBillingBillPledgesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PledgeBilling_BillPledges",
		Method:             "POST",
		PathPattern:        "/TXN/PledgeBilling",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PledgeBillingBillPledgesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PledgeBillingBillPledgesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PledgeBillingBillPledgesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PortfolioCustomElementsCreate creates a new portfolio custom element
*/
func (a *Client) PortfolioCustomElementsCreate(params *PortfolioCustomElementsCreateParams, opts ...ClientOption) (*PortfolioCustomElementsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortfolioCustomElementsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PortfolioCustomElements_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PortfolioCustomElements",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PortfolioCustomElementsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PortfolioCustomElementsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PortfolioCustomElementsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PrefixesCreate creates a new prefix
*/
func (a *Client) PrefixesCreate(params *PrefixesCreateParams, opts ...ClientOption) (*PrefixesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrefixesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Prefixes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Prefixes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrefixesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrefixesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PrefixesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PremieresCreate creates a new premiere
*/
func (a *Client) PremieresCreate(params *PremieresCreateParams, opts ...ClientOption) (*PremieresCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPremieresCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Premieres_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Premieres",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PremieresCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PremieresCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PremieresCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceCategoriesCreate creates a new price category
*/
func (a *Client) PriceCategoriesCreate(params *PriceCategoriesCreateParams, opts ...ClientOption) (*PriceCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PriceCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceLayerTypesCreate creates a new price layer type
*/
func (a *Client) PriceLayerTypesCreate(params *PriceLayerTypesCreateParams, opts ...ClientOption) (*PriceLayerTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceLayerTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceLayerTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PriceLayerTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceLayerTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceLayerTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceLayerTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTemplatesCreate creates a new price template
*/
func (a *Client) PriceTemplatesCreate(params *PriceTemplatesCreateParams, opts ...ClientOption) (*PriceTemplatesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTemplatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTemplates_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PriceTemplates",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTemplatesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTemplatesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTemplatesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypeCategoriesCreate creates a new price type category
*/
func (a *Client) PriceTypeCategoriesCreate(params *PriceTypeCategoriesCreateParams, opts ...ClientOption) (*PriceTypeCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PriceTypeCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypeCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypeGroupsCreate creates a new price type group
*/
func (a *Client) PriceTypeGroupsCreate(params *PriceTypeGroupsCreateParams, opts ...ClientOption) (*PriceTypeGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PriceTypeGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypeGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypeReasonsCreate creates a new price type reason
*/
func (a *Client) PriceTypeReasonsCreate(params *PriceTypeReasonsCreateParams, opts ...ClientOption) (*PriceTypeReasonsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeReasonsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeReasons_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PriceTypeReasons",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeReasonsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeReasonsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypeReasonsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypeUserGroupsCreate creates a new price typ user group mapping
*/
func (a *Client) PriceTypeUserGroupsCreate(params *PriceTypeUserGroupsCreateParams, opts ...ClientOption) (*PriceTypeUserGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeUserGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeUserGroups_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PriceTypeUserGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeUserGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeUserGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypeUserGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypesCreate creates a new price type
*/
func (a *Client) PriceTypesCreate(params *PriceTypesCreateParams, opts ...ClientOption) (*PriceTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypes_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PriceTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingRuleCategoriesCreate creates a new pricing rule category
*/
func (a *Client) PricingRuleCategoriesCreate(params *PricingRuleCategoriesCreateParams, opts ...ClientOption) (*PricingRuleCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PricingRuleCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingRuleCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingRuleMessageTypesCreate creates a new pricing rule message type
*/
func (a *Client) PricingRuleMessageTypesCreate(params *PricingRuleMessageTypesCreateParams, opts ...ClientOption) (*PricingRuleMessageTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleMessageTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleMessageTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/PricingRuleMessageTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleMessageTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleMessageTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingRuleMessageTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingRuleSetsCreate creates a new pricing rule set
*/
func (a *Client) PricingRuleSetsCreate(params *PricingRuleSetsCreateParams, opts ...ClientOption) (*PricingRuleSetsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleSetsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleSets_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PricingRuleSets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleSetsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleSetsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingRuleSetsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingRulesCreate creates a new pricing rule
*/
func (a *Client) PricingRulesCreate(params *PricingRulesCreateParams, opts ...ClientOption) (*PricingRulesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRulesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRules_Create",
		Method:             "POST",
		PathPattern:        "/TXN/PricingRules",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRulesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRulesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingRulesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PrintersCreate creates a new printer
*/
func (a *Client) PrintersCreate(params *PrintersCreateParams, opts ...ClientOption) (*PrintersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrintersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Printers_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Printers",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrintersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrintersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PrintersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProductionSeasonMembershipOrganizationsCreate creates a new production season membership organization
*/
func (a *Client) ProductionSeasonMembershipOrganizationsCreate(params *ProductionSeasonMembershipOrganizationsCreateParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonMembershipOrganizationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasonMembershipOrganizations_Create",
		Method:             "POST",
		PathPattern:        "/TXN/ProductionSeasonMembershipOrganizations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonMembershipOrganizationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonMembershipOrganizationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProductionSeasonMembershipOrganizationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProductionSeasonsSearch searches for production seasons returns production seasons matching the specified search criteria
*/
func (a *Client) ProductionSeasonsSearch(params *ProductionSeasonsSearchParams, opts ...ClientOption) (*ProductionSeasonsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasons_Search",
		Method:             "POST",
		PathPattern:        "/TXN/ProductionSeasons/Search",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonsSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProductionSeasonsSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProductsDescribe gets product descriptions
*/
func (a *Client) ProductsDescribe(params *ProductsDescribeParams, opts ...ClientOption) (*ProductsDescribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductsDescribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Products_Describe",
		Method:             "POST",
		PathPattern:        "/TXN/Products/Describe",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductsDescribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductsDescribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProductsDescribeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProductsSearch searches for products based on a set of criteria
*/
func (a *Client) ProductsSearch(params *ProductsSearchParams, opts ...ClientOption) (*ProductsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Products_Search",
		Method:             "POST",
		PathPattern:        "/TXN/Products/Search",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductsSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProductsSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProgramListingsCreate creates a new program listing
*/
func (a *Client) ProgramListingsCreate(params *ProgramListingsCreateParams, opts ...ClientOption) (*ProgramListingsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramListingsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProgramListings_Create",
		Method:             "POST",
		PathPattern:        "/CRM/ProgramListings",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramListingsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramListingsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProgramListingsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProgramsCreate creates a new program
*/
func (a *Client) ProgramsCreate(params *ProgramsCreateParams, opts ...ClientOption) (*ProgramsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Programs_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Programs",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProgramsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PronounsCreate pronouns create API
*/
func (a *Client) PronounsCreate(params *PronounsCreateParams, opts ...ClientOption) (*PronounsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPronounsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Pronouns_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Pronouns",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PronounsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PronounsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PronounsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QualificationCategoriesCreate creates a new qualification category
*/
func (a *Client) QualificationCategoriesCreate(params *QualificationCategoriesCreateParams, opts ...ClientOption) (*QualificationCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QualificationCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/QualificationCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QualificationCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QualificationsCreate creates a new qualification
*/
func (a *Client) QualificationsCreate(params *QualificationsCreateParams, opts ...ClientOption) (*QualificationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Qualifications_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Qualifications",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QualificationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QueryElementFiltersCreate creates a query element filter
*/
func (a *Client) QueryElementFiltersCreate(params *QueryElementFiltersCreateParams, opts ...ClientOption) (*QueryElementFiltersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementFiltersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementFilters_Create",
		Method:             "POST",
		PathPattern:        "/Reporting/QueryElementFilters",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementFiltersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementFiltersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryElementFiltersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QueryElementGroupsCreate creates a new query element group
*/
func (a *Client) QueryElementGroupsCreate(params *QueryElementGroupsCreateParams, opts ...ClientOption) (*QueryElementGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementGroups_Create",
		Method:             "POST",
		PathPattern:        "/Reporting/QueryElementGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryElementGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QueryElementsCreate creates a new query element
*/
func (a *Client) QueryElementsCreate(params *QueryElementsCreateParams, opts ...ClientOption) (*QueryElementsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElements_Create",
		Method:             "POST",
		PathPattern:        "/Reporting/QueryElements",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryElementsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RankTypesCreate creates a new rank type
*/
func (a *Client) RankTypesCreate(params *RankTypesCreateParams, opts ...ClientOption) (*RankTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RankTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/RankTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RankTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RankingsCreate creates a new ranking
*/
func (a *Client) RankingsCreate(params *RankingsCreateParams, opts ...ClientOption) (*RankingsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankingsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Rankings_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Rankings",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankingsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankingsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RankingsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReceiptSettingsCreate creates a new receipt setting
*/
func (a *Client) ReceiptSettingsCreate(params *ReceiptSettingsCreateParams, opts ...ClientOption) (*ReceiptSettingsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiptSettingsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReceiptSettings_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ReceiptSettings",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReceiptSettingsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReceiptSettingsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReceiptSettingsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RecordAttendanceRecordTicket records attendance for a given ticket number
*/
func (a *Client) RecordAttendanceRecordTicket(params *RecordAttendanceRecordTicketParams, opts ...ClientOption) (*RecordAttendanceRecordTicketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecordAttendanceRecordTicketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RecordAttendance_RecordTicket",
		Method:             "POST",
		PathPattern:        "/AccessControl/RecordAttendance/Ticket",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RecordAttendanceRecordTicketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecordAttendanceRecordTicketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RecordAttendanceRecordTicketDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReferenceTableUserGroupsCreate creates a new reference table user group mapping
*/
func (a *Client) ReferenceTableUserGroupsCreate(params *ReferenceTableUserGroupsCreateParams, opts ...ClientOption) (*ReferenceTableUserGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceTableUserGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceTableUserGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ReferenceTableUserGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceTableUserGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceTableUserGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReferenceTableUserGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RegistrationRegister this is a combined resource for registering a new constituent with logging into the current session this resource combines a workflow of multiple API actions into a single request this is primarily designed for creating a constituent with a primary electronic address a primary login and logging into the session using the provide login creates a new constituent and login affiliates can be specified for the constituent to create a household account the login must be unique for the login type the electronic address for this constituent must be primary the primary indicator on electronic address is unused in this request the session will be logged in with the new login after successful registration
*/
func (a *Client) RegistrationRegister(params *RegistrationRegisterParams, opts ...ClientOption) (*RegistrationRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegistrationRegisterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Registration_Register",
		Method:             "POST",
		PathPattern:        "/Web/Registration/{sessionKey}/Register",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegistrationRegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegistrationRegisterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegistrationRegisterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RelationshipCategoriesCreate creates a new relationship category
*/
func (a *Client) RelationshipCategoriesCreate(params *RelationshipCategoriesCreateParams, opts ...ClientOption) (*RelationshipCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelationshipCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelationshipCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/RelationshipCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelationshipCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelationshipCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RelationshipCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportRequestsCreate creates the report request
*/
func (a *Client) ReportRequestsCreate(params *ReportRequestsCreateParams, opts ...ClientOption) (*ReportRequestsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportRequestsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportRequests_Create",
		Method:             "POST",
		PathPattern:        "/Reporting/ReportRequests",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportRequestsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportRequestsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportRequestsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportRequestsGenerateScheduled report requests generate scheduled API
*/
func (a *Client) ReportRequestsGenerateScheduled(params *ReportRequestsGenerateScheduledParams, opts ...ClientOption) (*ReportRequestsGenerateScheduledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportRequestsGenerateScheduledParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportRequests_GenerateScheduled",
		Method:             "POST",
		PathPattern:        "/Reporting/ReportRequests/GenerateScheduled",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportRequestsGenerateScheduledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportRequestsGenerateScheduledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportRequestsGenerateScheduledDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportSchedulesCalculateNextRun verifies the next run for a schedule s recurrence pattern by passing the pattern returns its calculated next run date time
*/
func (a *Client) ReportSchedulesCalculateNextRun(params *ReportSchedulesCalculateNextRunParams, opts ...ClientOption) (*ReportSchedulesCalculateNextRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportSchedulesCalculateNextRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportSchedules_CalculateNextRun",
		Method:             "POST",
		PathPattern:        "/Reporting/ReportSchedules/CalculateNextRun",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportSchedulesCalculateNextRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportSchedulesCalculateNextRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportSchedulesCalculateNextRunDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportSchedulesSave creates a report schedule
*/
func (a *Client) ReportSchedulesSave(params *ReportSchedulesSaveParams, opts ...ClientOption) (*ReportSchedulesSaveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportSchedulesSaveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportSchedules_Save",
		Method:             "POST",
		PathPattern:        "/Reporting/ReportSchedules",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportSchedulesSaveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportSchedulesSaveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportSchedulesSaveDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportUserGroupsCreate creates a new report user group mapping
*/
func (a *Client) ReportUserGroupsCreate(params *ReportUserGroupsCreateParams, opts ...ClientOption) (*ReportUserGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportUserGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportUserGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ReportUserGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportUserGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportUserGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportUserGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportsGetParameterValues gets parameter values for a report parameter
*/
func (a *Client) ReportsGetParameterValues(params *ReportsGetParameterValuesParams, opts ...ClientOption) (*ReportsGetParameterValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportsGetParameterValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Reports_GetParameterValues",
		Method:             "POST",
		PathPattern:        "/Reporting/Reports/ParameterValues",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportsGetParameterValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportsGetParameterValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportsGetParameterValuesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResearchTypesCreate creates a new research type
*/
func (a *Client) ResearchTypesCreate(params *ResearchTypesCreateParams, opts ...ClientOption) (*ResearchTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResearchTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ResearchTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResearchTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResearchCreate creates a research entry for a constituent
*/
func (a *Client) ResearchCreate(params *ResearchCreateParams, opts ...ClientOption) (*ResearchCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Research_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Research",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResearchCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourceCategoriesCreate creates a new resource category
*/
func (a *Client) ResourceCategoriesCreate(params *ResourceCategoriesCreateParams, opts ...ClientOption) (*ResourceCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ResourceCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourceSchedulesCreate creates a busy or available resource schedule booking assignment schedules must be created in a booking
*/
func (a *Client) ResourceSchedulesCreate(params *ResourceSchedulesCreateParams, opts ...ClientOption) (*ResourceSchedulesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceSchedulesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceSchedules_Create",
		Method:             "POST",
		PathPattern:        "/EventsManagement/ResourceSchedules",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceSchedulesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceSchedulesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceSchedulesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourceTypesCreate creates a new resource type
*/
func (a *Client) ResourceTypesCreate(params *ResourceTypesCreateParams, opts ...ClientOption) (*ResourceTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceTypes_Create",
		Method:             "POST",
		PathPattern:        "/EventsManagement/ResourceTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourcesCreate creates a resource
*/
func (a *Client) ResourcesCreate(params *ResourcesCreateParams, opts ...ClientOption) (*ResourcesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_Create",
		Method:             "POST",
		PathPattern:        "/EventsManagement/Resources",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourcesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourcesFindAvailableResources gets a set of resources available at the requested time count qualifications
*/
func (a *Client) ResourcesFindAvailableResources(params *ResourcesFindAvailableResourcesParams, opts ...ClientOption) (*ResourcesFindAvailableResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesFindAvailableResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_FindAvailableResources",
		Method:             "POST",
		PathPattern:        "/EventsManagement/Resources/FindAvailable",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesFindAvailableResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesFindAvailableResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourcesFindAvailableResourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourcesGetScheduleOccurrences gets schedule occurrences for set of resources and or constituents during certain period of time
*/
func (a *Client) ResourcesGetScheduleOccurrences(params *ResourcesGetScheduleOccurrencesParams, opts ...ClientOption) (*ResourcesGetScheduleOccurrencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesGetScheduleOccurrencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_GetScheduleOccurrences",
		Method:             "POST",
		PathPattern:        "/EventsManagement/Resources/ScheduleOccurrences",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesGetScheduleOccurrencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesGetScheduleOccurrencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourcesGetScheduleOccurrencesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalesChannelsCreate creates a new sales channel
*/
func (a *Client) SalesChannelsCreate(params *SalesChannelsCreateParams, opts ...ClientOption) (*SalesChannelsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesChannelsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesChannels_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SalesChannels",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesChannelsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesChannelsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalesChannelsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalesLayoutButtonTypesCreate creates a new sales layout button type
*/
func (a *Client) SalesLayoutButtonTypesCreate(params *SalesLayoutButtonTypesCreateParams, opts ...ClientOption) (*SalesLayoutButtonTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutButtonTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayoutButtonTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SalesLayoutButtonTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutButtonTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutButtonTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalesLayoutButtonTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalesLayoutsCreate creates a new sales layout setup
*/
func (a *Client) SalesLayoutsCreate(params *SalesLayoutsCreateParams, opts ...ClientOption) (*SalesLayoutsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayouts_Create",
		Method:             "POST",
		PathPattern:        "/TXN/SalesLayouts/Setup",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalesLayoutsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalutationTypesCreate creates a new salutation type
*/
func (a *Client) SalutationTypesCreate(params *SalutationTypesCreateParams, opts ...ClientOption) (*SalutationTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalutationTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SalutationTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalutationTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalutationsCreate creates a new salutation
*/
func (a *Client) SalutationsCreate(params *SalutationsCreateParams, opts ...ClientOption) (*SalutationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Salutations_Create",
		Method:             "POST",
		PathPattern:        "/CRM/Salutations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalutationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SchedulePatternTypesCreate creates a new schedule pattern
*/
func (a *Client) SchedulePatternTypesCreate(params *SchedulePatternTypesCreateParams, opts ...ClientOption) (*SchedulePatternTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulePatternTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SchedulePatternTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SchedulePatternTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulePatternTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulePatternTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulePatternTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScheduleTypesCreate creates a new schedule type
*/
func (a *Client) ScheduleTypesCreate(params *ScheduleTypesCreateParams, opts ...ClientOption) (*ScheduleTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ScheduleTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScheduleTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SeasonTypesCreate creates a new season type
*/
func (a *Client) SeasonTypesCreate(params *SeasonTypesCreateParams, opts ...ClientOption) (*SeasonTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeasonTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SeasonTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeasonTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SeasonsCreate creates a new season
*/
func (a *Client) SeasonsCreate(params *SeasonsCreateParams, opts ...ClientOption) (*SeasonsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Seasons_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Seasons",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeasonsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SeatCodesCreate creates a new seat code
*/
func (a *Client) SeatCodesCreate(params *SeatCodesCreateParams, opts ...ClientOption) (*SeatCodesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatCodesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatCodes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SeatCodes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatCodesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatCodesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeatCodesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SeatStatusesCreate creates a new seat status
*/
func (a *Client) SeatStatusesCreate(params *SeatStatusesCreateParams, opts ...ClientOption) (*SeatStatusesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatStatusesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatStatuses_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SeatStatuses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatStatusesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatStatusesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeatStatusesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SectionsCreate creates a new section
*/
func (a *Client) SectionsCreate(params *SectionsCreateParams, opts ...ClientOption) (*SectionsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSectionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Sections_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Sections",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SectionsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SectionsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SectionsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceResourceUserGroupsCreate creates a new service resource user group mapping
*/
func (a *Client) ServiceResourceUserGroupsCreate(params *ServiceResourceUserGroupsCreateParams, opts ...ClientOption) (*ServiceResourceUserGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceResourceUserGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceResourceUserGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ServiceResourceUserGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceResourceUserGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceResourceUserGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceResourceUserGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionAddVariable adds a new session variable to specified session
*/
func (a *Client) SessionAddVariable(params *SessionAddVariableParams, opts ...ClientOption) (*SessionAddVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionAddVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_AddVariable",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Variables",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionAddVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionAddVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionAddVariableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionCreateBusinessFacingSession creates a new business facing session and returns a unique session key a source number and mode of sale must be supplied an optional valid batch id may be included
*/
func (a *Client) SessionCreateBusinessFacingSession(params *SessionCreateBusinessFacingSessionParams, opts ...ClientOption) (*SessionCreateBusinessFacingSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionCreateBusinessFacingSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_CreateBusinessFacingSession",
		Method:             "POST",
		PathPattern:        "/Web/Session/BusinessFacing",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionCreateBusinessFacingSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionCreateBusinessFacingSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionCreateBusinessFacingSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionCreateSession creates a new session and returns a unique session key
*/
func (a *Client) SessionCreateSession(params *SessionCreateSessionParams, opts ...ClientOption) (*SessionCreateSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionCreateSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_CreateSession",
		Method:             "POST",
		PathPattern:        "/Web/Session",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionCreateSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionCreateSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionCreateSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionCreateWebLogin creates a web login for a user and logs back into the session using new credentials
*/
func (a *Client) SessionCreateWebLogin(params *SessionCreateWebLoginParams, opts ...ClientOption) (*SessionCreateWebLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionCreateWebLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_CreateWebLogin",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/WebLogins",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionCreateWebLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionCreateWebLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionCreateWebLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionGetPromoCode returns promotion information for a session by number or description a primary use of this method is to translate promo codes text into source codes integers this method also returns the 6 fields of text that can be recorded for each web source which can be used to display specific messaging when a promo code is entered by a constituent
*/
func (a *Client) SessionGetPromoCode(params *SessionGetPromoCodeParams, opts ...ClientOption) (*SessionGetPromoCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionGetPromoCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_GetPromoCode",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/PromoCode",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionGetPromoCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionGetPromoCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionGetPromoCodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionLoadOrder loads an existing order into the cart and return the cart details once an order is loaded changes can be made to the order when loaded the session mode of sale changes to the mode of sale of the loaded order the method raises an exception if called with existing items in the cart this method loads all products and payments generally these reloaded products and payments cannot be manipulated by the API new products and payments can be added then saved with checkout locked orders cannot be loaded by this method if the method is called for a locked order a determination of whether or not the order is locked by an abandoned web session will be made based on the last access time of the session and the order lock timeout value specified in t d e f a u l t s order lock timeout is the number of minutes after which to consider an idle session abandoned if the session is determined to be abandoned the order will be unlocked and loaded n o t e all orders loaded by this procedure get a mir lock value of 1
*/
func (a *Client) SessionLoadOrder(params *SessionLoadOrderParams, opts ...ClientOption) (*SessionLoadOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLoadOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_LoadOrder",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/LoadOrder/{orderId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionLoadOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLoadOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLoadOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionLogin logins a constituent using username and password a constituent record must have an existing login in order for successful authentication a login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one this is generally used to differentiate each organization s logins in a consortium environment this method sets four session variables UID the constituent ID for the session login type the login type used for the session user name the username for the session status the status of the login p permanent t temporary a constituent can be locked out of logging in after a certain number of failed log in attempts the number of failed attempts before lockout and the length of lockout are set in the t d e f a u l t s table should a constituent exceed the allowed number of failed log in attempts the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process
*/
func (a *Client) SessionLogin(params *SessionLoginParams, opts ...ClientOption) (*SessionLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_Login",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Login",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionLoginAsGuest logins for guest checkout allows anonymous checkout under constituent 0 attaching the supplied email address to the cart the session will be marked as a guest login if the email address exists attached to a login of the specified login type that login s constituent ID will be used on the cart
*/
func (a *Client) SessionLoginAsGuest(params *SessionLoginAsGuestParams, opts ...ClientOption) (*SessionLoginAsGuestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLoginAsGuestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_LoginAsGuest",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/LoginAsGuest",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionLoginAsGuestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLoginAsGuestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLoginAsGuestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionLoginUsingConstituentInfo logins a constituent using constituent ID phone number and postal code email can also be passed for additional validation but is optional a constituent record must have an existing login in order for successful authentication a login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one this is generally used to differentiate each organization s logins in a consortium environment this method sets four session variables UID the constituent ID for the session login type the login type used for the session user name the username for the session status the status of the login p permanent t temporary a constituent can be locked out of logging in after a certain number of failed log in attempts the number of failed attempts before lockout and the length of lockout are set in the t d e f a u l t s table should a constituent exceed the allowed number of failed log in attempts the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process
*/
func (a *Client) SessionLoginUsingConstituentInfo(params *SessionLoginUsingConstituentInfoParams, opts ...ClientOption) (*SessionLoginUsingConstituentInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLoginUsingConstituentInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_LoginUsingConstituentInfo",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Login/ConstituentInfo",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionLoginUsingConstituentInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLoginUsingConstituentInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLoginUsingConstituentInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionLoginUsingEmail logins a constituent using email and password a constituent record must have an existing login in order for successful authentication a login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one this is generally used to differentiate each organization s logins in a consortium environment this method sets four session variables UID the constituent ID for the session login type the login type used for the session user name the username for the session status the status of the login p permanent t temporary a constituent can be locked out of logging in after a certain number of failed log in attempts the number of failed attempts before lockout and the length of lockout are set in the t d e f a u l t s table should a constituent exceed the allowed number of failed log in attempts the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process
*/
func (a *Client) SessionLoginUsingEmail(params *SessionLoginUsingEmailParams, opts ...ClientOption) (*SessionLoginUsingEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLoginUsingEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_LoginUsingEmail",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Login/Email",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionLoginUsingEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLoginUsingEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLoginUsingEmailDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionLoginUsingExternal logins a constituent using external authentication a constituent record must have an existing login in order for successful authentication a login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one this is generally used to differentiate each organization s logins in a consortium environment this method sets four session variables UID the constituent ID for the session login type the login type used for the session user name the username for the session status the status of the login p permanent t temporary a constituent can be locked out of logging in after a certain number of failed log in attempts the number of failed attempts before lockout and the length of lockout are set in the t d e f a u l t s table should a constituent exceed the allowed number of failed log in attempts the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process
*/
func (a *Client) SessionLoginUsingExternal(params *SessionLoginUsingExternalParams, opts ...ClientOption) (*SessionLoginUsingExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLoginUsingExternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_LoginUsingExternal",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Login/External",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionLoginUsingExternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLoginUsingExternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLoginUsingExternalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionLoginUsingToken logins a constituent using login token and email a constituent record must have an existing login in order for successful authentication a login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one this is generally used to differentiate each organization s logins in a consortium environment this method sets four session variables UID the constituent ID for the session login type the login type used for the session user name the username for the session status the status of the login p permanent t temporary a constituent can be locked out of logging in after a certain number of failed log in attempts the number of failed attempts before lockout and the length of lockout are set in the t d e f a u l t s table should a constituent exceed the allowed number of failed log in attempts the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process
*/
func (a *Client) SessionLoginUsingToken(params *SessionLoginUsingTokenParams, opts ...ClientOption) (*SessionLoginUsingTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLoginUsingTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_LoginUsingToken",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Login/Token",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionLoginUsingTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLoginUsingTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLoginUsingTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionLogout logouts a constituent seats locked by the session are automatically released during logout this behavior can be disabled by setting the d i s c o n n e c t o n l o g o u t entry in t d e f a u l t s or the web config file to false
*/
func (a *Client) SessionLogout(params *SessionLogoutParams, opts ...ClientOption) (*SessionLogoutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_Logout",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLogoutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLogoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionReprint this method causes a print at home reprint request to be written for the specified order note that the order will only be reprinted by the tessitura print at home ticketing service if the service is configured to recognize the delivery method used by the order the mode of sale for the order must also be set in the t r p a h t c o n f i g u r a t i o n table to allow t p a h t reprints see the tessitura print at home ticketing service document for more details
*/
func (a *Client) SessionReprint(params *SessionReprintParams, opts ...ClientOption) (*SessionReprintNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionReprintParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_Reprint",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Reprint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionReprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionReprintNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionReprintDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionSendLoginCredentials sends an email with a temporary login token to a specific email address and login type the service searches for the email address in logins of the specified type if it is found a password token will be generated and the login credentials template that is configured in t f o r m a t i n f o will be sent
*/
func (a *Client) SessionSendLoginCredentials(params *SessionSendLoginCredentialsParams, opts ...ClientOption) (*SessionSendLoginCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionSendLoginCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_SendLoginCredentials",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Login/SendCredentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionSendLoginCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionSendLoginCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionSendLoginCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionTransferSession transfers the authentication for the specified session to another session this method is typically called after completing checkout so the constituent is automatically transferred to a new session this avoids having to log in again n o t e the new session must be generated using the web session p o s t method you can choose to have the web API automatically disconnect the constituent s session from the seat server once transfer session has completed by setting the configuration value of d i s c o n n e c t s e a t s e r v e r s e s s i o n w h e n t r a n s f e r i n g s e s s i o n to true in the web API config file
*/
func (a *Client) SessionTransferSession(params *SessionTransferSessionParams, opts ...ClientOption) (*SessionTransferSessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionTransferSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_TransferSession",
		Method:             "POST",
		PathPattern:        "/Web/Session/{sessionKey}/Transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionTransferSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionTransferSessionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionTransferSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SourceGroupsCreate creates a new source group
*/
func (a *Client) SourceGroupsCreate(params *SourceGroupsCreateParams, opts ...ClientOption) (*SourceGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SourceGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SourceGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SourceGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SpecialActivitiesCreate creates a new activity record
*/
func (a *Client) SpecialActivitiesCreate(params *SpecialActivitiesCreateParams, opts ...ClientOption) (*SpecialActivitiesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivitiesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivities_Create",
		Method:             "POST",
		PathPattern:        "/CRM/SpecialActivities",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivitiesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivitiesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SpecialActivitiesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SpecialActivityStatusesCreate creates a new special activity status
*/
func (a *Client) SpecialActivityStatusesCreate(params *SpecialActivityStatusesCreateParams, opts ...ClientOption) (*SpecialActivityStatusesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityStatusesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityStatuses_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SpecialActivityStatuses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityStatusesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityStatusesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SpecialActivityStatusesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SpecialActivityTypesCreate creates a new special activity type
*/
func (a *Client) SpecialActivityTypesCreate(params *SpecialActivityTypesCreateParams, opts ...ClientOption) (*SpecialActivityTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SpecialActivityTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SpecialActivityTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StatesCreate creates a new state
*/
func (a *Client) StatesCreate(params *StatesCreateParams, opts ...ClientOption) (*StatesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "States_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/States",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StatesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StatesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StepTypesCreate creates a new step type
*/
func (a *Client) StepTypesCreate(params *StepTypesCreateParams, opts ...ClientOption) (*StepTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StepTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/StepTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StepTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StepsAddDocument adds a document to the step
*/
func (a *Client) StepsAddDocument(params *StepsAddDocumentParams, opts ...ClientOption) (*StepsAddDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepsAddDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Steps_AddDocument",
		Method:             "POST",
		PathPattern:        "/Finance/Steps/{stepId}/Documents",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepsAddDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepsAddDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StepsAddDocumentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StepsCreate creates a new step
*/
func (a *Client) StepsCreate(params *StepsCreateParams, opts ...ClientOption) (*StepsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Steps_Create",
		Method:             "POST",
		PathPattern:        "/Finance/Steps",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StepsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubLineItemStatusesCreate creates a new sub line item status
*/
func (a *Client) SubLineItemStatusesCreate(params *SubLineItemStatusesCreateParams, opts ...ClientOption) (*SubLineItemStatusesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubLineItemStatusesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubLineItemStatuses_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SubLineItemStatuses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubLineItemStatusesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubLineItemStatusesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubLineItemStatusesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SuffixesCreate creates a new suffix
*/
func (a *Client) SuffixesCreate(params *SuffixesCreateParams, opts ...ClientOption) (*SuffixesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuffixesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Suffixes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Suffixes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuffixesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuffixesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SuffixesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SurveyQuestionsCreate creates a new survey question
*/
func (a *Client) SurveyQuestionsCreate(params *SurveyQuestionsCreateParams, opts ...ClientOption) (*SurveyQuestionsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyQuestionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyQuestions_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/SurveyQuestions",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyQuestionsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyQuestionsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SurveyQuestionsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SurveyResponsesCreate creates a new survey response
*/
func (a *Client) SurveyResponsesCreate(params *SurveyResponsesCreateParams, opts ...ClientOption) (*SurveyResponsesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyResponsesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyResponses_Create",
		Method:             "POST",
		PathPattern:        "/TXN/SurveyResponses",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyResponsesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyResponsesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SurveyResponsesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplateCategoriesCreate creates a new template category
*/
func (a *Client) TemplateCategoriesCreate(params *TemplateCategoriesCreateParams, opts ...ClientOption) (*TemplateCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/TemplateCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplateCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplateCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatePriceTypesBatchCreate creates or update a set of template price types
*/
func (a *Client) TemplatePriceTypesBatchCreate(params *TemplatePriceTypesBatchCreateParams, opts ...ClientOption) (*TemplatePriceTypesBatchCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePriceTypesBatchCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePriceTypes_BatchCreate",
		Method:             "POST",
		PathPattern:        "/TXN/TemplatePriceTypes/Batch",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePriceTypesBatchCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePriceTypesBatchCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatePriceTypesBatchCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatePriceTypesCreate creates a new template price type
*/
func (a *Client) TemplatePriceTypesCreate(params *TemplatePriceTypesCreateParams, opts ...ClientOption) (*TemplatePriceTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePriceTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePriceTypes_Create",
		Method:             "POST",
		PathPattern:        "/TXN/TemplatePriceTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePriceTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePriceTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatePriceTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatePricesBatchCreate creates or update a set of template prices
*/
func (a *Client) TemplatePricesBatchCreate(params *TemplatePricesBatchCreateParams, opts ...ClientOption) (*TemplatePricesBatchCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePricesBatchCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePrices_BatchCreate",
		Method:             "POST",
		PathPattern:        "/TXN/TemplatePrices/Batch",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePricesBatchCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePricesBatchCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatePricesBatchCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatePricesCreate creates a new template price
*/
func (a *Client) TemplatePricesCreate(params *TemplatePricesCreateParams, opts ...ClientOption) (*TemplatePricesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePricesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePrices_Create",
		Method:             "POST",
		PathPattern:        "/TXN/TemplatePrices",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePricesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePricesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatePricesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesCreate creates a new template
*/
func (a *Client) TemplatesCreate(params *TemplatesCreateParams, opts ...ClientOption) (*TemplatesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_Create",
		Method:             "POST",
		PathPattern:        "/Templates",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesGetConstituentInfo gets a formatted html body for constituent info
*/
func (a *Client) TemplatesGetConstituentInfo(params *TemplatesGetConstituentInfoParams, opts ...ClientOption) (*TemplatesGetConstituentInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesGetConstituentInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_GetConstituentInfo",
		Method:             "POST",
		PathPattern:        "/Templates/{templateId}/Constituent/{constituentId}/Info",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesGetConstituentInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesGetConstituentInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesGetConstituentInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesGetLoginCredentials gets a formatted html body for login credentials this endpoint will not generate a password token and should be used for testing a login credentials template use the send credentials endpoint in web session to send a login credentials email with a generated password token
*/
func (a *Client) TemplatesGetLoginCredentials(params *TemplatesGetLoginCredentialsParams, opts ...ClientOption) (*TemplatesGetLoginCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesGetLoginCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_GetLoginCredentials",
		Method:             "POST",
		PathPattern:        "/Templates/{templateId}/Login/{loginId}/Credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesGetLoginCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesGetLoginCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesGetLoginCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesGetOrderConfirmation gets a formatted html body for an order confirmation
*/
func (a *Client) TemplatesGetOrderConfirmation(params *TemplatesGetOrderConfirmationParams, opts ...ClientOption) (*TemplatesGetOrderConfirmationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesGetOrderConfirmationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_GetOrderConfirmation",
		Method:             "POST",
		PathPattern:        "/Templates/{templateId}/Order/{orderId}/Confirmation",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesGetOrderConfirmationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesGetOrderConfirmationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesGetOrderConfirmationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesGetTickets gets a formatted html body for tickets composite tickets are not currently supported so a request to print one will instead return ticket elements for each performance as if no composite ticket design had been selected for the package
*/
func (a *Client) TemplatesGetTickets(params *TemplatesGetTicketsParams, opts ...ClientOption) (*TemplatesGetTicketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesGetTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_GetTickets",
		Method:             "POST",
		PathPattern:        "/Templates/{templateId}/Order/{orderId}/Tickets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesGetTicketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesGetTicketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesGetTicketsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesRenderConstituentInfo returns the rendered constituent info template for the provided constituent Id
*/
func (a *Client) TemplatesRenderConstituentInfo(params *TemplatesRenderConstituentInfoParams, opts ...ClientOption) (*TemplatesRenderConstituentInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesRenderConstituentInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_RenderConstituentInfo",
		Method:             "POST",
		PathPattern:        "/Templates/Render/Constituent/{constituentId}/Info",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesRenderConstituentInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesRenderConstituentInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesRenderConstituentInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesRenderLoginCredentials returns the rendered login credentials template for the provided web login id this endpoint will not generate a password token and should be used for testing a login credentials template use the send credentials endpoint in web session to send a login credentials email with a generated password token
*/
func (a *Client) TemplatesRenderLoginCredentials(params *TemplatesRenderLoginCredentialsParams, opts ...ClientOption) (*TemplatesRenderLoginCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesRenderLoginCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_RenderLoginCredentials",
		Method:             "POST",
		PathPattern:        "/Templates/Render/Login/{loginId}/Credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesRenderLoginCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesRenderLoginCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesRenderLoginCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesRenderOrderConfirmation returns the rendered order confirmation template for the provided order Id
*/
func (a *Client) TemplatesRenderOrderConfirmation(params *TemplatesRenderOrderConfirmationParams, opts ...ClientOption) (*TemplatesRenderOrderConfirmationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesRenderOrderConfirmationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_RenderOrderConfirmation",
		Method:             "POST",
		PathPattern:        "/Templates/Render/Order/{orderId}/Confirmation",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesRenderOrderConfirmationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesRenderOrderConfirmationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesRenderOrderConfirmationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesRenderTickets returns the rendered tickets for the provided order Id composite tickets are not currently supported so a request to print one will instead return ticket elements for each performance as if no composite ticket design had been selected for the package
*/
func (a *Client) TemplatesRenderTickets(params *TemplatesRenderTicketsParams, opts ...ClientOption) (*TemplatesRenderTicketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesRenderTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_RenderTickets",
		Method:             "POST",
		PathPattern:        "/Templates/Render/Order/{orderId}/Tickets",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesRenderTicketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesRenderTicketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesRenderTicketsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TheatersCreate creates a new theater
*/
func (a *Client) TheatersCreate(params *TheatersCreateParams, opts ...ClientOption) (*TheatersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTheatersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Theaters_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/Theaters",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TheatersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TheatersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TheatersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TimeSlotsCreate creates a new time slot
*/
func (a *Client) TimeSlotsCreate(params *TimeSlotsCreateParams, opts ...ClientOption) (*TimeSlotsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeSlotsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TimeSlots_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/TimeSlots",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeSlotsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeSlotsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TimeSlotsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TriPOSCloudConfigurationsCreate creates a new tri p o s cloud configuration
*/
func (a *Client) TriPOSCloudConfigurationsCreate(params *TriPOSCloudConfigurationsCreateParams, opts ...ClientOption) (*TriPOSCloudConfigurationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriPOSCloudConfigurationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TriPOSCloudConfigurations_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/TriPOSCloudConfigurations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriPOSCloudConfigurationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriPOSCloudConfigurationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TriPOSCloudConfigurationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeCategoriesCreate creates a new upgrade category
*/
func (a *Client) UpgradeCategoriesCreate(params *UpgradeCategoriesCreateParams, opts ...ClientOption) (*UpgradeCategoriesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCategoriesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeCategories_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/UpgradeCategories",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeCategoriesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeCategoriesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeCategoriesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeLogsCreate saves the given upgrade log
*/
func (a *Client) UpgradeLogsCreate(params *UpgradeLogsCreateParams, opts ...ClientOption) (*UpgradeLogsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeLogsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeLogs_Create",
		Method:             "POST",
		PathPattern:        "/Admin/UpgradeLogs",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeLogsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeLogsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeLogsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPreferencesCreate creates a new user preference
*/
func (a *Client) UserPreferencesCreate(params *UserPreferencesCreateParams, opts ...ClientOption) (*UserPreferencesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPreferencesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserPreferences_Create",
		Method:             "POST",
		PathPattern:        "/Security/UserPreferences",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserPreferencesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPreferencesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPreferencesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPreferencesSaveBatch saves a batch of user preferences
*/
func (a *Client) UserPreferencesSaveBatch(params *UserPreferencesSaveBatchParams, opts ...ClientOption) (*UserPreferencesSaveBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPreferencesSaveBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserPreferences_SaveBatch",
		Method:             "POST",
		PathPattern:        "/Security/UserPreferences/Batch",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserPreferencesSaveBatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPreferencesSaveBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPreferencesSaveBatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UsersChangePassword allows for changing of a user s password
*/
func (a *Client) UsersChangePassword(params *UsersChangePasswordParams, opts ...ClientOption) (*UsersChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersChangePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ChangePassword",
		Method:             "POST",
		PathPattern:        "/Security/Users/{userName}/Password",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersChangePasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersChangePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UsersChangePasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ValidateWebLoginCreate validates a web login
*/
func (a *Client) ValidateWebLoginCreate(params *ValidateWebLoginCreateParams, opts ...ClientOption) (*ValidateWebLoginCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateWebLoginCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ValidateWebLogin_Create",
		Method:             "POST",
		PathPattern:        "/Security/ValidateWebLogin",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateWebLoginCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateWebLoginCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateWebLoginCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WebContentTypesCreate creates a web content type
*/
func (a *Client) WebContentTypesCreate(params *WebContentTypesCreateParams, opts ...ClientOption) (*WebContentTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebContentTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebContentTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/WebContentTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebContentTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebContentTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WebContentTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WebLoginsCreate creates a new weblogin
*/
func (a *Client) WebLoginsCreate(params *WebLoginsCreateParams, opts ...ClientOption) (*WebLoginsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebLoginsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebLogins_Create",
		Method:             "POST",
		PathPattern:        "/CRM/WebLogins",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebLoginsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebLoginsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WebLoginsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkerQualificationsCreate creates a worker qualification
*/
func (a *Client) WorkerQualificationsCreate(params *WorkerQualificationsCreateParams, opts ...ClientOption) (*WorkerQualificationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerQualificationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerQualifications_Create",
		Method:             "POST",
		PathPattern:        "/CRM/WorkerQualifications",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerQualificationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerQualificationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkerQualificationsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkerRolesCreate creates a new worker role
*/
func (a *Client) WorkerRolesCreate(params *WorkerRolesCreateParams, opts ...ClientOption) (*WorkerRolesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerRolesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerRoles_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/WorkerRoles",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerRolesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerRolesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkerRolesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkerTypesCreate creates a new worker type
*/
func (a *Client) WorkerTypesCreate(params *WorkerTypesCreateParams, opts ...ClientOption) (*WorkerTypesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerTypesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerTypes_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/WorkerTypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerTypesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerTypesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkerTypesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkersCreate creates a new worker
*/
func (a *Client) WorkersCreate(params *WorkersCreateParams, opts ...ClientOption) (*WorkersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Workers_Create",
		Method:             "POST",
		PathPattern:        "/Finance/Workers",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkersCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZoneGroupsCreate creates a new zone group
*/
func (a *Client) ZoneGroupsCreate(params *ZoneGroupsCreateParams, opts ...ClientOption) (*ZoneGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneGroups_Create",
		Method:             "POST",
		PathPattern:        "/ReferenceData/ZoneGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneGroupsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZoneGroupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZoneMapsCreate creates a new zone map
*/
func (a *Client) ZoneMapsCreate(params *ZoneMapsCreateParams, opts ...ClientOption) (*ZoneMapsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneMapsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneMaps_Create",
		Method:             "POST",
		PathPattern:        "/TXN/ZoneMaps",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneMapsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneMapsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZoneMapsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZonesCreate creates a new zone
*/
func (a *Client) ZonesCreate(params *ZonesCreateParams, opts ...ClientOption) (*ZonesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZonesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Zones_Create",
		Method:             "POST",
		PathPattern:        "/TXN/Zones",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZonesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZonesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZonesSearch searches for products based on a set of criteria
*/
func (a *Client) ZonesSearch(params *ZonesSearchParams, opts ...ClientOption) (*ZonesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZonesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Zones_Search",
		Method:             "POST",
		PathPattern:        "/TXN/Zones/Search",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZonesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZonesSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
