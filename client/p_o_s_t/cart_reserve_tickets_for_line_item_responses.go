// Code generated by go-swagger; DO NOT EDIT.

package p_o_s_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/skysyzygy/tq/models"
)

// CartReserveTicketsForLineItemReader is a Reader for the CartReserveTicketsForLineItem structure.
type CartReserveTicketsForLineItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CartReserveTicketsForLineItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCartReserveTicketsForLineItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCartReserveTicketsForLineItemDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCartReserveTicketsForLineItemOK creates a CartReserveTicketsForLineItemOK with default headers values
func NewCartReserveTicketsForLineItemOK() *CartReserveTicketsForLineItemOK {
	return &CartReserveTicketsForLineItemOK{}
}

/*
CartReserveTicketsForLineItemOK describes a response with status code 200, with default header values.

OK
*/
type CartReserveTicketsForLineItemOK struct {
	Payload *models.ReserveTicketsResponse
}

// IsSuccess returns true when this cart reserve tickets for line item o k response has a 2xx status code
func (o *CartReserveTicketsForLineItemOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cart reserve tickets for line item o k response has a 3xx status code
func (o *CartReserveTicketsForLineItemOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cart reserve tickets for line item o k response has a 4xx status code
func (o *CartReserveTicketsForLineItemOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cart reserve tickets for line item o k response has a 5xx status code
func (o *CartReserveTicketsForLineItemOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cart reserve tickets for line item o k response a status code equal to that given
func (o *CartReserveTicketsForLineItemOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cart reserve tickets for line item o k response
func (o *CartReserveTicketsForLineItemOK) Code() int {
	return 200
}

func (o *CartReserveTicketsForLineItemOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /Web/Cart/{sessionKey}/LineItems/{lineItemId}/Tickets][%d] cartReserveTicketsForLineItemOK %s", 200, payload)
}

func (o *CartReserveTicketsForLineItemOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /Web/Cart/{sessionKey}/LineItems/{lineItemId}/Tickets][%d] cartReserveTicketsForLineItemOK %s", 200, payload)
}

func (o *CartReserveTicketsForLineItemOK) GetPayload() *models.ReserveTicketsResponse {
	return o.Payload
}

func (o *CartReserveTicketsForLineItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReserveTicketsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCartReserveTicketsForLineItemDefault creates a CartReserveTicketsForLineItemDefault with default headers values
func NewCartReserveTicketsForLineItemDefault(code int) *CartReserveTicketsForLineItemDefault {
	return &CartReserveTicketsForLineItemDefault{
		_statusCode: code,
	}
}

/*
CartReserveTicketsForLineItemDefault describes a response with status code -1, with default header values.

Error
*/
type CartReserveTicketsForLineItemDefault struct {
	_statusCode int

	Payload *models.ErrorMessage
}

// IsSuccess returns true when this cart reserve tickets for line item default response has a 2xx status code
func (o *CartReserveTicketsForLineItemDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this cart reserve tickets for line item default response has a 3xx status code
func (o *CartReserveTicketsForLineItemDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this cart reserve tickets for line item default response has a 4xx status code
func (o *CartReserveTicketsForLineItemDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this cart reserve tickets for line item default response has a 5xx status code
func (o *CartReserveTicketsForLineItemDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this cart reserve tickets for line item default response a status code equal to that given
func (o *CartReserveTicketsForLineItemDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the cart reserve tickets for line item default response
func (o *CartReserveTicketsForLineItemDefault) Code() int {
	return o._statusCode
}

func (o *CartReserveTicketsForLineItemDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /Web/Cart/{sessionKey}/LineItems/{lineItemId}/Tickets][%d] Cart_ReserveTicketsForLineItem default %s", o._statusCode, payload)
}

func (o *CartReserveTicketsForLineItemDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /Web/Cart/{sessionKey}/LineItems/{lineItemId}/Tickets][%d] Cart_ReserveTicketsForLineItem default %s", o._statusCode, payload)
}

func (o *CartReserveTicketsForLineItemDefault) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *CartReserveTicketsForLineItemDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
