// Code generated by go-swagger; DO NOT EDIT.

package p_u_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new p u t API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new p u t API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new p u t API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for p u t API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// WithContentTypeTextXML sets the Content-Type header to "text/xml".
func WithContentTypeTextXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// WithAcceptTextJSON sets the Accept header to "text/json".
func WithAcceptTextJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/json"}
}

// WithAcceptTextXML sets the Accept header to "text/xml".
func WithAcceptTextXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AccountTypesUpdate(params *AccountTypesUpdateParams, opts ...ClientOption) (*AccountTypesUpdateOK, error)

	AccountsUpdateCardNumberAccount(params *AccountsUpdateCardNumberAccountParams, opts ...ClientOption) (*AccountsUpdateCardNumberAccountOK, error)

	AccountsUpdateDirectDebitAccount(params *AccountsUpdateDirectDebitAccountParams, opts ...ClientOption) (*AccountsUpdateDirectDebitAccountOK, error)

	AccountsUpdateSepaAccount(params *AccountsUpdateSepaAccountParams, opts ...ClientOption) (*AccountsUpdateSepaAccountOK, error)

	ActionTypesUpdate(params *ActionTypesUpdateParams, opts ...ClientOption) (*ActionTypesUpdateOK, error)

	ActionsUpdate(params *ActionsUpdateParams, opts ...ClientOption) (*ActionsUpdateOK, error)

	ActivityCategoriesUpdate(params *ActivityCategoriesUpdateParams, opts ...ClientOption) (*ActivityCategoriesUpdateOK, error)

	ActivityTypesUpdate(params *ActivityTypesUpdateParams, opts ...ClientOption) (*ActivityTypesUpdateOK, error)

	AddressTypesUpdate(params *AddressTypesUpdateParams, opts ...ClientOption) (*AddressTypesUpdateOK, error)

	AddressesUpdate(params *AddressesUpdateParams, opts ...ClientOption) (*AddressesUpdateOK, error)

	AffiliationTypesUpdate(params *AffiliationTypesUpdateParams, opts ...ClientOption) (*AffiliationTypesUpdateOK, error)

	AffiliationsUpdate(params *AffiliationsUpdateParams, opts ...ClientOption) (*AffiliationsUpdateOK, error)

	AliasTypesUpdate(params *AliasTypesUpdateParams, opts ...ClientOption) (*AliasTypesUpdateOK, error)

	AliasesUpdate(params *AliasesUpdateParams, opts ...ClientOption) (*AliasesUpdateOK, error)

	AnalyticsReportsUpdate(params *AnalyticsReportsUpdateParams, opts ...ClientOption) (*AnalyticsReportsUpdateOK, error)

	AppScreenTextsCreateOrUpdate(params *AppScreenTextsCreateOrUpdateParams, opts ...ClientOption) (*AppScreenTextsCreateOrUpdateOK, error)

	AppealCategoriesUpdate(params *AppealCategoriesUpdateParams, opts ...ClientOption) (*AppealCategoriesUpdateOK, error)

	ArtistsUpdate(params *ArtistsUpdateParams, opts ...ClientOption) (*ArtistsUpdateOK, error)

	AssetTypesUpdate(params *AssetTypesUpdateParams, opts ...ClientOption) (*AssetTypesUpdateOK, error)

	AssetsUpdate(params *AssetsUpdateParams, opts ...ClientOption) (*AssetsUpdateOK, error)

	AssociationTypesUpdate(params *AssociationTypesUpdateParams, opts ...ClientOption) (*AssociationTypesUpdateOK, error)

	AssociationsUpdate(params *AssociationsUpdateParams, opts ...ClientOption) (*AssociationsUpdateOK, error)

	AttributesUpdate(params *AttributesUpdateParams, opts ...ClientOption) (*AttributesUpdateOK, error)

	AuthorizationExpirePayByLink(params *AuthorizationExpirePayByLinkParams, opts ...ClientOption) (*AuthorizationExpirePayByLinkOK, error)

	BatchTypeGroupsUpdate(params *BatchTypeGroupsUpdateParams, opts ...ClientOption) (*BatchTypeGroupsUpdateOK, error)

	BatchTypesUpdate(params *BatchTypesUpdateParams, opts ...ClientOption) (*BatchTypesUpdateOK, error)

	BillingSchedulesUpdate(params *BillingSchedulesUpdateParams, opts ...ClientOption) (*BillingSchedulesUpdateOK, error)

	BillingTypesUpdate(params *BillingTypesUpdateParams, opts ...ClientOption) (*BillingTypesUpdateOK, error)

	BookingCategoriesUpdate(params *BookingCategoriesUpdateParams, opts ...ClientOption) (*BookingCategoriesUpdateOK, error)

	BookingTemplatesUpdate(params *BookingTemplatesUpdateParams, opts ...ClientOption) (*BookingTemplatesUpdateOK, error)

	BookingsUpdate(params *BookingsUpdateParams, opts ...ClientOption) (*BookingsUpdateOK, error)

	BulkCopySetsUpdate(params *BulkCopySetsUpdateParams, opts ...ClientOption) (*BulkCopySetsUpdateOK, error)

	BulkDailyCopyExclusionsUpdate(params *BulkDailyCopyExclusionsUpdateParams, opts ...ClientOption) (*BulkDailyCopyExclusionsUpdateOK, error)

	BusinessUnitsUpdate(params *BusinessUnitsUpdateParams, opts ...ClientOption) (*BusinessUnitsUpdateOK, error)

	CampaignDesignationsUpdate(params *CampaignDesignationsUpdateParams, opts ...ClientOption) (*CampaignDesignationsUpdateOK, error)

	CampaignFundsUpdate(params *CampaignFundsUpdateParams, opts ...ClientOption) (*CampaignFundsUpdateOK, error)

	CardReaderTypesUpdate(params *CardReaderTypesUpdateParams, opts ...ClientOption) (*CardReaderTypesUpdateOK, error)

	CartApplyLineItemDiscount(params *CartApplyLineItemDiscountParams, opts ...ClientOption) (*CartApplyLineItemDiscountOK, error)

	CartApplySubLineItemDiscount(params *CartApplySubLineItemDiscountParams, opts ...ClientOption) (*CartApplySubLineItemDiscountOK, error)

	CartUpdateCartFlags(params *CartUpdateCartFlagsParams, opts ...ClientOption) (*CartUpdateCartFlagsOK, error)

	CartUpdateCartProperties(params *CartUpdateCartPropertiesParams, opts ...ClientOption) (*CartUpdateCartPropertiesOK, error)

	CartUpdateCartPropertiesCustomData(params *CartUpdateCartPropertiesCustomDataParams, opts ...ClientOption) (*CartUpdateCartPropertiesCustomDataNoContent, error)

	CartUpdateContributionCustomData(params *CartUpdateContributionCustomDataParams, opts ...ClientOption) (*CartUpdateContributionCustomDataNoContent, error)

	CartUpdateLineItemPrice(params *CartUpdateLineItemPriceParams, opts ...ClientOption) (*CartUpdateLineItemPriceOK, error)

	CartUpdateLineItemPriceType(params *CartUpdateLineItemPriceTypeParams, opts ...ClientOption) (*CartUpdateLineItemPriceTypeNoContent, error)

	CartUpdateLineItemSource(params *CartUpdateLineItemSourceParams, opts ...ClientOption) (*CartUpdateLineItemSourceOK, error)

	CartUpdateLineItemSpecialRequest(params *CartUpdateLineItemSpecialRequestParams, opts ...ClientOption) (*CartUpdateLineItemSpecialRequestNoContent, error)

	CartUpdatePaymentPlan(params *CartUpdatePaymentPlanParams, opts ...ClientOption) (*CartUpdatePaymentPlanOK, error)

	CartUpdateSubLineItemPrice(params *CartUpdateSubLineItemPriceParams, opts ...ClientOption) (*CartUpdateSubLineItemPriceOK, error)

	CartUpdateSubLineItemPriceType(params *CartUpdateSubLineItemPriceTypeParams, opts ...ClientOption) (*CartUpdateSubLineItemPriceTypeNoContent, error)

	CartUpdateSubLineItemRecipient(params *CartUpdateSubLineItemRecipientParams, opts ...ClientOption) (*CartUpdateSubLineItemRecipientNoContent, error)

	ColorsUpdate(params *ColorsUpdateParams, opts ...ClientOption) (*ColorsUpdateOK, error)

	ComposersUpdate(params *ComposersUpdateParams, opts ...ClientOption) (*ComposersUpdateOK, error)

	ConstituenciesUpdate(params *ConstituenciesUpdateParams, opts ...ClientOption) (*ConstituenciesUpdateOK, error)

	ConstituencyTypesUpdate(params *ConstituencyTypesUpdateParams, opts ...ClientOption) (*ConstituencyTypesUpdateOK, error)

	ConstituentDocumentsUpdate(params *ConstituentDocumentsUpdateParams, opts ...ClientOption) (*ConstituentDocumentsUpdateOK, error)

	ConstituentGroupsUpdate(params *ConstituentGroupsUpdateParams, opts ...ClientOption) (*ConstituentGroupsUpdateOK, error)

	ConstituentInactivesUpdate(params *ConstituentInactivesUpdateParams, opts ...ClientOption) (*ConstituentInactivesUpdateOK, error)

	ConstituentProtectionTypesUpdate(params *ConstituentProtectionTypesUpdateParams, opts ...ClientOption) (*ConstituentProtectionTypesUpdateOK, error)

	ConstituentTypeAffiliatesUpdate(params *ConstituentTypeAffiliatesUpdateParams, opts ...ClientOption) (*ConstituentTypeAffiliatesUpdateOK, error)

	ConstituentTypesUpdate(params *ConstituentTypesUpdateParams, opts ...ClientOption) (*ConstituentTypesUpdateOK, error)

	ConstituentsUpdate(params *ConstituentsUpdateParams, opts ...ClientOption) (*ConstituentsUpdateOK, error)

	ContactPermissionCategoriesUpdate(params *ContactPermissionCategoriesUpdateParams, opts ...ClientOption) (*ContactPermissionCategoriesUpdateOK, error)

	ContactPermissionTypesUpdate(params *ContactPermissionTypesUpdateParams, opts ...ClientOption) (*ContactPermissionTypesUpdateOK, error)

	ContactPermissionsUpdate(params *ContactPermissionsUpdateParams, opts ...ClientOption) (*ContactPermissionsUpdateOK, error)

	ContactPointCategoriesUpdate(params *ContactPointCategoriesUpdateParams, opts ...ClientOption) (*ContactPointCategoriesUpdateOK, error)

	ContactPointCategoryPurposesUpdate(params *ContactPointCategoryPurposesUpdateParams, opts ...ClientOption) (*ContactPointCategoryPurposesUpdateOK, error)

	ContactPointPurposeCategoriesUpdate(params *ContactPointPurposeCategoriesUpdateParams, opts ...ClientOption) (*ContactPointPurposeCategoriesUpdateOK, error)

	ContactPointPurposeMapsUpdate(params *ContactPointPurposeMapsUpdateParams, opts ...ClientOption) (*ContactPointPurposeMapsUpdateOK, error)

	ContactPointPurposesUpdate(params *ContactPointPurposesUpdateParams, opts ...ClientOption) (*ContactPointPurposesUpdateOK, error)

	ContactTypesUpdate(params *ContactTypesUpdateParams, opts ...ClientOption) (*ContactTypesUpdateOK, error)

	ContributionDesignationsUpdate(params *ContributionDesignationsUpdateParams, opts ...ClientOption) (*ContributionDesignationsUpdateOK, error)

	ContributionImportSetsUpdate(params *ContributionImportSetsUpdateParams, opts ...ClientOption) (*ContributionImportSetsUpdateOK, error)

	ContributionsUpdate(params *ContributionsUpdateParams, opts ...ClientOption) (*ContributionsUpdateOK, error)

	ControlGroupUserGroupsUpdate(params *ControlGroupUserGroupsUpdateParams, opts ...ClientOption) (*ControlGroupUserGroupsUpdateOK, error)

	ControlGroupsUpdate(params *ControlGroupsUpdateParams, opts ...ClientOption) (*ControlGroupsUpdateOK, error)

	CountriesUpdate(params *CountriesUpdateParams, opts ...ClientOption) (*CountriesUpdateOK, error)

	CrediteeTypesUpdate(params *CrediteeTypesUpdateParams, opts ...ClientOption) (*CrediteeTypesUpdateOK, error)

	CurrencyTypesUpdate(params *CurrencyTypesUpdateParams, opts ...ClientOption) (*CurrencyTypesUpdateOK, error)

	CustomDefaultCategoriesUpdate(params *CustomDefaultCategoriesUpdateParams, opts ...ClientOption) (*CustomDefaultCategoriesUpdateOK, error)

	CustomDefaultsUpdate(params *CustomDefaultsUpdateParams, opts ...ClientOption) (*CustomDefaultsUpdateOK, error)

	DeliveryMethodsUpdate(params *DeliveryMethodsUpdateParams, opts ...ClientOption) (*DeliveryMethodsUpdateOK, error)

	DesignationCodesUpdate(params *DesignationCodesUpdateParams, opts ...ClientOption) (*DesignationCodesUpdateOK, error)

	DiagnosticsPut(params *DiagnosticsPutParams, opts ...ClientOption) (*DiagnosticsPutOK, error)

	DirectDebitAccountTypesUpdate(params *DirectDebitAccountTypesUpdateParams, opts ...ClientOption) (*DirectDebitAccountTypesUpdateOK, error)

	DiscountTypesUpdate(params *DiscountTypesUpdateParams, opts ...ClientOption) (*DiscountTypesUpdateOK, error)

	DocumentCategoriesUpdate(params *DocumentCategoriesUpdateParams, opts ...ClientOption) (*DocumentCategoriesUpdateOK, error)

	DonationLevelsUpdate(params *DonationLevelsUpdateParams, opts ...ClientOption) (*DonationLevelsUpdateOK, error)

	EMVSetIdleMessage(params *EMVSetIdleMessageParams, opts ...ClientOption) (*EMVSetIdleMessageOK, error)

	ElectronicAddressTypesUpdate(params *ElectronicAddressTypesUpdateParams, opts ...ClientOption) (*ElectronicAddressTypesUpdateOK, error)

	ElectronicAddressesUpdate(params *ElectronicAddressesUpdateParams, opts ...ClientOption) (*ElectronicAddressesUpdateOK, error)

	EmailProfilesUpdate(params *EmailProfilesUpdateParams, opts ...ClientOption) (*EmailProfilesUpdateOK, error)

	EmarketIndicatorsUpdate(params *EmarketIndicatorsUpdateParams, opts ...ClientOption) (*EmarketIndicatorsUpdateOK, error)

	ErasUpdate(params *ErasUpdateParams, opts ...ClientOption) (*ErasUpdateOK, error)

	FacilitiesUpdate(params *FacilitiesUpdateParams, opts ...ClientOption) (*FacilitiesUpdateOK, error)

	GendersUpdate(params *GendersUpdateParams, opts ...ClientOption) (*GendersUpdateOK, error)

	GiftAidContactMethodsUpdate(params *GiftAidContactMethodsUpdateParams, opts ...ClientOption) (*GiftAidContactMethodsUpdateOK, error)

	GiftAidDeclarationsUpdate(params *GiftAidDeclarationsUpdateParams, opts ...ClientOption) (*GiftAidDeclarationsUpdateOK, error)

	GiftAidDocumentStatusesUpdate(params *GiftAidDocumentStatusesUpdateParams, opts ...ClientOption) (*GiftAidDocumentStatusesUpdateOK, error)

	GiftAidIneligibleReasonsUpdate(params *GiftAidIneligibleReasonsUpdateParams, opts ...ClientOption) (*GiftAidIneligibleReasonsUpdateOK, error)

	GiftAidRatesUpdate(params *GiftAidRatesUpdateParams, opts ...ClientOption) (*GiftAidRatesUpdateOK, error)

	GiftAidStatusesUpdate(params *GiftAidStatusesUpdateParams, opts ...ClientOption) (*GiftAidStatusesUpdateOK, error)

	GiftAidTypesUpdate(params *GiftAidTypesUpdateParams, opts ...ClientOption) (*GiftAidTypesUpdateOK, error)

	HoldCodeCategoriesUpdate(params *HoldCodeCategoriesUpdateParams, opts ...ClientOption) (*HoldCodeCategoriesUpdateOK, error)

	HoldCodeUserGroupsUpdate(params *HoldCodeUserGroupsUpdateParams, opts ...ClientOption) (*HoldCodeUserGroupsUpdateOK, error)

	HoldCodesUpdate(params *HoldCodesUpdateParams, opts ...ClientOption) (*HoldCodesUpdateOK, error)

	InactiveReasonsUpdate(params *InactiveReasonsUpdateParams, opts ...ClientOption) (*InactiveReasonsUpdateOK, error)

	IntegrationDefaultsUpdate(params *IntegrationDefaultsUpdateParams, opts ...ClientOption) (*IntegrationDefaultsUpdateOK, error)

	IntegrationsUpdate(params *IntegrationsUpdateParams, opts ...ClientOption) (*IntegrationsUpdateOK, error)

	InterestCategoriesUpdate(params *InterestCategoriesUpdateParams, opts ...ClientOption) (*InterestCategoriesUpdateOK, error)

	InterestTypesUpdate(params *InterestTypesUpdateParams, opts ...ClientOption) (*InterestTypesUpdateOK, error)

	InterestsUpdate(params *InterestsUpdateParams, opts ...ClientOption) (*InterestsUpdateOK, error)

	InternalUpdate(params *InternalUpdateParams, opts ...ClientOption) (*InternalUpdateOK, error)

	InventoryContactPermissionTypesUpdate(params *InventoryContactPermissionTypesUpdateParams, opts ...ClientOption) (*InventoryContactPermissionTypesUpdateOK, error)

	InventoryWebContentsUpdate(params *InventoryWebContentsUpdateParams, opts ...ClientOption) (*InventoryWebContentsUpdateOK, error)

	IssuesUpdate(params *IssuesUpdateParams, opts ...ClientOption) (*IssuesUpdateOK, error)

	KeywordCategoriesUpdate(params *KeywordCategoriesUpdateParams, opts ...ClientOption) (*KeywordCategoriesUpdateOK, error)

	KeywordsUpdate(params *KeywordsUpdateParams, opts ...ClientOption) (*KeywordsUpdateOK, error)

	LanguagesUpdate(params *LanguagesUpdateParams, opts ...ClientOption) (*LanguagesUpdateOK, error)

	ListCategoriesUpdate(params *ListCategoriesUpdateParams, opts ...ClientOption) (*ListCategoriesUpdateOK, error)

	ListsUpdate(params *ListsUpdateParams, opts ...ClientOption) (*ListsUpdateOK, error)

	ListsUpdateContents(params *ListsUpdateContentsParams, opts ...ClientOption) (*ListsUpdateContentsOK, error)

	LoginTypesUpdate(params *LoginTypesUpdateParams, opts ...ClientOption) (*LoginTypesUpdateOK, error)

	MachineSettingsUpdate(params *MachineSettingsUpdateParams, opts ...ClientOption) (*MachineSettingsUpdateOK, error)

	MailIndicatorsUpdate(params *MailIndicatorsUpdateParams, opts ...ClientOption) (*MailIndicatorsUpdateOK, error)

	MediaTypesUpdate(params *MediaTypesUpdateParams, opts ...ClientOption) (*MediaTypesUpdateOK, error)

	MembershipLevelCategoriesUpdate(params *MembershipLevelCategoriesUpdateParams, opts ...ClientOption) (*MembershipLevelCategoriesUpdateOK, error)

	ModeOfSaleCategoriesUpdate(params *ModeOfSaleCategoriesUpdateParams, opts ...ClientOption) (*ModeOfSaleCategoriesUpdateOK, error)

	ModeOfSaleOffersUpdate(params *ModeOfSaleOffersUpdateParams, opts ...ClientOption) (*ModeOfSaleOffersUpdateOK, error)

	ModeOfSalePriceTypesUpdate(params *ModeOfSalePriceTypesUpdateParams, opts ...ClientOption) (*ModeOfSalePriceTypesUpdateOK, error)

	ModeOfSaleSurveyQuestionsUpdate(params *ModeOfSaleSurveyQuestionsUpdateParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsUpdateOK, error)

	ModeOfSaleUserGroupsUpdate(params *ModeOfSaleUserGroupsUpdateParams, opts ...ClientOption) (*ModeOfSaleUserGroupsUpdateOK, error)

	ModesOfSaleUpdate(params *ModesOfSaleUpdateParams, opts ...ClientOption) (*ModesOfSaleUpdateOK, error)

	NScanAccessAreasUpdate(params *NScanAccessAreasUpdateParams, opts ...ClientOption) (*NScanAccessAreasUpdateOK, error)

	NameStatusesUpdate(params *NameStatusesUpdateParams, opts ...ClientOption) (*NameStatusesUpdateOK, error)

	ObjectPermissionsUpdate(params *ObjectPermissionsUpdateParams, opts ...ClientOption) (*ObjectPermissionsUpdateOK, error)

	OrderCategoriesUpdate(params *OrderCategoriesUpdateParams, opts ...ClientOption) (*OrderCategoriesUpdateOK, error)

	OrdersUpdate(params *OrdersUpdateParams, opts ...ClientOption) (*OrdersUpdateOK, error)

	OrganizationsUpdate(params *OrganizationsUpdateParams, opts ...ClientOption) (*OrganizationsUpdateOK, error)

	OriginalSourcesUpdate(params *OriginalSourcesUpdateParams, opts ...ClientOption) (*OriginalSourcesUpdateOK, error)

	OriginsUpdate(params *OriginsUpdateParams, opts ...ClientOption) (*OriginsUpdateOK, error)

	OutputSetsUpdate(params *OutputSetsUpdateParams, opts ...ClientOption) (*OutputSetsUpdateOK, error)

	PackagePriceTypesUpdate(params *PackagePriceTypesUpdateParams, opts ...ClientOption) (*PackagePriceTypesUpdateOK, error)

	PackageTypesUpdate(params *PackageTypesUpdateParams, opts ...ClientOption) (*PackageTypesUpdateOK, error)

	PackageWebContentsUpdate(params *PackageWebContentsUpdateParams, opts ...ClientOption) (*PackageWebContentsUpdateOK, error)

	PaymentGatewayActivitiesUpdate(params *PaymentGatewayActivitiesUpdateParams, opts ...ClientOption) (*PaymentGatewayActivitiesUpdateOK, error)

	PaymentGatewayNotificationsUpdate(params *PaymentGatewayNotificationsUpdateParams, opts ...ClientOption) (*PaymentGatewayNotificationsUpdateOK, error)

	PaymentGatewayTransactionTypesUpdate(params *PaymentGatewayTransactionTypesUpdateParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesUpdateOK, error)

	PaymentMethodGroupsUpdate(params *PaymentMethodGroupsUpdateParams, opts ...ClientOption) (*PaymentMethodGroupsUpdateOK, error)

	PaymentMethodUserGroupsUpdate(params *PaymentMethodUserGroupsUpdateParams, opts ...ClientOption) (*PaymentMethodUserGroupsUpdateOK, error)

	PaymentMethodsUpdate(params *PaymentMethodsUpdateParams, opts ...ClientOption) (*PaymentMethodsUpdateOK, error)

	PaymentSignaturesUpdate(params *PaymentSignaturesUpdateParams, opts ...ClientOption) (*PaymentSignaturesUpdateOK, error)

	PaymentTypesUpdate(params *PaymentTypesUpdateParams, opts ...ClientOption) (*PaymentTypesUpdateOK, error)

	PerformanceGroupsUpdate(params *PerformanceGroupsUpdateParams, opts ...ClientOption) (*PerformanceGroupsUpdateOK, error)

	PerformancePackageModeOfSalesUpdate(params *PerformancePackageModeOfSalesUpdateParams, opts ...ClientOption) (*PerformancePackageModeOfSalesUpdateOK, error)

	PerformancePriceLayersUpdate(params *PerformancePriceLayersUpdateParams, opts ...ClientOption) (*PerformancePriceLayersUpdateOK, error)

	PerformancePriceLayersUpdatePrices(params *PerformancePriceLayersUpdatePricesParams, opts ...ClientOption) (*PerformancePriceLayersUpdatePricesNoContent, error)

	PerformancePriceTypesBulkUpdate(params *PerformancePriceTypesBulkUpdateParams, opts ...ClientOption) (*PerformancePriceTypesBulkUpdateNoContent, error)

	PerformancePriceTypesUpdate(params *PerformancePriceTypesUpdateParams, opts ...ClientOption) (*PerformancePriceTypesUpdateOK, error)

	PerformancePriceTypesUpdateBase(params *PerformancePriceTypesUpdateBaseParams, opts ...ClientOption) (*PerformancePriceTypesUpdateBaseNoContent, error)

	PerformancePricesUpdate(params *PerformancePricesUpdateParams, opts ...ClientOption) (*PerformancePricesUpdateOK, error)

	PerformanceStatusesUpdate(params *PerformanceStatusesUpdateParams, opts ...ClientOption) (*PerformanceStatusesUpdateOK, error)

	PerformanceTypesUpdate(params *PerformanceTypesUpdateParams, opts ...ClientOption) (*PerformanceTypesUpdateOK, error)

	PerformancesExpireSeatHolds(params *PerformancesExpireSeatHoldsParams, opts ...ClientOption) (*PerformancesExpireSeatHoldsOK, error)

	PhilanthropyTypesUpdate(params *PhilanthropyTypesUpdateParams, opts ...ClientOption) (*PhilanthropyTypesUpdateOK, error)

	PhilanthropyUpdate(params *PhilanthropyUpdateParams, opts ...ClientOption) (*PhilanthropyUpdateOK, error)

	PhoneIndicatorsUpdate(params *PhoneIndicatorsUpdateParams, opts ...ClientOption) (*PhoneIndicatorsUpdateOK, error)

	PhoneTypesUpdate(params *PhoneTypesUpdateParams, opts ...ClientOption) (*PhoneTypesUpdateOK, error)

	PhonesUpdate(params *PhonesUpdateParams, opts ...ClientOption) (*PhonesUpdateOK, error)

	PlanPrioritiesUpdate(params *PlanPrioritiesUpdateParams, opts ...ClientOption) (*PlanPrioritiesUpdateOK, error)

	PlanSourcesUpdate(params *PlanSourcesUpdateParams, opts ...ClientOption) (*PlanSourcesUpdateOK, error)

	PlanStatusesUpdate(params *PlanStatusesUpdateParams, opts ...ClientOption) (*PlanStatusesUpdateOK, error)

	PlanTypesUpdate(params *PlanTypesUpdateParams, opts ...ClientOption) (*PlanTypesUpdateOK, error)

	PlanWorkersUpdate(params *PlanWorkersUpdateParams, opts ...ClientOption) (*PlanWorkersUpdateOK, error)

	PlansUpdate(params *PlansUpdateParams, opts ...ClientOption) (*PlansUpdateOK, error)

	PortfolioCustomElementsUpdate(params *PortfolioCustomElementsUpdateParams, opts ...ClientOption) (*PortfolioCustomElementsUpdateOK, error)

	PrefixesUpdate(params *PrefixesUpdateParams, opts ...ClientOption) (*PrefixesUpdateOK, error)

	PremieresUpdate(params *PremieresUpdateParams, opts ...ClientOption) (*PremieresUpdateOK, error)

	PriceCategoriesUpdate(params *PriceCategoriesUpdateParams, opts ...ClientOption) (*PriceCategoriesUpdateOK, error)

	PriceEventsMoveTo(params *PriceEventsMoveToParams, opts ...ClientOption) (*PriceEventsMoveToNoContent, error)

	PriceLayerTypesUpdate(params *PriceLayerTypesUpdateParams, opts ...ClientOption) (*PriceLayerTypesUpdateOK, error)

	PriceTemplatesUpdate(params *PriceTemplatesUpdateParams, opts ...ClientOption) (*PriceTemplatesUpdateOK, error)

	PriceTypeCategoriesUpdate(params *PriceTypeCategoriesUpdateParams, opts ...ClientOption) (*PriceTypeCategoriesUpdateOK, error)

	PriceTypeGroupsUpdate(params *PriceTypeGroupsUpdateParams, opts ...ClientOption) (*PriceTypeGroupsUpdateOK, error)

	PriceTypeReasonsUpdate(params *PriceTypeReasonsUpdateParams, opts ...ClientOption) (*PriceTypeReasonsUpdateOK, error)

	PriceTypeUserGroupsUpdate(params *PriceTypeUserGroupsUpdateParams, opts ...ClientOption) (*PriceTypeUserGroupsUpdateOK, error)

	PriceTypesUpdate(params *PriceTypesUpdateParams, opts ...ClientOption) (*PriceTypesUpdateOK, error)

	PricingRuleCategoriesUpdate(params *PricingRuleCategoriesUpdateParams, opts ...ClientOption) (*PricingRuleCategoriesUpdateOK, error)

	PricingRuleMessageTypesUpdate(params *PricingRuleMessageTypesUpdateParams, opts ...ClientOption) (*PricingRuleMessageTypesUpdateOK, error)

	PricingRuleSetsUpdate(params *PricingRuleSetsUpdateParams, opts ...ClientOption) (*PricingRuleSetsUpdateOK, error)

	PricingRulesUpdate(params *PricingRulesUpdateParams, opts ...ClientOption) (*PricingRulesUpdateOK, error)

	PrintersUpdate(params *PrintersUpdateParams, opts ...ClientOption) (*PrintersUpdateOK, error)

	ProductionSeasonMembershipOrganizationsUpdate(params *ProductionSeasonMembershipOrganizationsUpdateParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsUpdateOK, error)

	ProgramListingsUpdate(params *ProgramListingsUpdateParams, opts ...ClientOption) (*ProgramListingsUpdateOK, error)

	ProgramsUpdate(params *ProgramsUpdateParams, opts ...ClientOption) (*ProgramsUpdateOK, error)

	PronounsUpdate(params *PronounsUpdateParams, opts ...ClientOption) (*PronounsUpdateOK, error)

	QualificationCategoriesUpdate(params *QualificationCategoriesUpdateParams, opts ...ClientOption) (*QualificationCategoriesUpdateOK, error)

	QualificationsUpdate(params *QualificationsUpdateParams, opts ...ClientOption) (*QualificationsUpdateOK, error)

	QueryElementFiltersUpdate(params *QueryElementFiltersUpdateParams, opts ...ClientOption) (*QueryElementFiltersUpdateOK, error)

	QueryElementGroupsUpdate(params *QueryElementGroupsUpdateParams, opts ...ClientOption) (*QueryElementGroupsUpdateOK, error)

	QueryElementsUpdate(params *QueryElementsUpdateParams, opts ...ClientOption) (*QueryElementsUpdateOK, error)

	RankTypesUpdate(params *RankTypesUpdateParams, opts ...ClientOption) (*RankTypesUpdateOK, error)

	RankingsUpdate(params *RankingsUpdateParams, opts ...ClientOption) (*RankingsUpdateOK, error)

	ReceiptSettingsUpdate(params *ReceiptSettingsUpdateParams, opts ...ClientOption) (*ReceiptSettingsUpdateOK, error)

	ReferenceTableUserGroupsUpdate(params *ReferenceTableUserGroupsUpdateParams, opts ...ClientOption) (*ReferenceTableUserGroupsUpdateOK, error)

	RelationshipCategoriesUpdate(params *RelationshipCategoriesUpdateParams, opts ...ClientOption) (*RelationshipCategoriesUpdateOK, error)

	ReportRequestsFlushIncomplete(params *ReportRequestsFlushIncompleteParams, opts ...ClientOption) (*ReportRequestsFlushIncompleteNoContent, error)

	ReportRequestsUpdate(params *ReportRequestsUpdateParams, opts ...ClientOption) (*ReportRequestsUpdateOK, error)

	ReportSchedulesUpdate(params *ReportSchedulesUpdateParams, opts ...ClientOption) (*ReportSchedulesUpdateOK, error)

	ReportUserGroupsUpdate(params *ReportUserGroupsUpdateParams, opts ...ClientOption) (*ReportUserGroupsUpdateOK, error)

	ResearchTypesUpdate(params *ResearchTypesUpdateParams, opts ...ClientOption) (*ResearchTypesUpdateOK, error)

	ResearchUpdate(params *ResearchUpdateParams, opts ...ClientOption) (*ResearchUpdateOK, error)

	ResourceCategoriesUpdate(params *ResourceCategoriesUpdateParams, opts ...ClientOption) (*ResourceCategoriesUpdateOK, error)

	ResourceSchedulesUpdate(params *ResourceSchedulesUpdateParams, opts ...ClientOption) (*ResourceSchedulesUpdateOK, error)

	ResourceTypesUpdate(params *ResourceTypesUpdateParams, opts ...ClientOption) (*ResourceTypesUpdateOK, error)

	ResourcesUpdate(params *ResourcesUpdateParams, opts ...ClientOption) (*ResourcesUpdateOK, error)

	SalesChannelsUpdate(params *SalesChannelsUpdateParams, opts ...ClientOption) (*SalesChannelsUpdateOK, error)

	SalesLayoutButtonTypesUpdate(params *SalesLayoutButtonTypesUpdateParams, opts ...ClientOption) (*SalesLayoutButtonTypesUpdateOK, error)

	SalesLayoutsUpdate(params *SalesLayoutsUpdateParams, opts ...ClientOption) (*SalesLayoutsUpdateOK, error)

	SalutationTypesUpdate(params *SalutationTypesUpdateParams, opts ...ClientOption) (*SalutationTypesUpdateOK, error)

	SalutationsUpdate(params *SalutationsUpdateParams, opts ...ClientOption) (*SalutationsUpdateOK, error)

	SchedulePatternTypesUpdate(params *SchedulePatternTypesUpdateParams, opts ...ClientOption) (*SchedulePatternTypesUpdateOK, error)

	ScheduleTypesUpdate(params *ScheduleTypesUpdateParams, opts ...ClientOption) (*ScheduleTypesUpdateOK, error)

	SeasonTypesUpdate(params *SeasonTypesUpdateParams, opts ...ClientOption) (*SeasonTypesUpdateOK, error)

	SeasonsUpdate(params *SeasonsUpdateParams, opts ...ClientOption) (*SeasonsUpdateOK, error)

	SeatCodesUpdate(params *SeatCodesUpdateParams, opts ...ClientOption) (*SeatCodesUpdateOK, error)

	SeatStatusesUpdate(params *SeatStatusesUpdateParams, opts ...ClientOption) (*SeatStatusesUpdateOK, error)

	SectionsUpdate(params *SectionsUpdateParams, opts ...ClientOption) (*SectionsUpdateOK, error)

	ServiceResourceUserGroupsUpdate(params *ServiceResourceUserGroupsUpdateParams, opts ...ClientOption) (*ServiceResourceUserGroupsUpdateOK, error)

	SessionSetConstituent(params *SessionSetConstituentParams, opts ...ClientOption) (*SessionSetConstituentOK, error)

	SessionSetExpiration(params *SessionSetExpirationParams, opts ...ClientOption) (*SessionSetExpirationOK, error)

	SessionUpdateVariable(params *SessionUpdateVariableParams, opts ...ClientOption) (*SessionUpdateVariableOK, error)

	SessionUpdateWebLogin(params *SessionUpdateWebLoginParams, opts ...ClientOption) (*SessionUpdateWebLoginOK, error)

	SourceGroupsUpdate(params *SourceGroupsUpdateParams, opts ...ClientOption) (*SourceGroupsUpdateOK, error)

	SpecialActivitiesUpdate(params *SpecialActivitiesUpdateParams, opts ...ClientOption) (*SpecialActivitiesUpdateOK, error)

	SpecialActivityStatusesUpdate(params *SpecialActivityStatusesUpdateParams, opts ...ClientOption) (*SpecialActivityStatusesUpdateOK, error)

	SpecialActivityTypesUpdate(params *SpecialActivityTypesUpdateParams, opts ...ClientOption) (*SpecialActivityTypesUpdateOK, error)

	StatesUpdate(params *StatesUpdateParams, opts ...ClientOption) (*StatesUpdateOK, error)

	StepTypesUpdate(params *StepTypesUpdateParams, opts ...ClientOption) (*StepTypesUpdateOK, error)

	StepsUpdate(params *StepsUpdateParams, opts ...ClientOption) (*StepsUpdateOK, error)

	StepsUpdateDocument(params *StepsUpdateDocumentParams, opts ...ClientOption) (*StepsUpdateDocumentOK, error)

	SubLineItemStatusesUpdate(params *SubLineItemStatusesUpdateParams, opts ...ClientOption) (*SubLineItemStatusesUpdateOK, error)

	SuffixesUpdate(params *SuffixesUpdateParams, opts ...ClientOption) (*SuffixesUpdateOK, error)

	SurveyQuestionsUpdate(params *SurveyQuestionsUpdateParams, opts ...ClientOption) (*SurveyQuestionsUpdateOK, error)

	SurveyResponsesUpdate(params *SurveyResponsesUpdateParams, opts ...ClientOption) (*SurveyResponsesUpdateOK, error)

	TemplateCategoriesUpdate(params *TemplateCategoriesUpdateParams, opts ...ClientOption) (*TemplateCategoriesUpdateOK, error)

	TemplatePriceTypesUpdate(params *TemplatePriceTypesUpdateParams, opts ...ClientOption) (*TemplatePriceTypesUpdateOK, error)

	TemplatePricesUpdate(params *TemplatePricesUpdateParams, opts ...ClientOption) (*TemplatePricesUpdateOK, error)

	TemplatesUpdate(params *TemplatesUpdateParams, opts ...ClientOption) (*TemplatesUpdateOK, error)

	TheatersUpdate(params *TheatersUpdateParams, opts ...ClientOption) (*TheatersUpdateOK, error)

	TimeSlotsUpdate(params *TimeSlotsUpdateParams, opts ...ClientOption) (*TimeSlotsUpdateOK, error)

	TriPOSCloudConfigurationsUpdate(params *TriPOSCloudConfigurationsUpdateParams, opts ...ClientOption) (*TriPOSCloudConfigurationsUpdateOK, error)

	UpgradeCategoriesUpdate(params *UpgradeCategoriesUpdateParams, opts ...ClientOption) (*UpgradeCategoriesUpdateOK, error)

	UpgradeLogsUpdate(params *UpgradeLogsUpdateParams, opts ...ClientOption) (*UpgradeLogsUpdateOK, error)

	UserPreferencesUpdate(params *UserPreferencesUpdateParams, opts ...ClientOption) (*UserPreferencesUpdateOK, error)

	WebContentTypesUpdate(params *WebContentTypesUpdateParams, opts ...ClientOption) (*WebContentTypesUpdateOK, error)

	WebLoginsUpdate(params *WebLoginsUpdateParams, opts ...ClientOption) (*WebLoginsUpdateOK, error)

	WorkerQualificationsUpdate(params *WorkerQualificationsUpdateParams, opts ...ClientOption) (*WorkerQualificationsUpdateOK, error)

	WorkerRolesUpdate(params *WorkerRolesUpdateParams, opts ...ClientOption) (*WorkerRolesUpdateOK, error)

	WorkerTypesUpdate(params *WorkerTypesUpdateParams, opts ...ClientOption) (*WorkerTypesUpdateOK, error)

	WorkersUpdate(params *WorkersUpdateParams, opts ...ClientOption) (*WorkersUpdateOK, error)

	ZoneGroupsUpdate(params *ZoneGroupsUpdateParams, opts ...ClientOption) (*ZoneGroupsUpdateOK, error)

	ZoneMapsUpdate(params *ZoneMapsUpdateParams, opts ...ClientOption) (*ZoneMapsUpdateOK, error)

	ZonesUpdate(params *ZonesUpdateParams, opts ...ClientOption) (*ZonesUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccountTypesUpdate updates an existing account type
*/
func (a *Client) AccountTypesUpdate(params *AccountTypesUpdateParams, opts ...ClientOption) (*AccountTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/AccountTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AccountsUpdateCardNumberAccount updates expiration date or name on a credit card account or token will also tokenize the credit card if tokenization is enabled payment method group Id is ignored if the account already has a payment method group Id assigned this value cannot be updated if tokenizing a non tokenized card payment method group Id is required if one has not already been assigned to the account
*/
func (a *Client) AccountsUpdateCardNumberAccount(params *AccountsUpdateCardNumberAccountParams, opts ...ClientOption) (*AccountsUpdateCardNumberAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsUpdateCardNumberAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_UpdateCardNumberAccount",
		Method:             "PUT",
		PathPattern:        "/CRM/Accounts/{accountId}/CardNumber",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsUpdateCardNumberAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsUpdateCardNumberAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountsUpdateCardNumberAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AccountsUpdateDirectDebitAccount updates expiration date or name on a direct debit account
*/
func (a *Client) AccountsUpdateDirectDebitAccount(params *AccountsUpdateDirectDebitAccountParams, opts ...ClientOption) (*AccountsUpdateDirectDebitAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsUpdateDirectDebitAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_UpdateDirectDebitAccount",
		Method:             "PUT",
		PathPattern:        "/CRM/Accounts/{accountId}/DirectDebit",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsUpdateDirectDebitAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsUpdateDirectDebitAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountsUpdateDirectDebitAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AccountsUpdateSepaAccount updates information on a s e p a direct debit account
*/
func (a *Client) AccountsUpdateSepaAccount(params *AccountsUpdateSepaAccountParams, opts ...ClientOption) (*AccountsUpdateSepaAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsUpdateSepaAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_UpdateSepaAccount",
		Method:             "PUT",
		PathPattern:        "/CRM/Accounts/{accountId}/SEPA",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsUpdateSepaAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsUpdateSepaAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountsUpdateSepaAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionTypesUpdate updates an existing action type
*/
func (a *Client) ActionTypesUpdate(params *ActionTypesUpdateParams, opts ...ClientOption) (*ActionTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ActionTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionsUpdate updates an issue action for a constituent
*/
func (a *Client) ActionsUpdate(params *ActionsUpdateParams, opts ...ClientOption) (*ActionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Actions_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Actions/{actionId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActivityCategoriesUpdate updates an existing activity category
*/
func (a *Client) ActivityCategoriesUpdate(params *ActivityCategoriesUpdateParams, opts ...ClientOption) (*ActivityCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ActivityCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActivityCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActivityTypesUpdate updates an existing activity type
*/
func (a *Client) ActivityTypesUpdate(params *ActivityTypesUpdateParams, opts ...ClientOption) (*ActivityTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ActivityTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActivityTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AddressTypesUpdate updates an existing address type
*/
func (a *Client) AddressTypesUpdate(params *AddressTypesUpdateParams, opts ...ClientOption) (*AddressTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddressTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/AddressTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddressTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AddressesUpdate updates an address for a constituent by sending an XML or JSON representation of an existing address object using HTTP p u t
*/
func (a *Client) AddressesUpdate(params *AddressesUpdateParams, opts ...ClientOption) (*AddressesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Addresses_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Addresses/{addressId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddressesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AffiliationTypesUpdate updates an existing affiliation type
*/
func (a *Client) AffiliationTypesUpdate(params *AffiliationTypesUpdateParams, opts ...ClientOption) (*AffiliationTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AffiliationTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/AffiliationTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AffiliationTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AffiliationsUpdate updates an affiliation
*/
func (a *Client) AffiliationsUpdate(params *AffiliationsUpdateParams, opts ...ClientOption) (*AffiliationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Affiliations_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Affiliations/{affiliationId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AffiliationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AliasTypesUpdate updates an existing alias type
*/
func (a *Client) AliasTypesUpdate(params *AliasTypesUpdateParams, opts ...ClientOption) (*AliasTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AliasTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/AliasTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AliasTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AliasesUpdate updates an alias
*/
func (a *Client) AliasesUpdate(params *AliasesUpdateParams, opts ...ClientOption) (*AliasesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Aliases_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Aliases/{aliasId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AliasesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AnalyticsReportsUpdate updates s s r s reports for display in analytics
*/
func (a *Client) AnalyticsReportsUpdate(params *AnalyticsReportsUpdateParams, opts ...ClientOption) (*AnalyticsReportsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyticsReportsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnalyticsReports_Update",
		Method:             "PUT",
		PathPattern:        "/Reporting/AnalyticsReports/{analyticsReportId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnalyticsReportsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyticsReportsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AnalyticsReportsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppScreenTextsCreateOrUpdate creates or update a new app screen text
*/
func (a *Client) AppScreenTextsCreateOrUpdate(params *AppScreenTextsCreateOrUpdateParams, opts ...ClientOption) (*AppScreenTextsCreateOrUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppScreenTextsCreateOrUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppScreenTexts_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/AppScreenTexts",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppScreenTextsCreateOrUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppScreenTextsCreateOrUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppScreenTextsCreateOrUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppealCategoriesUpdate updates an existing appeal category
*/
func (a *Client) AppealCategoriesUpdate(params *AppealCategoriesUpdateParams, opts ...ClientOption) (*AppealCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppealCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppealCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/AppealCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppealCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppealCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppealCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArtistsUpdate updates an existing artist
*/
func (a *Client) ArtistsUpdate(params *ArtistsUpdateParams, opts ...ClientOption) (*ArtistsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtistsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Artists_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/Artists/{artistId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArtistsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArtistsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArtistsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssetTypesUpdate updates an existing asset type
*/
func (a *Client) AssetTypesUpdate(params *AssetTypesUpdateParams, opts ...ClientOption) (*AssetTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/AssetTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssetsUpdate updates an existing asset for a constituent
*/
func (a *Client) AssetsUpdate(params *AssetsUpdateParams, opts ...ClientOption) (*AssetsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Assets_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Assets/{assetId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssociationTypesUpdate updates an existing association type
*/
func (a *Client) AssociationTypesUpdate(params *AssociationTypesUpdateParams, opts ...ClientOption) (*AssociationTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssociationTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/AssociationTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssociationTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssociationsUpdate updates a association
*/
func (a *Client) AssociationsUpdate(params *AssociationsUpdateParams, opts ...ClientOption) (*AssociationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Associations_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Associations/{associationId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssociationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AttributesUpdate updates an attribute
*/
func (a *Client) AttributesUpdate(params *AttributesUpdateParams, opts ...ClientOption) (*AttributesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttributesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Attributes_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Attributes/{attributeId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttributesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttributesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AttributesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthorizationExpirePayByLink ns o t e t h i s i s f o r t e s s i t u r a u s e o n l y custom implementations of this endpoint are not supported expire a payment link which has yet to be authorized or already expired for tessitura merchant services only
*/
func (a *Client) AuthorizationExpirePayByLink(params *AuthorizationExpirePayByLinkParams, opts ...ClientOption) (*AuthorizationExpirePayByLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizationExpirePayByLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authorization_ExpirePayByLink",
		Method:             "PUT",
		PathPattern:        "/PaymentGateway/Authorization/Link/{paymentId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthorizationExpirePayByLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizationExpirePayByLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthorizationExpirePayByLinkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BatchTypeGroupsUpdate updates an existing batch type group
*/
func (a *Client) BatchTypeGroupsUpdate(params *BatchTypeGroupsUpdateParams, opts ...ClientOption) (*BatchTypeGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypeGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypeGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/BatchTypeGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypeGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypeGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BatchTypeGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BatchTypesUpdate updates an existing batch type
*/
func (a *Client) BatchTypesUpdate(params *BatchTypesUpdateParams, opts ...ClientOption) (*BatchTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/BatchTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BatchTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BillingSchedulesUpdate updates an existing billing schedule
*/
func (a *Client) BillingSchedulesUpdate(params *BillingSchedulesUpdateParams, opts ...ClientOption) (*BillingSchedulesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSchedulesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingSchedules_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/BillingSchedules/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSchedulesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingSchedulesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BillingSchedulesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BillingTypesUpdate updates an existing billing type
*/
func (a *Client) BillingTypesUpdate(params *BillingTypesUpdateParams, opts ...ClientOption) (*BillingTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/BillingTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BillingTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BookingCategoriesUpdate updates an existing booking category
*/
func (a *Client) BookingCategoriesUpdate(params *BookingCategoriesUpdateParams, opts ...ClientOption) (*BookingCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/BookingCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BookingCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BookingTemplatesUpdate updates an existing booking template
*/
func (a *Client) BookingTemplatesUpdate(params *BookingTemplatesUpdateParams, opts ...ClientOption) (*BookingTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingTemplatesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingTemplates_Update",
		Method:             "PUT",
		PathPattern:        "/EventsManagement/BookingTemplates/{bookingTemplateId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingTemplatesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingTemplatesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BookingTemplatesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BookingsUpdate updates an existing booking
*/
func (a *Client) BookingsUpdate(params *BookingsUpdateParams, opts ...ClientOption) (*BookingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_Update",
		Method:             "PUT",
		PathPattern:        "/EventsManagement/Bookings/{bookingId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BookingsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BulkCopySetsUpdate updates an existing bulk copy set
*/
func (a *Client) BulkCopySetsUpdate(params *BulkCopySetsUpdateParams, opts ...ClientOption) (*BulkCopySetsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/BulkCopySets/{bulkCopySetId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BulkCopySetsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BulkDailyCopyExclusionsUpdate updates an existing bulk daily copy exclusion
*/
func (a *Client) BulkDailyCopyExclusionsUpdate(params *BulkDailyCopyExclusionsUpdateParams, opts ...ClientOption) (*BulkDailyCopyExclusionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDailyCopyExclusionsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDailyCopyExclusions_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/BulkDailyCopyExclusions/{bulkDailyCopyExclusionId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkDailyCopyExclusionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDailyCopyExclusionsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BulkDailyCopyExclusionsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BusinessUnitsUpdate updates an existing business unit
*/
func (a *Client) BusinessUnitsUpdate(params *BusinessUnitsUpdateParams, opts ...ClientOption) (*BusinessUnitsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusinessUnitsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BusinessUnits_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/BusinessUnits/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BusinessUnitsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BusinessUnitsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BusinessUnitsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CampaignDesignationsUpdate updates an association between a designation and a campaign
*/
func (a *Client) CampaignDesignationsUpdate(params *CampaignDesignationsUpdateParams, opts ...ClientOption) (*CampaignDesignationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignDesignationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignDesignations_Update",
		Method:             "PUT",
		PathPattern:        "/Finance/CampaignDesignations/{campaignDesignationId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignDesignationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignDesignationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CampaignDesignationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CampaignFundsUpdate updates a fund association to a campaign
*/
func (a *Client) CampaignFundsUpdate(params *CampaignFundsUpdateParams, opts ...ClientOption) (*CampaignFundsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignFundsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignFunds_Update",
		Method:             "PUT",
		PathPattern:        "/Finance/CampaignFunds/{campaignFundId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignFundsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignFundsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CampaignFundsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CardReaderTypesUpdate updates an existing card reader type
*/
func (a *Client) CardReaderTypesUpdate(params *CardReaderTypesUpdateParams, opts ...ClientOption) (*CardReaderTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardReaderTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CardReaderTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/CardReaderTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardReaderTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardReaderTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CardReaderTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartApplyLineItemDiscount applies a discounted price to all sub line items for a line item for packages the discount can only be applied to package line items the status field in the response will return as s if the discount can be used or e with a description of the error if the discount cannot be used
*/
func (a *Client) CartApplyLineItemDiscount(params *CartApplyLineItemDiscountParams, opts ...ClientOption) (*CartApplyLineItemDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartApplyLineItemDiscountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ApplyLineItemDiscount",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/Discount",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartApplyLineItemDiscountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartApplyLineItemDiscountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartApplyLineItemDiscountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartApplySubLineItemDiscount applies a discounted price to a sub line item the status field in the response will return as s if the discount can be used or e with a description of the error if the discount cannot be used
*/
func (a *Client) CartApplySubLineItemDiscount(params *CartApplySubLineItemDiscountParams, opts ...ClientOption) (*CartApplySubLineItemDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartApplySubLineItemDiscountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ApplySubLineItemDiscount",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/SubLineItems/{subLineItemId}/Discount",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartApplySubLineItemDiscountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartApplySubLineItemDiscountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartApplySubLineItemDiscountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateCartFlags updates flags on the cart
*/
func (a *Client) CartUpdateCartFlags(params *CartUpdateCartFlagsParams, opts ...ClientOption) (*CartUpdateCartFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateCartFlagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateCartFlags",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/CartFlags",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateCartFlagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateCartFlagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateCartFlagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateCartProperties updates cart properties see the notes on the request for specific documentation on each item that can be set br before making a request to p u t cart properties you should make a g e t request to obtain all current property values make updates to any of the properties that need changing and pass the entire cart properties object back into your put request this ensures that all property values that are set but should not change persist and are not overwritten unintentioanlly
*/
func (a *Client) CartUpdateCartProperties(params *CartUpdateCartPropertiesParams, opts ...ClientOption) (*CartUpdateCartPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateCartPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateCartProperties",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/Properties",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateCartPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateCartPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateCartPropertiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateCartPropertiesCustomData updates a custom data value in the cart properties note only the index and value properties in the request should be used
*/
func (a *Client) CartUpdateCartPropertiesCustomData(params *CartUpdateCartPropertiesCustomDataParams, opts ...ClientOption) (*CartUpdateCartPropertiesCustomDataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateCartPropertiesCustomDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateCartPropertiesCustomData",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/CustomData/{customId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateCartPropertiesCustomDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateCartPropertiesCustomDataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateCartPropertiesCustomDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateContributionCustomData updates a custom data value for a contribution in the cart note only the index and value properties in the request object should be used
*/
func (a *Client) CartUpdateContributionCustomData(params *CartUpdateContributionCustomDataParams, opts ...ClientOption) (*CartUpdateContributionCustomDataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateContributionCustomDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateContributionCustomData",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/Contributions/{lineItemId}/CustomData/{customId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateContributionCustomDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateContributionCustomDataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateContributionCustomDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateLineItemPrice updates the price on all sub line items for the line item a price can only be edited if the price type has been marked as editable zones on the price map have been designated as editable and the seat is in one of the editable zones the status field in the response will return as s if the price can be applied or e with a description of the error if the price cannot be applied
*/
func (a *Client) CartUpdateLineItemPrice(params *CartUpdateLineItemPriceParams, opts ...ClientOption) (*CartUpdateLineItemPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateLineItemPriceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateLineItemPrice",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/Price",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateLineItemPriceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateLineItemPriceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateLineItemPriceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateLineItemPriceType updates the price type on all sub line items for a given lineitem can be filtered by those have a current price type as specified by original price type
*/
func (a *Client) CartUpdateLineItemPriceType(params *CartUpdateLineItemPriceTypeParams, opts ...ClientOption) (*CartUpdateLineItemPriceTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateLineItemPriceTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateLineItemPriceType",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/PriceTypeId",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateLineItemPriceTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateLineItemPriceTypeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateLineItemPriceTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateLineItemSource updates the source on a line item allows the source of an individual line to be updated when a line is created by reserving a tickets for a performance or package the line source is copied from the session source this method allows the line source to be updated offers and pricing rules consider line source not the session source
*/
func (a *Client) CartUpdateLineItemSource(params *CartUpdateLineItemSourceParams, opts ...ClientOption) (*CartUpdateLineItemSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateLineItemSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateLineItemSource",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/Source",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateLineItemSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateLineItemSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateLineItemSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateLineItemSpecialRequest updates special request info on a line item
*/
func (a *Client) CartUpdateLineItemSpecialRequest(params *CartUpdateLineItemSpecialRequestParams, opts ...ClientOption) (*CartUpdateLineItemSpecialRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateLineItemSpecialRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateLineItemSpecialRequest",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/SpecialRequest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateLineItemSpecialRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateLineItemSpecialRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateLineItemSpecialRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdatePaymentPlan allows the billing and credit card information to be updated on an existing payment plan for the cart
*/
func (a *Client) CartUpdatePaymentPlan(params *CartUpdatePaymentPlanParams, opts ...ClientOption) (*CartUpdatePaymentPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdatePaymentPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdatePaymentPlan",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Plan",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdatePaymentPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdatePaymentPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdatePaymentPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateSubLineItemPrice updates the price on a sub line item a price can only be edited if the price type has been marked as editable zones on the price map have been designated as editable and the seat is in one of the editable zones the status field in the response will return as s if the price can be applied or e with a description of the error if the price cannot be applied
*/
func (a *Client) CartUpdateSubLineItemPrice(params *CartUpdateSubLineItemPriceParams, opts ...ClientOption) (*CartUpdateSubLineItemPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateSubLineItemPriceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateSubLineItemPrice",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/SubLineItems/{subLineItemId}/Price",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateSubLineItemPriceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateSubLineItemPriceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateSubLineItemPriceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateSubLineItemPriceType updates the price type on a sub line item
*/
func (a *Client) CartUpdateSubLineItemPriceType(params *CartUpdateSubLineItemPriceTypeParams, opts ...ClientOption) (*CartUpdateSubLineItemPriceTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateSubLineItemPriceTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateSubLineItemPriceType",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/SubLineItems/{subLineItemId}/PriceTypeId",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateSubLineItemPriceTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateSubLineItemPriceTypeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateSubLineItemPriceTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CartUpdateSubLineItemRecipient updates the recipient on a sub line item
*/
func (a *Client) CartUpdateSubLineItemRecipient(params *CartUpdateSubLineItemRecipientParams, opts ...ClientOption) (*CartUpdateSubLineItemRecipientNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUpdateSubLineItemRecipientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UpdateSubLineItemRecipient",
		Method:             "PUT",
		PathPattern:        "/Web/Cart/{sessionKey}/SubLineItems/{subLineItemId}/Recipient",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUpdateSubLineItemRecipientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUpdateSubLineItemRecipientNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CartUpdateSubLineItemRecipientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ColorsUpdate updates an existing color
*/
func (a *Client) ColorsUpdate(params *ColorsUpdateParams, opts ...ClientOption) (*ColorsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColorsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Colors_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Colors/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ColorsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColorsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ColorsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ComposersUpdate updates an existing composer
*/
func (a *Client) ComposersUpdate(params *ComposersUpdateParams, opts ...ClientOption) (*ComposersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComposersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Composers_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Composers/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ComposersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComposersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ComposersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituenciesUpdate updates a constituency
*/
func (a *Client) ConstituenciesUpdate(params *ConstituenciesUpdateParams, opts ...ClientOption) (*ConstituenciesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituenciesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituencies_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Constituencies/{constituencyId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituenciesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituenciesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituenciesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituencyTypesUpdate updates an existing constituency type
*/
func (a *Client) ConstituencyTypesUpdate(params *ConstituencyTypesUpdateParams, opts ...ClientOption) (*ConstituencyTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituencyTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituencyTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ConstituencyTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituencyTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituencyTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituencyTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentDocumentsUpdate updates an existing document for a constituent
*/
func (a *Client) ConstituentDocumentsUpdate(params *ConstituentDocumentsUpdateParams, opts ...ClientOption) (*ConstituentDocumentsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentDocumentsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentDocuments_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Documents/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentDocumentsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentDocumentsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentDocumentsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentGroupsUpdate updates an existing constituent group
*/
func (a *Client) ConstituentGroupsUpdate(params *ConstituentGroupsUpdateParams, opts ...ClientOption) (*ConstituentGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ConstituentGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentInactivesUpdate updates an existing constituent inactive
*/
func (a *Client) ConstituentInactivesUpdate(params *ConstituentInactivesUpdateParams, opts ...ClientOption) (*ConstituentInactivesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentInactivesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentInactives_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ConstituentInactives/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentInactivesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentInactivesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentInactivesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentProtectionTypesUpdate updates an existing constituent protection type
*/
func (a *Client) ConstituentProtectionTypesUpdate(params *ConstituentProtectionTypesUpdateParams, opts ...ClientOption) (*ConstituentProtectionTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentProtectionTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentProtectionTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ConstituentProtectionTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentProtectionTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentProtectionTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentProtectionTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentTypeAffiliatesUpdate updates an existing constituent type affiliate
*/
func (a *Client) ConstituentTypeAffiliatesUpdate(params *ConstituentTypeAffiliatesUpdateParams, opts ...ClientOption) (*ConstituentTypeAffiliatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypeAffiliatesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypeAffiliates_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ConstituentTypeAffiliates/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypeAffiliatesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypeAffiliatesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentTypeAffiliatesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentTypesUpdate updates an existing constituent type
*/
func (a *Client) ConstituentTypesUpdate(params *ConstituentTypesUpdateParams, opts ...ClientOption) (*ConstituentTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ConstituentTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstituentsUpdate updates a constituent only the information about constituent can be updated if addresses electronic addresses salutations or phones data are passed they will be ignored
*/
func (a *Client) ConstituentsUpdate(params *ConstituentsUpdateParams, opts ...ClientOption) (*ConstituentsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituents_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Constituents/{constituentId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstituentsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPermissionCategoriesUpdate updates an existing contact permission category
*/
func (a *Client) ContactPermissionCategoriesUpdate(params *ContactPermissionCategoriesUpdateParams, opts ...ClientOption) (*ContactPermissionCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ContactPermissionCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPermissionCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPermissionTypesUpdate updates an existing contact permission type
*/
func (a *Client) ContactPermissionTypesUpdate(params *ContactPermissionTypesUpdateParams, opts ...ClientOption) (*ContactPermissionTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ContactPermissionTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPermissionTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPermissionsUpdate updates a contact permission
*/
func (a *Client) ContactPermissionsUpdate(params *ContactPermissionsUpdateParams, opts ...ClientOption) (*ContactPermissionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissions_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/ContactPermissions/{contactPermissionId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPermissionsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointCategoriesUpdate updates an existing contact point category
*/
func (a *Client) ContactPointCategoriesUpdate(params *ContactPointCategoriesUpdateParams, opts ...ClientOption) (*ContactPointCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ContactPointCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointCategoryPurposesUpdate updates an existing contact point category purpose
*/
func (a *Client) ContactPointCategoryPurposesUpdate(params *ContactPointCategoryPurposesUpdateParams, opts ...ClientOption) (*ContactPointCategoryPurposesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoryPurposesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategoryPurposes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ContactPointCategoryPurposes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoryPurposesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoryPurposesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointCategoryPurposesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointPurposeCategoriesUpdate updates an existing contact point purpose category
*/
func (a *Client) ContactPointPurposeCategoriesUpdate(params *ContactPointPurposeCategoriesUpdateParams, opts ...ClientOption) (*ContactPointPurposeCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ContactPointPurposeCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointPurposeCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointPurposeMapsUpdate updates a contact point purpose
*/
func (a *Client) ContactPointPurposeMapsUpdate(params *ContactPointPurposeMapsUpdateParams, opts ...ClientOption) (*ContactPointPurposeMapsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeMapsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeMaps_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/ContactPointPurposeMaps/{contactPointPurposeMapId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeMapsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeMapsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointPurposeMapsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactPointPurposesUpdate updates an existing contact point purpose
*/
func (a *Client) ContactPointPurposesUpdate(params *ContactPointPurposesUpdateParams, opts ...ClientOption) (*ContactPointPurposesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ContactPointPurposes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactPointPurposesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContactTypesUpdate updates an existing contact type
*/
func (a *Client) ContactTypesUpdate(params *ContactTypesUpdateParams, opts ...ClientOption) (*ContactTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ContactTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContactTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContributionDesignationsUpdate updates an existing contribution designation
*/
func (a *Client) ContributionDesignationsUpdate(params *ContributionDesignationsUpdateParams, opts ...ClientOption) (*ContributionDesignationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionDesignationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionDesignations_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ContributionDesignations/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionDesignationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionDesignationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContributionDesignationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContributionImportSetsUpdate updates an existing contribution import set
*/
func (a *Client) ContributionImportSetsUpdate(params *ContributionImportSetsUpdateParams, opts ...ClientOption) (*ContributionImportSetsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionImportSetsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionImportSets_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ContributionImportSets/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionImportSetsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionImportSetsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContributionImportSetsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ContributionsUpdate this resource is currently strictly for interceptor plugin use this is called any time an existing contribution is updated from contribution editor in the client application only Id ref no is provided in the request content
*/
func (a *Client) ContributionsUpdate(params *ContributionsUpdateParams, opts ...ClientOption) (*ContributionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Contributions_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/Contributions/{contributionId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContributionsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ControlGroupUserGroupsUpdate updates an existing control group user group mapping
*/
func (a *Client) ControlGroupUserGroupsUpdate(params *ControlGroupUserGroupsUpdateParams, opts ...ClientOption) (*ControlGroupUserGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupUserGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroupUserGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ControlGroupUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupUserGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupUserGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ControlGroupUserGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ControlGroupsUpdate updates an existing control group
*/
func (a *Client) ControlGroupsUpdate(params *ControlGroupsUpdateParams, opts ...ClientOption) (*ControlGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ControlGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ControlGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CountriesUpdate updates an existing country
*/
func (a *Client) CountriesUpdate(params *CountriesUpdateParams, opts ...ClientOption) (*CountriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCountriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Countries_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Countries/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CountriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CountriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CountriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CrediteeTypesUpdate updates an existing creditee type
*/
func (a *Client) CrediteeTypesUpdate(params *CrediteeTypesUpdateParams, opts ...ClientOption) (*CrediteeTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrediteeTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CrediteeTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/CrediteeTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrediteeTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrediteeTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CrediteeTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CurrencyTypesUpdate updates an existing currency type
*/
func (a *Client) CurrencyTypesUpdate(params *CurrencyTypesUpdateParams, opts ...ClientOption) (*CurrencyTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCurrencyTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CurrencyTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/CurrencyTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CurrencyTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CurrencyTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CurrencyTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomDefaultCategoriesUpdate updates an existing custom default category
*/
func (a *Client) CustomDefaultCategoriesUpdate(params *CustomDefaultCategoriesUpdateParams, opts ...ClientOption) (*CustomDefaultCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaultCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/CustomDefaultCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomDefaultCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomDefaultsUpdate updates an existing custom default
*/
func (a *Client) CustomDefaultsUpdate(params *CustomDefaultsUpdateParams, opts ...ClientOption) (*CustomDefaultsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaults_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/CustomDefaults/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomDefaultsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeliveryMethodsUpdate updates an existing delivery method
*/
func (a *Client) DeliveryMethodsUpdate(params *DeliveryMethodsUpdateParams, opts ...ClientOption) (*DeliveryMethodsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliveryMethodsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeliveryMethods_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/DeliveryMethods/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeliveryMethodsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeliveryMethodsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeliveryMethodsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DesignationCodesUpdate updates an existing designation code
*/
func (a *Client) DesignationCodesUpdate(params *DesignationCodesUpdateParams, opts ...ClientOption) (*DesignationCodesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDesignationCodesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DesignationCodes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/DesignationCodes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DesignationCodesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DesignationCodesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DesignationCodesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DiagnosticsPut dummies end point to check availability of HTTP p u t
*/
func (a *Client) DiagnosticsPut(params *DiagnosticsPutParams, opts ...ClientOption) (*DiagnosticsPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiagnosticsPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Diagnostics_Put",
		Method:             "PUT",
		PathPattern:        "/Diagnostics/{diagnosticId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiagnosticsPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiagnosticsPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiagnosticsPutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DirectDebitAccountTypesUpdate updates an existing direct debit account type
*/
func (a *Client) DirectDebitAccountTypesUpdate(params *DirectDebitAccountTypesUpdateParams, opts ...ClientOption) (*DirectDebitAccountTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDirectDebitAccountTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DirectDebitAccountTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/DirectDebitAccountTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DirectDebitAccountTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DirectDebitAccountTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DirectDebitAccountTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DiscountTypesUpdate updates an existing discount type
*/
func (a *Client) DiscountTypesUpdate(params *DiscountTypesUpdateParams, opts ...ClientOption) (*DiscountTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/DiscountTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiscountTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiscountTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DocumentCategoriesUpdate updates an existing document category
*/
func (a *Client) DocumentCategoriesUpdate(params *DocumentCategoriesUpdateParams, opts ...ClientOption) (*DocumentCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DocumentCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/DocumentCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DocumentCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DonationLevelsUpdate updates an existing donation level
*/
func (a *Client) DonationLevelsUpdate(params *DonationLevelsUpdateParams, opts ...ClientOption) (*DonationLevelsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDonationLevelsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DonationLevels_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/DonationLevels/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DonationLevelsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DonationLevelsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DonationLevelsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EMVSetIdleMessage sets idle message for a specific lane
*/
func (a *Client) EMVSetIdleMessage(params *EMVSetIdleMessageParams, opts ...ClientOption) (*EMVSetIdleMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVSetIdleMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_SetIdleMessage",
		Method:             "PUT",
		PathPattern:        "/PaymentGateway/EMV/TriPosLanes/{laneId}/Profiles/Idle",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVSetIdleMessageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVSetIdleMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EMVSetIdleMessageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ElectronicAddressTypesUpdate updates an existing electronic address type
*/
func (a *Client) ElectronicAddressTypesUpdate(params *ElectronicAddressTypesUpdateParams, opts ...ClientOption) (*ElectronicAddressTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddressTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ElectronicAddressTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ElectronicAddressTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ElectronicAddressesUpdate updates an electronic address
*/
func (a *Client) ElectronicAddressesUpdate(params *ElectronicAddressesUpdateParams, opts ...ClientOption) (*ElectronicAddressesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddresses_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/ElectronicAddresses/{electronicAddressId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ElectronicAddressesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailProfilesUpdate updates an existing email profile
*/
func (a *Client) EmailProfilesUpdate(params *EmailProfilesUpdateParams, opts ...ClientOption) (*EmailProfilesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailProfilesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmailProfiles_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/EmailProfiles/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailProfilesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailProfilesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailProfilesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmarketIndicatorsUpdate updates an existing emarket indicator
*/
func (a *Client) EmarketIndicatorsUpdate(params *EmarketIndicatorsUpdateParams, opts ...ClientOption) (*EmarketIndicatorsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmarketIndicatorsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmarketIndicators_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/EmarketIndicators/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmarketIndicatorsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmarketIndicatorsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmarketIndicatorsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ErasUpdate updates an existing era
*/
func (a *Client) ErasUpdate(params *ErasUpdateParams, opts ...ClientOption) (*ErasUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErasUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Eras_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Eras/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErasUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ErasUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ErasUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FacilitiesUpdate updates a facility
*/
func (a *Client) FacilitiesUpdate(params *FacilitiesUpdateParams, opts ...ClientOption) (*FacilitiesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFacilitiesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Facilities_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/Facilities/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FacilitiesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FacilitiesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FacilitiesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GendersUpdate updates an existing gender
*/
func (a *Client) GendersUpdate(params *GendersUpdateParams, opts ...ClientOption) (*GendersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGendersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Genders_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Genders/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GendersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GendersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GendersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidContactMethodsUpdate updates an existing gift aid contact method
*/
func (a *Client) GiftAidContactMethodsUpdate(params *GiftAidContactMethodsUpdateParams, opts ...ClientOption) (*GiftAidContactMethodsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidContactMethodsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidContactMethods_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/GiftAidContactMethods/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidContactMethodsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidContactMethodsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidContactMethodsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidDeclarationsUpdate updates a gift aid declaration
*/
func (a *Client) GiftAidDeclarationsUpdate(params *GiftAidDeclarationsUpdateParams, opts ...ClientOption) (*GiftAidDeclarationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDeclarationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDeclarations_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/GiftAidDeclarations/{giftAidDeclarationId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDeclarationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDeclarationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidDeclarationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidDocumentStatusesUpdate updates an existing gift aid document status
*/
func (a *Client) GiftAidDocumentStatusesUpdate(params *GiftAidDocumentStatusesUpdateParams, opts ...ClientOption) (*GiftAidDocumentStatusesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDocumentStatusesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDocumentStatuses_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/GiftAidDocumentStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDocumentStatusesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDocumentStatusesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidDocumentStatusesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidIneligibleReasonsUpdate updates an existing gift aid ineligible reason
*/
func (a *Client) GiftAidIneligibleReasonsUpdate(params *GiftAidIneligibleReasonsUpdateParams, opts ...ClientOption) (*GiftAidIneligibleReasonsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidIneligibleReasonsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidIneligibleReasons_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/GiftAidIneligibleReasons/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidIneligibleReasonsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidIneligibleReasonsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidIneligibleReasonsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidRatesUpdate updates an existing gift aid rate
*/
func (a *Client) GiftAidRatesUpdate(params *GiftAidRatesUpdateParams, opts ...ClientOption) (*GiftAidRatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidRatesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidRates_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/GiftAidRates/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidRatesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidRatesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidRatesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidStatusesUpdate updates an existing gift aid status
*/
func (a *Client) GiftAidStatusesUpdate(params *GiftAidStatusesUpdateParams, opts ...ClientOption) (*GiftAidStatusesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidStatusesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidStatuses_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/GiftAidStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidStatusesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidStatusesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidStatusesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GiftAidTypesUpdate updates an existing gift aid type
*/
func (a *Client) GiftAidTypesUpdate(params *GiftAidTypesUpdateParams, opts ...ClientOption) (*GiftAidTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/GiftAidTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GiftAidTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HoldCodeCategoriesUpdate updates an existing hold code category
*/
func (a *Client) HoldCodeCategoriesUpdate(params *HoldCodeCategoriesUpdateParams, opts ...ClientOption) (*HoldCodeCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/HoldCodeCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HoldCodeCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HoldCodeUserGroupsUpdate updates an existing hold code user group mapping
*/
func (a *Client) HoldCodeUserGroupsUpdate(params *HoldCodeUserGroupsUpdateParams, opts ...ClientOption) (*HoldCodeUserGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeUserGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeUserGroups_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/HoldCodeUserGroups/{holdCodeUserGroupId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeUserGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeUserGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HoldCodeUserGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HoldCodesUpdate updates an existing hold code
*/
func (a *Client) HoldCodesUpdate(params *HoldCodesUpdateParams, opts ...ClientOption) (*HoldCodesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodes_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/HoldCodes/{holdCodeId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HoldCodesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InactiveReasonsUpdate updates an existing inactive reason
*/
func (a *Client) InactiveReasonsUpdate(params *InactiveReasonsUpdateParams, opts ...ClientOption) (*InactiveReasonsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInactiveReasonsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InactiveReasons_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/InactiveReasons/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InactiveReasonsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InactiveReasonsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InactiveReasonsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IntegrationDefaultsUpdate updates an existing integration default
*/
func (a *Client) IntegrationDefaultsUpdate(params *IntegrationDefaultsUpdateParams, opts ...ClientOption) (*IntegrationDefaultsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationDefaultsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationDefaults_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/IntegrationDefaults/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationDefaultsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationDefaultsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationDefaultsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IntegrationsUpdate updates an existing action type
*/
func (a *Client) IntegrationsUpdate(params *IntegrationsUpdateParams, opts ...ClientOption) (*IntegrationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Integrations_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Integrations/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InterestCategoriesUpdate updates an existing interest category
*/
func (a *Client) InterestCategoriesUpdate(params *InterestCategoriesUpdateParams, opts ...ClientOption) (*InterestCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/InterestCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InterestCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InterestTypesUpdate updates an existing interest type
*/
func (a *Client) InterestTypesUpdate(params *InterestTypesUpdateParams, opts ...ClientOption) (*InterestTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/InterestTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InterestTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InterestsUpdate updates an interest if the interest is not selected and the weight is 0 or null it will be deleted for bulk interest edits consider the c r m interests create or update batching resource which allows multiple interests to be created updated or removed in a single request
*/
func (a *Client) InterestsUpdate(params *InterestsUpdateParams, opts ...ClientOption) (*InterestsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Interests_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Interests/{interestId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InterestsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InternalUpdate updates an address and phones if the entire information about a phone is added newly then create a new phone if the phone number of a phone is not given then delete that phone
*/
func (a *Client) InternalUpdate(params *InternalUpdateParams, opts ...ClientOption) (*InternalUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Internal_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Internal/AddressDetails/{addressId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InternalUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InternalUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InternalUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InventoryContactPermissionTypesUpdate updateds an existing inventory contact permission type
*/
func (a *Client) InventoryContactPermissionTypesUpdate(params *InventoryContactPermissionTypesUpdateParams, opts ...ClientOption) (*InventoryContactPermissionTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryContactPermissionTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryContactPermissionTypes_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/InventoryContactPermissionTypes/{inventoryContactPermissionTypeId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryContactPermissionTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryContactPermissionTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InventoryContactPermissionTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InventoryWebContentsUpdate updates an existing inventory web content
*/
func (a *Client) InventoryWebContentsUpdate(params *InventoryWebContentsUpdateParams, opts ...ClientOption) (*InventoryWebContentsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryWebContentsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryWebContents_Update",
		Method:             "PUT",
		PathPattern:        "/Txn/InventoryWebContents/{inventoryWebContentId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryWebContentsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryWebContentsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InventoryWebContentsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IssuesUpdate updates an issue for a constituent
*/
func (a *Client) IssuesUpdate(params *IssuesUpdateParams, opts ...ClientOption) (*IssuesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssuesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Issues_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Issues/{issueId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IssuesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssuesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IssuesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KeywordCategoriesUpdate updates an existing keyword category
*/
func (a *Client) KeywordCategoriesUpdate(params *KeywordCategoriesUpdateParams, opts ...ClientOption) (*KeywordCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KeywordCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/KeywordCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KeywordCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KeywordsUpdate updates an existing keyword
*/
func (a *Client) KeywordsUpdate(params *KeywordsUpdateParams, opts ...ClientOption) (*KeywordsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Keywords_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Keywords/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KeywordsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LanguagesUpdate updates an existing language
*/
func (a *Client) LanguagesUpdate(params *LanguagesUpdateParams, opts ...ClientOption) (*LanguagesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLanguagesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Languages_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Languages/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LanguagesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LanguagesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LanguagesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListCategoriesUpdate updates an existing list category
*/
func (a *Client) ListCategoriesUpdate(params *ListCategoriesUpdateParams, opts ...ClientOption) (*ListCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ListCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListsUpdate updates an existing list
*/
func (a *Client) ListsUpdate(params *ListsUpdateParams, opts ...ClientOption) (*ListsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_Update",
		Method:             "PUT",
		PathPattern:        "/Reporting/Lists/{listId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListsUpdateContents imports constituent ids into an existing list
*/
func (a *Client) ListsUpdateContents(params *ListsUpdateContentsParams, opts ...ClientOption) (*ListsUpdateContentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsUpdateContentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_UpdateContents",
		Method:             "PUT",
		PathPattern:        "/Reporting/Lists/{listId}/Contents",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsUpdateContentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsUpdateContentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListsUpdateContentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LoginTypesUpdate updates an existing login type
*/
func (a *Client) LoginTypesUpdate(params *LoginTypesUpdateParams, opts ...ClientOption) (*LoginTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/LoginTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MachineSettingsUpdate updates an existing machine setting
*/
func (a *Client) MachineSettingsUpdate(params *MachineSettingsUpdateParams, opts ...ClientOption) (*MachineSettingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineSettingsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MachineSettings_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/MachineSettings/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineSettingsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineSettingsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MachineSettingsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MailIndicatorsUpdate updates an existing mail indicator
*/
func (a *Client) MailIndicatorsUpdate(params *MailIndicatorsUpdateParams, opts ...ClientOption) (*MailIndicatorsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailIndicatorsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MailIndicators_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/MailIndicators/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailIndicatorsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailIndicatorsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MailIndicatorsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MediaTypesUpdate updates an existing media type
*/
func (a *Client) MediaTypesUpdate(params *MediaTypesUpdateParams, opts ...ClientOption) (*MediaTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/MediaTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MediaTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MembershipLevelCategoriesUpdate updates an existing membership level category
*/
func (a *Client) MembershipLevelCategoriesUpdate(params *MembershipLevelCategoriesUpdateParams, opts ...ClientOption) (*MembershipLevelCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipLevelCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipLevelCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/MembershipLevelCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipLevelCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipLevelCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MembershipLevelCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSaleCategoriesUpdate updates an existing mode of sale category
*/
func (a *Client) ModeOfSaleCategoriesUpdate(params *ModeOfSaleCategoriesUpdateParams, opts ...ClientOption) (*ModeOfSaleCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleCategories_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/ModeOfSaleCategories/{modeOfSaleCategoryId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSaleCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSaleOffersUpdate updates an existing mode of sale offer
*/
func (a *Client) ModeOfSaleOffersUpdate(params *ModeOfSaleOffersUpdateParams, opts ...ClientOption) (*ModeOfSaleOffersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleOffersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleOffers_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/ModeOfSaleOffers/{modeOfSaleOfferId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleOffersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleOffersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSaleOffersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSalePriceTypesUpdate updates an existing mode of sale price type
*/
func (a *Client) ModeOfSalePriceTypesUpdate(params *ModeOfSalePriceTypesUpdateParams, opts ...ClientOption) (*ModeOfSalePriceTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSalePriceTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSalePriceTypes_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/ModeOfSalePriceTypes/{modeOfSalePriceTypeId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSalePriceTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSalePriceTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSalePriceTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSaleSurveyQuestionsUpdate updates an existing mode of sale survey question
*/
func (a *Client) ModeOfSaleSurveyQuestionsUpdate(params *ModeOfSaleSurveyQuestionsUpdateParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleSurveyQuestionsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleSurveyQuestions_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/ModeOfSaleSurveyQuestions/{modeOfSaleSurveyQuestionId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleSurveyQuestionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleSurveyQuestionsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSaleSurveyQuestionsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModeOfSaleUserGroupsUpdate updates an existing mode of sale user group mapping
*/
func (a *Client) ModeOfSaleUserGroupsUpdate(params *ModeOfSaleUserGroupsUpdateParams, opts ...ClientOption) (*ModeOfSaleUserGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleUserGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleUserGroups_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/ModeOfSaleUserGroups/{modeOfSaleUserGroupId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleUserGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleUserGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModeOfSaleUserGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModesOfSaleUpdate updates an existing mode of sale
*/
func (a *Client) ModesOfSaleUpdate(params *ModesOfSaleUpdateParams, opts ...ClientOption) (*ModesOfSaleUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModesOfSaleUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModesOfSale_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/ModesOfSale/{modeOfSaleId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModesOfSaleUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModesOfSaleUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModesOfSaleUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NScanAccessAreasUpdate updates an existing n scan access area
*/
func (a *Client) NScanAccessAreasUpdate(params *NScanAccessAreasUpdateParams, opts ...ClientOption) (*NScanAccessAreasUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNScanAccessAreasUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NScanAccessAreas_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/NScanAccessAreas/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NScanAccessAreasUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NScanAccessAreasUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NScanAccessAreasUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NameStatusesUpdate updates an existing name status
*/
func (a *Client) NameStatusesUpdate(params *NameStatusesUpdateParams, opts ...ClientOption) (*NameStatusesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNameStatusesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NameStatuses_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/NameStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NameStatusesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NameStatusesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NameStatusesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ObjectPermissionsUpdate updates an existing object permission
*/
func (a *Client) ObjectPermissionsUpdate(params *ObjectPermissionsUpdateParams, opts ...ClientOption) (*ObjectPermissionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectPermissionsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ObjectPermissions_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ObjectPermissions/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObjectPermissionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectPermissionsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ObjectPermissionsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrderCategoriesUpdate updates an existing order category
*/
func (a *Client) OrderCategoriesUpdate(params *OrderCategoriesUpdateParams, opts ...ClientOption) (*OrderCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrderCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/OrderCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrderCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrdersUpdate this resource is currently strictly for interceptor plugin use this is called any time an order is saved via the API or from the client application only order Id is provided in the request content this resource will be invoked from a cart checkout
*/
func (a *Client) OrdersUpdate(params *OrdersUpdateParams, opts ...ClientOption) (*OrdersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Orders_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/Orders/{orderId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrdersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrganizationsUpdate updates an existing organization
*/
func (a *Client) OrganizationsUpdate(params *OrganizationsUpdateParams, opts ...ClientOption) (*OrganizationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Organizations_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Organizations/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OriginalSourcesUpdate updates an existing original source
*/
func (a *Client) OriginalSourcesUpdate(params *OriginalSourcesUpdateParams, opts ...ClientOption) (*OriginalSourcesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginalSourcesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OriginalSources_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/OriginalSources/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginalSourcesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginalSourcesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OriginalSourcesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OriginsUpdate updates an existing origin
*/
func (a *Client) OriginsUpdate(params *OriginsUpdateParams, opts ...ClientOption) (*OriginsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Origins_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Origins/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OriginsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OutputSetsUpdate updates an existing output set
*/
func (a *Client) OutputSetsUpdate(params *OutputSetsUpdateParams, opts ...ClientOption) (*OutputSetsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutputSetsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OutputSets_Update",
		Method:             "PUT",
		PathPattern:        "/Reporting/OutputSets/{outputSetId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OutputSetsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutputSetsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OutputSetsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PackagePriceTypesUpdate updates an existing package price type
*/
func (a *Client) PackagePriceTypesUpdate(params *PackagePriceTypesUpdateParams, opts ...ClientOption) (*PackagePriceTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagePriceTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackagePriceTypes_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PackagePriceTypes/{packagePriceTypeId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagePriceTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagePriceTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PackagePriceTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PackageTypesUpdate updates an existing package type
*/
func (a *Client) PackageTypesUpdate(params *PackageTypesUpdateParams, opts ...ClientOption) (*PackageTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PackageTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PackageTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PackageWebContentsUpdate updates an existing package web content
*/
func (a *Client) PackageWebContentsUpdate(params *PackageWebContentsUpdateParams, opts ...ClientOption) (*PackageWebContentsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageWebContentsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageWebContents_Update",
		Method:             "PUT",
		PathPattern:        "/Txn/PackageWebContents/{packageWebContentId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageWebContentsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageWebContentsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PackageWebContentsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGatewayActivitiesUpdate updates an existing payment gateway activity
*/
func (a *Client) PaymentGatewayActivitiesUpdate(params *PaymentGatewayActivitiesUpdateParams, opts ...ClientOption) (*PaymentGatewayActivitiesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayActivitiesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayActivities_Update",
		Method:             "PUT",
		PathPattern:        "/PaymentGateway/PaymentGatewayActivities/{paymentGatewayActivityId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayActivitiesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayActivitiesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGatewayActivitiesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGatewayNotificationsUpdate updates a notification event
*/
func (a *Client) PaymentGatewayNotificationsUpdate(params *PaymentGatewayNotificationsUpdateParams, opts ...ClientOption) (*PaymentGatewayNotificationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayNotificationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayNotifications_Update",
		Method:             "PUT",
		PathPattern:        "/PaymentGateway/Notifications/Events/{notificationEventId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayNotificationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayNotificationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGatewayNotificationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGatewayTransactionTypesUpdate updates an existing payment gateway transaction type
*/
func (a *Client) PaymentGatewayTransactionTypesUpdate(params *PaymentGatewayTransactionTypesUpdateParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayTransactionTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayTransactionTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PaymentGatewayTransactionTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayTransactionTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayTransactionTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGatewayTransactionTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentMethodGroupsUpdate updates an existing payment method group
*/
func (a *Client) PaymentMethodGroupsUpdate(params *PaymentMethodGroupsUpdateParams, opts ...ClientOption) (*PaymentMethodGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PaymentMethodGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentMethodGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentMethodUserGroupsUpdate updates an existing payment method user group mapping
*/
func (a *Client) PaymentMethodUserGroupsUpdate(params *PaymentMethodUserGroupsUpdateParams, opts ...ClientOption) (*PaymentMethodUserGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodUserGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodUserGroups_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PaymentMethodUserGroups/{paymentMethodUserGroupId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodUserGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodUserGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentMethodUserGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentMethodsUpdate updates an existing payment method
*/
func (a *Client) PaymentMethodsUpdate(params *PaymentMethodsUpdateParams, opts ...ClientOption) (*PaymentMethodsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethods_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PaymentMethods/{paymentMethodId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentMethodsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentSignaturesUpdate updates an existing payment signature
*/
func (a *Client) PaymentSignaturesUpdate(params *PaymentSignaturesUpdateParams, opts ...ClientOption) (*PaymentSignaturesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentSignaturesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentSignatures_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/Payment/Signatures/{paymentSignatureId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentSignaturesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentSignaturesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentSignaturesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentTypesUpdate updates an existing payment type
*/
func (a *Client) PaymentTypesUpdate(params *PaymentTypesUpdateParams, opts ...ClientOption) (*PaymentTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PaymentTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformanceGroupsUpdate updates a performance group
*/
func (a *Client) PerformanceGroupsUpdate(params *PerformanceGroupsUpdateParams, opts ...ClientOption) (*PerformanceGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceGroups_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PerformanceGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformanceGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePackageModeOfSalesUpdate updates an existing performance package mode of sale
*/
func (a *Client) PerformancePackageModeOfSalesUpdate(params *PerformancePackageModeOfSalesUpdateParams, opts ...ClientOption) (*PerformancePackageModeOfSalesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePackageModeOfSalesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePackageModeOfSales_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PerformancePackageModeOfSales/{performancePackageModeOfSaleId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePackageModeOfSalesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePackageModeOfSalesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePackageModeOfSalesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceLayersUpdate updates an existing performance price layer
*/
func (a *Client) PerformancePriceLayersUpdate(params *PerformancePriceLayersUpdateParams, opts ...ClientOption) (*PerformancePriceLayersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PerformancePriceLayers/{performancePriceLayerId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceLayersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceLayersUpdatePrices updates a set of prices across one or more performances
*/
func (a *Client) PerformancePriceLayersUpdatePrices(params *PerformancePriceLayersUpdatePricesParams, opts ...ClientOption) (*PerformancePriceLayersUpdatePricesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersUpdatePricesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_UpdatePrices",
		Method:             "PUT",
		PathPattern:        "/TXN/PerformancePriceLayers/Prices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersUpdatePricesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersUpdatePricesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceLayersUpdatePricesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceTypesBulkUpdate updates the performance price types for a set of performances
*/
func (a *Client) PerformancePriceTypesBulkUpdate(params *PerformancePriceTypesBulkUpdateParams, opts ...ClientOption) (*PerformancePriceTypesBulkUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceTypesBulkUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceTypes_BulkUpdate",
		Method:             "PUT",
		PathPattern:        "/TXN/PerformancePriceTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceTypesBulkUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceTypesBulkUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceTypesBulkUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceTypesUpdate updates an existing performance price type
*/
func (a *Client) PerformancePriceTypesUpdate(params *PerformancePriceTypesUpdateParams, opts ...ClientOption) (*PerformancePriceTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceTypes_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PerformancePriceTypes/{performancePriceTypeId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePriceTypesUpdateBase updates base indicator on performance price types for a set of performances and price type
*/
func (a *Client) PerformancePriceTypesUpdateBase(params *PerformancePriceTypesUpdateBaseParams, opts ...ClientOption) (*PerformancePriceTypesUpdateBaseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceTypesUpdateBaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceTypes_UpdateBase",
		Method:             "PUT",
		PathPattern:        "/TXN/PerformancePriceTypes/Base",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceTypesUpdateBaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceTypesUpdateBaseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePriceTypesUpdateBaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancePricesUpdate updates an existing performance price
*/
func (a *Client) PerformancePricesUpdate(params *PerformancePricesUpdateParams, opts ...ClientOption) (*PerformancePricesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePricesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePrices_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PerformancePrices/{performancePriceId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePricesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePricesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancePricesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformanceStatusesUpdate updates an existing performance status
*/
func (a *Client) PerformanceStatusesUpdate(params *PerformanceStatusesUpdateParams, opts ...ClientOption) (*PerformanceStatusesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceStatusesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceStatuses_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PerformanceStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceStatusesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceStatusesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformanceStatusesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformanceTypesUpdate updates an existing performance type
*/
func (a *Client) PerformanceTypesUpdate(params *PerformanceTypesUpdateParams, opts ...ClientOption) (*PerformanceTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PerformanceTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformanceTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformancesExpireSeatHolds expires seat holds for a performance and hold code
*/
func (a *Client) PerformancesExpireSeatHolds(params *PerformancesExpireSeatHoldsParams, opts ...ClientOption) (*PerformancesExpireSeatHoldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesExpireSeatHoldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_ExpireSeatHolds",
		Method:             "PUT",
		PathPattern:        "/TXN/Performances/{performanceId}/Seats/Holds/{holdCodeId}/Expire",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesExpireSeatHoldsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesExpireSeatHoldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformancesExpireSeatHoldsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhilanthropyTypesUpdate updates an existing philosophy type
*/
func (a *Client) PhilanthropyTypesUpdate(params *PhilanthropyTypesUpdateParams, opts ...ClientOption) (*PhilanthropyTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhilanthropyTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PhilanthropyTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhilanthropyTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhilanthropyUpdate updateds an existing philanthropy entry for a constituent
*/
func (a *Client) PhilanthropyUpdate(params *PhilanthropyUpdateParams, opts ...ClientOption) (*PhilanthropyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Philanthropy_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Philanthropy/{philanthropyEntryId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhilanthropyUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhoneIndicatorsUpdate updates an existing phone indicator
*/
func (a *Client) PhoneIndicatorsUpdate(params *PhoneIndicatorsUpdateParams, opts ...ClientOption) (*PhoneIndicatorsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneIndicatorsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneIndicators_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PhoneIndicators/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneIndicatorsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneIndicatorsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhoneIndicatorsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhoneTypesUpdate updates an existing phone type
*/
func (a *Client) PhoneTypesUpdate(params *PhoneTypesUpdateParams, opts ...ClientOption) (*PhoneTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PhoneTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhoneTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PhonesUpdate updates a phone
*/
func (a *Client) PhonesUpdate(params *PhonesUpdateParams, opts ...ClientOption) (*PhonesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Phones/{phoneId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PhonesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanPrioritiesUpdate updates an existing plan priority
*/
func (a *Client) PlanPrioritiesUpdate(params *PlanPrioritiesUpdateParams, opts ...ClientOption) (*PlanPrioritiesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanPrioritiesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanPriorities_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PlanPriorities/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanPrioritiesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanPrioritiesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanPrioritiesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanSourcesUpdate updates an existing plan source
*/
func (a *Client) PlanSourcesUpdate(params *PlanSourcesUpdateParams, opts ...ClientOption) (*PlanSourcesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanSourcesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanSources_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PlanSources/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanSourcesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanSourcesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanSourcesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanStatusesUpdate updates an existing plan status
*/
func (a *Client) PlanStatusesUpdate(params *PlanStatusesUpdateParams, opts ...ClientOption) (*PlanStatusesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanStatusesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanStatuses_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PlanStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanStatusesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanStatusesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanStatusesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanTypesUpdate updates an existing plan type
*/
func (a *Client) PlanTypesUpdate(params *PlanTypesUpdateParams, opts ...ClientOption) (*PlanTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PlanTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlanWorkersUpdate updates an existing plan worker
*/
func (a *Client) PlanWorkersUpdate(params *PlanWorkersUpdateParams, opts ...ClientOption) (*PlanWorkersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanWorkersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanWorkers_Update",
		Method:             "PUT",
		PathPattern:        "/Finance/PlanWorkers/{planWorkerId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanWorkersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanWorkersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlanWorkersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PlansUpdate updates an existing plan
*/
func (a *Client) PlansUpdate(params *PlansUpdateParams, opts ...ClientOption) (*PlansUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlansUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Plans_Update",
		Method:             "PUT",
		PathPattern:        "/Finance/Plans/{planId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlansUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlansUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PlansUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PortfolioCustomElementsUpdate updates an existing portfolio custom element
*/
func (a *Client) PortfolioCustomElementsUpdate(params *PortfolioCustomElementsUpdateParams, opts ...ClientOption) (*PortfolioCustomElementsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortfolioCustomElementsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PortfolioCustomElements_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PortfolioCustomElements/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PortfolioCustomElementsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PortfolioCustomElementsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PortfolioCustomElementsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PrefixesUpdate updates an existing prefix
*/
func (a *Client) PrefixesUpdate(params *PrefixesUpdateParams, opts ...ClientOption) (*PrefixesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrefixesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Prefixes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Prefixes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrefixesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrefixesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PrefixesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PremieresUpdate updates an existing premiere
*/
func (a *Client) PremieresUpdate(params *PremieresUpdateParams, opts ...ClientOption) (*PremieresUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPremieresUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Premieres_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Premieres/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PremieresUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PremieresUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PremieresUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceCategoriesUpdate updates an existing price category
*/
func (a *Client) PriceCategoriesUpdate(params *PriceCategoriesUpdateParams, opts ...ClientOption) (*PriceCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PriceCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceEventsMoveTo moves a set of price events to a new date
*/
func (a *Client) PriceEventsMoveTo(params *PriceEventsMoveToParams, opts ...ClientOption) (*PriceEventsMoveToNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceEventsMoveToParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceEvents_MoveTo",
		Method:             "PUT",
		PathPattern:        "/TXN/PriceEvents/MoveTo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceEventsMoveToReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceEventsMoveToNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceEventsMoveToDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceLayerTypesUpdate updates an existing price layer type
*/
func (a *Client) PriceLayerTypesUpdate(params *PriceLayerTypesUpdateParams, opts ...ClientOption) (*PriceLayerTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceLayerTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceLayerTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PriceLayerTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceLayerTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceLayerTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceLayerTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTemplatesUpdate updates an existing price template
*/
func (a *Client) PriceTemplatesUpdate(params *PriceTemplatesUpdateParams, opts ...ClientOption) (*PriceTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTemplatesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTemplates_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PriceTemplates/{priceTemplateId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTemplatesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTemplatesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTemplatesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypeCategoriesUpdate updates an existing price type category
*/
func (a *Client) PriceTypeCategoriesUpdate(params *PriceTypeCategoriesUpdateParams, opts ...ClientOption) (*PriceTypeCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PriceTypeCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypeCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypeGroupsUpdate updates an existing price type group
*/
func (a *Client) PriceTypeGroupsUpdate(params *PriceTypeGroupsUpdateParams, opts ...ClientOption) (*PriceTypeGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PriceTypeGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypeGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypeReasonsUpdate updates an existing price type reason
*/
func (a *Client) PriceTypeReasonsUpdate(params *PriceTypeReasonsUpdateParams, opts ...ClientOption) (*PriceTypeReasonsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeReasonsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeReasons_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PriceTypeReasons/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeReasonsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeReasonsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypeReasonsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypeUserGroupsUpdate updates an existing price type user group mapping
*/
func (a *Client) PriceTypeUserGroupsUpdate(params *PriceTypeUserGroupsUpdateParams, opts ...ClientOption) (*PriceTypeUserGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeUserGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeUserGroups_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PriceTypeUserGroups/{priceTypeUserGroupId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeUserGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeUserGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypeUserGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PriceTypesUpdate updates an existing price type
*/
func (a *Client) PriceTypesUpdate(params *PriceTypesUpdateParams, opts ...ClientOption) (*PriceTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypes_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PriceTypes/{priceTypeId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PriceTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingRuleCategoriesUpdate updates an existing pricing rule category
*/
func (a *Client) PricingRuleCategoriesUpdate(params *PricingRuleCategoriesUpdateParams, opts ...ClientOption) (*PricingRuleCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PricingRuleCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingRuleCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingRuleMessageTypesUpdate updates an existing pricing rule message type
*/
func (a *Client) PricingRuleMessageTypesUpdate(params *PricingRuleMessageTypesUpdateParams, opts ...ClientOption) (*PricingRuleMessageTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleMessageTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleMessageTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/PricingRuleMessageTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleMessageTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleMessageTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingRuleMessageTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingRuleSetsUpdate updates an existing pricing rule set
*/
func (a *Client) PricingRuleSetsUpdate(params *PricingRuleSetsUpdateParams, opts ...ClientOption) (*PricingRuleSetsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleSetsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleSets_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PricingRuleSets/{pricingRuleSetId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleSetsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleSetsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingRuleSetsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingRulesUpdate updates an existing pricing rule
*/
func (a *Client) PricingRulesUpdate(params *PricingRulesUpdateParams, opts ...ClientOption) (*PricingRulesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRulesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRules_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/PricingRules/{pricingRuleId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRulesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRulesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingRulesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PrintersUpdate updates an existing printer
*/
func (a *Client) PrintersUpdate(params *PrintersUpdateParams, opts ...ClientOption) (*PrintersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrintersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Printers_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Printers/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrintersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrintersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PrintersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProductionSeasonMembershipOrganizationsUpdate updates an existing production season membership organization
*/
func (a *Client) ProductionSeasonMembershipOrganizationsUpdate(params *ProductionSeasonMembershipOrganizationsUpdateParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonMembershipOrganizationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasonMembershipOrganizations_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/ProductionSeasonMembershipOrganizations/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonMembershipOrganizationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonMembershipOrganizationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProductionSeasonMembershipOrganizationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProgramListingsUpdate updates a program listing
*/
func (a *Client) ProgramListingsUpdate(params *ProgramListingsUpdateParams, opts ...ClientOption) (*ProgramListingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramListingsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProgramListings_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/ProgramListings/{programListingId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramListingsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramListingsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProgramListingsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProgramsUpdate updates an existing program
*/
func (a *Client) ProgramsUpdate(params *ProgramsUpdateParams, opts ...ClientOption) (*ProgramsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Programs_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Programs/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProgramsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PronounsUpdate pronouns update API
*/
func (a *Client) PronounsUpdate(params *PronounsUpdateParams, opts ...ClientOption) (*PronounsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPronounsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Pronouns_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Pronouns/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PronounsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PronounsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PronounsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QualificationCategoriesUpdate updates an existing qualification category
*/
func (a *Client) QualificationCategoriesUpdate(params *QualificationCategoriesUpdateParams, opts ...ClientOption) (*QualificationCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QualificationCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/QualificationCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QualificationCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QualificationsUpdate updates an existing qualification
*/
func (a *Client) QualificationsUpdate(params *QualificationsUpdateParams, opts ...ClientOption) (*QualificationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Qualifications_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Qualifications/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QualificationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QueryElementFiltersUpdate updates an existing query element filter
*/
func (a *Client) QueryElementFiltersUpdate(params *QueryElementFiltersUpdateParams, opts ...ClientOption) (*QueryElementFiltersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementFiltersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementFilters_Update",
		Method:             "PUT",
		PathPattern:        "/Reporting/QueryElementFilters/{queryElementFilterId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementFiltersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementFiltersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryElementFiltersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QueryElementGroupsUpdate updates an existing query element group
*/
func (a *Client) QueryElementGroupsUpdate(params *QueryElementGroupsUpdateParams, opts ...ClientOption) (*QueryElementGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementGroups_Update",
		Method:             "PUT",
		PathPattern:        "/Reporting/QueryElementGroups/{queryElementGroupId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryElementGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QueryElementsUpdate updates an existing query element
*/
func (a *Client) QueryElementsUpdate(params *QueryElementsUpdateParams, opts ...ClientOption) (*QueryElementsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElements_Update",
		Method:             "PUT",
		PathPattern:        "/Reporting/QueryElements/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryElementsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RankTypesUpdate updates an existing rank type
*/
func (a *Client) RankTypesUpdate(params *RankTypesUpdateParams, opts ...ClientOption) (*RankTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RankTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/RankTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RankTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RankingsUpdate updates a ranking
*/
func (a *Client) RankingsUpdate(params *RankingsUpdateParams, opts ...ClientOption) (*RankingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankingsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Rankings_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Rankings/{rankingId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankingsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankingsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RankingsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReceiptSettingsUpdate updates an existing receipt setting
*/
func (a *Client) ReceiptSettingsUpdate(params *ReceiptSettingsUpdateParams, opts ...ClientOption) (*ReceiptSettingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiptSettingsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReceiptSettings_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ReceiptSettings/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReceiptSettingsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReceiptSettingsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReceiptSettingsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReferenceTableUserGroupsUpdate updates an existing reference table user group mapping
*/
func (a *Client) ReferenceTableUserGroupsUpdate(params *ReferenceTableUserGroupsUpdateParams, opts ...ClientOption) (*ReferenceTableUserGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceTableUserGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceTableUserGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ReferenceTableUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceTableUserGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceTableUserGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReferenceTableUserGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RelationshipCategoriesUpdate updates an existing relationship category
*/
func (a *Client) RelationshipCategoriesUpdate(params *RelationshipCategoriesUpdateParams, opts ...ClientOption) (*RelationshipCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelationshipCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelationshipCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/RelationshipCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelationshipCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelationshipCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RelationshipCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportRequestsFlushIncomplete updates the status of all the running requests to error
*/
func (a *Client) ReportRequestsFlushIncomplete(params *ReportRequestsFlushIncompleteParams, opts ...ClientOption) (*ReportRequestsFlushIncompleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportRequestsFlushIncompleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportRequests_FlushIncomplete",
		Method:             "PUT",
		PathPattern:        "/Reporting/ReportRequests/FlushIncomplete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportRequestsFlushIncompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportRequestsFlushIncompleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportRequestsFlushIncompleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportRequestsUpdate updates the details of a report request
*/
func (a *Client) ReportRequestsUpdate(params *ReportRequestsUpdateParams, opts ...ClientOption) (*ReportRequestsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportRequestsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportRequests_Update",
		Method:             "PUT",
		PathPattern:        "/Reporting/ReportRequests/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportRequestsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportRequestsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportRequestsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportSchedulesUpdate updates the details of a report schedule
*/
func (a *Client) ReportSchedulesUpdate(params *ReportSchedulesUpdateParams, opts ...ClientOption) (*ReportSchedulesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportSchedulesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportSchedules_Update",
		Method:             "PUT",
		PathPattern:        "/Reporting/ReportSchedules/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportSchedulesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportSchedulesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportSchedulesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReportUserGroupsUpdate updates an existing report user group mapping
*/
func (a *Client) ReportUserGroupsUpdate(params *ReportUserGroupsUpdateParams, opts ...ClientOption) (*ReportUserGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportUserGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportUserGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ReportUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportUserGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportUserGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReportUserGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResearchTypesUpdate updates an existing research type
*/
func (a *Client) ResearchTypesUpdate(params *ResearchTypesUpdateParams, opts ...ClientOption) (*ResearchTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResearchTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ResearchTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResearchTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResearchUpdate updateds an existing research entry for a constituent
*/
func (a *Client) ResearchUpdate(params *ResearchUpdateParams, opts ...ClientOption) (*ResearchUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Research_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Research/{researchEntryId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResearchUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourceCategoriesUpdate updates an existing resource category
*/
func (a *Client) ResourceCategoriesUpdate(params *ResourceCategoriesUpdateParams, opts ...ClientOption) (*ResourceCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ResourceCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourceSchedulesUpdate updates a specific resource schedule only busy or available types can be updated
*/
func (a *Client) ResourceSchedulesUpdate(params *ResourceSchedulesUpdateParams, opts ...ClientOption) (*ResourceSchedulesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceSchedulesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceSchedules_Update",
		Method:             "PUT",
		PathPattern:        "/EventsManagement/ResourceSchedules/{resourceScheduleId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceSchedulesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceSchedulesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceSchedulesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourceTypesUpdate updates an existing resource type
*/
func (a *Client) ResourceTypesUpdate(params *ResourceTypesUpdateParams, opts ...ClientOption) (*ResourceTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceTypes_Update",
		Method:             "PUT",
		PathPattern:        "/EventsManagement/ResourceTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResourcesUpdate updates an existing resource
*/
func (a *Client) ResourcesUpdate(params *ResourcesUpdateParams, opts ...ClientOption) (*ResourcesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_Update",
		Method:             "PUT",
		PathPattern:        "/EventsManagement/Resources/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourcesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalesChannelsUpdate updates an existing sales channel
*/
func (a *Client) SalesChannelsUpdate(params *SalesChannelsUpdateParams, opts ...ClientOption) (*SalesChannelsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesChannelsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesChannels_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SalesChannels/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesChannelsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesChannelsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalesChannelsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalesLayoutButtonTypesUpdate updates an existing sales layout button type
*/
func (a *Client) SalesLayoutButtonTypesUpdate(params *SalesLayoutButtonTypesUpdateParams, opts ...ClientOption) (*SalesLayoutButtonTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutButtonTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayoutButtonTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SalesLayoutButtonTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutButtonTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutButtonTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalesLayoutButtonTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalesLayoutsUpdate updates an existing sales layout setup
*/
func (a *Client) SalesLayoutsUpdate(params *SalesLayoutsUpdateParams, opts ...ClientOption) (*SalesLayoutsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayouts_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/SalesLayouts/Setup/{salesLayoutId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalesLayoutsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalutationTypesUpdate updates an existing salutation type
*/
func (a *Client) SalutationTypesUpdate(params *SalutationTypesUpdateParams, opts ...ClientOption) (*SalutationTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalutationTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SalutationTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalutationTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SalutationsUpdate updates a salutation
*/
func (a *Client) SalutationsUpdate(params *SalutationsUpdateParams, opts ...ClientOption) (*SalutationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Salutations_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/Salutations/{salutationId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SalutationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SchedulePatternTypesUpdate updates an existing schedule pattern
*/
func (a *Client) SchedulePatternTypesUpdate(params *SchedulePatternTypesUpdateParams, opts ...ClientOption) (*SchedulePatternTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulePatternTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SchedulePatternTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SchedulePatternTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulePatternTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulePatternTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulePatternTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScheduleTypesUpdate updates an existing schedule type
*/
func (a *Client) ScheduleTypesUpdate(params *ScheduleTypesUpdateParams, opts ...ClientOption) (*ScheduleTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ScheduleTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScheduleTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SeasonTypesUpdate updates an existing season type
*/
func (a *Client) SeasonTypesUpdate(params *SeasonTypesUpdateParams, opts ...ClientOption) (*SeasonTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeasonTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SeasonTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeasonTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SeasonsUpdate updates an existing season
*/
func (a *Client) SeasonsUpdate(params *SeasonsUpdateParams, opts ...ClientOption) (*SeasonsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Seasons_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Seasons/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeasonsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SeatCodesUpdate updates an existing seat code
*/
func (a *Client) SeatCodesUpdate(params *SeatCodesUpdateParams, opts ...ClientOption) (*SeatCodesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatCodesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatCodes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SeatCodes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatCodesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatCodesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeatCodesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SeatStatusesUpdate updates an existing seat status
*/
func (a *Client) SeatStatusesUpdate(params *SeatStatusesUpdateParams, opts ...ClientOption) (*SeatStatusesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatStatusesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatStatuses_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SeatStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatStatusesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatStatusesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeatStatusesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SectionsUpdate updates an existing section
*/
func (a *Client) SectionsUpdate(params *SectionsUpdateParams, opts ...ClientOption) (*SectionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSectionsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Sections_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Sections/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SectionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SectionsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SectionsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceResourceUserGroupsUpdate updates an existing service resource user group mapping
*/
func (a *Client) ServiceResourceUserGroupsUpdate(params *ServiceResourceUserGroupsUpdateParams, opts ...ClientOption) (*ServiceResourceUserGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceResourceUserGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceResourceUserGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ServiceResourceUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceResourceUserGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceResourceUserGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceResourceUserGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionSetConstituent sets the current constituent on the cart for a business facing session if the constituent is a primary affiliate of a household the method obeys the t r a n s a c t a s h o u s e h o l d o r d e r entry in t d e f a u l t s to determine if the household constituent should be set if the default is set to prompt both the household and individual are returned to allow the user to be queried to set the constituent to the users choice pass in the selected constituent id and set override prompt to true
*/
func (a *Client) SessionSetConstituent(params *SessionSetConstituentParams, opts ...ClientOption) (*SessionSetConstituentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionSetConstituentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_SetConstituent",
		Method:             "PUT",
		PathPattern:        "/Web/Session/{sessionKey}/Constituents",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionSetConstituentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionSetConstituentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionSetConstituentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionSetExpiration changes the deadline after which a session s reserved seats are released all times are relative to the machine on which the tessitura seat server runs including the time zone the method either takes an absolute deadline time or an offset in seconds which is used to shorten or lengthen the time until expiration the deadline is not the exact moment at which the seats are released but rather when they are marked as expired the tessitura seat server will terminate the session when the next cleanup cycle is run every 60 seconds or so the method will return the new expiration date time of the session the expiration date time takes precendence over the offset if both are provided in the request
*/
func (a *Client) SessionSetExpiration(params *SessionSetExpirationParams, opts ...ClientOption) (*SessionSetExpirationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionSetExpirationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_SetExpiration",
		Method:             "PUT",
		PathPattern:        "/Web/Session/{sessionKey}/Expiration",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionSetExpirationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionSetExpirationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionSetExpirationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionUpdateVariable updates the value of an existing session variable
*/
func (a *Client) SessionUpdateVariable(params *SessionUpdateVariableParams, opts ...ClientOption) (*SessionUpdateVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionUpdateVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_UpdateVariable",
		Method:             "PUT",
		PathPattern:        "/Web/Session/{sessionKey}/Variables",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionUpdateVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionUpdateVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionUpdateVariableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SessionUpdateWebLogin updates the login information for a user and logs back into the session using new credentials current and new values must be submitted for login username password and email to retain any of the current values pass the same value for both the current and the new parameter after successfully updating the user account the user is automatically logged in with the new login information when updating a login where the password has been forgotten submit the request with a null password
*/
func (a *Client) SessionUpdateWebLogin(params *SessionUpdateWebLoginParams, opts ...ClientOption) (*SessionUpdateWebLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionUpdateWebLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_UpdateWebLogin",
		Method:             "PUT",
		PathPattern:        "/Web/Session/{sessionKey}/WebLogins",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionUpdateWebLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionUpdateWebLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionUpdateWebLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SourceGroupsUpdate updates an existing source group
*/
func (a *Client) SourceGroupsUpdate(params *SourceGroupsUpdateParams, opts ...ClientOption) (*SourceGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SourceGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SourceGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SourceGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SpecialActivitiesUpdate updates an activity record
*/
func (a *Client) SpecialActivitiesUpdate(params *SpecialActivitiesUpdateParams, opts ...ClientOption) (*SpecialActivitiesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivitiesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivities_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/SpecialActivities/{specialActivityId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivitiesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivitiesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SpecialActivitiesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SpecialActivityStatusesUpdate updates an special activity status
*/
func (a *Client) SpecialActivityStatusesUpdate(params *SpecialActivityStatusesUpdateParams, opts ...ClientOption) (*SpecialActivityStatusesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityStatusesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityStatuses_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SpecialActivityStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityStatusesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityStatusesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SpecialActivityStatusesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SpecialActivityTypesUpdate updates an existing special activity type
*/
func (a *Client) SpecialActivityTypesUpdate(params *SpecialActivityTypesUpdateParams, opts ...ClientOption) (*SpecialActivityTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SpecialActivityTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SpecialActivityTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StatesUpdate updates an existing state
*/
func (a *Client) StatesUpdate(params *StatesUpdateParams, opts ...ClientOption) (*StatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "States_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/States/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StatesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StatesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StepTypesUpdate updates an existing step type
*/
func (a *Client) StepTypesUpdate(params *StepTypesUpdateParams, opts ...ClientOption) (*StepTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StepTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/StepTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StepTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StepsUpdate updates an existing step
*/
func (a *Client) StepsUpdate(params *StepsUpdateParams, opts ...ClientOption) (*StepsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Steps_Update",
		Method:             "PUT",
		PathPattern:        "/Finance/Steps/{stepId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StepsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StepsUpdateDocument updates a document attached to a step
*/
func (a *Client) StepsUpdateDocument(params *StepsUpdateDocumentParams, opts ...ClientOption) (*StepsUpdateDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepsUpdateDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Steps_UpdateDocument",
		Method:             "PUT",
		PathPattern:        "/Finance/Steps/{stepId}/Documents/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepsUpdateDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepsUpdateDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StepsUpdateDocumentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubLineItemStatusesUpdate updates an existing sub line item status
*/
func (a *Client) SubLineItemStatusesUpdate(params *SubLineItemStatusesUpdateParams, opts ...ClientOption) (*SubLineItemStatusesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubLineItemStatusesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubLineItemStatuses_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SubLineItemStatuses/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubLineItemStatusesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubLineItemStatusesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubLineItemStatusesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SuffixesUpdate updates an existing suffix
*/
func (a *Client) SuffixesUpdate(params *SuffixesUpdateParams, opts ...ClientOption) (*SuffixesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuffixesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Suffixes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Suffixes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuffixesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuffixesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SuffixesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SurveyQuestionsUpdate updates an existing survey question
*/
func (a *Client) SurveyQuestionsUpdate(params *SurveyQuestionsUpdateParams, opts ...ClientOption) (*SurveyQuestionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyQuestionsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyQuestions_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/SurveyQuestions/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyQuestionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyQuestionsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SurveyQuestionsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SurveyResponsesUpdate updates an existing survey response
*/
func (a *Client) SurveyResponsesUpdate(params *SurveyResponsesUpdateParams, opts ...ClientOption) (*SurveyResponsesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyResponsesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyResponses_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/SurveyResponses/{surveyResponseId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyResponsesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyResponsesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SurveyResponsesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplateCategoriesUpdate updates an existing template category
*/
func (a *Client) TemplateCategoriesUpdate(params *TemplateCategoriesUpdateParams, opts ...ClientOption) (*TemplateCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/TemplateCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplateCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplateCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatePriceTypesUpdate updates an existing template price type
*/
func (a *Client) TemplatePriceTypesUpdate(params *TemplatePriceTypesUpdateParams, opts ...ClientOption) (*TemplatePriceTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePriceTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePriceTypes_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/TemplatePriceTypes/{templatePriceTypeId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePriceTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePriceTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatePriceTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatePricesUpdate updates an existing template price
*/
func (a *Client) TemplatePricesUpdate(params *TemplatePricesUpdateParams, opts ...ClientOption) (*TemplatePricesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePricesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePrices_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/TemplatePrices/{templatePriceId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePricesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePricesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatePricesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplatesUpdate updates an existing template
*/
func (a *Client) TemplatesUpdate(params *TemplatesUpdateParams, opts ...ClientOption) (*TemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_Update",
		Method:             "PUT",
		PathPattern:        "/Templates/{templateId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplatesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TheatersUpdate updates an existing theater
*/
func (a *Client) TheatersUpdate(params *TheatersUpdateParams, opts ...ClientOption) (*TheatersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTheatersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Theaters_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/Theaters/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TheatersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TheatersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TheatersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TimeSlotsUpdate updates an existing time slot
*/
func (a *Client) TimeSlotsUpdate(params *TimeSlotsUpdateParams, opts ...ClientOption) (*TimeSlotsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeSlotsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TimeSlots_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/TimeSlots/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeSlotsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeSlotsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TimeSlotsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TriPOSCloudConfigurationsUpdate updates an existing tri p o s cloud configuration
*/
func (a *Client) TriPOSCloudConfigurationsUpdate(params *TriPOSCloudConfigurationsUpdateParams, opts ...ClientOption) (*TriPOSCloudConfigurationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriPOSCloudConfigurationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TriPOSCloudConfigurations_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/TriPOSCloudConfigurations/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriPOSCloudConfigurationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriPOSCloudConfigurationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TriPOSCloudConfigurationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeCategoriesUpdate updates an existing upgrade category
*/
func (a *Client) UpgradeCategoriesUpdate(params *UpgradeCategoriesUpdateParams, opts ...ClientOption) (*UpgradeCategoriesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCategoriesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeCategories_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/UpgradeCategories/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeCategoriesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeCategoriesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeCategoriesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeLogsUpdate updates the given upgrade log
*/
func (a *Client) UpgradeLogsUpdate(params *UpgradeLogsUpdateParams, opts ...ClientOption) (*UpgradeLogsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeLogsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeLogs_Update",
		Method:             "PUT",
		PathPattern:        "/Admin/UpgradeLogs/{upgradeLogId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeLogsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeLogsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeLogsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserPreferencesUpdate updates a user preference by id
*/
func (a *Client) UserPreferencesUpdate(params *UserPreferencesUpdateParams, opts ...ClientOption) (*UserPreferencesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPreferencesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserPreferences_Update",
		Method:             "PUT",
		PathPattern:        "/Security/UserPreferences/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserPreferencesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserPreferencesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserPreferencesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WebContentTypesUpdate updates an existing web content type
*/
func (a *Client) WebContentTypesUpdate(params *WebContentTypesUpdateParams, opts ...ClientOption) (*WebContentTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebContentTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebContentTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/WebContentTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebContentTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebContentTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WebContentTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WebLoginsUpdate updates a weblogin
*/
func (a *Client) WebLoginsUpdate(params *WebLoginsUpdateParams, opts ...ClientOption) (*WebLoginsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebLoginsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebLogins_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/WebLogins/{loginId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebLoginsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebLoginsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WebLoginsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkerQualificationsUpdate updates an existing worker qualification
*/
func (a *Client) WorkerQualificationsUpdate(params *WorkerQualificationsUpdateParams, opts ...ClientOption) (*WorkerQualificationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerQualificationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerQualifications_Update",
		Method:             "PUT",
		PathPattern:        "/CRM/WorkerQualifications/{workerQualificationId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerQualificationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerQualificationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkerQualificationsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkerRolesUpdate updates an existing worker role
*/
func (a *Client) WorkerRolesUpdate(params *WorkerRolesUpdateParams, opts ...ClientOption) (*WorkerRolesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerRolesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerRoles_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/WorkerRoles/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerRolesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerRolesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkerRolesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkerTypesUpdate updates an existing worker type
*/
func (a *Client) WorkerTypesUpdate(params *WorkerTypesUpdateParams, opts ...ClientOption) (*WorkerTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerTypesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerTypes_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/WorkerTypes/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerTypesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerTypesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkerTypesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkersUpdate updates an existing worker
*/
func (a *Client) WorkersUpdate(params *WorkersUpdateParams, opts ...ClientOption) (*WorkersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkersUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Workers_Update",
		Method:             "PUT",
		PathPattern:        "/Finance/Workers/{workerId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkersUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZoneGroupsUpdate updates an existing zone group
*/
func (a *Client) ZoneGroupsUpdate(params *ZoneGroupsUpdateParams, opts ...ClientOption) (*ZoneGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneGroups_Update",
		Method:             "PUT",
		PathPattern:        "/ReferenceData/ZoneGroups/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneGroupsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZoneGroupsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZoneMapsUpdate updates an existing zone map
*/
func (a *Client) ZoneMapsUpdate(params *ZoneMapsUpdateParams, opts ...ClientOption) (*ZoneMapsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneMapsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneMaps_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/ZoneMaps/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneMapsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneMapsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZoneMapsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZonesUpdate updates an existing zone
*/
func (a *Client) ZonesUpdate(params *ZonesUpdateParams, opts ...ClientOption) (*ZonesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZonesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Zones_Update",
		Method:             "PUT",
		PathPattern:        "/TXN/Zones/{zoneMapId},{zoneId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZonesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZonesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
