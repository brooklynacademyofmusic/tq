// Code generated by go-swagger; DO NOT EDIT.

package p_u_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/skysyzygy/tq/models"
)

// NewListsUpdateParams creates a new ListsUpdateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListsUpdateParams() *ListsUpdateParams {
	return &ListsUpdateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListsUpdateParamsWithTimeout creates a new ListsUpdateParams object
// with the ability to set a timeout on a request.
func NewListsUpdateParamsWithTimeout(timeout time.Duration) *ListsUpdateParams {
	return &ListsUpdateParams{
		timeout: timeout,
	}
}

// NewListsUpdateParamsWithContext creates a new ListsUpdateParams object
// with the ability to set a context for a request.
func NewListsUpdateParamsWithContext(ctx context.Context) *ListsUpdateParams {
	return &ListsUpdateParams{
		Context: ctx,
	}
}

// NewListsUpdateParamsWithHTTPClient creates a new ListsUpdateParams object
// with the ability to set a custom HTTPClient for a request.
func NewListsUpdateParamsWithHTTPClient(client *http.Client) *ListsUpdateParams {
	return &ListsUpdateParams{
		HTTPClient: client,
	}
}

/*
ListsUpdateParams contains all the parameters to send to the API endpoint

	for the lists update operation.

	Typically these are written to a http.Request.
*/
type ListsUpdateParams struct {

	// List.
	List *models.List

	// ListID.
	ListID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the lists update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListsUpdateParams) WithDefaults() *ListsUpdateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the lists update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListsUpdateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the lists update params
func (o *ListsUpdateParams) WithTimeout(timeout time.Duration) *ListsUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the lists update params
func (o *ListsUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the lists update params
func (o *ListsUpdateParams) WithContext(ctx context.Context) *ListsUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the lists update params
func (o *ListsUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the lists update params
func (o *ListsUpdateParams) WithHTTPClient(client *http.Client) *ListsUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the lists update params
func (o *ListsUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithList adds the list to the lists update params
func (o *ListsUpdateParams) WithList(list *models.List) *ListsUpdateParams {
	o.SetList(list)
	return o
}

// SetList adds the list to the lists update params
func (o *ListsUpdateParams) SetList(list *models.List) {
	o.List = list
}

// WithListID adds the listID to the lists update params
func (o *ListsUpdateParams) WithListID(listID string) *ListsUpdateParams {
	o.SetListID(listID)
	return o
}

// SetListID adds the listId to the lists update params
func (o *ListsUpdateParams) SetListID(listID string) {
	o.ListID = listID
}

// WriteToRequest writes these params to a swagger request
func (o *ListsUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.List != nil {
		if err := r.SetBodyParam(o.List); err != nil {
			return err
		}
	}

	// path param listId
	if err := r.SetPathParam("listId", o.ListID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
