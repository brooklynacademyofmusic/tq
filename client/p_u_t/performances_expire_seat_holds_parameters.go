// Code generated by go-swagger; DO NOT EDIT.

package p_u_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/skysyzygy/tq/models"
)

// NewPerformancesExpireSeatHoldsParams creates a new PerformancesExpireSeatHoldsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPerformancesExpireSeatHoldsParams() *PerformancesExpireSeatHoldsParams {
	return &PerformancesExpireSeatHoldsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPerformancesExpireSeatHoldsParamsWithTimeout creates a new PerformancesExpireSeatHoldsParams object
// with the ability to set a timeout on a request.
func NewPerformancesExpireSeatHoldsParamsWithTimeout(timeout time.Duration) *PerformancesExpireSeatHoldsParams {
	return &PerformancesExpireSeatHoldsParams{
		timeout: timeout,
	}
}

// NewPerformancesExpireSeatHoldsParamsWithContext creates a new PerformancesExpireSeatHoldsParams object
// with the ability to set a context for a request.
func NewPerformancesExpireSeatHoldsParamsWithContext(ctx context.Context) *PerformancesExpireSeatHoldsParams {
	return &PerformancesExpireSeatHoldsParams{
		Context: ctx,
	}
}

// NewPerformancesExpireSeatHoldsParamsWithHTTPClient creates a new PerformancesExpireSeatHoldsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPerformancesExpireSeatHoldsParamsWithHTTPClient(client *http.Client) *PerformancesExpireSeatHoldsParams {
	return &PerformancesExpireSeatHoldsParams{
		HTTPClient: client,
	}
}

/*
PerformancesExpireSeatHoldsParams contains all the parameters to send to the API endpoint

	for the performances expire seat holds operation.

	Typically these are written to a http.Request.
*/
type PerformancesExpireSeatHoldsParams struct {

	// ExpireSeatHoldRequest.
	ExpireSeatHoldRequest *models.ExpireSeatHoldRequest

	// HoldCodeID.
	HoldCodeID string

	// PerformanceID.
	PerformanceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the performances expire seat holds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesExpireSeatHoldsParams) WithDefaults() *PerformancesExpireSeatHoldsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the performances expire seat holds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancesExpireSeatHoldsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) WithTimeout(timeout time.Duration) *PerformancesExpireSeatHoldsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) WithContext(ctx context.Context) *PerformancesExpireSeatHoldsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) WithHTTPClient(client *http.Client) *PerformancesExpireSeatHoldsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpireSeatHoldRequest adds the expireSeatHoldRequest to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) WithExpireSeatHoldRequest(expireSeatHoldRequest *models.ExpireSeatHoldRequest) *PerformancesExpireSeatHoldsParams {
	o.SetExpireSeatHoldRequest(expireSeatHoldRequest)
	return o
}

// SetExpireSeatHoldRequest adds the expireSeatHoldRequest to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) SetExpireSeatHoldRequest(expireSeatHoldRequest *models.ExpireSeatHoldRequest) {
	o.ExpireSeatHoldRequest = expireSeatHoldRequest
}

// WithHoldCodeID adds the holdCodeID to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) WithHoldCodeID(holdCodeID string) *PerformancesExpireSeatHoldsParams {
	o.SetHoldCodeID(holdCodeID)
	return o
}

// SetHoldCodeID adds the holdCodeId to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) SetHoldCodeID(holdCodeID string) {
	o.HoldCodeID = holdCodeID
}

// WithPerformanceID adds the performanceID to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) WithPerformanceID(performanceID string) *PerformancesExpireSeatHoldsParams {
	o.SetPerformanceID(performanceID)
	return o
}

// SetPerformanceID adds the performanceId to the performances expire seat holds params
func (o *PerformancesExpireSeatHoldsParams) SetPerformanceID(performanceID string) {
	o.PerformanceID = performanceID
}

// WriteToRequest writes these params to a swagger request
func (o *PerformancesExpireSeatHoldsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.ExpireSeatHoldRequest != nil {
		if err := r.SetBodyParam(o.ExpireSeatHoldRequest); err != nil {
			return err
		}
	}

	// path param holdCodeId
	if err := r.SetPathParam("holdCodeId", o.HoldCodeID); err != nil {
		return err
	}

	// path param performanceId
	if err := r.SetPathParam("performanceId", o.PerformanceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
