// Code generated by go-swagger; DO NOT EDIT.

package p_u_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/skysyzygy/tq/models"
)

// NewPerformancePriceTypesUpdateParams creates a new PerformancePriceTypesUpdateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPerformancePriceTypesUpdateParams() *PerformancePriceTypesUpdateParams {
	return &PerformancePriceTypesUpdateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPerformancePriceTypesUpdateParamsWithTimeout creates a new PerformancePriceTypesUpdateParams object
// with the ability to set a timeout on a request.
func NewPerformancePriceTypesUpdateParamsWithTimeout(timeout time.Duration) *PerformancePriceTypesUpdateParams {
	return &PerformancePriceTypesUpdateParams{
		timeout: timeout,
	}
}

// NewPerformancePriceTypesUpdateParamsWithContext creates a new PerformancePriceTypesUpdateParams object
// with the ability to set a context for a request.
func NewPerformancePriceTypesUpdateParamsWithContext(ctx context.Context) *PerformancePriceTypesUpdateParams {
	return &PerformancePriceTypesUpdateParams{
		Context: ctx,
	}
}

// NewPerformancePriceTypesUpdateParamsWithHTTPClient creates a new PerformancePriceTypesUpdateParams object
// with the ability to set a custom HTTPClient for a request.
func NewPerformancePriceTypesUpdateParamsWithHTTPClient(client *http.Client) *PerformancePriceTypesUpdateParams {
	return &PerformancePriceTypesUpdateParams{
		HTTPClient: client,
	}
}

/*
PerformancePriceTypesUpdateParams contains all the parameters to send to the API endpoint

	for the performance price types update operation.

	Typically these are written to a http.Request.
*/
type PerformancePriceTypesUpdateParams struct {

	// PerformancePriceType.
	PerformancePriceType *models.PerformancePriceType

	// PerformancePriceTypeID.
	PerformancePriceTypeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the performance price types update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancePriceTypesUpdateParams) WithDefaults() *PerformancePriceTypesUpdateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the performance price types update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PerformancePriceTypesUpdateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) WithTimeout(timeout time.Duration) *PerformancePriceTypesUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) WithContext(ctx context.Context) *PerformancePriceTypesUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) WithHTTPClient(client *http.Client) *PerformancePriceTypesUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPerformancePriceType adds the performancePriceType to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) WithPerformancePriceType(performancePriceType *models.PerformancePriceType) *PerformancePriceTypesUpdateParams {
	o.SetPerformancePriceType(performancePriceType)
	return o
}

// SetPerformancePriceType adds the performancePriceType to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) SetPerformancePriceType(performancePriceType *models.PerformancePriceType) {
	o.PerformancePriceType = performancePriceType
}

// WithPerformancePriceTypeID adds the performancePriceTypeID to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) WithPerformancePriceTypeID(performancePriceTypeID string) *PerformancePriceTypesUpdateParams {
	o.SetPerformancePriceTypeID(performancePriceTypeID)
	return o
}

// SetPerformancePriceTypeID adds the performancePriceTypeId to the performance price types update params
func (o *PerformancePriceTypesUpdateParams) SetPerformancePriceTypeID(performancePriceTypeID string) {
	o.PerformancePriceTypeID = performancePriceTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *PerformancePriceTypesUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.PerformancePriceType != nil {
		if err := r.SetBodyParam(o.PerformancePriceType); err != nil {
			return err
		}
	}

	// path param performancePriceTypeId
	if err := r.SetPathParam("performancePriceTypeId", o.PerformancePriceTypeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
