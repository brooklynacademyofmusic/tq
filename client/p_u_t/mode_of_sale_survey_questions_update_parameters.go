// Code generated by go-swagger; DO NOT EDIT.

package p_u_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/skysyzygy/tq/models"
)

// NewModeOfSaleSurveyQuestionsUpdateParams creates a new ModeOfSaleSurveyQuestionsUpdateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewModeOfSaleSurveyQuestionsUpdateParams() *ModeOfSaleSurveyQuestionsUpdateParams {
	return &ModeOfSaleSurveyQuestionsUpdateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewModeOfSaleSurveyQuestionsUpdateParamsWithTimeout creates a new ModeOfSaleSurveyQuestionsUpdateParams object
// with the ability to set a timeout on a request.
func NewModeOfSaleSurveyQuestionsUpdateParamsWithTimeout(timeout time.Duration) *ModeOfSaleSurveyQuestionsUpdateParams {
	return &ModeOfSaleSurveyQuestionsUpdateParams{
		timeout: timeout,
	}
}

// NewModeOfSaleSurveyQuestionsUpdateParamsWithContext creates a new ModeOfSaleSurveyQuestionsUpdateParams object
// with the ability to set a context for a request.
func NewModeOfSaleSurveyQuestionsUpdateParamsWithContext(ctx context.Context) *ModeOfSaleSurveyQuestionsUpdateParams {
	return &ModeOfSaleSurveyQuestionsUpdateParams{
		Context: ctx,
	}
}

// NewModeOfSaleSurveyQuestionsUpdateParamsWithHTTPClient creates a new ModeOfSaleSurveyQuestionsUpdateParams object
// with the ability to set a custom HTTPClient for a request.
func NewModeOfSaleSurveyQuestionsUpdateParamsWithHTTPClient(client *http.Client) *ModeOfSaleSurveyQuestionsUpdateParams {
	return &ModeOfSaleSurveyQuestionsUpdateParams{
		HTTPClient: client,
	}
}

/*
ModeOfSaleSurveyQuestionsUpdateParams contains all the parameters to send to the API endpoint

	for the mode of sale survey questions update operation.

	Typically these are written to a http.Request.
*/
type ModeOfSaleSurveyQuestionsUpdateParams struct {

	// ModeOfSaleSurveyQuestion.
	ModeOfSaleSurveyQuestion *models.ModeOfSaleSurveyQuestion

	// ModeOfSaleSurveyQuestionID.
	ModeOfSaleSurveyQuestionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the mode of sale survey questions update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ModeOfSaleSurveyQuestionsUpdateParams) WithDefaults() *ModeOfSaleSurveyQuestionsUpdateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the mode of sale survey questions update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ModeOfSaleSurveyQuestionsUpdateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) WithTimeout(timeout time.Duration) *ModeOfSaleSurveyQuestionsUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) WithContext(ctx context.Context) *ModeOfSaleSurveyQuestionsUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) WithHTTPClient(client *http.Client) *ModeOfSaleSurveyQuestionsUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModeOfSaleSurveyQuestion adds the modeOfSaleSurveyQuestion to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) WithModeOfSaleSurveyQuestion(modeOfSaleSurveyQuestion *models.ModeOfSaleSurveyQuestion) *ModeOfSaleSurveyQuestionsUpdateParams {
	o.SetModeOfSaleSurveyQuestion(modeOfSaleSurveyQuestion)
	return o
}

// SetModeOfSaleSurveyQuestion adds the modeOfSaleSurveyQuestion to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) SetModeOfSaleSurveyQuestion(modeOfSaleSurveyQuestion *models.ModeOfSaleSurveyQuestion) {
	o.ModeOfSaleSurveyQuestion = modeOfSaleSurveyQuestion
}

// WithModeOfSaleSurveyQuestionID adds the modeOfSaleSurveyQuestionID to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) WithModeOfSaleSurveyQuestionID(modeOfSaleSurveyQuestionID string) *ModeOfSaleSurveyQuestionsUpdateParams {
	o.SetModeOfSaleSurveyQuestionID(modeOfSaleSurveyQuestionID)
	return o
}

// SetModeOfSaleSurveyQuestionID adds the modeOfSaleSurveyQuestionId to the mode of sale survey questions update params
func (o *ModeOfSaleSurveyQuestionsUpdateParams) SetModeOfSaleSurveyQuestionID(modeOfSaleSurveyQuestionID string) {
	o.ModeOfSaleSurveyQuestionID = modeOfSaleSurveyQuestionID
}

// WriteToRequest writes these params to a swagger request
func (o *ModeOfSaleSurveyQuestionsUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.ModeOfSaleSurveyQuestion != nil {
		if err := r.SetBodyParam(o.ModeOfSaleSurveyQuestion); err != nil {
			return err
		}
	}

	// path param modeOfSaleSurveyQuestionId
	if err := r.SetPathParam("modeOfSaleSurveyQuestionId", o.ModeOfSaleSurveyQuestionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
