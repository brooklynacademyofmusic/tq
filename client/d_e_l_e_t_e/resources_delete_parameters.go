// Code generated by go-swagger; DO NOT EDIT.

package d_e_l_e_t_e

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewResourcesDeleteParams creates a new ResourcesDeleteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewResourcesDeleteParams() *ResourcesDeleteParams {
	return &ResourcesDeleteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewResourcesDeleteParamsWithTimeout creates a new ResourcesDeleteParams object
// with the ability to set a timeout on a request.
func NewResourcesDeleteParamsWithTimeout(timeout time.Duration) *ResourcesDeleteParams {
	return &ResourcesDeleteParams{
		timeout: timeout,
	}
}

// NewResourcesDeleteParamsWithContext creates a new ResourcesDeleteParams object
// with the ability to set a context for a request.
func NewResourcesDeleteParamsWithContext(ctx context.Context) *ResourcesDeleteParams {
	return &ResourcesDeleteParams{
		Context: ctx,
	}
}

// NewResourcesDeleteParamsWithHTTPClient creates a new ResourcesDeleteParams object
// with the ability to set a custom HTTPClient for a request.
func NewResourcesDeleteParamsWithHTTPClient(client *http.Client) *ResourcesDeleteParams {
	return &ResourcesDeleteParams{
		HTTPClient: client,
	}
}

/*
ResourcesDeleteParams contains all the parameters to send to the API endpoint

	for the resources delete operation.

	Typically these are written to a http.Request.
*/
type ResourcesDeleteParams struct {

	/* ID.

	   The id of the resource.
	*/
	ID string

	/* RemoveUsages.

	   When true, any associated schedules, assignments, or availability periods will be removed.  When false, a bad request will be returned if any schedules, assignments, or availability periods are associated with the resource. Default is false is not passed.
	*/
	RemoveUsages *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the resources delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResourcesDeleteParams) WithDefaults() *ResourcesDeleteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the resources delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResourcesDeleteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the resources delete params
func (o *ResourcesDeleteParams) WithTimeout(timeout time.Duration) *ResourcesDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resources delete params
func (o *ResourcesDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resources delete params
func (o *ResourcesDeleteParams) WithContext(ctx context.Context) *ResourcesDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resources delete params
func (o *ResourcesDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resources delete params
func (o *ResourcesDeleteParams) WithHTTPClient(client *http.Client) *ResourcesDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resources delete params
func (o *ResourcesDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the resources delete params
func (o *ResourcesDeleteParams) WithID(id string) *ResourcesDeleteParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the resources delete params
func (o *ResourcesDeleteParams) SetID(id string) {
	o.ID = id
}

// WithRemoveUsages adds the removeUsages to the resources delete params
func (o *ResourcesDeleteParams) WithRemoveUsages(removeUsages *string) *ResourcesDeleteParams {
	o.SetRemoveUsages(removeUsages)
	return o
}

// SetRemoveUsages adds the removeUsages to the resources delete params
func (o *ResourcesDeleteParams) SetRemoveUsages(removeUsages *string) {
	o.RemoveUsages = removeUsages
}

// WriteToRequest writes these params to a swagger request
func (o *ResourcesDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.RemoveUsages != nil {

		// query param removeUsages
		var qrRemoveUsages string

		if o.RemoveUsages != nil {
			qrRemoveUsages = *o.RemoveUsages
		}
		qRemoveUsages := qrRemoveUsages
		if qRemoveUsages != "" {

			if err := r.SetQueryParam("removeUsages", qRemoveUsages); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
