// Code generated by go-swagger; DO NOT EDIT.

package d_e_l_e_t_e

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new d e l e t e API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for d e l e t e API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AccountTypesDelete(params *AccountTypesDeleteParams, opts ...ClientOption) (*AccountTypesDeleteNoContent, error)

	AccountsDeleteAccount(params *AccountsDeleteAccountParams, opts ...ClientOption) (*AccountsDeleteAccountNoContent, error)

	ActionTypesDelete(params *ActionTypesDeleteParams, opts ...ClientOption) (*ActionTypesDeleteNoContent, error)

	ActionsDelete(params *ActionsDeleteParams, opts ...ClientOption) (*ActionsDeleteNoContent, error)

	ActivityCategoriesDelete(params *ActivityCategoriesDeleteParams, opts ...ClientOption) (*ActivityCategoriesDeleteNoContent, error)

	ActivityTypesDelete(params *ActivityTypesDeleteParams, opts ...ClientOption) (*ActivityTypesDeleteNoContent, error)

	AddressTypesDelete(params *AddressTypesDeleteParams, opts ...ClientOption) (*AddressTypesDeleteNoContent, error)

	AddressesDelete(params *AddressesDeleteParams, opts ...ClientOption) (*AddressesDeleteNoContent, error)

	AffiliationTypesDelete(params *AffiliationTypesDeleteParams, opts ...ClientOption) (*AffiliationTypesDeleteNoContent, error)

	AffiliationsDelete(params *AffiliationsDeleteParams, opts ...ClientOption) (*AffiliationsDeleteNoContent, error)

	AliasTypesDelete(params *AliasTypesDeleteParams, opts ...ClientOption) (*AliasTypesDeleteNoContent, error)

	AliasesDelete(params *AliasesDeleteParams, opts ...ClientOption) (*AliasesDeleteNoContent, error)

	AnalyticsReportsDelete(params *AnalyticsReportsDeleteParams, opts ...ClientOption) (*AnalyticsReportsDeleteNoContent, error)

	AppScreenTextsDelete(params *AppScreenTextsDeleteParams, opts ...ClientOption) (*AppScreenTextsDeleteNoContent, error)

	AppealCategoriesDelete(params *AppealCategoriesDeleteParams, opts ...ClientOption) (*AppealCategoriesDeleteNoContent, error)

	ArtistsDelete(params *ArtistsDeleteParams, opts ...ClientOption) (*ArtistsDeleteNoContent, error)

	AssetTypesDelete(params *AssetTypesDeleteParams, opts ...ClientOption) (*AssetTypesDeleteNoContent, error)

	AssetsDelete(params *AssetsDeleteParams, opts ...ClientOption) (*AssetsDeleteNoContent, error)

	AssociationTypesDelete(params *AssociationTypesDeleteParams, opts ...ClientOption) (*AssociationTypesDeleteNoContent, error)

	AssociationsDelete(params *AssociationsDeleteParams, opts ...ClientOption) (*AssociationsDeleteNoContent, error)

	AttributesDelete(params *AttributesDeleteParams, opts ...ClientOption) (*AttributesDeleteNoContent, error)

	AuthenticateDeleteToken(params *AuthenticateDeleteTokenParams, opts ...ClientOption) (*AuthenticateDeleteTokenNoContent, error)

	BatchTypeGroupsDelete(params *BatchTypeGroupsDeleteParams, opts ...ClientOption) (*BatchTypeGroupsDeleteNoContent, error)

	BatchTypesDelete(params *BatchTypesDeleteParams, opts ...ClientOption) (*BatchTypesDeleteNoContent, error)

	BillingSchedulesDelete(params *BillingSchedulesDeleteParams, opts ...ClientOption) (*BillingSchedulesDeleteNoContent, error)

	BillingTypesDelete(params *BillingTypesDeleteParams, opts ...ClientOption) (*BillingTypesDeleteNoContent, error)

	BookingCategoriesDelete(params *BookingCategoriesDeleteParams, opts ...ClientOption) (*BookingCategoriesDeleteNoContent, error)

	BookingTemplatesDelete(params *BookingTemplatesDeleteParams, opts ...ClientOption) (*BookingTemplatesDeleteNoContent, error)

	BookingsDelete(params *BookingsDeleteParams, opts ...ClientOption) (*BookingsDeleteNoContent, error)

	BookingsDeleteDocument(params *BookingsDeleteDocumentParams, opts ...ClientOption) (*BookingsDeleteDocumentNoContent, error)

	BulkCopySetsDelete(params *BulkCopySetsDeleteParams, opts ...ClientOption) (*BulkCopySetsDeleteNoContent, error)

	BulkCopySetsDeleteExclusions(params *BulkCopySetsDeleteExclusionsParams, opts ...ClientOption) (*BulkCopySetsDeleteExclusionsNoContent, error)

	BulkDailyCopyExclusionsDelete(params *BulkDailyCopyExclusionsDeleteParams, opts ...ClientOption) (*BulkDailyCopyExclusionsDeleteNoContent, error)

	BusinessUnitsDelete(params *BusinessUnitsDeleteParams, opts ...ClientOption) (*BusinessUnitsDeleteNoContent, error)

	CampaignDesignationsDelete(params *CampaignDesignationsDeleteParams, opts ...ClientOption) (*CampaignDesignationsDeleteNoContent, error)

	CampaignFundsDelete(params *CampaignFundsDeleteParams, opts ...ClientOption) (*CampaignFundsDeleteNoContent, error)

	CardReaderTypesDelete(params *CardReaderTypesDeleteParams, opts ...ClientOption) (*CardReaderTypesDeleteNoContent, error)

	CartClearCart(params *CartClearCartParams, opts ...ClientOption) (*CartClearCartNoContent, error)

	CartRemoveBooking(params *CartRemoveBookingParams, opts ...ClientOption) (*CartRemoveBookingNoContent, error)

	CartRemoveCartPropertiesCustomData(params *CartRemoveCartPropertiesCustomDataParams, opts ...ClientOption) (*CartRemoveCartPropertiesCustomDataNoContent, error)

	CartRemoveContribution(params *CartRemoveContributionParams, opts ...ClientOption) (*CartRemoveContributionNoContent, error)

	CartRemoveContributionCustomData(params *CartRemoveContributionCustomDataParams, opts ...ClientOption) (*CartRemoveContributionCustomDataNoContent, error)

	CartRemoveFee(params *CartRemoveFeeParams, opts ...ClientOption) (*CartRemoveFeeNoContent, error)

	CartRemoveGiftCertificate(params *CartRemoveGiftCertificateParams, opts ...ClientOption) (*CartRemoveGiftCertificateNoContent, error)

	CartRemoveNFSPackage(params *CartRemoveNFSPackageParams, opts ...ClientOption) (*CartRemoveNFSPackageNoContent, error)

	CartRemoveNFSPackagePerformanceItem(params *CartRemoveNFSPackagePerformanceItemParams, opts ...ClientOption) (*CartRemoveNFSPackagePerformanceItemNoContent, error)

	CartRemoveOnAccount(params *CartRemoveOnAccountParams, opts ...ClientOption) (*CartRemoveOnAccountNoContent, error)

	CartRemovePackageItem(params *CartRemovePackageItemParams, opts ...ClientOption) (*CartRemovePackageItemNoContent, error)

	CartRemovePackagePerformanceItem(params *CartRemovePackagePerformanceItemParams, opts ...ClientOption) (*CartRemovePackagePerformanceItemNoContent, error)

	CartRemovePayment(params *CartRemovePaymentParams, opts ...ClientOption) (*CartRemovePaymentNoContent, error)

	CartRemovePaymentPlans(params *CartRemovePaymentPlansParams, opts ...ClientOption) (*CartRemovePaymentPlansNoContent, error)

	CartRemoveSubLineItem(params *CartRemoveSubLineItemParams, opts ...ClientOption) (*CartRemoveSubLineItemNoContent, error)

	CartRemoveSuperPackageItem(params *CartRemoveSuperPackageItemParams, opts ...ClientOption) (*CartRemoveSuperPackageItemNoContent, error)

	CartRemoveSuperPackagePerformanceItem(params *CartRemoveSuperPackagePerformanceItemParams, opts ...ClientOption) (*CartRemoveSuperPackagePerformanceItemNoContent, error)

	CartRemoveTickets(params *CartRemoveTicketsParams, opts ...ClientOption) (*CartRemoveTicketsNoContent, error)

	CartUnapplyGiftCertificate(params *CartUnapplyGiftCertificateParams, opts ...ClientOption) (*CartUnapplyGiftCertificateNoContent, error)

	ColorsDelete(params *ColorsDeleteParams, opts ...ClientOption) (*ColorsDeleteNoContent, error)

	ComposersDelete(params *ComposersDeleteParams, opts ...ClientOption) (*ComposersDeleteNoContent, error)

	ConstituenciesDelete(params *ConstituenciesDeleteParams, opts ...ClientOption) (*ConstituenciesDeleteNoContent, error)

	ConstituencyTypesDelete(params *ConstituencyTypesDeleteParams, opts ...ClientOption) (*ConstituencyTypesDeleteNoContent, error)

	ConstituentDocumentsDelete(params *ConstituentDocumentsDeleteParams, opts ...ClientOption) (*ConstituentDocumentsDeleteNoContent, error)

	ConstituentGroupsDelete(params *ConstituentGroupsDeleteParams, opts ...ClientOption) (*ConstituentGroupsDeleteNoContent, error)

	ConstituentInactivesDelete(params *ConstituentInactivesDeleteParams, opts ...ClientOption) (*ConstituentInactivesDeleteNoContent, error)

	ConstituentProtectionTypesDelete(params *ConstituentProtectionTypesDeleteParams, opts ...ClientOption) (*ConstituentProtectionTypesDeleteNoContent, error)

	ConstituentTypeAffiliatesDelete(params *ConstituentTypeAffiliatesDeleteParams, opts ...ClientOption) (*ConstituentTypeAffiliatesDeleteNoContent, error)

	ConstituentTypesDelete(params *ConstituentTypesDeleteParams, opts ...ClientOption) (*ConstituentTypesDeleteNoContent, error)

	ContactPermissionCategoriesDelete(params *ContactPermissionCategoriesDeleteParams, opts ...ClientOption) (*ContactPermissionCategoriesDeleteNoContent, error)

	ContactPermissionTypesDelete(params *ContactPermissionTypesDeleteParams, opts ...ClientOption) (*ContactPermissionTypesDeleteNoContent, error)

	ContactPermissionsDelete(params *ContactPermissionsDeleteParams, opts ...ClientOption) (*ContactPermissionsDeleteNoContent, error)

	ContactPointCategoriesDelete(params *ContactPointCategoriesDeleteParams, opts ...ClientOption) (*ContactPointCategoriesDeleteNoContent, error)

	ContactPointCategoryPurposesDelete(params *ContactPointCategoryPurposesDeleteParams, opts ...ClientOption) (*ContactPointCategoryPurposesDeleteNoContent, error)

	ContactPointPurposeCategoriesDelete(params *ContactPointPurposeCategoriesDeleteParams, opts ...ClientOption) (*ContactPointPurposeCategoriesDeleteNoContent, error)

	ContactPointPurposeMapsDelete(params *ContactPointPurposeMapsDeleteParams, opts ...ClientOption) (*ContactPointPurposeMapsDeleteNoContent, error)

	ContactPointPurposesDelete(params *ContactPointPurposesDeleteParams, opts ...ClientOption) (*ContactPointPurposesDeleteNoContent, error)

	ContactTypesDelete(params *ContactTypesDeleteParams, opts ...ClientOption) (*ContactTypesDeleteNoContent, error)

	ContributionDesignationsDelete(params *ContributionDesignationsDeleteParams, opts ...ClientOption) (*ContributionDesignationsDeleteNoContent, error)

	ContributionImportSetsDelete(params *ContributionImportSetsDeleteParams, opts ...ClientOption) (*ContributionImportSetsDeleteNoContent, error)

	ControlGroupUserGroupsDelete(params *ControlGroupUserGroupsDeleteParams, opts ...ClientOption) (*ControlGroupUserGroupsDeleteNoContent, error)

	ControlGroupsDelete(params *ControlGroupsDeleteParams, opts ...ClientOption) (*ControlGroupsDeleteNoContent, error)

	CountriesDelete(params *CountriesDeleteParams, opts ...ClientOption) (*CountriesDeleteNoContent, error)

	CrediteeTypesDelete(params *CrediteeTypesDeleteParams, opts ...ClientOption) (*CrediteeTypesDeleteNoContent, error)

	CurrencyTypesDelete(params *CurrencyTypesDeleteParams, opts ...ClientOption) (*CurrencyTypesDeleteNoContent, error)

	CustomDefaultCategoriesDelete(params *CustomDefaultCategoriesDeleteParams, opts ...ClientOption) (*CustomDefaultCategoriesDeleteNoContent, error)

	CustomDefaultsDelete(params *CustomDefaultsDeleteParams, opts ...ClientOption) (*CustomDefaultsDeleteNoContent, error)

	CustomDelete(params *CustomDeleteParams, opts ...ClientOption) (*CustomDeleteNoContent, error)

	DeliveryMethodsDelete(params *DeliveryMethodsDeleteParams, opts ...ClientOption) (*DeliveryMethodsDeleteNoContent, error)

	DesignationCodesDelete(params *DesignationCodesDeleteParams, opts ...ClientOption) (*DesignationCodesDeleteNoContent, error)

	DiagnosticsDelete(params *DiagnosticsDeleteParams, opts ...ClientOption) (*DiagnosticsDeleteNoContent, error)

	DirectDebitAccountTypesDelete(params *DirectDebitAccountTypesDeleteParams, opts ...ClientOption) (*DirectDebitAccountTypesDeleteNoContent, error)

	DiscountTypesDelete(params *DiscountTypesDeleteParams, opts ...ClientOption) (*DiscountTypesDeleteNoContent, error)

	DocumentCategoriesDelete(params *DocumentCategoriesDeleteParams, opts ...ClientOption) (*DocumentCategoriesDeleteNoContent, error)

	DocumentsDelete(params *DocumentsDeleteParams, opts ...ClientOption) (*DocumentsDeleteNoContent, error)

	DonationLevelsDelete(params *DonationLevelsDeleteParams, opts ...ClientOption) (*DonationLevelsDeleteNoContent, error)

	EMVDeleteLane(params *EMVDeleteLaneParams, opts ...ClientOption) (*EMVDeleteLaneNoContent, error)

	ElectronicAddressTypesDelete(params *ElectronicAddressTypesDeleteParams, opts ...ClientOption) (*ElectronicAddressTypesDeleteNoContent, error)

	ElectronicAddressesDelete(params *ElectronicAddressesDeleteParams, opts ...ClientOption) (*ElectronicAddressesDeleteNoContent, error)

	EmailProfilesDelete(params *EmailProfilesDeleteParams, opts ...ClientOption) (*EmailProfilesDeleteNoContent, error)

	EmarketIndicatorsDelete(params *EmarketIndicatorsDeleteParams, opts ...ClientOption) (*EmarketIndicatorsDeleteNoContent, error)

	ErasDelete(params *ErasDeleteParams, opts ...ClientOption) (*ErasDeleteNoContent, error)

	FacilitiesDelete(params *FacilitiesDeleteParams, opts ...ClientOption) (*FacilitiesDeleteNoContent, error)

	GendersDelete(params *GendersDeleteParams, opts ...ClientOption) (*GendersDeleteNoContent, error)

	GiftAidContactMethodsDelete(params *GiftAidContactMethodsDeleteParams, opts ...ClientOption) (*GiftAidContactMethodsDeleteNoContent, error)

	GiftAidDeclarationsDelete(params *GiftAidDeclarationsDeleteParams, opts ...ClientOption) (*GiftAidDeclarationsDeleteNoContent, error)

	GiftAidDocumentStatusesDelete(params *GiftAidDocumentStatusesDeleteParams, opts ...ClientOption) (*GiftAidDocumentStatusesDeleteNoContent, error)

	GiftAidIneligibleReasonsDelete(params *GiftAidIneligibleReasonsDeleteParams, opts ...ClientOption) (*GiftAidIneligibleReasonsDeleteNoContent, error)

	GiftAidRatesDelete(params *GiftAidRatesDeleteParams, opts ...ClientOption) (*GiftAidRatesDeleteNoContent, error)

	GiftAidStatusesDelete(params *GiftAidStatusesDeleteParams, opts ...ClientOption) (*GiftAidStatusesDeleteNoContent, error)

	GiftAidTypesDelete(params *GiftAidTypesDeleteParams, opts ...ClientOption) (*GiftAidTypesDeleteNoContent, error)

	HoldCodeCategoriesDelete(params *HoldCodeCategoriesDeleteParams, opts ...ClientOption) (*HoldCodeCategoriesDeleteNoContent, error)

	HoldCodeUserGroupsDelete(params *HoldCodeUserGroupsDeleteParams, opts ...ClientOption) (*HoldCodeUserGroupsDeleteNoContent, error)

	HoldCodesDelete(params *HoldCodesDeleteParams, opts ...ClientOption) (*HoldCodesDeleteNoContent, error)

	InactiveReasonsDelete(params *InactiveReasonsDeleteParams, opts ...ClientOption) (*InactiveReasonsDeleteNoContent, error)

	IntegrationDefaultsDelete(params *IntegrationDefaultsDeleteParams, opts ...ClientOption) (*IntegrationDefaultsDeleteNoContent, error)

	IntegrationsDelete(params *IntegrationsDeleteParams, opts ...ClientOption) (*IntegrationsDeleteNoContent, error)

	InterestCategoriesDelete(params *InterestCategoriesDeleteParams, opts ...ClientOption) (*InterestCategoriesDeleteNoContent, error)

	InterestTypesDelete(params *InterestTypesDeleteParams, opts ...ClientOption) (*InterestTypesDeleteNoContent, error)

	InterestsDelete(params *InterestsDeleteParams, opts ...ClientOption) (*InterestsDeleteNoContent, error)

	InventoryContactPermissionTypesDelete(params *InventoryContactPermissionTypesDeleteParams, opts ...ClientOption) (*InventoryContactPermissionTypesDeleteNoContent, error)

	InventoryWebContentsDelete(params *InventoryWebContentsDeleteParams, opts ...ClientOption) (*InventoryWebContentsDeleteNoContent, error)

	IssuesDelete(params *IssuesDeleteParams, opts ...ClientOption) (*IssuesDeleteNoContent, error)

	KeywordCategoriesDelete(params *KeywordCategoriesDeleteParams, opts ...ClientOption) (*KeywordCategoriesDeleteNoContent, error)

	KeywordsDelete(params *KeywordsDeleteParams, opts ...ClientOption) (*KeywordsDeleteNoContent, error)

	LanguagesDelete(params *LanguagesDeleteParams, opts ...ClientOption) (*LanguagesDeleteNoContent, error)

	ListCategoriesDelete(params *ListCategoriesDeleteParams, opts ...ClientOption) (*ListCategoriesDeleteNoContent, error)

	ListsDelete(params *ListsDeleteParams, opts ...ClientOption) (*ListsDeleteNoContent, error)

	LoginTypesDelete(params *LoginTypesDeleteParams, opts ...ClientOption) (*LoginTypesDeleteNoContent, error)

	MachineSettingsDelete(params *MachineSettingsDeleteParams, opts ...ClientOption) (*MachineSettingsDeleteNoContent, error)

	MailIndicatorsDelete(params *MailIndicatorsDeleteParams, opts ...ClientOption) (*MailIndicatorsDeleteNoContent, error)

	MediaTypesDelete(params *MediaTypesDeleteParams, opts ...ClientOption) (*MediaTypesDeleteNoContent, error)

	MembershipLevelCategoriesDelete(params *MembershipLevelCategoriesDeleteParams, opts ...ClientOption) (*MembershipLevelCategoriesDeleteNoContent, error)

	ModeOfSaleCategoriesDelete(params *ModeOfSaleCategoriesDeleteParams, opts ...ClientOption) (*ModeOfSaleCategoriesDeleteNoContent, error)

	ModeOfSaleOffersDelete(params *ModeOfSaleOffersDeleteParams, opts ...ClientOption) (*ModeOfSaleOffersDeleteNoContent, error)

	ModeOfSalePriceTypesDelete(params *ModeOfSalePriceTypesDeleteParams, opts ...ClientOption) (*ModeOfSalePriceTypesDeleteNoContent, error)

	ModeOfSaleSurveyQuestionsDelete(params *ModeOfSaleSurveyQuestionsDeleteParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsDeleteNoContent, error)

	ModeOfSaleUserGroupsDelete(params *ModeOfSaleUserGroupsDeleteParams, opts ...ClientOption) (*ModeOfSaleUserGroupsDeleteNoContent, error)

	ModesOfSaleDelete(params *ModesOfSaleDeleteParams, opts ...ClientOption) (*ModesOfSaleDeleteNoContent, error)

	NScanAccessAreasDelete(params *NScanAccessAreasDeleteParams, opts ...ClientOption) (*NScanAccessAreasDeleteNoContent, error)

	NameStatusesDelete(params *NameStatusesDeleteParams, opts ...ClientOption) (*NameStatusesDeleteNoContent, error)

	ObjectPermissionsDelete(params *ObjectPermissionsDeleteParams, opts ...ClientOption) (*ObjectPermissionsDeleteNoContent, error)

	OrderCategoriesDelete(params *OrderCategoriesDeleteParams, opts ...ClientOption) (*OrderCategoriesDeleteNoContent, error)

	OrganizationsDelete(params *OrganizationsDeleteParams, opts ...ClientOption) (*OrganizationsDeleteNoContent, error)

	OriginalSourcesDelete(params *OriginalSourcesDeleteParams, opts ...ClientOption) (*OriginalSourcesDeleteNoContent, error)

	OriginsDelete(params *OriginsDeleteParams, opts ...ClientOption) (*OriginsDeleteNoContent, error)

	OutputSetsDelete(params *OutputSetsDeleteParams, opts ...ClientOption) (*OutputSetsDeleteNoContent, error)

	PackagePriceTypesDelete(params *PackagePriceTypesDeleteParams, opts ...ClientOption) (*PackagePriceTypesDeleteNoContent, error)

	PackageTypesDelete(params *PackageTypesDeleteParams, opts ...ClientOption) (*PackageTypesDeleteNoContent, error)

	PackageWebContentsDelete(params *PackageWebContentsDeleteParams, opts ...ClientOption) (*PackageWebContentsDeleteNoContent, error)

	PaymentGatewayActivitiesDelete(params *PaymentGatewayActivitiesDeleteParams, opts ...ClientOption) (*PaymentGatewayActivitiesDeleteNoContent, error)

	PaymentGatewayNotificationsDeleteNotificationEvent(params *PaymentGatewayNotificationsDeleteNotificationEventParams, opts ...ClientOption) (*PaymentGatewayNotificationsDeleteNotificationEventNoContent, error)

	PaymentGatewayTransactionTypesDelete(params *PaymentGatewayTransactionTypesDeleteParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesDeleteNoContent, error)

	PaymentMethodGroupsDelete(params *PaymentMethodGroupsDeleteParams, opts ...ClientOption) (*PaymentMethodGroupsDeleteNoContent, error)

	PaymentMethodUserGroupsDelete(params *PaymentMethodUserGroupsDeleteParams, opts ...ClientOption) (*PaymentMethodUserGroupsDeleteNoContent, error)

	PaymentMethodsDelete(params *PaymentMethodsDeleteParams, opts ...ClientOption) (*PaymentMethodsDeleteNoContent, error)

	PaymentSignaturesDelete(params *PaymentSignaturesDeleteParams, opts ...ClientOption) (*PaymentSignaturesDeleteNoContent, error)

	PaymentTypesDelete(params *PaymentTypesDeleteParams, opts ...ClientOption) (*PaymentTypesDeleteNoContent, error)

	PerformanceGroupsDelete(params *PerformanceGroupsDeleteParams, opts ...ClientOption) (*PerformanceGroupsDeleteNoContent, error)

	PerformancePackageModeOfSalesDelete(params *PerformancePackageModeOfSalesDeleteParams, opts ...ClientOption) (*PerformancePackageModeOfSalesDeleteNoContent, error)

	PerformancePriceLayersDelete(params *PerformancePriceLayersDeleteParams, opts ...ClientOption) (*PerformancePriceLayersDeleteNoContent, error)

	PerformancePriceLayersDeleteLayers(params *PerformancePriceLayersDeleteLayersParams, opts ...ClientOption) (*PerformancePriceLayersDeleteLayersNoContent, error)

	PerformancePriceTypesDelete(params *PerformancePriceTypesDeleteParams, opts ...ClientOption) (*PerformancePriceTypesDeleteNoContent, error)

	PerformancePriceTypesDeleteAll(params *PerformancePriceTypesDeleteAllParams, opts ...ClientOption) (*PerformancePriceTypesDeleteAllNoContent, error)

	PerformancePricesDelete(params *PerformancePricesDeleteParams, opts ...ClientOption) (*PerformancePricesDeleteNoContent, error)

	PerformanceStatusesDelete(params *PerformanceStatusesDeleteParams, opts ...ClientOption) (*PerformanceStatusesDeleteNoContent, error)

	PerformanceTypesDelete(params *PerformanceTypesDeleteParams, opts ...ClientOption) (*PerformanceTypesDeleteNoContent, error)

	PerformancesDeleteSingleHold(params *PerformancesDeleteSingleHoldParams, opts ...ClientOption) (*PerformancesDeleteSingleHoldNoContent, error)

	PhilanthropyTypesDelete(params *PhilanthropyTypesDeleteParams, opts ...ClientOption) (*PhilanthropyTypesDeleteNoContent, error)

	PhilanthropyDelete(params *PhilanthropyDeleteParams, opts ...ClientOption) (*PhilanthropyDeleteNoContent, error)

	PhoneIndicatorsDelete(params *PhoneIndicatorsDeleteParams, opts ...ClientOption) (*PhoneIndicatorsDeleteNoContent, error)

	PhoneTypesDelete(params *PhoneTypesDeleteParams, opts ...ClientOption) (*PhoneTypesDeleteNoContent, error)

	PhonesDelete(params *PhonesDeleteParams, opts ...ClientOption) (*PhonesDeleteNoContent, error)

	PlanPrioritiesDelete(params *PlanPrioritiesDeleteParams, opts ...ClientOption) (*PlanPrioritiesDeleteNoContent, error)

	PlanSourcesDelete(params *PlanSourcesDeleteParams, opts ...ClientOption) (*PlanSourcesDeleteNoContent, error)

	PlanStatusesDelete(params *PlanStatusesDeleteParams, opts ...ClientOption) (*PlanStatusesDeleteNoContent, error)

	PlanTypesDelete(params *PlanTypesDeleteParams, opts ...ClientOption) (*PlanTypesDeleteNoContent, error)

	PlanWorkersDelete(params *PlanWorkersDeleteParams, opts ...ClientOption) (*PlanWorkersDeleteNoContent, error)

	PlansDelete(params *PlansDeleteParams, opts ...ClientOption) (*PlansDeleteNoContent, error)

	PortfolioCustomElementsDelete(params *PortfolioCustomElementsDeleteParams, opts ...ClientOption) (*PortfolioCustomElementsDeleteNoContent, error)

	PrefixesDelete(params *PrefixesDeleteParams, opts ...ClientOption) (*PrefixesDeleteNoContent, error)

	PremieresDelete(params *PremieresDeleteParams, opts ...ClientOption) (*PremieresDeleteNoContent, error)

	PriceCategoriesDelete(params *PriceCategoriesDeleteParams, opts ...ClientOption) (*PriceCategoriesDeleteNoContent, error)

	PriceEventsDelete(params *PriceEventsDeleteParams, opts ...ClientOption) (*PriceEventsDeleteNoContent, error)

	PriceLayerTypesDelete(params *PriceLayerTypesDeleteParams, opts ...ClientOption) (*PriceLayerTypesDeleteNoContent, error)

	PriceTemplatesDelete(params *PriceTemplatesDeleteParams, opts ...ClientOption) (*PriceTemplatesDeleteNoContent, error)

	PriceTypeCategoriesDelete(params *PriceTypeCategoriesDeleteParams, opts ...ClientOption) (*PriceTypeCategoriesDeleteNoContent, error)

	PriceTypeGroupsDelete(params *PriceTypeGroupsDeleteParams, opts ...ClientOption) (*PriceTypeGroupsDeleteNoContent, error)

	PriceTypeReasonsDelete(params *PriceTypeReasonsDeleteParams, opts ...ClientOption) (*PriceTypeReasonsDeleteNoContent, error)

	PriceTypeUserGroupsDelete(params *PriceTypeUserGroupsDeleteParams, opts ...ClientOption) (*PriceTypeUserGroupsDeleteNoContent, error)

	PriceTypesDelete(params *PriceTypesDeleteParams, opts ...ClientOption) (*PriceTypesDeleteNoContent, error)

	PricingRuleCategoriesDelete(params *PricingRuleCategoriesDeleteParams, opts ...ClientOption) (*PricingRuleCategoriesDeleteNoContent, error)

	PricingRuleMessageTypesDelete(params *PricingRuleMessageTypesDeleteParams, opts ...ClientOption) (*PricingRuleMessageTypesDeleteNoContent, error)

	PricingRuleSetsDelete(params *PricingRuleSetsDeleteParams, opts ...ClientOption) (*PricingRuleSetsDeleteNoContent, error)

	PricingRulesDelete(params *PricingRulesDeleteParams, opts ...ClientOption) (*PricingRulesDeleteNoContent, error)

	PrintersDelete(params *PrintersDeleteParams, opts ...ClientOption) (*PrintersDeleteNoContent, error)

	ProductionSeasonMembershipOrganizationsDelete(params *ProductionSeasonMembershipOrganizationsDeleteParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsDeleteNoContent, error)

	ProgramListingsDelete(params *ProgramListingsDeleteParams, opts ...ClientOption) (*ProgramListingsDeleteNoContent, error)

	ProgramsDelete(params *ProgramsDeleteParams, opts ...ClientOption) (*ProgramsDeleteNoContent, error)

	PronounsDelete(params *PronounsDeleteParams, opts ...ClientOption) (*PronounsDeleteNoContent, error)

	QualificationCategoriesDelete(params *QualificationCategoriesDeleteParams, opts ...ClientOption) (*QualificationCategoriesDeleteNoContent, error)

	QualificationsDelete(params *QualificationsDeleteParams, opts ...ClientOption) (*QualificationsDeleteNoContent, error)

	QueryElementFiltersDelete(params *QueryElementFiltersDeleteParams, opts ...ClientOption) (*QueryElementFiltersDeleteNoContent, error)

	QueryElementGroupsDelete(params *QueryElementGroupsDeleteParams, opts ...ClientOption) (*QueryElementGroupsDeleteNoContent, error)

	QueryElementsDelete(params *QueryElementsDeleteParams, opts ...ClientOption) (*QueryElementsDeleteNoContent, error)

	RankTypesDelete(params *RankTypesDeleteParams, opts ...ClientOption) (*RankTypesDeleteNoContent, error)

	RankingsDelete(params *RankingsDeleteParams, opts ...ClientOption) (*RankingsDeleteNoContent, error)

	ReceiptSettingsDelete(params *ReceiptSettingsDeleteParams, opts ...ClientOption) (*ReceiptSettingsDeleteNoContent, error)

	ReferenceTableUserGroupsDelete(params *ReferenceTableUserGroupsDeleteParams, opts ...ClientOption) (*ReferenceTableUserGroupsDeleteNoContent, error)

	RelationshipCategoriesDelete(params *RelationshipCategoriesDeleteParams, opts ...ClientOption) (*RelationshipCategoriesDeleteNoContent, error)

	ReportRequestsDeleteAllExpired(params *ReportRequestsDeleteAllExpiredParams, opts ...ClientOption) (*ReportRequestsDeleteAllExpiredNoContent, error)

	ReportUserGroupsDelete(params *ReportUserGroupsDeleteParams, opts ...ClientOption) (*ReportUserGroupsDeleteNoContent, error)

	ResearchTypesDelete(params *ResearchTypesDeleteParams, opts ...ClientOption) (*ResearchTypesDeleteNoContent, error)

	ResearchDelete(params *ResearchDeleteParams, opts ...ClientOption) (*ResearchDeleteNoContent, error)

	ResourceCategoriesDelete(params *ResourceCategoriesDeleteParams, opts ...ClientOption) (*ResourceCategoriesDeleteNoContent, error)

	ResourceSchedulesDelete(params *ResourceSchedulesDeleteParams, opts ...ClientOption) (*ResourceSchedulesDeleteNoContent, error)

	ResourceTypesDelete(params *ResourceTypesDeleteParams, opts ...ClientOption) (*ResourceTypesDeleteNoContent, error)

	ResourcesDelete(params *ResourcesDeleteParams, opts ...ClientOption) (*ResourcesDeleteNoContent, error)

	SalesChannelsDelete(params *SalesChannelsDeleteParams, opts ...ClientOption) (*SalesChannelsDeleteNoContent, error)

	SalesLayoutButtonTypesDelete(params *SalesLayoutButtonTypesDeleteParams, opts ...ClientOption) (*SalesLayoutButtonTypesDeleteNoContent, error)

	SalesLayoutsDelete(params *SalesLayoutsDeleteParams, opts ...ClientOption) (*SalesLayoutsDeleteNoContent, error)

	SalutationTypesDelete(params *SalutationTypesDeleteParams, opts ...ClientOption) (*SalutationTypesDeleteNoContent, error)

	SalutationsDelete(params *SalutationsDeleteParams, opts ...ClientOption) (*SalutationsDeleteNoContent, error)

	SchedulePatternTypesDelete(params *SchedulePatternTypesDeleteParams, opts ...ClientOption) (*SchedulePatternTypesDeleteNoContent, error)

	ScheduleTypesDelete(params *ScheduleTypesDeleteParams, opts ...ClientOption) (*ScheduleTypesDeleteNoContent, error)

	SeasonTypesDelete(params *SeasonTypesDeleteParams, opts ...ClientOption) (*SeasonTypesDeleteNoContent, error)

	SeasonsDelete(params *SeasonsDeleteParams, opts ...ClientOption) (*SeasonsDeleteNoContent, error)

	SeatCodesDelete(params *SeatCodesDeleteParams, opts ...ClientOption) (*SeatCodesDeleteNoContent, error)

	SeatStatusesDelete(params *SeatStatusesDeleteParams, opts ...ClientOption) (*SeatStatusesDeleteNoContent, error)

	SectionsDelete(params *SectionsDeleteParams, opts ...ClientOption) (*SectionsDeleteNoContent, error)

	ServiceResourceUserGroupsDelete(params *ServiceResourceUserGroupsDeleteParams, opts ...ClientOption) (*ServiceResourceUserGroupsDeleteNoContent, error)

	SessionDeleteVariable(params *SessionDeleteVariableParams, opts ...ClientOption) (*SessionDeleteVariableNoContent, error)

	SourceGroupsDelete(params *SourceGroupsDeleteParams, opts ...ClientOption) (*SourceGroupsDeleteNoContent, error)

	SpecialActivitiesDelete(params *SpecialActivitiesDeleteParams, opts ...ClientOption) (*SpecialActivitiesDeleteNoContent, error)

	SpecialActivityStatusesDelete(params *SpecialActivityStatusesDeleteParams, opts ...ClientOption) (*SpecialActivityStatusesDeleteNoContent, error)

	SpecialActivityTypesDelete(params *SpecialActivityTypesDeleteParams, opts ...ClientOption) (*SpecialActivityTypesDeleteNoContent, error)

	StatesDelete(params *StatesDeleteParams, opts ...ClientOption) (*StatesDeleteNoContent, error)

	StepTypesDelete(params *StepTypesDeleteParams, opts ...ClientOption) (*StepTypesDeleteNoContent, error)

	StepsDelete(params *StepsDeleteParams, opts ...ClientOption) (*StepsDeleteNoContent, error)

	SubLineItemStatusesDelete(params *SubLineItemStatusesDeleteParams, opts ...ClientOption) (*SubLineItemStatusesDeleteNoContent, error)

	SuffixesDelete(params *SuffixesDeleteParams, opts ...ClientOption) (*SuffixesDeleteNoContent, error)

	SurveyQuestionsDelete(params *SurveyQuestionsDeleteParams, opts ...ClientOption) (*SurveyQuestionsDeleteNoContent, error)

	SurveyResponsesDelete(params *SurveyResponsesDeleteParams, opts ...ClientOption) (*SurveyResponsesDeleteNoContent, error)

	TemplateCategoriesDelete(params *TemplateCategoriesDeleteParams, opts ...ClientOption) (*TemplateCategoriesDeleteNoContent, error)

	TemplatePriceTypesDelete(params *TemplatePriceTypesDeleteParams, opts ...ClientOption) (*TemplatePriceTypesDeleteNoContent, error)

	TemplatesDelete(params *TemplatesDeleteParams, opts ...ClientOption) (*TemplatesDeleteNoContent, error)

	TheatersDelete(params *TheatersDeleteParams, opts ...ClientOption) (*TheatersDeleteNoContent, error)

	TimeSlotsDelete(params *TimeSlotsDeleteParams, opts ...ClientOption) (*TimeSlotsDeleteNoContent, error)

	TriPOSCloudConfigurationsDelete(params *TriPOSCloudConfigurationsDeleteParams, opts ...ClientOption) (*TriPOSCloudConfigurationsDeleteNoContent, error)

	UpgradeCategoriesDelete(params *UpgradeCategoriesDeleteParams, opts ...ClientOption) (*UpgradeCategoriesDeleteNoContent, error)

	WebContentTypesDelete(params *WebContentTypesDeleteParams, opts ...ClientOption) (*WebContentTypesDeleteNoContent, error)

	WebLoginsDelete(params *WebLoginsDeleteParams, opts ...ClientOption) (*WebLoginsDeleteNoContent, error)

	WorkerQualificationsDelete(params *WorkerQualificationsDeleteParams, opts ...ClientOption) (*WorkerQualificationsDeleteNoContent, error)

	WorkerRolesDelete(params *WorkerRolesDeleteParams, opts ...ClientOption) (*WorkerRolesDeleteNoContent, error)

	WorkerTypesDelete(params *WorkerTypesDeleteParams, opts ...ClientOption) (*WorkerTypesDeleteNoContent, error)

	WorkersDelete(params *WorkersDeleteParams, opts ...ClientOption) (*WorkersDeleteNoContent, error)

	ZoneGroupsDelete(params *ZoneGroupsDeleteParams, opts ...ClientOption) (*ZoneGroupsDeleteNoContent, error)

	ZoneMapsDelete(params *ZoneMapsDeleteParams, opts ...ClientOption) (*ZoneMapsDeleteNoContent, error)

	ZonesDelete(params *ZonesDeleteParams, opts ...ClientOption) (*ZonesDeleteNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccountTypesDelete deletes an existing account type
*/
func (a *Client) AccountTypesDelete(params *AccountTypesDeleteParams, opts ...ClientOption) (*AccountTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/AccountTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountsDeleteAccount removes an account
*/
func (a *Client) AccountsDeleteAccount(params *AccountsDeleteAccountParams, opts ...ClientOption) (*AccountsDeleteAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsDeleteAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts_DeleteAccount",
		Method:             "DELETE",
		PathPattern:        "/CRM/Accounts/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsDeleteAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsDeleteAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_DeleteAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActionTypesDelete deletes an existing action type
*/
func (a *Client) ActionTypesDelete(params *ActionTypesDeleteParams, opts ...ClientOption) (*ActionTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ActionTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActionTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActionsDelete deletes an issue action
*/
func (a *Client) ActionsDelete(params *ActionsDeleteParams, opts ...ClientOption) (*ActionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Actions_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Actions/{actionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Actions_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActivityCategoriesDelete deletes an existing activity category
*/
func (a *Client) ActivityCategoriesDelete(params *ActivityCategoriesDeleteParams, opts ...ClientOption) (*ActivityCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ActivityCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActivityTypesDelete deletes an existing activity type
*/
func (a *Client) ActivityTypesDelete(params *ActivityTypesDeleteParams, opts ...ClientOption) (*ActivityTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ActivityTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressTypesDelete deletes an existing address type
*/
func (a *Client) AddressTypesDelete(params *AddressTypesDeleteParams, opts ...ClientOption) (*AddressTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddressTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/AddressTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddressTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressesDelete deletes an address along with all the phones attached to the address primary address for a constituent cannot be deleted
*/
func (a *Client) AddressesDelete(params *AddressesDeleteParams, opts ...ClientOption) (*AddressesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Addresses_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Addresses/{addressId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Addresses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AffiliationTypesDelete deletes an existing affiliation type
*/
func (a *Client) AffiliationTypesDelete(params *AffiliationTypesDeleteParams, opts ...ClientOption) (*AffiliationTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AffiliationTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/AffiliationTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AffiliationTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AffiliationsDelete deletes an affiliation
*/
func (a *Client) AffiliationsDelete(params *AffiliationsDeleteParams, opts ...ClientOption) (*AffiliationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAffiliationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Affiliations_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Affiliations/{affiliationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AffiliationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AffiliationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Affiliations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AliasTypesDelete deletes an existing alias type
*/
func (a *Client) AliasTypesDelete(params *AliasTypesDeleteParams, opts ...ClientOption) (*AliasTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AliasTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/AliasTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AliasTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AliasesDelete deletes an alias
*/
func (a *Client) AliasesDelete(params *AliasesDeleteParams, opts ...ClientOption) (*AliasesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliasesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Aliases_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Aliases/{aliasId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliasesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliasesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Aliases_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AnalyticsReportsDelete deletes s s r s reports for display in analytics
*/
func (a *Client) AnalyticsReportsDelete(params *AnalyticsReportsDeleteParams, opts ...ClientOption) (*AnalyticsReportsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyticsReportsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnalyticsReports_Delete",
		Method:             "DELETE",
		PathPattern:        "/Reporting/AnalyticsReports/{analyticsReportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnalyticsReportsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyticsReportsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AnalyticsReports_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppScreenTextsDelete deletes an existing app screen text
*/
func (a *Client) AppScreenTextsDelete(params *AppScreenTextsDeleteParams, opts ...ClientOption) (*AppScreenTextsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppScreenTextsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppScreenTexts_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/AppScreenTexts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppScreenTextsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppScreenTextsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AppScreenTexts_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppealCategoriesDelete deletes an existing appeal category
*/
func (a *Client) AppealCategoriesDelete(params *AppealCategoriesDeleteParams, opts ...ClientOption) (*AppealCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppealCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppealCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/AppealCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppealCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppealCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AppealCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ArtistsDelete deletes an existing artist
*/
func (a *Client) ArtistsDelete(params *ArtistsDeleteParams, opts ...ClientOption) (*ArtistsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtistsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Artists_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/Artists/{artistId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArtistsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArtistsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Artists_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssetTypesDelete deletes an existing asset type
*/
func (a *Client) AssetTypesDelete(params *AssetTypesDeleteParams, opts ...ClientOption) (*AssetTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/AssetTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AssetTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssetsDelete deletes an existing asset
*/
func (a *Client) AssetsDelete(params *AssetsDeleteParams, opts ...ClientOption) (*AssetsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Assets_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Assets/{assetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Assets_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssociationTypesDelete deletes an existing association type
*/
func (a *Client) AssociationTypesDelete(params *AssociationTypesDeleteParams, opts ...ClientOption) (*AssociationTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssociationTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/AssociationTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AssociationTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssociationsDelete deletes a association
*/
func (a *Client) AssociationsDelete(params *AssociationsDeleteParams, opts ...ClientOption) (*AssociationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Associations_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Associations/{associationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Associations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AttributesDelete deletes an attribute
*/
func (a *Client) AttributesDelete(params *AttributesDeleteParams, opts ...ClientOption) (*AttributesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttributesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Attributes_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Attributes/{attributeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttributesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttributesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Attributes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AuthenticateDeleteToken deletes all expired tokens created for the given parameters
*/
func (a *Client) AuthenticateDeleteToken(params *AuthenticateDeleteTokenParams, opts ...ClientOption) (*AuthenticateDeleteTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateDeleteTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Authenticate_DeleteToken",
		Method:             "DELETE",
		PathPattern:        "/Security/Authenticate/Token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateDeleteTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateDeleteTokenNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Authenticate_DeleteToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchTypeGroupsDelete deletes an existing batch type group
*/
func (a *Client) BatchTypeGroupsDelete(params *BatchTypeGroupsDeleteParams, opts ...ClientOption) (*BatchTypeGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypeGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypeGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/BatchTypeGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypeGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypeGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchTypeGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BatchTypesDelete deletes an existing batch type
*/
func (a *Client) BatchTypesDelete(params *BatchTypesDeleteParams, opts ...ClientOption) (*BatchTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/BatchTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingSchedulesDelete deletes an existing billing schedule
*/
func (a *Client) BillingSchedulesDelete(params *BillingSchedulesDeleteParams, opts ...ClientOption) (*BillingSchedulesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSchedulesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingSchedules_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/BillingSchedules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSchedulesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingSchedulesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingSchedules_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingTypesDelete deletes an existing billing type
*/
func (a *Client) BillingTypesDelete(params *BillingTypesDeleteParams, opts ...ClientOption) (*BillingTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BillingTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/BillingTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingCategoriesDelete deletes an existing booking category
*/
func (a *Client) BookingCategoriesDelete(params *BookingCategoriesDeleteParams, opts ...ClientOption) (*BookingCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/BookingCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookingCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingTemplatesDelete deletes a booking template by ID
*/
func (a *Client) BookingTemplatesDelete(params *BookingTemplatesDeleteParams, opts ...ClientOption) (*BookingTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingTemplatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BookingTemplates_Delete",
		Method:             "DELETE",
		PathPattern:        "/EventsManagement/BookingTemplates/{bookingTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingTemplatesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingTemplatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookingTemplates_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingsDelete deletes a booking by id
*/
func (a *Client) BookingsDelete(params *BookingsDeleteParams, opts ...ClientOption) (*BookingsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_Delete",
		Method:             "DELETE",
		PathPattern:        "/EventsManagement/Bookings/{bookingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Bookings_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookingsDeleteDocument deletes a document attached to the booking
*/
func (a *Client) BookingsDeleteDocument(params *BookingsDeleteDocumentParams, opts ...ClientOption) (*BookingsDeleteDocumentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookingsDeleteDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Bookings_DeleteDocument",
		Method:             "DELETE",
		PathPattern:        "/EventsManagement/Bookings/{bookingId}/Documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookingsDeleteDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookingsDeleteDocumentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Bookings_DeleteDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkCopySetsDelete deletes an existing bulk copy set
*/
func (a *Client) BulkCopySetsDelete(params *BulkCopySetsDeleteParams, opts ...ClientOption) (*BulkCopySetsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/BulkCopySets/{bulkCopySetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCopySets_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkCopySetsDeleteExclusions deletes all exclusions from a bulk copy set
*/
func (a *Client) BulkCopySetsDeleteExclusions(params *BulkCopySetsDeleteExclusionsParams, opts ...ClientOption) (*BulkCopySetsDeleteExclusionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCopySetsDeleteExclusionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCopySets_DeleteExclusions",
		Method:             "DELETE",
		PathPattern:        "/TXN/BulkCopySets/{bulkCopySetId}/DeleteExclusions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCopySetsDeleteExclusionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCopySetsDeleteExclusionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCopySets_DeleteExclusions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkDailyCopyExclusionsDelete deletes an existing bulk daily copy exclusion
*/
func (a *Client) BulkDailyCopyExclusionsDelete(params *BulkDailyCopyExclusionsDeleteParams, opts ...ClientOption) (*BulkDailyCopyExclusionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDailyCopyExclusionsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDailyCopyExclusions_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/BulkDailyCopyExclusions/{bulkDailyCopyExclusionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkDailyCopyExclusionsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDailyCopyExclusionsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkDailyCopyExclusions_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BusinessUnitsDelete deletes an existing business unit
*/
func (a *Client) BusinessUnitsDelete(params *BusinessUnitsDeleteParams, opts ...ClientOption) (*BusinessUnitsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusinessUnitsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BusinessUnits_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/BusinessUnits/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BusinessUnitsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BusinessUnitsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BusinessUnits_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CampaignDesignationsDelete deletes an asssociation between a designation and a campaign
*/
func (a *Client) CampaignDesignationsDelete(params *CampaignDesignationsDeleteParams, opts ...ClientOption) (*CampaignDesignationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignDesignationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignDesignations_Delete",
		Method:             "DELETE",
		PathPattern:        "/Finance/CampaignDesignations/{campaignDesignationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignDesignationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignDesignationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CampaignDesignations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CampaignFundsDelete deletes a fund association from a campaign
*/
func (a *Client) CampaignFundsDelete(params *CampaignFundsDeleteParams, opts ...ClientOption) (*CampaignFundsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCampaignFundsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CampaignFunds_Delete",
		Method:             "DELETE",
		PathPattern:        "/Finance/CampaignFunds/{campaignFundId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CampaignFundsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CampaignFundsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CampaignFunds_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CardReaderTypesDelete deletes an existing card reader type
*/
func (a *Client) CardReaderTypesDelete(params *CardReaderTypesDeleteParams, opts ...ClientOption) (*CardReaderTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardReaderTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CardReaderTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/CardReaderTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardReaderTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardReaderTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CardReaderTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartClearCart cancels and clears the cart releases any performance and package tickets that have been added to the cart and reverses unsaved payment authorizations if applicable
*/
func (a *Client) CartClearCart(params *CartClearCartParams, opts ...ClientOption) (*CartClearCartNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartClearCartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_ClearCart",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartClearCartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartClearCartNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_ClearCart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveBooking removes the booking attached to the cart
*/
func (a *Client) CartRemoveBooking(params *CartRemoveBookingParams, opts ...ClientOption) (*CartRemoveBookingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveBookingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveBooking",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Bookings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveBookingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveBookingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveBooking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveCartPropertiesCustomData removes a custom data value from the cart properties
*/
func (a *Client) CartRemoveCartPropertiesCustomData(params *CartRemoveCartPropertiesCustomDataParams, opts ...ClientOption) (*CartRemoveCartPropertiesCustomDataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveCartPropertiesCustomDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveCartPropertiesCustomData",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/CustomData/{customId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveCartPropertiesCustomDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveCartPropertiesCustomDataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveCartPropertiesCustomData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveContribution removes a contribution from the cart
*/
func (a *Client) CartRemoveContribution(params *CartRemoveContributionParams, opts ...ClientOption) (*CartRemoveContributionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveContributionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveContribution",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Contributions/{lineItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveContributionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveContributionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveContribution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveContributionCustomData removes a custom data value for a contribution in the cart
*/
func (a *Client) CartRemoveContributionCustomData(params *CartRemoveContributionCustomDataParams, opts ...ClientOption) (*CartRemoveContributionCustomDataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveContributionCustomDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveContributionCustomData",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Contributions/{lineItemId}/CustomData/{customId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveContributionCustomDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveContributionCustomDataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveContributionCustomData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveFee removes a fee from the cart only user defined fees can be removed
*/
func (a *Client) CartRemoveFee(params *CartRemoveFeeParams, opts ...ClientOption) (*CartRemoveFeeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveFeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveFee",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Fees/{itemFeeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveFeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveFeeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveGiftCertificate removes a gift certificate product from the cart
*/
func (a *Client) CartRemoveGiftCertificate(params *CartRemoveGiftCertificateParams, opts ...ClientOption) (*CartRemoveGiftCertificateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveGiftCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveGiftCertificate",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/GiftCertificates/{giftCertificateNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveGiftCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveGiftCertificateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveGiftCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveNFSPackage removes an entire n f s package item from the cart all seats are released for the specified package lineitem
*/
func (a *Client) CartRemoveNFSPackage(params *CartRemoveNFSPackageParams, opts ...ClientOption) (*CartRemoveNFSPackageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveNFSPackageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveNFSPackage",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Packages/Nfs/{nfsPackageLineItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveNFSPackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveNFSPackageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveNFSPackage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveNFSPackagePerformanceItem removes an n f s performance item from the cart seats are released for the specified performance in the package
*/
func (a *Client) CartRemoveNFSPackagePerformanceItem(params *CartRemoveNFSPackagePerformanceItemParams, opts ...ClientOption) (*CartRemoveNFSPackagePerformanceItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveNFSPackagePerformanceItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveNFSPackagePerformanceItem",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Packages/Nfs/{nfsPackageLineItemId}/{performanceLineItemId}/{performanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveNFSPackagePerformanceItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveNFSPackagePerformanceItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveNFSPackagePerformanceItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveOnAccount removes on account balance from the cart
*/
func (a *Client) CartRemoveOnAccount(params *CartRemoveOnAccountParams, opts ...ClientOption) (*CartRemoveOnAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveOnAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveOnAccount",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/OnAccount/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveOnAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveOnAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveOnAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemovePackageItem removes a fixed seat package item from the cart all seats are released for the specified package lineitem
*/
func (a *Client) CartRemovePackageItem(params *CartRemovePackageItemParams, opts ...ClientOption) (*CartRemovePackageItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemovePackageItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemovePackageItem",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Packages/Fixed/{packageId}/{lineItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemovePackageItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemovePackageItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemovePackageItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemovePackagePerformanceItem removes a performance item from a fixed seat package in the cart seats are released for the specified performance in the package
*/
func (a *Client) CartRemovePackagePerformanceItem(params *CartRemovePackagePerformanceItemParams, opts ...ClientOption) (*CartRemovePackagePerformanceItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemovePackagePerformanceItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemovePackagePerformanceItem",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Packages/Fixed/{fixedPackageLineItemId}/{performanceLineItemId}/{performanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemovePackagePerformanceItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemovePackagePerformanceItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemovePackagePerformanceItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemovePayment removes a payment from the cart all payment types except gift certificates can be removed with this method this method will also reverse or void the associated web e m v authorization if the cart has not been saved
*/
func (a *Client) CartRemovePayment(params *CartRemovePaymentParams, opts ...ClientOption) (*CartRemovePaymentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemovePaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemovePayment",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemovePaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemovePaymentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemovePayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemovePaymentPlans removes the payment plan associated with the cart
*/
func (a *Client) CartRemovePaymentPlans(params *CartRemovePaymentPlansParams, opts ...ClientOption) (*CartRemovePaymentPlansNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemovePaymentPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemovePaymentPlans",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/Plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemovePaymentPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemovePaymentPlansNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemovePaymentPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveSubLineItem removes a sub line item not allowed for packages
*/
func (a *Client) CartRemoveSubLineItem(params *CartRemoveSubLineItemParams, opts ...ClientOption) (*CartRemoveSubLineItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveSubLineItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveSubLineItem",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/SubLineItems/{subLineItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveSubLineItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveSubLineItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveSubLineItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveSuperPackageItem removes a super package item from the cart all seats are released for the specified package lineitem
*/
func (a *Client) CartRemoveSuperPackageItem(params *CartRemoveSuperPackageItemParams, opts ...ClientOption) (*CartRemoveSuperPackageItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveSuperPackageItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveSuperPackageItem",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Packages/Super/{superPackageId}/{superPackageLineItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveSuperPackageItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveSuperPackageItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveSuperPackageItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveSuperPackagePerformanceItem removes a performance item from a super package in the cart seats are released for the specified performance in the package
*/
func (a *Client) CartRemoveSuperPackagePerformanceItem(params *CartRemoveSuperPackagePerformanceItemParams, opts ...ClientOption) (*CartRemoveSuperPackagePerformanceItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveSuperPackagePerformanceItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveSuperPackagePerformanceItem",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Packages/Super/{superPackageLineItemId}/{subPackageId}/{performanceLineItemId}/{performanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveSuperPackagePerformanceItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveSuperPackagePerformanceItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveSuperPackagePerformanceItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartRemoveTickets removes tickets from the cart
*/
func (a *Client) CartRemoveTickets(params *CartRemoveTicketsParams, opts ...ClientOption) (*CartRemoveTicketsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartRemoveTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_RemoveTickets",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Tickets/{performanceId}/{lineItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartRemoveTicketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartRemoveTicketsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_RemoveTickets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CartUnapplyGiftCertificate removes a gift certificate payment from the cart
*/
func (a *Client) CartUnapplyGiftCertificate(params *CartUnapplyGiftCertificateParams, opts ...ClientOption) (*CartUnapplyGiftCertificateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCartUnapplyGiftCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cart_UnapplyGiftCertificate",
		Method:             "DELETE",
		PathPattern:        "/Web/Cart/{sessionKey}/Payments/GiftCertificate/{giftCertificateNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CartUnapplyGiftCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CartUnapplyGiftCertificateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cart_UnapplyGiftCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ColorsDelete deletes an existing color
*/
func (a *Client) ColorsDelete(params *ColorsDeleteParams, opts ...ClientOption) (*ColorsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewColorsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Colors_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Colors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ColorsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ColorsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Colors_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ComposersDelete deletes an existing composer
*/
func (a *Client) ComposersDelete(params *ComposersDeleteParams, opts ...ClientOption) (*ComposersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComposersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Composers_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Composers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ComposersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ComposersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Composers_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituenciesDelete deletes a constituency
*/
func (a *Client) ConstituenciesDelete(params *ConstituenciesDeleteParams, opts ...ClientOption) (*ConstituenciesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituenciesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Constituencies_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Constituencies/{constituencyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituenciesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituenciesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Constituencies_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituencyTypesDelete deletes an existing constituency type
*/
func (a *Client) ConstituencyTypesDelete(params *ConstituencyTypesDeleteParams, opts ...ClientOption) (*ConstituencyTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituencyTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituencyTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ConstituencyTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituencyTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituencyTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituencyTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentDocumentsDelete deletes a document for a constituent
*/
func (a *Client) ConstituentDocumentsDelete(params *ConstituentDocumentsDeleteParams, opts ...ClientOption) (*ConstituentDocumentsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentDocumentsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentDocuments_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentDocumentsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentDocumentsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentDocuments_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentGroupsDelete deletes an existing constituent group
*/
func (a *Client) ConstituentGroupsDelete(params *ConstituentGroupsDeleteParams, opts ...ClientOption) (*ConstituentGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ConstituentGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentInactivesDelete deletes an existing constituent inactive
*/
func (a *Client) ConstituentInactivesDelete(params *ConstituentInactivesDeleteParams, opts ...ClientOption) (*ConstituentInactivesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentInactivesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentInactives_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ConstituentInactives/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentInactivesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentInactivesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentInactives_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentProtectionTypesDelete deletes an existing constituent protection type
*/
func (a *Client) ConstituentProtectionTypesDelete(params *ConstituentProtectionTypesDeleteParams, opts ...ClientOption) (*ConstituentProtectionTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentProtectionTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentProtectionTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ConstituentProtectionTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentProtectionTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentProtectionTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentProtectionTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentTypeAffiliatesDelete deletes an existing constituent type affiliate
*/
func (a *Client) ConstituentTypeAffiliatesDelete(params *ConstituentTypeAffiliatesDeleteParams, opts ...ClientOption) (*ConstituentTypeAffiliatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypeAffiliatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypeAffiliates_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ConstituentTypeAffiliates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypeAffiliatesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypeAffiliatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentTypeAffiliates_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConstituentTypesDelete deletes an existing constituent type
*/
func (a *Client) ConstituentTypesDelete(params *ConstituentTypesDeleteParams, opts ...ClientOption) (*ConstituentTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstituentTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstituentTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ConstituentTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstituentTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstituentTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConstituentTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionCategoriesDelete deletes an existing contact permission category
*/
func (a *Client) ContactPermissionCategoriesDelete(params *ContactPermissionCategoriesDeleteParams, opts ...ClientOption) (*ContactPermissionCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ContactPermissionCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissionCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionTypesDelete deletes an existing contact permission type
*/
func (a *Client) ContactPermissionTypesDelete(params *ContactPermissionTypesDeleteParams, opts ...ClientOption) (*ContactPermissionTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissionTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ContactPermissionTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissionTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPermissionsDelete deletes a contact permission
*/
func (a *Client) ContactPermissionsDelete(params *ContactPermissionsDeleteParams, opts ...ClientOption) (*ContactPermissionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPermissionsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPermissions_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/ContactPermissions/{contactPermissionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPermissionsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPermissionsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPermissions_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointCategoriesDelete deletes an existing contact point category
*/
func (a *Client) ContactPointCategoriesDelete(params *ContactPointCategoriesDeleteParams, opts ...ClientOption) (*ContactPointCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ContactPointCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointCategoryPurposesDelete deletes an existing contact point category purpose
*/
func (a *Client) ContactPointCategoryPurposesDelete(params *ContactPointCategoryPurposesDeleteParams, opts ...ClientOption) (*ContactPointCategoryPurposesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointCategoryPurposesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointCategoryPurposes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ContactPointCategoryPurposes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointCategoryPurposesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointCategoryPurposesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointCategoryPurposes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposeCategoriesDelete deletes an existing contact point purpose category
*/
func (a *Client) ContactPointPurposeCategoriesDelete(params *ContactPointPurposeCategoriesDeleteParams, opts ...ClientOption) (*ContactPointPurposeCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ContactPointPurposeCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposeCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposeMapsDelete deletes a contact point purpose
*/
func (a *Client) ContactPointPurposeMapsDelete(params *ContactPointPurposeMapsDeleteParams, opts ...ClientOption) (*ContactPointPurposeMapsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposeMapsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposeMaps_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/ContactPointPurposeMaps/{contactPointPurposeMapId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposeMapsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposeMapsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposeMaps_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactPointPurposesDelete deletes an existing contact point purpose
*/
func (a *Client) ContactPointPurposesDelete(params *ContactPointPurposesDeleteParams, opts ...ClientOption) (*ContactPointPurposesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactPointPurposesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactPointPurposes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ContactPointPurposes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactPointPurposesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactPointPurposesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactPointPurposes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactTypesDelete deletes an existing contact type
*/
func (a *Client) ContactTypesDelete(params *ContactTypesDeleteParams, opts ...ClientOption) (*ContactTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContactTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ContactTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContactTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContributionDesignationsDelete deletes an existing contribution designation
*/
func (a *Client) ContributionDesignationsDelete(params *ContributionDesignationsDeleteParams, opts ...ClientOption) (*ContributionDesignationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionDesignationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionDesignations_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ContributionDesignations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionDesignationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionDesignationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContributionDesignations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContributionImportSetsDelete deletes an existing contribution import set
*/
func (a *Client) ContributionImportSetsDelete(params *ContributionImportSetsDeleteParams, opts ...ClientOption) (*ContributionImportSetsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContributionImportSetsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContributionImportSets_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ContributionImportSets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContributionImportSetsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContributionImportSetsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContributionImportSets_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ControlGroupUserGroupsDelete deletes an existing control group user group mapping
*/
func (a *Client) ControlGroupUserGroupsDelete(params *ControlGroupUserGroupsDeleteParams, opts ...ClientOption) (*ControlGroupUserGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupUserGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroupUserGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ControlGroupUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupUserGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupUserGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ControlGroupUserGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ControlGroupsDelete deletes an existing control group
*/
func (a *Client) ControlGroupsDelete(params *ControlGroupsDeleteParams, opts ...ClientOption) (*ControlGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ControlGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControlGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ControlGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CountriesDelete deletes an existing country
*/
func (a *Client) CountriesDelete(params *CountriesDeleteParams, opts ...ClientOption) (*CountriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCountriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Countries_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Countries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CountriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CountriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Countries_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CrediteeTypesDelete deletes an existing creditee type
*/
func (a *Client) CrediteeTypesDelete(params *CrediteeTypesDeleteParams, opts ...ClientOption) (*CrediteeTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrediteeTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CrediteeTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/CrediteeTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrediteeTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrediteeTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CrediteeTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CurrencyTypesDelete deletes an existing currency type
*/
func (a *Client) CurrencyTypesDelete(params *CurrencyTypesDeleteParams, opts ...ClientOption) (*CurrencyTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCurrencyTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CurrencyTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/CurrencyTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CurrencyTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CurrencyTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CurrencyTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomDefaultCategoriesDelete deletes an existing custom default category
*/
func (a *Client) CustomDefaultCategoriesDelete(params *CustomDefaultCategoriesDeleteParams, opts ...ClientOption) (*CustomDefaultCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaultCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/CustomDefaultCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomDefaultCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomDefaultsDelete deletes an existing custom default
*/
func (a *Client) CustomDefaultsDelete(params *CustomDefaultsDeleteParams, opts ...ClientOption) (*CustomDefaultsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDefaultsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomDefaults_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/CustomDefaults/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDefaultsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDefaultsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomDefaults_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomDelete deletes an entry from the table for the resource as defined by resource name in t r d a t a s e r v i c e t a b l e s with the given id Id
*/
func (a *Client) CustomDelete(params *CustomDeleteParams, opts ...ClientOption) (*CustomDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Custom_Delete",
		Method:             "DELETE",
		PathPattern:        "/Custom/{resourceName}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Custom_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeliveryMethodsDelete deletes an existing delivery method
*/
func (a *Client) DeliveryMethodsDelete(params *DeliveryMethodsDeleteParams, opts ...ClientOption) (*DeliveryMethodsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliveryMethodsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeliveryMethods_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/DeliveryMethods/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeliveryMethodsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeliveryMethodsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeliveryMethods_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DesignationCodesDelete deletes an existing designation code
*/
func (a *Client) DesignationCodesDelete(params *DesignationCodesDeleteParams, opts ...ClientOption) (*DesignationCodesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDesignationCodesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DesignationCodes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/DesignationCodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DesignationCodesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DesignationCodesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DesignationCodes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiagnosticsDelete dummies end point to check availability of HTTP d e l e t e
*/
func (a *Client) DiagnosticsDelete(params *DiagnosticsDeleteParams, opts ...ClientOption) (*DiagnosticsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiagnosticsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Diagnostics_Delete",
		Method:             "DELETE",
		PathPattern:        "/Diagnostics/{diagnosticId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiagnosticsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiagnosticsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Diagnostics_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DirectDebitAccountTypesDelete deletes an existing direct debit account type
*/
func (a *Client) DirectDebitAccountTypesDelete(params *DirectDebitAccountTypesDeleteParams, opts ...ClientOption) (*DirectDebitAccountTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDirectDebitAccountTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DirectDebitAccountTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/DirectDebitAccountTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DirectDebitAccountTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DirectDebitAccountTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DirectDebitAccountTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DiscountTypesDelete deletes an existing discount type
*/
func (a *Client) DiscountTypesDelete(params *DiscountTypesDeleteParams, opts ...ClientOption) (*DiscountTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/DiscountTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiscountTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DiscountTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentCategoriesDelete deletes an existing document category
*/
func (a *Client) DocumentCategoriesDelete(params *DocumentCategoriesDeleteParams, opts ...ClientOption) (*DocumentCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DocumentCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/DocumentCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentsDelete deletes a document
*/
func (a *Client) DocumentsDelete(params *DocumentsDeleteParams, opts ...ClientOption) (*DocumentsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Documents_Delete",
		Method:             "DELETE",
		PathPattern:        "/Finance/Documents/{documentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Documents_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DonationLevelsDelete deletes an existing donation level
*/
func (a *Client) DonationLevelsDelete(params *DonationLevelsDeleteParams, opts ...ClientOption) (*DonationLevelsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDonationLevelsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DonationLevels_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/DonationLevels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DonationLevelsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DonationLevelsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DonationLevels_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EMVDeleteLane deletes a lane from the merchant close the connection to tri p o s and issue a new activation code on the device
*/
func (a *Client) EMVDeleteLane(params *EMVDeleteLaneParams, opts ...ClientOption) (*EMVDeleteLaneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEMVDeleteLaneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EMV_DeleteLane",
		Method:             "DELETE",
		PathPattern:        "/PaymentGateway/EMV/TriPosLanes/{laneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EMVDeleteLaneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EMVDeleteLaneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EMV_DeleteLane: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ElectronicAddressTypesDelete deletes an existing electronic address type
*/
func (a *Client) ElectronicAddressTypesDelete(params *ElectronicAddressTypesDeleteParams, opts ...ClientOption) (*ElectronicAddressTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddressTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ElectronicAddressTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ElectronicAddressTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ElectronicAddressesDelete deletes an electronic address
*/
func (a *Client) ElectronicAddressesDelete(params *ElectronicAddressesDeleteParams, opts ...ClientOption) (*ElectronicAddressesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewElectronicAddressesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ElectronicAddresses_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/ElectronicAddresses/{electronicAddressId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ElectronicAddressesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ElectronicAddressesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ElectronicAddresses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailProfilesDelete deletes an existing email profile
*/
func (a *Client) EmailProfilesDelete(params *EmailProfilesDeleteParams, opts ...ClientOption) (*EmailProfilesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailProfilesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmailProfiles_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/EmailProfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailProfilesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailProfilesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailProfiles_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmarketIndicatorsDelete deletes an existing emarket indicator
*/
func (a *Client) EmarketIndicatorsDelete(params *EmarketIndicatorsDeleteParams, opts ...ClientOption) (*EmarketIndicatorsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmarketIndicatorsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EmarketIndicators_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/EmarketIndicators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmarketIndicatorsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmarketIndicatorsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmarketIndicators_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ErasDelete deletes an existing era
*/
func (a *Client) ErasDelete(params *ErasDeleteParams, opts ...ClientOption) (*ErasDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErasDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Eras_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Eras/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ErasDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ErasDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Eras_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FacilitiesDelete deletes a facility
*/
func (a *Client) FacilitiesDelete(params *FacilitiesDeleteParams, opts ...ClientOption) (*FacilitiesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFacilitiesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Facilities_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/Facilities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FacilitiesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FacilitiesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Facilities_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GendersDelete deletes an existing gender
*/
func (a *Client) GendersDelete(params *GendersDeleteParams, opts ...ClientOption) (*GendersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGendersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Genders_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Genders/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GendersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GendersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Genders_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidContactMethodsDelete deletes an existing gift aid contact method
*/
func (a *Client) GiftAidContactMethodsDelete(params *GiftAidContactMethodsDeleteParams, opts ...ClientOption) (*GiftAidContactMethodsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidContactMethodsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidContactMethods_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/GiftAidContactMethods/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidContactMethodsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidContactMethodsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidContactMethods_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidDeclarationsDelete deletes a gift aid declaration
*/
func (a *Client) GiftAidDeclarationsDelete(params *GiftAidDeclarationsDeleteParams, opts ...ClientOption) (*GiftAidDeclarationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDeclarationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDeclarations_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/GiftAidDeclarations/{giftAidDeclarationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDeclarationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDeclarationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidDeclarations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidDocumentStatusesDelete deletes an existing gift aid document status
*/
func (a *Client) GiftAidDocumentStatusesDelete(params *GiftAidDocumentStatusesDeleteParams, opts ...ClientOption) (*GiftAidDocumentStatusesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidDocumentStatusesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidDocumentStatuses_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/GiftAidDocumentStatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidDocumentStatusesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidDocumentStatusesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidDocumentStatuses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidIneligibleReasonsDelete deletes an existing gift aid ineligible reason
*/
func (a *Client) GiftAidIneligibleReasonsDelete(params *GiftAidIneligibleReasonsDeleteParams, opts ...ClientOption) (*GiftAidIneligibleReasonsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidIneligibleReasonsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidIneligibleReasons_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/GiftAidIneligibleReasons/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidIneligibleReasonsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidIneligibleReasonsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidIneligibleReasons_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidRatesDelete deletes an existing gift aid rate
*/
func (a *Client) GiftAidRatesDelete(params *GiftAidRatesDeleteParams, opts ...ClientOption) (*GiftAidRatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidRatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidRates_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/GiftAidRates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidRatesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidRatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidRates_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidStatusesDelete deletes an existing gift aid status
*/
func (a *Client) GiftAidStatusesDelete(params *GiftAidStatusesDeleteParams, opts ...ClientOption) (*GiftAidStatusesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidStatusesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidStatuses_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/GiftAidStatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidStatusesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidStatusesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidStatuses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GiftAidTypesDelete deletes an existing gift aid type
*/
func (a *Client) GiftAidTypesDelete(params *GiftAidTypesDeleteParams, opts ...ClientOption) (*GiftAidTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftAidTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GiftAidTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/GiftAidTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GiftAidTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GiftAidTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GiftAidTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodeCategoriesDelete deletes an existing hold code category
*/
func (a *Client) HoldCodeCategoriesDelete(params *HoldCodeCategoriesDeleteParams, opts ...ClientOption) (*HoldCodeCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/HoldCodeCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodeCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodeUserGroupsDelete deletes an existing hold code user group mapping
*/
func (a *Client) HoldCodeUserGroupsDelete(params *HoldCodeUserGroupsDeleteParams, opts ...ClientOption) (*HoldCodeUserGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodeUserGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodeUserGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/HoldCodeUserGroups/{holdCodeUserGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodeUserGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodeUserGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodeUserGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HoldCodesDelete deletes an existing hold code
*/
func (a *Client) HoldCodesDelete(params *HoldCodesDeleteParams, opts ...ClientOption) (*HoldCodesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCodesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCodes_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/HoldCodes/{holdCodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCodesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCodesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCodes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InactiveReasonsDelete deletes an existing inactive reason
*/
func (a *Client) InactiveReasonsDelete(params *InactiveReasonsDeleteParams, opts ...ClientOption) (*InactiveReasonsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInactiveReasonsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InactiveReasons_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/InactiveReasons/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InactiveReasonsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InactiveReasonsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InactiveReasons_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IntegrationDefaultsDelete deletes an existing integration default
*/
func (a *Client) IntegrationDefaultsDelete(params *IntegrationDefaultsDeleteParams, opts ...ClientOption) (*IntegrationDefaultsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationDefaultsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationDefaults_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/IntegrationDefaults/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationDefaultsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationDefaultsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for IntegrationDefaults_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IntegrationsDelete deletes an existing action type
*/
func (a *Client) IntegrationsDelete(params *IntegrationsDeleteParams, opts ...ClientOption) (*IntegrationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Integrations_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Integrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestCategoriesDelete deletes an existing interest category
*/
func (a *Client) InterestCategoriesDelete(params *InterestCategoriesDeleteParams, opts ...ClientOption) (*InterestCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/InterestCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterestCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestTypesDelete deletes an existing interest type
*/
func (a *Client) InterestTypesDelete(params *InterestTypesDeleteParams, opts ...ClientOption) (*InterestTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InterestTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/InterestTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterestTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterestsDelete deletes an interest for bulk interest edits consider the c r m interests create or update batching resource which allows multiple interests to be created updated or removed in a single request
*/
func (a *Client) InterestsDelete(params *InterestsDeleteParams, opts ...ClientOption) (*InterestsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterestsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Interests_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Interests/{interestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterestsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterestsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Interests_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InventoryContactPermissionTypesDelete deletes an existing inventory contact permission type
*/
func (a *Client) InventoryContactPermissionTypesDelete(params *InventoryContactPermissionTypesDeleteParams, opts ...ClientOption) (*InventoryContactPermissionTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryContactPermissionTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryContactPermissionTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/InventoryContactPermissionTypes/{inventoryContactPermissionTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryContactPermissionTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryContactPermissionTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryContactPermissionTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InventoryWebContentsDelete deletes an existing inventory web content
*/
func (a *Client) InventoryWebContentsDelete(params *InventoryWebContentsDeleteParams, opts ...ClientOption) (*InventoryWebContentsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryWebContentsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InventoryWebContents_Delete",
		Method:             "DELETE",
		PathPattern:        "/Txn/InventoryWebContents/{inventoryWebContentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryWebContentsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryWebContentsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryWebContents_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssuesDelete deletes an issue by id
*/
func (a *Client) IssuesDelete(params *IssuesDeleteParams, opts ...ClientOption) (*IssuesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssuesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Issues_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Issues/{issueId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IssuesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssuesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Issues_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KeywordCategoriesDelete deletes an existing keyword category
*/
func (a *Client) KeywordCategoriesDelete(params *KeywordCategoriesDeleteParams, opts ...ClientOption) (*KeywordCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KeywordCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/KeywordCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for KeywordCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KeywordsDelete deletes an existing keyword
*/
func (a *Client) KeywordsDelete(params *KeywordsDeleteParams, opts ...ClientOption) (*KeywordsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeywordsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Keywords_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Keywords/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeywordsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeywordsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Keywords_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LanguagesDelete deletes an existing language
*/
func (a *Client) LanguagesDelete(params *LanguagesDeleteParams, opts ...ClientOption) (*LanguagesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLanguagesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Languages_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Languages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LanguagesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LanguagesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Languages_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCategoriesDelete deletes an existing list category
*/
func (a *Client) ListCategoriesDelete(params *ListCategoriesDeleteParams, opts ...ClientOption) (*ListCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ListCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListsDelete deletes an existing list
*/
func (a *Client) ListsDelete(params *ListsDeleteParams, opts ...ClientOption) (*ListsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Lists_Delete",
		Method:             "DELETE",
		PathPattern:        "/Reporting/Lists/{listId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Lists_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LoginTypesDelete deletes an existing login type
*/
func (a *Client) LoginTypesDelete(params *LoginTypesDeleteParams, opts ...ClientOption) (*LoginTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/LoginTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachineSettingsDelete deletes an existing machine setting
*/
func (a *Client) MachineSettingsDelete(params *MachineSettingsDeleteParams, opts ...ClientOption) (*MachineSettingsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineSettingsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MachineSettings_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/MachineSettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineSettingsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineSettingsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MachineSettings_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailIndicatorsDelete deletes an existing mail indicator
*/
func (a *Client) MailIndicatorsDelete(params *MailIndicatorsDeleteParams, opts ...ClientOption) (*MailIndicatorsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailIndicatorsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MailIndicators_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/MailIndicators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailIndicatorsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailIndicatorsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MailIndicators_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MediaTypesDelete deletes an existing media type
*/
func (a *Client) MediaTypesDelete(params *MediaTypesDeleteParams, opts ...ClientOption) (*MediaTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/MediaTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MediaTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MediaTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MembershipLevelCategoriesDelete deletes an existing membership level category
*/
func (a *Client) MembershipLevelCategoriesDelete(params *MembershipLevelCategoriesDeleteParams, opts ...ClientOption) (*MembershipLevelCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembershipLevelCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MembershipLevelCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/MembershipLevelCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembershipLevelCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MembershipLevelCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MembershipLevelCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleCategoriesDelete deletes an existing mode of sale category
*/
func (a *Client) ModeOfSaleCategoriesDelete(params *ModeOfSaleCategoriesDeleteParams, opts ...ClientOption) (*ModeOfSaleCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/ModeOfSaleCategories/{modeOfSaleCategoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleOffersDelete deletes an existing mode of sale offer
*/
func (a *Client) ModeOfSaleOffersDelete(params *ModeOfSaleOffersDeleteParams, opts ...ClientOption) (*ModeOfSaleOffersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleOffersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleOffers_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/ModeOfSaleOffers/{modeOfSaleOfferId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleOffersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleOffersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleOffers_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSalePriceTypesDelete deletes an existing mode of sale price type
*/
func (a *Client) ModeOfSalePriceTypesDelete(params *ModeOfSalePriceTypesDeleteParams, opts ...ClientOption) (*ModeOfSalePriceTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSalePriceTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSalePriceTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/ModeOfSalePriceTypes/{modeOfSalePriceTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSalePriceTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSalePriceTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSalePriceTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleSurveyQuestionsDelete deletes an existing mode of sale survey question
*/
func (a *Client) ModeOfSaleSurveyQuestionsDelete(params *ModeOfSaleSurveyQuestionsDeleteParams, opts ...ClientOption) (*ModeOfSaleSurveyQuestionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleSurveyQuestionsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleSurveyQuestions_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/ModeOfSaleSurveyQuestions/{modeOfSaleSurveyQuestionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleSurveyQuestionsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleSurveyQuestionsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleSurveyQuestions_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModeOfSaleUserGroupsDelete deletes an existing mode of sale user group mapping
*/
func (a *Client) ModeOfSaleUserGroupsDelete(params *ModeOfSaleUserGroupsDeleteParams, opts ...ClientOption) (*ModeOfSaleUserGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModeOfSaleUserGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModeOfSaleUserGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/ModeOfSaleUserGroups/{modeOfSaleUserGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModeOfSaleUserGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModeOfSaleUserGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModeOfSaleUserGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModesOfSaleDelete deletes an existing mode of sale
*/
func (a *Client) ModesOfSaleDelete(params *ModesOfSaleDeleteParams, opts ...ClientOption) (*ModesOfSaleDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModesOfSaleDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModesOfSale_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/ModesOfSale/{modeOfSaleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModesOfSaleDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModesOfSaleDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ModesOfSale_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NScanAccessAreasDelete deletes an existing n scan access area
*/
func (a *Client) NScanAccessAreasDelete(params *NScanAccessAreasDeleteParams, opts ...ClientOption) (*NScanAccessAreasDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNScanAccessAreasDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NScanAccessAreas_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/NScanAccessAreas/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NScanAccessAreasDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NScanAccessAreasDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NScanAccessAreas_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NameStatusesDelete deletes an existing name status
*/
func (a *Client) NameStatusesDelete(params *NameStatusesDeleteParams, opts ...ClientOption) (*NameStatusesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNameStatusesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NameStatuses_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/NameStatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NameStatusesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NameStatusesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NameStatuses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ObjectPermissionsDelete deletes an existing object permission
*/
func (a *Client) ObjectPermissionsDelete(params *ObjectPermissionsDeleteParams, opts ...ClientOption) (*ObjectPermissionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectPermissionsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ObjectPermissions_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ObjectPermissions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObjectPermissionsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectPermissionsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ObjectPermissions_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrderCategoriesDelete deletes an existing order category
*/
func (a *Client) OrderCategoriesDelete(params *OrderCategoriesDeleteParams, opts ...ClientOption) (*OrderCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrderCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/OrderCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrganizationsDelete deletes an existing organization
*/
func (a *Client) OrganizationsDelete(params *OrganizationsDeleteParams, opts ...ClientOption) (*OrganizationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Organizations_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Organizations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OriginalSourcesDelete deletes an existing original source
*/
func (a *Client) OriginalSourcesDelete(params *OriginalSourcesDeleteParams, opts ...ClientOption) (*OriginalSourcesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginalSourcesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OriginalSources_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/OriginalSources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginalSourcesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginalSourcesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OriginalSources_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OriginsDelete deletes an existing origin
*/
func (a *Client) OriginsDelete(params *OriginsDeleteParams, opts ...ClientOption) (*OriginsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOriginsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Origins_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Origins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OriginsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OriginsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Origins_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OutputSetsDelete deletes an existing output set
*/
func (a *Client) OutputSetsDelete(params *OutputSetsDeleteParams, opts ...ClientOption) (*OutputSetsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutputSetsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OutputSets_Delete",
		Method:             "DELETE",
		PathPattern:        "/Reporting/OutputSets/{outputSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OutputSetsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutputSetsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OutputSets_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackagePriceTypesDelete deletes an existing package price type
*/
func (a *Client) PackagePriceTypesDelete(params *PackagePriceTypesDeleteParams, opts ...ClientOption) (*PackagePriceTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackagePriceTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackagePriceTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PackagePriceTypes/{packagePriceTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackagePriceTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackagePriceTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackagePriceTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackageTypesDelete deletes an existing package type
*/
func (a *Client) PackageTypesDelete(params *PackageTypesDeleteParams, opts ...ClientOption) (*PackageTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PackageTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackageTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PackageWebContentsDelete deletes an existing package web content
*/
func (a *Client) PackageWebContentsDelete(params *PackageWebContentsDeleteParams, opts ...ClientOption) (*PackageWebContentsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageWebContentsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PackageWebContents_Delete",
		Method:             "DELETE",
		PathPattern:        "/Txn/PackageWebContents/{packageWebContentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageWebContentsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PackageWebContentsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PackageWebContents_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayActivitiesDelete deletes a payment gateway activity
*/
func (a *Client) PaymentGatewayActivitiesDelete(params *PaymentGatewayActivitiesDeleteParams, opts ...ClientOption) (*PaymentGatewayActivitiesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayActivitiesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayActivities_Delete",
		Method:             "DELETE",
		PathPattern:        "/PaymentGateway/PaymentGatewayActivities/{paymentGatewayActivityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayActivitiesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayActivitiesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayActivities_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayNotificationsDeleteNotificationEvent deletes a notification event
*/
func (a *Client) PaymentGatewayNotificationsDeleteNotificationEvent(params *PaymentGatewayNotificationsDeleteNotificationEventParams, opts ...ClientOption) (*PaymentGatewayNotificationsDeleteNotificationEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayNotificationsDeleteNotificationEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayNotifications_DeleteNotificationEvent",
		Method:             "DELETE",
		PathPattern:        "/PaymentGateway/Notifications/Events/{notificationEventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayNotificationsDeleteNotificationEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayNotificationsDeleteNotificationEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayNotifications_DeleteNotificationEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentGatewayTransactionTypesDelete deletes an existing payment gateway transaction type
*/
func (a *Client) PaymentGatewayTransactionTypesDelete(params *PaymentGatewayTransactionTypesDeleteParams, opts ...ClientOption) (*PaymentGatewayTransactionTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGatewayTransactionTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentGatewayTransactionTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PaymentGatewayTransactionTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentGatewayTransactionTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGatewayTransactionTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentGatewayTransactionTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodGroupsDelete deletes an existing payment method group
*/
func (a *Client) PaymentMethodGroupsDelete(params *PaymentMethodGroupsDeleteParams, opts ...ClientOption) (*PaymentMethodGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PaymentMethodGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethodGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodUserGroupsDelete deletes an existing payment method user group mapping
*/
func (a *Client) PaymentMethodUserGroupsDelete(params *PaymentMethodUserGroupsDeleteParams, opts ...ClientOption) (*PaymentMethodUserGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodUserGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethodUserGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PaymentMethodUserGroups/{paymentMethodUserGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodUserGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodUserGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethodUserGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentMethodsDelete deletes an existing payment method
*/
func (a *Client) PaymentMethodsDelete(params *PaymentMethodsDeleteParams, opts ...ClientOption) (*PaymentMethodsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentMethodsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentMethods_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PaymentMethods/{paymentMethodId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentMethodsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentMethodsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentMethods_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentSignaturesDelete deletes an existing payment signature
*/
func (a *Client) PaymentSignaturesDelete(params *PaymentSignaturesDeleteParams, opts ...ClientOption) (*PaymentSignaturesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentSignaturesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentSignatures_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/Payment/Signatures/{paymentSignatureId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentSignaturesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentSignaturesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentSignatures_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PaymentTypesDelete deletes an existing payment type
*/
func (a *Client) PaymentTypesDelete(params *PaymentTypesDeleteParams, opts ...ClientOption) (*PaymentTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PaymentTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PaymentTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PaymentTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceGroupsDelete deletes a specific performance group
*/
func (a *Client) PerformanceGroupsDelete(params *PerformanceGroupsDeleteParams, opts ...ClientOption) (*PerformanceGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PerformanceGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePackageModeOfSalesDelete deletes an existing performance package mode of sale
*/
func (a *Client) PerformancePackageModeOfSalesDelete(params *PerformancePackageModeOfSalesDeleteParams, opts ...ClientOption) (*PerformancePackageModeOfSalesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePackageModeOfSalesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePackageModeOfSales_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PerformancePackageModeOfSales/{performancePackageModeOfSaleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePackageModeOfSalesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePackageModeOfSalesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePackageModeOfSales_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePriceLayersDelete deletes an existing performance price layer
*/
func (a *Client) PerformancePriceLayersDelete(params *PerformancePriceLayersDeleteParams, opts ...ClientOption) (*PerformancePriceLayersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PerformancePriceLayers/{performancePriceLayerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePriceLayers_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePriceLayersDeleteLayers deletes performance price layers for a set of performances and layer type
*/
func (a *Client) PerformancePriceLayersDeleteLayers(params *PerformancePriceLayersDeleteLayersParams, opts ...ClientOption) (*PerformancePriceLayersDeleteLayersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceLayersDeleteLayersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceLayers_DeleteLayers",
		Method:             "DELETE",
		PathPattern:        "/TXN/PerformancePriceLayers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceLayersDeleteLayersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceLayersDeleteLayersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePriceLayers_DeleteLayers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePriceTypesDelete deletes an existing performance price type
*/
func (a *Client) PerformancePriceTypesDelete(params *PerformancePriceTypesDeleteParams, opts ...ClientOption) (*PerformancePriceTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PerformancePriceTypes/{performancePriceTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePriceTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePriceTypesDeleteAll deletes all performance price types for a set of performance and price layer types and price types
*/
func (a *Client) PerformancePriceTypesDeleteAll(params *PerformancePriceTypesDeleteAllParams, opts ...ClientOption) (*PerformancePriceTypesDeleteAllNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePriceTypesDeleteAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePriceTypes_DeleteAll",
		Method:             "DELETE",
		PathPattern:        "/TXN/PerformancePriceTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePriceTypesDeleteAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePriceTypesDeleteAllNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePriceTypes_DeleteAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancePricesDelete deletes an existing performance price
*/
func (a *Client) PerformancePricesDelete(params *PerformancePricesDeleteParams, opts ...ClientOption) (*PerformancePricesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancePricesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformancePrices_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PerformancePrices/{performancePriceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancePricesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancePricesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformancePrices_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceStatusesDelete deletes an existing performance status
*/
func (a *Client) PerformanceStatusesDelete(params *PerformanceStatusesDeleteParams, opts ...ClientOption) (*PerformanceStatusesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceStatusesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceStatuses_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PerformanceStatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceStatusesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceStatusesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceStatuses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformanceTypesDelete deletes an existing performance type
*/
func (a *Client) PerformanceTypesDelete(params *PerformanceTypesDeleteParams, opts ...ClientOption) (*PerformanceTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformanceTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformanceTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PerformanceTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformanceTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformanceTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PerformanceTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformancesDeleteSingleHold deletes a single hold on a performance seat
*/
func (a *Client) PerformancesDeleteSingleHold(params *PerformancesDeleteSingleHoldParams, opts ...ClientOption) (*PerformancesDeleteSingleHoldNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformancesDeleteSingleHoldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Performances_DeleteSingleHold",
		Method:             "DELETE",
		PathPattern:        "/TXN/Performances/{performanceId}/Seats/{seatId}/SingleHold/{holdCodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformancesDeleteSingleHoldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformancesDeleteSingleHoldNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Performances_DeleteSingleHold: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhilanthropyTypesDelete deletes an existing philosophy type
*/
func (a *Client) PhilanthropyTypesDelete(params *PhilanthropyTypesDeleteParams, opts ...ClientOption) (*PhilanthropyTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhilanthropyTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PhilanthropyTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhilanthropyTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhilanthropyDelete deletes an existing philanthropy entry
*/
func (a *Client) PhilanthropyDelete(params *PhilanthropyDeleteParams, opts ...ClientOption) (*PhilanthropyDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhilanthropyDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Philanthropy_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Philanthropy/{philanthropyEntryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhilanthropyDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhilanthropyDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Philanthropy_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhoneIndicatorsDelete deletes an existing phone indicator
*/
func (a *Client) PhoneIndicatorsDelete(params *PhoneIndicatorsDeleteParams, opts ...ClientOption) (*PhoneIndicatorsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneIndicatorsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneIndicators_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PhoneIndicators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneIndicatorsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneIndicatorsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhoneIndicators_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhoneTypesDelete deletes an existing phone type
*/
func (a *Client) PhoneTypesDelete(params *PhoneTypesDeleteParams, opts ...ClientOption) (*PhoneTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhoneTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PhoneTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PhoneTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhoneTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhoneTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhoneTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesDelete deletes a phone
*/
func (a *Client) PhonesDelete(params *PhonesDeleteParams, opts ...ClientOption) (*PhonesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Phones/{phoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanPrioritiesDelete deletes an existing plan priority
*/
func (a *Client) PlanPrioritiesDelete(params *PlanPrioritiesDeleteParams, opts ...ClientOption) (*PlanPrioritiesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanPrioritiesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanPriorities_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PlanPriorities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanPrioritiesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanPrioritiesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanPriorities_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanSourcesDelete deletes an existing plan source
*/
func (a *Client) PlanSourcesDelete(params *PlanSourcesDeleteParams, opts ...ClientOption) (*PlanSourcesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanSourcesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanSources_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PlanSources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanSourcesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanSourcesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanSources_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanStatusesDelete deletes an existing plan status
*/
func (a *Client) PlanStatusesDelete(params *PlanStatusesDeleteParams, opts ...ClientOption) (*PlanStatusesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanStatusesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanStatuses_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PlanStatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanStatusesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanStatusesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanStatuses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanTypesDelete deletes an existing plan type
*/
func (a *Client) PlanTypesDelete(params *PlanTypesDeleteParams, opts ...ClientOption) (*PlanTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PlanTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlanWorkersDelete deletes a plan worker
*/
func (a *Client) PlanWorkersDelete(params *PlanWorkersDeleteParams, opts ...ClientOption) (*PlanWorkersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlanWorkersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlanWorkers_Delete",
		Method:             "DELETE",
		PathPattern:        "/Finance/PlanWorkers/{planWorkerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlanWorkersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlanWorkersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlanWorkers_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlansDelete deletes a plan
*/
func (a *Client) PlansDelete(params *PlansDeleteParams, opts ...ClientOption) (*PlansDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlansDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Plans_Delete",
		Method:             "DELETE",
		PathPattern:        "/Finance/Plans/{planId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlansDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlansDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Plans_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PortfolioCustomElementsDelete deletes an existing portfolio custom element
*/
func (a *Client) PortfolioCustomElementsDelete(params *PortfolioCustomElementsDeleteParams, opts ...ClientOption) (*PortfolioCustomElementsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortfolioCustomElementsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PortfolioCustomElements_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PortfolioCustomElements/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PortfolioCustomElementsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PortfolioCustomElementsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PortfolioCustomElements_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrefixesDelete deletes an existing prefix
*/
func (a *Client) PrefixesDelete(params *PrefixesDeleteParams, opts ...ClientOption) (*PrefixesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrefixesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Prefixes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Prefixes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrefixesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrefixesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Prefixes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PremieresDelete deletes an existing premiere
*/
func (a *Client) PremieresDelete(params *PremieresDeleteParams, opts ...ClientOption) (*PremieresDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPremieresDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Premieres_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Premieres/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PremieresDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PremieresDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Premieres_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceCategoriesDelete deletes an existing price category
*/
func (a *Client) PriceCategoriesDelete(params *PriceCategoriesDeleteParams, opts ...ClientOption) (*PriceCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PriceCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceEventsDelete deletes an existing price event
*/
func (a *Client) PriceEventsDelete(params *PriceEventsDeleteParams, opts ...ClientOption) (*PriceEventsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceEventsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceEvents_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PriceEvents/{priceEventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceEventsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceEventsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceEvents_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceLayerTypesDelete deletes an existing price layer type
*/
func (a *Client) PriceLayerTypesDelete(params *PriceLayerTypesDeleteParams, opts ...ClientOption) (*PriceLayerTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceLayerTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceLayerTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PriceLayerTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceLayerTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceLayerTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceLayerTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTemplatesDelete deletes an existing price template
*/
func (a *Client) PriceTemplatesDelete(params *PriceTemplatesDeleteParams, opts ...ClientOption) (*PriceTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTemplatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTemplates_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PriceTemplates/{priceTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTemplatesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTemplatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTemplates_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeCategoriesDelete deletes an existing price type category
*/
func (a *Client) PriceTypeCategoriesDelete(params *PriceTypeCategoriesDeleteParams, opts ...ClientOption) (*PriceTypeCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PriceTypeCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeGroupsDelete deletes an existing price type group
*/
func (a *Client) PriceTypeGroupsDelete(params *PriceTypeGroupsDeleteParams, opts ...ClientOption) (*PriceTypeGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PriceTypeGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeReasonsDelete deletes an existing price type reason
*/
func (a *Client) PriceTypeReasonsDelete(params *PriceTypeReasonsDeleteParams, opts ...ClientOption) (*PriceTypeReasonsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeReasonsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeReasons_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PriceTypeReasons/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeReasonsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeReasonsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeReasons_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypeUserGroupsDelete deletes an existing price type user group mapping
*/
func (a *Client) PriceTypeUserGroupsDelete(params *PriceTypeUserGroupsDeleteParams, opts ...ClientOption) (*PriceTypeUserGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypeUserGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypeUserGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PriceTypeUserGroups/{priceTypeUserGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypeUserGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypeUserGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypeUserGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PriceTypesDelete deletes an existing price type
*/
func (a *Client) PriceTypesDelete(params *PriceTypesDeleteParams, opts ...ClientOption) (*PriceTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPriceTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PriceTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PriceTypes/{priceTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PriceTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PriceTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PriceTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleCategoriesDelete deletes an existing pricing rule category
*/
func (a *Client) PricingRuleCategoriesDelete(params *PricingRuleCategoriesDeleteParams, opts ...ClientOption) (*PricingRuleCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PricingRuleCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleMessageTypesDelete deletes an existing pricing rule message type
*/
func (a *Client) PricingRuleMessageTypesDelete(params *PricingRuleMessageTypesDeleteParams, opts ...ClientOption) (*PricingRuleMessageTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleMessageTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleMessageTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/PricingRuleMessageTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleMessageTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleMessageTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleMessageTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRuleSetsDelete deletes an existing pricing rule set
*/
func (a *Client) PricingRuleSetsDelete(params *PricingRuleSetsDeleteParams, opts ...ClientOption) (*PricingRuleSetsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRuleSetsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRuleSets_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PricingRuleSets/{pricingRuleSetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRuleSetsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRuleSetsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRuleSets_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PricingRulesDelete deletes an existing pricing rule
*/
func (a *Client) PricingRulesDelete(params *PricingRulesDeleteParams, opts ...ClientOption) (*PricingRulesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingRulesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingRules_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/PricingRules/{pricingRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PricingRulesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingRulesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PricingRules_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrintersDelete deletes an existing printer
*/
func (a *Client) PrintersDelete(params *PrintersDeleteParams, opts ...ClientOption) (*PrintersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrintersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Printers_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Printers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrintersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrintersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Printers_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProductionSeasonMembershipOrganizationsDelete deletes an existing production season membership organization
*/
func (a *Client) ProductionSeasonMembershipOrganizationsDelete(params *ProductionSeasonMembershipOrganizationsDeleteParams, opts ...ClientOption) (*ProductionSeasonMembershipOrganizationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductionSeasonMembershipOrganizationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProductionSeasonMembershipOrganizations_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/ProductionSeasonMembershipOrganizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductionSeasonMembershipOrganizationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductionSeasonMembershipOrganizationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductionSeasonMembershipOrganizations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProgramListingsDelete deletes a program listing
*/
func (a *Client) ProgramListingsDelete(params *ProgramListingsDeleteParams, opts ...ClientOption) (*ProgramListingsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramListingsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProgramListings_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/ProgramListings/{programListingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramListingsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramListingsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProgramListings_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProgramsDelete deletes an existing program
*/
func (a *Client) ProgramsDelete(params *ProgramsDeleteParams, opts ...ClientOption) (*ProgramsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgramsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Programs_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Programs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProgramsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgramsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Programs_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PronounsDelete pronouns delete API
*/
func (a *Client) PronounsDelete(params *PronounsDeleteParams, opts ...ClientOption) (*PronounsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPronounsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Pronouns_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Pronouns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PronounsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PronounsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Pronouns_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QualificationCategoriesDelete deletes an existing qualification category
*/
func (a *Client) QualificationCategoriesDelete(params *QualificationCategoriesDeleteParams, opts ...ClientOption) (*QualificationCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QualificationCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/QualificationCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QualificationCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QualificationsDelete deletes an existing qualification
*/
func (a *Client) QualificationsDelete(params *QualificationsDeleteParams, opts ...ClientOption) (*QualificationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQualificationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Qualifications_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Qualifications/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QualificationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QualificationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Qualifications_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementFiltersDelete deletes a query element filter
*/
func (a *Client) QueryElementFiltersDelete(params *QueryElementFiltersDeleteParams, opts ...ClientOption) (*QueryElementFiltersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementFiltersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementFilters_Delete",
		Method:             "DELETE",
		PathPattern:        "/Reporting/QueryElementFilters/{queryElementFilterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementFiltersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementFiltersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElementFilters_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementGroupsDelete deletes a query element group
*/
func (a *Client) QueryElementGroupsDelete(params *QueryElementGroupsDeleteParams, opts ...ClientOption) (*QueryElementGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElementGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/Reporting/QueryElementGroups/{queryElementGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElementGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryElementsDelete deletes a query element
*/
func (a *Client) QueryElementsDelete(params *QueryElementsDeleteParams, opts ...ClientOption) (*QueryElementsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryElementsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryElements_Delete",
		Method:             "DELETE",
		PathPattern:        "/Reporting/QueryElements/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryElementsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryElementsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryElements_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RankTypesDelete deletes an existing rank type
*/
func (a *Client) RankTypesDelete(params *RankTypesDeleteParams, opts ...ClientOption) (*RankTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RankTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/RankTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RankTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RankingsDelete deletes a ranking
*/
func (a *Client) RankingsDelete(params *RankingsDeleteParams, opts ...ClientOption) (*RankingsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRankingsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Rankings_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Rankings/{rankingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RankingsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RankingsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Rankings_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReceiptSettingsDelete deletes an existing receipt setting
*/
func (a *Client) ReceiptSettingsDelete(params *ReceiptSettingsDeleteParams, opts ...ClientOption) (*ReceiptSettingsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiptSettingsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReceiptSettings_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ReceiptSettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReceiptSettingsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReceiptSettingsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReceiptSettings_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReferenceTableUserGroupsDelete deletes an existing reference table user group mapping
*/
func (a *Client) ReferenceTableUserGroupsDelete(params *ReferenceTableUserGroupsDeleteParams, opts ...ClientOption) (*ReferenceTableUserGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReferenceTableUserGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReferenceTableUserGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ReferenceTableUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReferenceTableUserGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReferenceTableUserGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReferenceTableUserGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RelationshipCategoriesDelete deletes an existing relationship category
*/
func (a *Client) RelationshipCategoriesDelete(params *RelationshipCategoriesDeleteParams, opts ...ClientOption) (*RelationshipCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelationshipCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RelationshipCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/RelationshipCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RelationshipCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelationshipCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelationshipCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportRequestsDeleteAllExpired deletes all the expired requests as of the provided date time
*/
func (a *Client) ReportRequestsDeleteAllExpired(params *ReportRequestsDeleteAllExpiredParams, opts ...ClientOption) (*ReportRequestsDeleteAllExpiredNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportRequestsDeleteAllExpiredParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportRequests_DeleteAllExpired",
		Method:             "DELETE",
		PathPattern:        "/Reporting/ReportRequests/Expired",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportRequestsDeleteAllExpiredReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportRequestsDeleteAllExpiredNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportRequests_DeleteAllExpired: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportUserGroupsDelete deletes an existing report user group mapping
*/
func (a *Client) ReportUserGroupsDelete(params *ReportUserGroupsDeleteParams, opts ...ClientOption) (*ReportUserGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportUserGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReportUserGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ReportUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportUserGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportUserGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportUserGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResearchTypesDelete deletes an existing research type
*/
func (a *Client) ResearchTypesDelete(params *ResearchTypesDeleteParams, opts ...ClientOption) (*ResearchTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResearchTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ResearchTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResearchTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResearchDelete deletes an existing research entry
*/
func (a *Client) ResearchDelete(params *ResearchDeleteParams, opts ...ClientOption) (*ResearchDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResearchDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Research_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Research/{researchEntryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResearchDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResearchDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Research_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceCategoriesDelete deletes an existing resource category
*/
func (a *Client) ResourceCategoriesDelete(params *ResourceCategoriesDeleteParams, opts ...ClientOption) (*ResourceCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ResourceCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceSchedulesDelete deletes a busy or available resource schedule booking assignment schedules must be deleted by updating their booking
*/
func (a *Client) ResourceSchedulesDelete(params *ResourceSchedulesDeleteParams, opts ...ClientOption) (*ResourceSchedulesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceSchedulesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceSchedules_Delete",
		Method:             "DELETE",
		PathPattern:        "/EventsManagement/ResourceSchedules/{resourceScheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceSchedulesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceSchedulesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceSchedules_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceTypesDelete deletes an existing resource type
*/
func (a *Client) ResourceTypesDelete(params *ResourceTypesDeleteParams, opts ...ClientOption) (*ResourceTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/EventsManagement/ResourceTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResourceTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourcesDelete deletes an existing resource
*/
func (a *Client) ResourcesDelete(params *ResourcesDeleteParams, opts ...ClientOption) (*ResourcesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourcesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Resources_Delete",
		Method:             "DELETE",
		PathPattern:        "/EventsManagement/Resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourcesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourcesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Resources_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesChannelsDelete deletes an existing sales channel
*/
func (a *Client) SalesChannelsDelete(params *SalesChannelsDeleteParams, opts ...ClientOption) (*SalesChannelsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesChannelsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesChannels_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SalesChannels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesChannelsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesChannelsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesChannels_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesLayoutButtonTypesDelete deletes an existing sales layout button type
*/
func (a *Client) SalesLayoutButtonTypesDelete(params *SalesLayoutButtonTypesDeleteParams, opts ...ClientOption) (*SalesLayoutButtonTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutButtonTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayoutButtonTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SalesLayoutButtonTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutButtonTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutButtonTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesLayoutButtonTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalesLayoutsDelete deletes an existing sales layout setup
*/
func (a *Client) SalesLayoutsDelete(params *SalesLayoutsDeleteParams, opts ...ClientOption) (*SalesLayoutsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesLayoutsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalesLayouts_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/SalesLayouts/Setup/{salesLayoutId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalesLayoutsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalesLayoutsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalesLayouts_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalutationTypesDelete deletes an existing salutation type
*/
func (a *Client) SalutationTypesDelete(params *SalutationTypesDeleteParams, opts ...ClientOption) (*SalutationTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SalutationTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SalutationTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalutationTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SalutationsDelete deletes a salutation
*/
func (a *Client) SalutationsDelete(params *SalutationsDeleteParams, opts ...ClientOption) (*SalutationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalutationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Salutations_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/Salutations/{salutationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalutationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalutationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Salutations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SchedulePatternTypesDelete deletes an existing schedule pattern
*/
func (a *Client) SchedulePatternTypesDelete(params *SchedulePatternTypesDeleteParams, opts ...ClientOption) (*SchedulePatternTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulePatternTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SchedulePatternTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SchedulePatternTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulePatternTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulePatternTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SchedulePatternTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScheduleTypesDelete deletes an existing schedule type
*/
func (a *Client) ScheduleTypesDelete(params *ScheduleTypesDeleteParams, opts ...ClientOption) (*ScheduleTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ScheduleTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduleTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeasonTypesDelete deletes an existing season type
*/
func (a *Client) SeasonTypesDelete(params *SeasonTypesDeleteParams, opts ...ClientOption) (*SeasonTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeasonTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SeasonTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeasonTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeasonsDelete deletes an existing season
*/
func (a *Client) SeasonsDelete(params *SeasonsDeleteParams, opts ...ClientOption) (*SeasonsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeasonsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Seasons_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Seasons/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeasonsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeasonsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Seasons_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeatCodesDelete deletes an existing seat code
*/
func (a *Client) SeatCodesDelete(params *SeatCodesDeleteParams, opts ...ClientOption) (*SeatCodesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatCodesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatCodes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SeatCodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatCodesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatCodesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeatCodes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SeatStatusesDelete deletes an existing seat status
*/
func (a *Client) SeatStatusesDelete(params *SeatStatusesDeleteParams, opts ...ClientOption) (*SeatStatusesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeatStatusesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeatStatuses_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SeatStatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeatStatusesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeatStatusesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SeatStatuses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SectionsDelete deletes an existing section
*/
func (a *Client) SectionsDelete(params *SectionsDeleteParams, opts ...ClientOption) (*SectionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSectionsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Sections_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Sections/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SectionsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SectionsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sections_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceResourceUserGroupsDelete deletes an existing service resource user group mapping
*/
func (a *Client) ServiceResourceUserGroupsDelete(params *ServiceResourceUserGroupsDeleteParams, opts ...ClientOption) (*ServiceResourceUserGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceResourceUserGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceResourceUserGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ServiceResourceUserGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceResourceUserGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceResourceUserGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceResourceUserGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SessionDeleteVariable deletes an existing session variable
*/
func (a *Client) SessionDeleteVariable(params *SessionDeleteVariableParams, opts ...ClientOption) (*SessionDeleteVariableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionDeleteVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Session_DeleteVariable",
		Method:             "DELETE",
		PathPattern:        "/Web/Session/{sessionKey}/Variables/{variableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionDeleteVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionDeleteVariableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Session_DeleteVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SourceGroupsDelete deletes an existing source group
*/
func (a *Client) SourceGroupsDelete(params *SourceGroupsDeleteParams, opts ...ClientOption) (*SourceGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SourceGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SourceGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SourceGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivitiesDelete deletes an activity record
*/
func (a *Client) SpecialActivitiesDelete(params *SpecialActivitiesDeleteParams, opts ...ClientOption) (*SpecialActivitiesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivitiesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivities_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/SpecialActivities/{specialActivityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivitiesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivitiesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivities_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivityStatusesDelete deletes an existing special activity status
*/
func (a *Client) SpecialActivityStatusesDelete(params *SpecialActivityStatusesDeleteParams, opts ...ClientOption) (*SpecialActivityStatusesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityStatusesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityStatuses_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SpecialActivityStatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityStatusesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityStatusesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivityStatuses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpecialActivityTypesDelete deletes an existing special activity type
*/
func (a *Client) SpecialActivityTypesDelete(params *SpecialActivityTypesDeleteParams, opts ...ClientOption) (*SpecialActivityTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecialActivityTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecialActivityTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SpecialActivityTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecialActivityTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecialActivityTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecialActivityTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StatesDelete deletes an existing state
*/
func (a *Client) StatesDelete(params *StatesDeleteParams, opts ...ClientOption) (*StatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "States_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/States/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StatesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for States_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepTypesDelete deletes an existing step type
*/
func (a *Client) StepTypesDelete(params *StepTypesDeleteParams, opts ...ClientOption) (*StepTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StepTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/StepTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StepTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepsDelete deletes a step
*/
func (a *Client) StepsDelete(params *StepsDeleteParams, opts ...ClientOption) (*StepsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Steps_Delete",
		Method:             "DELETE",
		PathPattern:        "/Finance/Steps/{stepId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Steps_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubLineItemStatusesDelete deletes an existing sub line item status
*/
func (a *Client) SubLineItemStatusesDelete(params *SubLineItemStatusesDeleteParams, opts ...ClientOption) (*SubLineItemStatusesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubLineItemStatusesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubLineItemStatuses_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SubLineItemStatuses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubLineItemStatusesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubLineItemStatusesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubLineItemStatuses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SuffixesDelete deletes an existing suffix
*/
func (a *Client) SuffixesDelete(params *SuffixesDeleteParams, opts ...ClientOption) (*SuffixesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuffixesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Suffixes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Suffixes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuffixesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuffixesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Suffixes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SurveyQuestionsDelete deletes an existing survey question
*/
func (a *Client) SurveyQuestionsDelete(params *SurveyQuestionsDeleteParams, opts ...ClientOption) (*SurveyQuestionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyQuestionsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyQuestions_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/SurveyQuestions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyQuestionsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyQuestionsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SurveyQuestions_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SurveyResponsesDelete deletes an existing survey response
*/
func (a *Client) SurveyResponsesDelete(params *SurveyResponsesDeleteParams, opts ...ClientOption) (*SurveyResponsesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSurveyResponsesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SurveyResponses_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/SurveyResponses/{surveyResponseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SurveyResponsesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SurveyResponsesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SurveyResponses_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplateCategoriesDelete deletes a template category
*/
func (a *Client) TemplateCategoriesDelete(params *TemplateCategoriesDeleteParams, opts ...ClientOption) (*TemplateCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/TemplateCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplateCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplateCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplatePriceTypesDelete deletes an existing template price type
*/
func (a *Client) TemplatePriceTypesDelete(params *TemplatePriceTypesDeleteParams, opts ...ClientOption) (*TemplatePriceTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatePriceTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplatePriceTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/TemplatePriceTypes/{templatePriceTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatePriceTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatePriceTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TemplatePriceTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TemplatesDelete deletes a template
*/
func (a *Client) TemplatesDelete(params *TemplatesDeleteParams, opts ...ClientOption) (*TemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Templates_Delete",
		Method:             "DELETE",
		PathPattern:        "/Templates/{templateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TemplatesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Templates_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TheatersDelete deletes an existing theater
*/
func (a *Client) TheatersDelete(params *TheatersDeleteParams, opts ...ClientOption) (*TheatersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTheatersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Theaters_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/Theaters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TheatersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TheatersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Theaters_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimeSlotsDelete deletes an existing time slot
*/
func (a *Client) TimeSlotsDelete(params *TimeSlotsDeleteParams, opts ...ClientOption) (*TimeSlotsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeSlotsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TimeSlots_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/TimeSlots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeSlotsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeSlotsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeSlots_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriPOSCloudConfigurationsDelete deletes an existing tri p o s cloud configuration
*/
func (a *Client) TriPOSCloudConfigurationsDelete(params *TriPOSCloudConfigurationsDeleteParams, opts ...ClientOption) (*TriPOSCloudConfigurationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriPOSCloudConfigurationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TriPOSCloudConfigurations_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/TriPOSCloudConfigurations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriPOSCloudConfigurationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriPOSCloudConfigurationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TriPOSCloudConfigurations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeCategoriesDelete deletes an existing upgrade category
*/
func (a *Client) UpgradeCategoriesDelete(params *UpgradeCategoriesDeleteParams, opts ...ClientOption) (*UpgradeCategoriesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCategoriesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeCategories_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/UpgradeCategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeCategoriesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeCategoriesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpgradeCategories_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebContentTypesDelete deletes an existing web content type with the provided id
*/
func (a *Client) WebContentTypesDelete(params *WebContentTypesDeleteParams, opts ...ClientOption) (*WebContentTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebContentTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebContentTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/WebContentTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebContentTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebContentTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebContentTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebLoginsDelete deletes a weblogin
*/
func (a *Client) WebLoginsDelete(params *WebLoginsDeleteParams, opts ...ClientOption) (*WebLoginsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebLoginsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WebLogins_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/WebLogins/{loginId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebLoginsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebLoginsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WebLogins_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerQualificationsDelete deletes an existing worker qualification
*/
func (a *Client) WorkerQualificationsDelete(params *WorkerQualificationsDeleteParams, opts ...ClientOption) (*WorkerQualificationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerQualificationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerQualifications_Delete",
		Method:             "DELETE",
		PathPattern:        "/CRM/WorkerQualifications/{workerQualificationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerQualificationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerQualificationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerQualifications_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerRolesDelete deletes an existing worker role
*/
func (a *Client) WorkerRolesDelete(params *WorkerRolesDeleteParams, opts ...ClientOption) (*WorkerRolesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerRolesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerRoles_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/WorkerRoles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerRolesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerRolesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerRoles_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkerTypesDelete deletes an existing worker type
*/
func (a *Client) WorkerTypesDelete(params *WorkerTypesDeleteParams, opts ...ClientOption) (*WorkerTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkerTypesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkerTypes_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/WorkerTypes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkerTypesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkerTypesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkerTypes_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkersDelete deletes a worker
*/
func (a *Client) WorkersDelete(params *WorkersDeleteParams, opts ...ClientOption) (*WorkersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Workers_Delete",
		Method:             "DELETE",
		PathPattern:        "/Finance/Workers/{workerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workers_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZoneGroupsDelete deletes an existing zone group
*/
func (a *Client) ZoneGroupsDelete(params *ZoneGroupsDeleteParams, opts ...ClientOption) (*ZoneGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/ReferenceData/ZoneGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ZoneGroups_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZoneMapsDelete deletes an existing zone map
*/
func (a *Client) ZoneMapsDelete(params *ZoneMapsDeleteParams, opts ...ClientOption) (*ZoneMapsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneMapsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZoneMaps_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/ZoneMaps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneMapsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneMapsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ZoneMaps_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZonesDelete deletes an existing zone
*/
func (a *Client) ZonesDelete(params *ZonesDeleteParams, opts ...ClientOption) (*ZonesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZonesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Zones_Delete",
		Method:             "DELETE",
		PathPattern:        "/TXN/Zones/{zoneMapId},{zoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZonesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Zones_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
