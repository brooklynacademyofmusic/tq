// Code generated by go-swagger; DO NOT EDIT.

package d_e_l_e_t_e

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAccountsDeleteAccountParams creates a new AccountsDeleteAccountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAccountsDeleteAccountParams() *AccountsDeleteAccountParams {
	return &AccountsDeleteAccountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAccountsDeleteAccountParamsWithTimeout creates a new AccountsDeleteAccountParams object
// with the ability to set a timeout on a request.
func NewAccountsDeleteAccountParamsWithTimeout(timeout time.Duration) *AccountsDeleteAccountParams {
	return &AccountsDeleteAccountParams{
		timeout: timeout,
	}
}

// NewAccountsDeleteAccountParamsWithContext creates a new AccountsDeleteAccountParams object
// with the ability to set a context for a request.
func NewAccountsDeleteAccountParamsWithContext(ctx context.Context) *AccountsDeleteAccountParams {
	return &AccountsDeleteAccountParams{
		Context: ctx,
	}
}

// NewAccountsDeleteAccountParamsWithHTTPClient creates a new AccountsDeleteAccountParams object
// with the ability to set a custom HTTPClient for a request.
func NewAccountsDeleteAccountParamsWithHTTPClient(client *http.Client) *AccountsDeleteAccountParams {
	return &AccountsDeleteAccountParams{
		HTTPClient: client,
	}
}

/*
AccountsDeleteAccountParams contains all the parameters to send to the API endpoint

	for the accounts delete account operation.

	Typically these are written to a http.Request.
*/
type AccountsDeleteAccountParams struct {

	// AccountID.
	AccountID string

	/* OverrideDeleteProtection.

	   If payment card tokenization is enabled and multiple constituents are using the same token, the token cannot be deleted at the processor. Set to true to override this behavior and delete the token anyway.
	*/
	OverrideDeleteProtection *string

	/* TransactionOrigin.

	   Text indicating the origin of the transaction. The text will be written to T_PAYMENT_GATEWAY_ACTIVITY.origin if payment card tokenization is enabled. Max of 20 characters, will be truncated if longer.
	*/
	TransactionOrigin string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the accounts delete account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccountsDeleteAccountParams) WithDefaults() *AccountsDeleteAccountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the accounts delete account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccountsDeleteAccountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithTimeout(timeout time.Duration) *AccountsDeleteAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithContext(ctx context.Context) *AccountsDeleteAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithHTTPClient(client *http.Client) *AccountsDeleteAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithAccountID(accountID string) *AccountsDeleteAccountParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithOverrideDeleteProtection adds the overrideDeleteProtection to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithOverrideDeleteProtection(overrideDeleteProtection *string) *AccountsDeleteAccountParams {
	o.SetOverrideDeleteProtection(overrideDeleteProtection)
	return o
}

// SetOverrideDeleteProtection adds the overrideDeleteProtection to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetOverrideDeleteProtection(overrideDeleteProtection *string) {
	o.OverrideDeleteProtection = overrideDeleteProtection
}

// WithTransactionOrigin adds the transactionOrigin to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithTransactionOrigin(transactionOrigin string) *AccountsDeleteAccountParams {
	o.SetTransactionOrigin(transactionOrigin)
	return o
}

// SetTransactionOrigin adds the transactionOrigin to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetTransactionOrigin(transactionOrigin string) {
	o.TransactionOrigin = transactionOrigin
}

// WriteToRequest writes these params to a swagger request
func (o *AccountsDeleteAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID); err != nil {
		return err
	}

	if o.OverrideDeleteProtection != nil {

		// query param overrideDeleteProtection
		var qrOverrideDeleteProtection string

		if o.OverrideDeleteProtection != nil {
			qrOverrideDeleteProtection = *o.OverrideDeleteProtection
		}
		qOverrideDeleteProtection := qrOverrideDeleteProtection
		if qOverrideDeleteProtection != "" {

			if err := r.SetQueryParam("overrideDeleteProtection", qOverrideDeleteProtection); err != nil {
				return err
			}
		}
	}

	// query param transactionOrigin
	qrTransactionOrigin := o.TransactionOrigin
	qTransactionOrigin := qrTransactionOrigin
	if qTransactionOrigin != "" {

		if err := r.SetQueryParam("transactionOrigin", qTransactionOrigin); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
