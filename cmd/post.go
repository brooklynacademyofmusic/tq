// Code generated by tq/generator; DO NOT EDIT.

package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/skysyzygy/tq/tq"
)


var Post_AccountTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "accounttypes",  "at",  },
		Use: `AccountTypes {"CardLength":"string","CardPrefix":"string","CardtypeIndicator":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditMask":"string","Id":123,"Inactive":true,"Mod10Indicator":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new account type`,
		Long:  `Create a new account type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AccountTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Accounts_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "accounts",  },
		Use: `Accounts {"AccountNumber":"string","CardExpiryMonth":123,"CardExpiryYear":123,"ConstituentId":123,"ExclusiveToControlledBatchId":123,"Inactive":true,"Name":"string","PaymentMethodGroupId":123,"ReturnAccountIfAccountExists":true,"TransactionOrigin":"string","VantivEncryptedCard":{"Version":"string"}}`,
		Short: `Create a credit card account`,
		Long:  `Create a credit card account, storing the card number. Will create and store a token if tokenization is enabled.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("DirectDebitAccount"); test {
				out, err = tq.Do(*_tq, _tq.Post.AccountsCreateDirectDebitAccount , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SepaAccount"); test {
				out, err = tq.Do(*_tq, _tq.Post.AccountsCreateSepaAccount , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("VantivEncryptedCardAccount"); test {
				out, err = tq.Do(*_tq, _tq.Post.AccountsCreateVantivEncryptedCardAccount , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.AccountsCreateCardNumberAccount , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ActionTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "actiontypes",  "at",  },
		Use: `ActionTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"LetterIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new action type`,
		Long:  `Create a new action type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ActionTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Actions_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "actions",  },
		Use: `Actions {"ActionDate":"2000-01-01T00:00:00.000Z","ActionType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Issue":{"Id":123},"LetterPrintedDate":"2000-01-01T00:00:00.000Z","Notes":"string","Resolved":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create an issue action for a Constituent`,
		Long:  `Create an issue action for a Constituent`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ActionsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ActivityCategories_cmd = &cobra.Command{
		Aliases: []string{  "AC",  "ac",  "activitycategories",  },
		Use: `ActivityCategories {"AutoClose":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new activity category`,
		Long:  `Create a new activity category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ActivityCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ActivityTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "activitytypes",  "at",  },
		Use: `ActivityTypes {"Category":{"Id":123},"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PerfIndicator":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new activity type`,
		Long:  `Create a new activity type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ActivityTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_AddressTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "addresstypes",  "at",  },
		Use: `AddressTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new address type`,
		Long:  `Create a new address type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AddressTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Addresses_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "addresses",  },
		Use: `Addresses {"AddressType":{"Id":123},"AffiliatedConstituent":{"Id":123},"AltSalutationType":{"Id":123},"City":"string","Constituent":{"Id":123},"Country":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DeliveryPoint":"string","EditIndicator":true,"EndDate":"2000-01-01T00:00:00.000Z","GeoArea":123,"Id":123,"Inactive":true,"IsFromAffiliation":true,"Label":true,"Months":"string","NcoaAction":123,"NcoaSession":123,"PostalCode":"string","PostalCodeFormatted":"string","PrimaryIndicator":true,"StartDate":"2000-01-01T00:00:00.000Z","State":{"Id":123},"Street1":"string","Street1Address":{"Number":"string","Street":"string"},"Street2":"string","Street3":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new address for a Constituent by sending an XML or JSON representation of an Address object using HTTP POST`,
		Long:  `Create a new address for a Constituent by sending an XML or JSON representation of an Address object using HTTP POST.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AddressesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_AffiliationInfo_cmd = &cobra.Command{
		Aliases: []string{  "AI",  "affiliationinfo",  "ai",  },
		Use: `AffiliationInfo {"AffiliationType":{"Id":123},"ConstituentId":123,"EditIndicator":true,"EndDate":"2000-01-01T00:00:00.000Z","Id":123,"Inactive":true,"IsAllowedToTransact":true,"IsIncludedInSearchResults":true,"NameIndicator":123,"Note":"string","PrimaryIndicator":true,"ProtectionType":{"Id":123},"Rank":123,"RelatedConstituentFirstName":"string","RelatedConstituentGender":{"Id":123},"RelatedConstituentId":123,"RelatedConstituentInactive":true,"RelatedConstituentLastName":"string","RelatedConstituentMiddleName":"string","RelatedConstituentNameStatusDescription":"string","RelatedConstituentNameStatusId":123,"RelatedConstituentPrefix":{"Id":123},"RelatedConstituentShortDisplayName":"string","RelatedConstituentSortName":"string","RelatedConstituentSuffix":{"Id":123},"RelatedConstituentType":{"Id":123},"Salary":123.456,"StartDate":"2000-01-01T00:00:00.000Z","Title":"string"}`,
		Short: `Create affiliation between a group constituent and its related constituent`,
		Long:  `Create affiliation between a group constituent and its related constituent. If the related constituent does not exist then create the related constituent as well before creating the affiliation.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AffiliationInfoPostAffiliation , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_AffiliationTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "affiliationtypes",  "at",  },
		Use: `AffiliationTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"IsAllowedToTransactDefault":true,"IsIncludedInSearchResultsDefault":true,"RelationshipCategory":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UseSalary":true,"UseTitle":true}`,
		Short: `Create a new affiliation type`,
		Long:  `Create a new affiliation type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AffiliationTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Affiliations_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "affiliations",  },
		Use: `Affiliations {"AddressId":123,"AffiliatedName":"string","AffiliationType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"ElectronicAddressId":123,"EndDate":"2000-01-01T00:00:00.000Z","GroupConstituent":{"Id":123},"GroupConstituentName":"string","GroupConstituentSortName":"string","Id":123,"Inactive":true,"IndividualConstituent":{"Id":123},"IndividualConstituentName":"string","IndividualConstituentSortName":"string","IsAllowedToTransact":true,"IsIncludedInSearchResults":true,"NameIndicator":123,"Note":"string","PrimaryIndicator":true,"Salary":123.456,"SalutationId":123,"StartDate":"2000-01-01T00:00:00.000Z","Title":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new affiliation`,
		Long:  `Create a new affiliation.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AffiliationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_AliasTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "aliastypes",  "at",  },
		Use: `AliasTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new alias type`,
		Long:  `Create a new alias type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AliasTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Aliases_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "aliases",  },
		Use: `Aliases {"AliasFirstName":"string","AliasLastName":"string","AliasType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new alias`,
		Long:  `Create a new alias.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AliasesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_AnalyticsReports_cmd = &cobra.Command{
		Aliases: []string{  "AR",  "analyticsreports",  "ar",  },
		Use: `AnalyticsReports {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Division":{"Id":"string"},"Id":123,"Inactive":true,"ReportPath":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create SSRS Reports for display in Analytics`,
		Long:  `Create SSRS Reports for display in Analytics.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AnalyticsReportsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_AppealCategories_cmd = &cobra.Command{
		Aliases: []string{  "AC",  "ac",  "appealcategories",  },
		Use: `AppealCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new appeal category`,
		Long:  `Create a new appeal category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AppealCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Artists_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "artists",  },
		Use: `Artists {"Bio":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","FirstName":"string","Id":123,"LastName":"string","MiddleName":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","VoiceId":123}`,
		Short: `Create a new artist`,
		Long:  `Create a new artist.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ArtistsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_AssetTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "assettypes",  "at",  },
		Use: `AssetTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new asset type`,
		Long:  `Create a new asset type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AssetTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Assets_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "assets",  },
		Use: `Assets {"AcquisitionDateTime":"2000-01-01T00:00:00.000Z","AssetType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"EstimatedValue":123.456,"Id":123,"Notes":"string","SaleDateTime":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create an asset for a constituent`,
		Long:  `Create an asset for a constituent.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AssetsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_AssociationTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "associationtypes",  "at",  },
		Use: `AssociationTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"IsIncludedInSearchResultsDefault":true,"ReciprocalType":{"Id":123},"RelationshipCategory":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UseBirthDate":true,"UseGender":true}`,
		Short: `Create a new association type`,
		Long:  `Create a new association type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AssociationTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Associations_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "associations",  },
		Use: `Associations {"AssociatedConstituent":{"Id":123},"AssociatedName":"string","AssociationType":{"Id":123},"BirthDate":"2000-01-01T00:00:00.000Z","Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"EndDate":"2000-01-01T00:00:00.000Z","Gender":{"Id":123},"Id":123,"Inactive":true,"IsIncludedInSearchResults":true,"Note":"string","ReciprocalAssociation":{"Id":123},"StartDate":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new association`,
		Long:  `Create a new association.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AssociationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Attributes_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "attributes",  },
		Use: `Attributes {"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Keyword":{"Id":123},"KeywordConstituentType":{"Inactive":true,"Rank":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Value":"string"}`,
		Short: `Create a new attribute`,
		Long:  `Create a new attribute.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.AttributesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Authenticate_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "authenticate",  },
		Use: `Authenticate {"Application":"string","MachineLocation":"string","Password":"string","UserGroup":"string","UserName":"string"}`,
		Short: `Authenticate the provided credentials`,
		Long:  `Authenticate the provided credentials`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("AuthenticateWindows"); test {
				out, err = tq.Do(*_tq, _tq.Post.AuthenticateAuthenticateWindows , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("GenerateToken"); test {
				out, err = tq.Do(*_tq, _tq.Post.AuthenticateGenerateToken , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("GenerateTokenWindows"); test {
				out, err = tq.Do(*_tq, _tq.Post.AuthenticateGenerateTokenWindows , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ValidateToken"); test {
				out, err = tq.Do(*_tq, _tq.Post.AuthenticateValidateToken , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.AuthenticateAuthenticate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Authorization_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "authorization",  },
		Use: `Authorization {"AllowPartialAuth":true,"Amount":123.456,"AuthorizationCode":"string","BillingAddress":{"AddressId":123,"Country":"string","PostalCode":"string","Street1":"string"},"Card":{"AccountId":123,"CardHolderName":"string","CardNumber":"string","Cvv2":"string","ExpirationDate":"string","TessituraMerchantServicesData":"string","Track1":"string","Track2":"string"},"ConstituentId":123,"DeliveryDate":"2000-01-01T00:00:00.000Z","IsECommerce":true,"IsRecurring":true,"PaymentId":123,"PaymentMethodId":123,"ReferenceNumber":"string","ReturnUrl":"string","ShopperIp":"string","StoreAccount":true,"ThreeDSecureData":{"EciIndicatorType":"string","MpiSessionId":"string","SecureTransactionId":"string","SecureTransactionSecurity":"string","VerAuthValue":"string","VerCertificateSerialCardAcceptor":"string","VerCertificateSerialCardHolder":"string","VerHashResult":"string"},"TransactionOrigin":"string","UserData":"string"}`,
		Short: `Authorize a payment using a manually keyed`,
		Long:  `Authorize a payment using a manually keyed, swiped or encrypted card data, including payments made using the Tessitura Merchant Services Payment Component.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Confirm"); test {
				out, err = tq.Do(*_tq, _tq.Post.AuthorizationConfirm , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ConfirmPayByLink"); test {
				out, err = tq.Do(*_tq, _tq.Post.AuthorizationConfirmPayByLink , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Finalize"); test {
				out, err = tq.Do(*_tq, _tq.Post.AuthorizationFinalize , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Link"); test {
				out, err = tq.Do(*_tq, _tq.Post.AuthorizationLink , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Reverse"); test {
				out, err = tq.Do(*_tq, _tq.Post.AuthorizationReverse , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.AuthorizationAuthorize , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Batch_cmd = &cobra.Command{
		Aliases: []string{  "B",  "b",  "batch",  },
		Use: `Batch {"Requests":[{"Id":123},...]}`,
		Short: ``,
		Long:  ``,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BatchSample , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BatchMaintenance_cmd = &cobra.Command{
		Aliases: []string{  "BM",  "batchmaintenance",  "bm",  },
		Use: `BatchMaintenance {"AmtPosted":123.456,"BatchType":{"Id":123},"CloseDateTime":"2000-01-01T00:00:00.000Z","ClosedBy":"string","CntlIndicator":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"Notes":"string","NumAccCc":123,"NumRejCc":123,"OpenLoc":"string","Owner":"string","PostId":123,"PostedBy":"string","PostedDateTime":"2000-01-01T00:00:00.000Z","Status":"string","TallyPlAmount":123.456,"TallyReAmount":123.456,"UniqueTag":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Batch`,
		Long:  `Create a new Batch`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BatchMaintenanceCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BatchTypeGroups_cmd = &cobra.Command{
		Aliases: []string{  "BTG",  "batchtypegroups",  "btg",  },
		Use: `BatchTypeGroups {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new batch type group`,
		Long:  `Create a new batch type group.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BatchTypeGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BatchTypes_cmd = &cobra.Command{
		Aliases: []string{  "BT",  "batchtypes",  "bt",  },
		Use: `BatchTypes {"BatchTypeGroup":{"Id":123},"BusinessUnit":{"Id":123},"Category":123,"CntlIndicator":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new batch type`,
		Long:  `Create a new batch type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BatchTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BillingSchedules_cmd = &cobra.Command{
		Aliases: []string{  "BS",  "billingschedules",  "bs",  },
		Use: `BillingSchedules {"BillAmounts":"string","BillDates":"string","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"LongDescription":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Billing Schedule`,
		Long:  `Create a new Billing Schedule.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BillingSchedulesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BillingTypes_cmd = &cobra.Command{
		Aliases: []string{  "BT",  "billingtypes",  "bt",  },
		Use: `BillingTypes {"AutoBillingIndicator":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Billing Type`,
		Long:  `Create a new Billing Type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BillingTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BookingCategories_cmd = &cobra.Command{
		Aliases: []string{  "BC",  "bc",  "bookingcategories",  },
		Use: `BookingCategories {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Booking Category`,
		Long:  `Create a new Booking Category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BookingCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BookingTemplates_cmd = &cobra.Command{
		Aliases: []string{  "BT",  "bookingtemplates",  "bt",  },
		Use: `BookingTemplates {"Assignments":[{"Id":123},...],"Category":{"Id":123},"ConfirmationText":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Notes":"string","OverrideTime":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Booking Template`,
		Long:  `Create a new Booking Template`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BookingTemplatesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Bookings_cmd = &cobra.Command{
		Aliases: []string{  "B",  "b",  "bookings",  },
		Use: `Bookings {"Assignments":[{"Id":123},...],"BookingSource":123,"Category":{"Id":123},"ConfirmationText":"string","Context":{},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultCount":123,"DefaultDateTime":"2000-01-01T00:00:00.000Z","DefaultDuration":123,"Description":"string","EditIndicator":true,"Id":123,"Notes":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Booking`,
		Long:  `Create a new Booking`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("AddDocument"); test {
				out, err = tq.Do(*_tq, _tq.Post.BookingsAddDocument , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("FromTemplate"); test {
				out, err = tq.Do(*_tq, _tq.Post.BookingsCreateFromTemplate , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.BookingsCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BulkCopySets_cmd = &cobra.Command{
		Aliases: []string{  "BCS",  "bcs",  "bulkcopysets",  },
		Use: `BulkCopySets {"AvailableForSaleIndicator":true,"ControlGroup":{"Id":123},"CopyCredits":true,"CopyNotes":true,"CopyOffers":true,"CopyPriceEvents":true,"CopyPrices":true,"CreateFriday":true,"CreateFromDateTime":"2000-01-01T00:00:00.000Z","CreateLocation":"string","CreateMode":"string","CreateMonday":true,"CreateSaturday":true,"CreateSunday":true,"CreateThursday":true,"CreateToDateTime":"2000-01-01T00:00:00.000Z","CreateTuesday":true,"CreateWednesday":true,"CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultRelativeDates":"string","Id":123,"Inactive":true,"OverrideOnSale":true,"PackageCode":"string","PackageCodeSeed":123,"PackageModeOfSaleRelativeDates":"string","PerformanceCode":"string","PerformanceCodeSeed":123,"PerformanceDescription":"string","PerformanceModeOfSaleRelativeDates":"string","PerformanceStatus":{"Id":123},"PerformanceTime":"string","PerformanceType":{"Id":123},"PriceEventRelativeDates":"string","PriceTypeRelativeDates":"string","ProductionSeason":{"Id":123},"PublishRelativeDates":"string","ReferenceDay":"2000-01-01T00:00:00.000Z","ReferencePerformanceId":123,"ReferenceSeasonString":"string","SetDescription":"string","SetType":123,"ShortName":"string","TimeSlot":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Creates a new bulk copy set`,
		Long:  `Creates a new bulk copy set.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("CopyDay"); test {
				out, err = tq.Do(*_tq, _tq.Post.BulkCopySetsCopyDay , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("CopyEvent"); test {
				out, err = tq.Do(*_tq, _tq.Post.BulkCopySetsCopyEvent , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ReplaceExclusions"); test {
				out, err = tq.Do(*_tq, _tq.Post.BulkCopySetsReplaceExclusions , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.BulkCopySetsCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BulkDailyCopyExclusions_cmd = &cobra.Command{
		Aliases: []string{  "BDCE",  "bdce",  "bulkdailycopyexclusions",  },
		Use: `BulkDailyCopyExclusions {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DoNotCopy":true,"Id":123,"IncludeWithoutCopy":true,"PackageId":123,"PerformanceId":123,"SetId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Creates a bulk daily copy exclusion`,
		Long:  `Creates a bulk daily copy exclusion.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BulkDailyCopyExclusionsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_BusinessUnits_cmd = &cobra.Command{
		Aliases: []string{  "BU",  "bu",  "businessunits",  },
		Use: `BusinessUnits {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new business unit`,
		Long:  `Create a new business unit.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.BusinessUnitsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_CampaignDesignations_cmd = &cobra.Command{
		Aliases: []string{  "CD",  "campaigndesignations",  "cd",  },
		Use: `CampaignDesignations {"Campaign":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultIndicator":true,"Designation":{"Id":123},"EditIndicator":true,"GoalAmount":123.456,"Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new association between a Designation and a Campaign`,
		Long:  `Create a new association between a Designation and a Campaign.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.CampaignDesignationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_CampaignFunds_cmd = &cobra.Command{
		Aliases: []string{  "CF",  "campaignfunds",  "cf",  },
		Use: `CampaignFunds {"Campaign":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"EndDateTime":"2000-01-01T00:00:00.000Z","Fund":{"Id":123},"GoalAmount":123.456,"Id":123,"StartDateTime":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Fund association to a Campaign`,
		Long:  `Create a new Fund association to a Campaign.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.CampaignFundsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_CardReaderTypes_cmd = &cobra.Command{
		Aliases: []string{  "CRT",  "cardreadertypes",  "crt",  },
		Use: `CardReaderTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Card Reader Type`,
		Long:  `Create a new Card Reader Type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.CardReaderTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Cart_cmd = &cobra.Command{
		Aliases: []string{  "C",  "c",  "cart",  },
		Use: `Cart {"BookingId":123,"SessionKey":"string"}`,
		Short: `Attach an existing booking to the cart`,
		Long:  `Attach an existing booking to the cart.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("AddContribution"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddContribution , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("AddFee"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddUpdateFee , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("AddGiftCertificate"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddGiftCertificate , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("AddNFSPackagePerformanceItem"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddNFSPackagePerformanceItem , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("AddOnAccount"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddOnAccount , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("AddPackageItem"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddPackageItem , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("AddPaymentPlan"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddPaymentPlan , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("AddPaymentPlanBasedOnBillingSchedule"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddPaymentPlanBasedOnBillingSchedule , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("AddPaymentPlanInstallments"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddPaymentPlanInstallments , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("AddSubPackageItem"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAddSubPackageItem , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ApplyCashPayment"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartApplyCashPayment , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ApplyCheckPayment"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartApplyCheckPayment , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ApplyGiftCertificate"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartApplyGiftCertificate , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ApplyInvoicePayment"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartApplyInvoicePayment , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ApplyOnAccountPayment"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartApplyOnAccountPayment , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ApplyOtherPayment"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartApplyOtherPayment , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Authorize"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartAuthorize , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Checkout"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartCheckout , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("CheckoutWithCard"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartCheckoutWithCard , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("PreviewPaymentPlanBasedOnBillingSchedule"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartPreviewPaymentPlanBasedOnBillingSchedule , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Price"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartPrice , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("PrintEmail"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartPrintEmail , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("PrintPrintStrings"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartPrintPrintStrings , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("PrintTicketElements"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartPrintTicketElements , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ReserveTickets"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartReserveTickets , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ReserveTicketsForLineItem"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartReserveTicketsForLineItem , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ReturnTicket"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartReturnTicket , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ReturnTicketWithSeat"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartReturnTicketWithSeat , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Validate"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartValidate , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ValidateLimits"); test {
				out, err = tq.Do(*_tq, _tq.Post.CartValidateLimits , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.CartAddBooking , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Colors_cmd = &cobra.Command{
		Aliases: []string{  "C",  "c",  "colors",  },
		Use: `Colors {"ColorValue":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new color`,
		Long:  `Create a new color.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ColorsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Composers_cmd = &cobra.Command{
		Aliases: []string{  "C",  "c",  "composers",  },
		Use: `Composers {"Bio":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","FirstName":"string","Id":123,"Inactive":true,"LastName":"string","MiddleName":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new composer`,
		Long:  `Create a new composer.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ComposersCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Constituencies_cmd = &cobra.Command{
		Aliases: []string{  "C",  "c",  "constituencies",  },
		Use: `Constituencies {"ConstituencyType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"EndDate":"2000-01-01T00:00:00.000Z","Id":123,"StartDate":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new constituency`,
		Long:  `Create a new constituency.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ConstituenciesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ConstituencyTypes_cmd = &cobra.Command{
		Aliases: []string{  "CT",  "constituencytypes",  "ct",  },
		Use: `ConstituencyTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rank":123,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new constituency type`,
		Long:  `Create a new constituency type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ConstituencyTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ConstituentDocuments_cmd = &cobra.Command{
		Aliases: []string{  "CD",  "cd",  "constituentdocuments",  },
		Use: `ConstituentDocuments {"Category":{"Id":123},"ConstituentId":123,"Contents":"AA==","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","FileName":"string","Id":123,"Notes":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create document for a constituent`,
		Long:  `Create document for a constituent.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ConstituentDocumentsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ConstituentGroups_cmd = &cobra.Command{
		Aliases: []string{  "CG",  "cg",  "constituentgroups",  },
		Use: `ConstituentGroups {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new constituent group`,
		Long:  `Create a new constituent group.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ConstituentGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ConstituentInactives_cmd = &cobra.Command{
		Aliases: []string{  "CI",  "ci",  "constituentinactives",  },
		Use: `ConstituentInactives {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new constituent inactive`,
		Long:  `Create a new constituent inactive.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ConstituentInactivesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ConstituentProtectionTypes_cmd = &cobra.Command{
		Aliases: []string{  "CPT",  "constituentprotectiontypes",  "cpt",  },
		Use: `ConstituentProtectionTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new constituent protection type`,
		Long:  `Create a new constituent protection type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ConstituentProtectionTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ConstituentTypeAffiliates_cmd = &cobra.Command{
		Aliases: []string{  "CTA",  "constituenttypeaffiliates",  "cta",  },
		Use: `ConstituentTypeAffiliates {"AffiliationType":{"Id":123},"ConstituentType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","HouseholdPrimary":true,"Id":123,"Rank":123,"ShowWithGroup":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new constituent type affiliate`,
		Long:  `Create a new constituent type affiliate.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ConstituentTypeAffiliatesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ConstituentTypes_cmd = &cobra.Command{
		Aliases: []string{  "CT",  "constituenttypes",  "ct",  },
		Use: `ConstituentTypes {"AddressTypeId":123,"ConstituentGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultAffiliatedConstituentTypeId":123,"DefaultAffiliationTypeId":123,"DefaultIndicator":true,"DefaultSalutationId":123,"Description":"string","ElectronicAddressTypeId":123,"GiftAidIndicator":true,"Id":123,"Inactive":true,"LoginTypeId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new constituent type`,
		Long:  `Create a new constituent type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ConstituentTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Constituents_cmd = &cobra.Command{
		Aliases: []string{  "C",  "c",  "constituents",  },
		Use: `Constituents {"Addresses":[{"Id":123},...],"ConstituentType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DisplayName":"string","ElectronicAddresses":[{"Id":123},...],"EmarketIndicator":{"Id":123},"FirstName":"string","Gender":{"Id":123},"Id":123,"Inactive":{"Id":123},"InactiveReason":{"Id":123},"LastActivityDate":"2000-01-01T00:00:00.000Z","LastGiftDate":"2000-01-01T00:00:00.000Z","LastName":"string","LastTicketDate":"2000-01-01T00:00:00.000Z","MailIndicator":{"Id":123},"MiddleName":"string","NameStatus":{"Id":123},"OriginalSource":{"Id":123},"PhoneIndicator":{"Id":123},"PhoneNumbers":[{"Id":123},...],"Prefix":{"Id":123},"ProtectionType":{"Id":123},"Salutations":[{"Id":123},...],"SortName":"string","Suffix":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new constituent with addresses`,
		Long:  `Create a new constituent with addresses, electronicAddresses, salutations and phones.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("ConstituentUsingSnapshot"); test {
				out, err = tq.Do(*_tq, _tq.Post.ConstituentsCreateConstituentUsingSnapshot , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ConvertGroupToIndividual"); test {
				out, err = tq.Do(*_tq, _tq.Post.ConstituentsConvertGroupToIndividual , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ConvertIndividualToHousehold"); test {
				out, err = tq.Do(*_tq, _tq.Post.ConstituentsConvertIndividualToHousehold , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ConvertIndividualToOrganization"); test {
				out, err = tq.Do(*_tq, _tq.Post.ConstituentsConvertIndividualToOrganization , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SchedulePurge"); test {
				out, err = tq.Do(*_tq, _tq.Post.ConstituentsSchedulePurge , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SearchByCardNumber"); test {
				out, err = tq.Do(*_tq, _tq.Post.ConstituentsSearchByCardNumber , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SwapConstituentA1A2"); test {
				out, err = tq.Do(*_tq, _tq.Post.ConstituentsSwapConstituentA1A2 , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("UnschedulePurge"); test {
				out, err = tq.Do(*_tq, _tq.Post.ConstituentsUnschedulePurge , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.ConstituentsCreateConstituent , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContactPermissionCategories_cmd = &cobra.Command{
		Aliases: []string{  "CPC",  "contactpermissioncategories",  "cpc",  },
		Use: `ContactPermissionCategories {"AskFrequencyMonths":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contact permission category`,
		Long:  `Create a new contact permission category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContactPermissionCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContactPermissionTypes_cmd = &cobra.Command{
		Aliases: []string{  "CPT",  "contactpermissiontypes",  "cpt",  },
		Use: `ContactPermissionTypes {"Category":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultValueForAdd":"string","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Presenter":true,"Rank":123,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contact permission type`,
		Long:  `Create a new contact permission type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContactPermissionTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContactPermissions_cmd = &cobra.Command{
		Aliases: []string{  "CP",  "contactpermissions",  "cp",  },
		Use: `ContactPermissions {"Answer":"string","Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"LastAskedDateTime":"2000-01-01T00:00:00.000Z","ShouldAsk":true,"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contact permission`,
		Long:  `Create a new contact permission`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("ForTransaction"); test {
				out, err = tq.Do(*_tq, _tq.Post.ContactPermissionsForTransaction , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.ContactPermissionsCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContactPointCategories_cmd = &cobra.Command{
		Aliases: []string{  "CPC",  "contactpointcategories",  "cpc",  },
		Use: `ContactPointCategories {"ContactPointKey":"string","ContactPointTable":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contact point category`,
		Long:  `Create a new contact point category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContactPointCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContactPointCategoryPurposes_cmd = &cobra.Command{
		Aliases: []string{  "CPCP",  "contactpointcategorypurposes",  "cpcp",  },
		Use: `ContactPointCategoryPurposes {"ContactPointCategory":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"Purpose":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contact point category purpose`,
		Long:  `Create a new contact point category purpose.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContactPointCategoryPurposesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContactPointPurposeCategories_cmd = &cobra.Command{
		Aliases: []string{  "CPPC",  "contactpointpurposecategories",  "cppc",  },
		Use: `ContactPointPurposeCategories {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contact point purpose category`,
		Long:  `Create a new contact point purpose category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContactPointPurposeCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContactPointPurposeMaps_cmd = &cobra.Command{
		Aliases: []string{  "CPPM",  "contactpointpurposemaps",  "cppm",  },
		Use: `ContactPointPurposeMaps {"ContactPoint":{"Id":123},"ContactPointCategory":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Purpose":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contact point purpose`,
		Long:  `Create a new contact point purpose.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContactPointPurposeMapsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContactPointPurposes_cmd = &cobra.Command{
		Aliases: []string{  "CPP",  "contactpointpurposes",  "cpp",  },
		Use: `ContactPointPurposes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PurposeCategory":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contact point purpose`,
		Long:  `Create a new contact point purpose.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContactPointPurposesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContactTypes_cmd = &cobra.Command{
		Aliases: []string{  "CT",  "contacttypes",  "ct",  },
		Use: `ContactTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contact type`,
		Long:  `Create a new contact type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContactTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContributionDesignations_cmd = &cobra.Command{
		Aliases: []string{  "CD",  "cd",  "contributiondesignations",  },
		Use: `ContributionDesignations {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"LetterText":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new contribution designation`,
		Long:  `Create a new contribution designation.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContributionDesignationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ContributionImportSets_cmd = &cobra.Command{
		Aliases: []string{  "CIS",  "cis",  "contributionimportsets",  },
		Use: `ContributionImportSets {"AccountMatchKeyword":{"Id":123},"AcknowledgmentLetterMode":123,"BatchType":{"Id":123},"BillingSchedule":{"Id":123},"BillingType":{"Id":123},"Campaign":{"Id":123},"ContributionDateTime":"2000-01-01T00:00:00.000Z","ContributionPayMode":123,"CreateLocation":"string","CreatePotentialDuplicate":true,"CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","CrediteeMode":123,"CrediteeType":{"Id":123},"DefaultConstituentType":{"Id":123},"DefaultCountryCode":"string","DefaultHouseholdConstituentType":{"Id":123},"DefaultOriginalSource":{"Id":123},"Description":"string","Designation":{"Id":123},"FilePath":"string","FormatFile":"string","Fund":{"Id":123},"Id":123,"ImportRefNoLocation":123,"Inactive":true,"PaymentMethod":{"Id":123},"SalesChannel":{"Id":123},"Source":{"Id":123},"StripPhoneFormatting":true,"TransactAsHousehold":true,"TransactAsHouseholdCreditee":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Worker":{"Id":123}}`,
		Short: `Create a new contributionImportSet`,
		Long:  `Create a new contributionImportSet.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContributionImportSetsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Contributions_cmd = &cobra.Command{
		Aliases: []string{  "C",  "c",  "contributions",  },
		Use: `Contributions {"AccountId":123,"AppealId":123,"BatchId":123,"BillingAccount":"string","BillingTypeId":123,"BusinessUnitId":123,"Campaign":{"Id":123},"Cancel":"string","Channel":{"Id":123},"Constituent":{"Id":123},"ContributionAmount":123.456,"ContributionDateTime":"2000-01-01T00:00:00.000Z","ContributionDesignation":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Custom0":"string","Custom1":"string","Custom2":"string","Custom3":"string","Custom4":"string","Custom5":"string","Custom6":"string","Custom7":"string","Custom8":"string","Custom9":"string","EditIndicator":true,"Fund":{"Id":123},"Id":123,"Initiator":{"Id":123},"KindGiftDescription":"string","KindGiftTransferDateTime":"2000-01-01T00:00:00.000Z","MatchIndicator":"string","MatchingContributionId":123,"MediaType":{"Id":123},"MirrorLock":123,"Notes":"string","PaymentEndDateTime":"2000-01-01T00:00:00.000Z","PaymentStartDateTime":"2000-01-01T00:00:00.000Z","Plan":{"Id":123},"PledgeStatusId":123,"ReceivedAmount":123.456,"Solicitor":"string","SourceId":123,"Type":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `This resource is currently strictly for interceptor plugin use`,
		Long:  `This resource is currently strictly for interceptor plugin use. This is called any time a new contribution is saved from the contribution editor in the client application. Only Id (ref_no) is provided in the request content.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ContributionsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ControlGroupUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "CGUG",  "cgug",  "controlgroupusergroups",  },
		Use: `ControlGroupUserGroups {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultIndicator":true,"EditIndicator":true,"Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroupId":"string"}`,
		Short: `Create a new control group/user group mapping`,
		Long:  `Create a new control group/user group mapping.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ControlGroupUserGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ControlGroups_cmd = &cobra.Command{
		Aliases: []string{  "CG",  "cg",  "controlgroups",  },
		Use: `ControlGroups {"CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Permission":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new control group`,
		Long:  `Create a new control group.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ControlGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_CoreIdentity_cmd = &cobra.Command{
		Aliases: []string{  "CI",  "ci",  "coreidentity",  },
		Use: `CoreIdentity {"Body":"string","Headers":[{"Name":"string","Value":"string"},...],"Method":"string","Path":"string","QueryParameters":[{"Name":"string","Value":"string"},...]}`,
		Short: ``,
		Long:  ``,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.CoreIdentitySign , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Countries_cmd = &cobra.Command{
		Aliases: []string{  "C",  "c",  "countries",  },
		Use: `Countries {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DecimalSeparator":"string","Description":"string","Id":123,"Inactive":true,"IsoAlpha2Code":"string","IsoAlpha3Code":"string","PhoneCode":"string","PhoneEditstring":"string","PhoneMask":"string","PhoneValidLengths":"string","ReqCity":true,"ReqPcode":true,"ShortDesc":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UseAvs":"string","UseStateField":"string","ZipEditstring":"string","ZipMask":"string","ZipValidLengths":"string"}`,
		Short: `Create a new country`,
		Long:  `Create a new country.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.CountriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_CrediteeTypes_cmd = &cobra.Command{
		Aliases: []string{  "CT",  "crediteetypes",  "ct",  },
		Use: `CrediteeTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","CreditMembershipIndicator":true,"Description":"string","GiftAidIndicator":true,"Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new crediteeType`,
		Long:  `Create a new crediteeType.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.CrediteeTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_CurrencyTypes_cmd = &cobra.Command{
		Aliases: []string{  "CT",  "ct",  "currencytypes",  },
		Use: `CurrencyTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rate":123.456,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new currency type`,
		Long:  `Create a new currency type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.CurrencyTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Custom_cmd = &cobra.Command{
		Aliases: []string{  "C",  "c",  "custom",  },
		Use: `Custom {"ParameterValues":[{"Name":"string","Value":"string"},...],"Parameters":"string","ProcedureId":123,"ProcedureName":"string"}`,
		Short: `Executes a local procedure defined in TR_LOCAL_PROCEDURE`,
		Long:  `Executes a local procedure defined in TR_LOCAL_PROCEDURE. This will only return a collection of the first result set in a registered procedure.  For the result set, null values in each data row are not returned as properties.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("ExecuteLocalProcedureWithMultipleResultSets"); test {
				out, err = tq.Do(*_tq, _tq.Post.CustomExecuteLocalProcedureWithMultipleResultSets , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.CustomExecuteLocalProcedure , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_CustomDefaultCategories_cmd = &cobra.Command{
		Aliases: []string{  "CDC",  "cdc",  "customdefaultcategories",  },
		Use: `CustomDefaultCategories {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new custom default category`,
		Long:  `Create a new custom default category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.CustomDefaultCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_CustomDefaults_cmd = &cobra.Command{
		Aliases: []string{  "CD",  "cd",  "customdefaults",  },
		Use: `CustomDefaults {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","CustomDefaultCategory":{"Id":123},"DefaultValue":"string","Description":"string","FieldName":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new custom default`,
		Long:  `Create a new custom default.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.CustomDefaultsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_DeliveryMethods_cmd = &cobra.Command{
		Aliases: []string{  "DM",  "deliverymethods",  "dm",  },
		Use: `DeliveryMethods {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PrintAtHome":true,"RequireAddress":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new delivery method`,
		Long:  `Create a new delivery method.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.DeliveryMethodsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_DesignationCodes_cmd = &cobra.Command{
		Aliases: []string{  "DC",  "dc",  "designationcodes",  },
		Use: `DesignationCodes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new designation code`,
		Long:  `Create a new designation code.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.DesignationCodesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Diagnostics_cmd = &cobra.Command{
		Aliases: []string{  "D",  "d",  "diagnostics",  },
		Use: `Diagnostics {"ServerName":"string"}`,
		Short: `Check connection information`,
		Long:  `Check connection information.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.DiagnosticsCheck , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_DirectDebitAccountTypes_cmd = &cobra.Command{
		Aliases: []string{  "DDAT",  "ddat",  "directdebitaccounttypes",  },
		Use: `DirectDebitAccountTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new direct debit account type`,
		Long:  `Create a new direct debit account type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.DirectDebitAccountTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_DiscountTypes_cmd = &cobra.Command{
		Aliases: []string{  "DT",  "discounttypes",  "dt",  },
		Use: `DiscountTypes {"Amount":123.456,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PercentIndicator":true,"RespectMinimumPrice":true,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new discount type`,
		Long:  `Create a new discount type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.DiscountTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_DocumentCategories_cmd = &cobra.Command{
		Aliases: []string{  "DC",  "dc",  "documentcategories",  },
		Use: `DocumentCategories {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"ParentTableName":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new documentCategory`,
		Long:  `Create a new documentCategory.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.DocumentCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_DonationLevels_cmd = &cobra.Command{
		Aliases: []string{  "DL",  "dl",  "donationlevels",  },
		Use: `DonationLevels {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"ProgramType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new donation level`,
		Long:  `Create a new donation level.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.DonationLevelsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_EMV_cmd = &cobra.Command{
		Aliases: []string{  "emv",  },
		Use: `EMV {"Amount":123.456,"BillingAddress":{"AddressId":123,"Country":"string","PostalCode":"string","Street1":"string"},"ConstituentId":123,"IsMoto":true,"MachineId":123,"PaymentId":123,"StoreAccount":true,"TransactionOrigin":"string","UserData":"string"}`,
		Short: `Authorize a payment via a Payment Express HIT`,
		Long:  `Authorize a payment via a Payment Express HIT, TriPOSCloud, or Adyen device.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Lane"); test {
				out, err = tq.Do(*_tq, _tq.Post.EMVCreateLane , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Signature"); test {
				out, err = tq.Do(*_tq, _tq.Post.EMVSignature , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Token"); test {
				out, err = tq.Do(*_tq, _tq.Post.EMVTokenCreate , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.EMVAuthorization , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ElectronicAddressTypes_cmd = &cobra.Command{
		Aliases: []string{  "EAT",  "eat",  "electronicaddresstypes",  },
		Use: `ElectronicAddressTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"IsEmail":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new electronic address type`,
		Long:  `Create a new electronic address type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ElectronicAddressTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ElectronicAddresses_cmd = &cobra.Command{
		Aliases: []string{  "EA",  "ea",  "electronicaddresses",  },
		Use: `ElectronicAddresses {"Address":"string","AffiliatedConstituent":{"Id":123},"AllowHtmlFormat":true,"AllowMarketing":true,"AltSalutationType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"ElectronicAddressType":{"Id":123},"EndDate":"2000-01-01T00:00:00.000Z","Id":123,"Inactive":true,"IsEmail":true,"IsFromAffiliation":true,"Months":"string","PrimaryIndicator":true,"StartDate":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new electronic address`,
		Long:  `Create a new electronic address.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Move"); test {
				out, err = tq.Do(*_tq, _tq.Post.ElectronicAddressesMove , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.ElectronicAddressesCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_EmailProfiles_cmd = &cobra.Command{
		Aliases: []string{  "EP",  "emailprofiles",  "ep",  },
		Use: `EmailProfiles {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EmailBcc":"string","EmailCc":"string","EmailDefaultSubject":"string","EmailFrom":"string","Id":123,"Inactive":true,"SMTPPassword":"string","SMTPPort":123,"SMTPServer":"string","SMTPUserName":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UseSsl":true}`,
		Short: `Create a new email profile`,
		Long:  `Create a new email profile`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.EmailProfilesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_EmailResponses_cmd = &cobra.Command{
		Aliases: []string{  "ER",  "emailresponses",  "er",  },
		Use: `EmailResponses {"ConstituentId":123,"DownloadNumber":123,"EventDateTime":"2000-01-01T00:00:00.000Z","EventName":"string"}`,
		Short: `Updates an appeal with customer data in response to an email event`,
		Long:  `Updates an appeal with customer data in response to an email event. EventName should be one of open, click, hard-bounce, soft-bounce or opt-out.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.EmailResponsesUpdateAppeal , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Emails_cmd = &cobra.Command{
		Aliases: []string{  "E",  "e",  "emails",  },
		Use: `Emails {"Attachments":[{"Name":"string"},...],"DuplicateBodyAsAttachment":true,"DuplicateBodyAttachmentName":"string","EmailProfileId":123,"EmbeddedImages":[{"MediaType":"string","Name":"string"},...],"FromAddress":"string","HtmlBody":"string","PlainTextBody":"string","RecipientAddress":"string","Subject":"string"}`,
		Short: `Sends an email via SMTP`,
		Long:  `Sends an email via SMTP`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("SendConstituentInfo"); test {
				out, err = tq.Do(*_tq, _tq.Post.EmailsSendConstituentInfo , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SendLoginCredentials"); test {
				out, err = tq.Do(*_tq, _tq.Post.EmailsSendLoginCredentials , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SendOrderConfirmation"); test {
				out, err = tq.Do(*_tq, _tq.Post.EmailsSendOrderConfirmation , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SendTickets"); test {
				out, err = tq.Do(*_tq, _tq.Post.EmailsSendTickets , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.EmailsSend , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_EmarketIndicators_cmd = &cobra.Command{
		Aliases: []string{  "EI",  "ei",  "emarketindicators",  },
		Use: `EmarketIndicators {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new emarket indicator`,
		Long:  `Create a new emarket indicator.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.EmarketIndicatorsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Eras_cmd = &cobra.Command{
		Aliases: []string{  "E",  "e",  "eras",  },
		Use: `Eras {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new era`,
		Long:  `Create a new era.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ErasCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Facilities_cmd = &cobra.Command{
		Aliases: []string{  "F",  "f",  "facilities",  },
		Use: `Facilities {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultBestSeatMapId":123,"DefaultZoneMapId":123,"Description":"string","Id":123,"SeatMap":{"Id":123},"Theater":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Facility`,
		Long:  `Create a new Facility.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.FacilitiesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Genders_cmd = &cobra.Command{
		Aliases: []string{  "G",  "g",  "genders",  },
		Use: `Genders {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultPrefix":{"Id":123},"Description":"string","Id":123,"Inactive":true,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new gender`,
		Long:  `Create a new gender.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.GendersCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_GiftAidContactMethods_cmd = &cobra.Command{
		Aliases: []string{  "GACM",  "gacm",  "giftaidcontactmethods",  },
		Use: `GiftAidContactMethods {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new gift aid contact method`,
		Long:  `Create a new gift aid contact method.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.GiftAidContactMethodsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_GiftAidDeclarations_cmd = &cobra.Command{
		Aliases: []string{  "GAD",  "gad",  "giftaiddeclarations",  },
		Use: `GiftAidDeclarations {"ConfirmDateTime":"2000-01-01T00:00:00.000Z","Constituent":{"Id":123},"ContactMethod":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DocumentStatus":{"Id":123},"EligibleIndicator":true,"EndDateTime":"2000-01-01T00:00:00.000Z","GiftAidType":{"Id":123},"Id":123,"IneligibleReason":{"Id":123},"Notes":"string","ReceivedDateTime":"2000-01-01T00:00:00.000Z","StartDateTime":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Creates a Gift Aid Declaration`,
		Long:  `Creates a Gift Aid Declaration.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.GiftAidDeclarationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_GiftAidDocumentStatuses_cmd = &cobra.Command{
		Aliases: []string{  "GADS",  "gads",  "giftaiddocumentstatuses",  },
		Use: `GiftAidDocumentStatuses {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new gift aid document status`,
		Long:  `Create a new gift aid document status.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.GiftAidDocumentStatusesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_GiftAidIneligibleReasons_cmd = &cobra.Command{
		Aliases: []string{  "GAIR",  "gair",  "giftaidineligiblereasons",  },
		Use: `GiftAidIneligibleReasons {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new gift aid ineligible reason`,
		Long:  `Create a new gift aid ineligible reason.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.GiftAidIneligibleReasonsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_GiftAidRates_cmd = &cobra.Command{
		Aliases: []string{  "GAR",  "gar",  "giftaidrates",  },
		Use: `GiftAidRates {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EndDateTime":"2000-01-01T00:00:00.000Z","Id":123,"Rate":123.456,"StartDateTime":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new gift aid rate`,
		Long:  `Create a new gift aid rate.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.GiftAidRatesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_GiftAidStatuses_cmd = &cobra.Command{
		Aliases: []string{  "GAS",  "gas",  "giftaidstatuses",  },
		Use: `GiftAidStatuses {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new gift aid status`,
		Long:  `Create a new gift aid status.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.GiftAidStatusesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_GiftAidTypes_cmd = &cobra.Command{
		Aliases: []string{  "GAT",  "gat",  "giftaidtypes",  },
		Use: `GiftAidTypes {"CharityClaimsRef":"string","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new gift aid type`,
		Long:  `Create a new gift aid type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.GiftAidTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_GiftCertificates_cmd = &cobra.Command{
		Aliases: []string{  "GC",  "gc",  "giftcertificates",  },
		Use: `GiftCertificates {"BatchId":123,"LockForBatch":true,"Number":"string","PaymentMethodId":123}`,
		Short: `Get transaction details for a gift certificate and lock it for redemption in a specific batch`,
		Long:  `Get transaction details for a gift certificate and lock it for redemption in a specific batch.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Unlock"); test {
				out, err = tq.Do(*_tq, _tq.Post.GiftCertificatesUnlock , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.GiftCertificatesTransactionDetailsForRedemption , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_HoldCodeCategories_cmd = &cobra.Command{
		Aliases: []string{  "HCC",  "hcc",  "holdcodecategories",  },
		Use: `HoldCodeCategories {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Hold Code Category`,
		Long:  `Create a new Hold Code Category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.HoldCodeCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_HoldCodeUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "HCUG",  "hcug",  "holdcodeusergroups",  },
		Use: `HoldCodeUserGroups {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","HoldCode":{"Id":123},"Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroupId":"string"}`,
		Short: `Create a new hold code/user group mapping`,
		Long:  `Create a new hold code/user group mapping.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.HoldCodeUserGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_HoldCodes_cmd = &cobra.Command{
		Aliases: []string{  "HC",  "hc",  "holdcodes",  },
		Use: `HoldCodes {"BlackoutIndicator":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Legend":"string","Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a Hold Code`,
		Long:  `Create a Hold Code.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.HoldCodesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_InactiveReasons_cmd = &cobra.Command{
		Aliases: []string{  "IR",  "inactivereasons",  "ir",  },
		Use: `InactiveReasons {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new inactive reason`,
		Long:  `Create a new inactive reason.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.InactiveReasonsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_IntegrationDefaults_cmd = &cobra.Command{
		Aliases: []string{  "ID",  "id",  "integrationdefaults",  },
		Use: `IntegrationDefaults {"AccessId":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultValue":"string","Description":"string","FieldName":"string","Id":123,"Integration":{"Id":123},"Organization":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Integration Default`,
		Long:  `Create a new Integration Default.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.IntegrationDefaultsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Integrations_cmd = &cobra.Command{
		Aliases: []string{  "I",  "i",  "integrations",  },
		Use: `Integrations {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new action type`,
		Long:  `Create a new action type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.IntegrationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_InterestCategories_cmd = &cobra.Command{
		Aliases: []string{  "IC",  "ic",  "interestcategories",  },
		Use: `InterestCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new interest category`,
		Long:  `Create a new interest category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.InterestCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_InterestTypes_cmd = &cobra.Command{
		Aliases: []string{  "IT",  "interesttypes",  "it",  },
		Use: `InterestTypes {"Category":{"Id":123},"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"SearchIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UsedIn":"string"}`,
		Short: `Create a new interest type`,
		Long:  `Create a new interest type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.InterestTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Interests_cmd = &cobra.Command{
		Aliases: []string{  "I",  "i",  "interests",  },
		Use: `Interests {"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"InterestType":{"Id":123},"Selected":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Weight":123}`,
		Short: `Create a new interest associating an interest type to a constituent`,
		Long:  `Create a new interest associating an interest type to a constituent.
For bulk interest edits, consider the CRM/Interests/CreateOrUpdate batching resource which allows multiple interests to be created, updated, or removed in a single request.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Or"); test {
				out, err = tq.Do(*_tq, _tq.Post.InterestsCreateOrUpdate , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.InterestsCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Internal_cmd = &cobra.Command{
		Aliases: []string{  "I",  "i",  "internal",  },
		Use: `Internal {"AddressType":{"Id":123},"AffiliatedConstituent":{"Id":123},"AllowTelemarketing1":true,"AllowTelemarketing2":true,"AllowTelemarketing3":true,"AltSalutationType":{"Id":123},"City":"string","Constituent":{"Id":123},"Country":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DayEveningIndicator1":"string","DayEveningIndicator2":"string","DayEveningIndicator3":"string","DeliveryPoint":"string","EditIndicator":true,"EditIndicator1":true,"EditIndicator2":true,"EditIndicator3":true,"EndDate":"2000-01-01T00:00:00.000Z","GeoArea":123,"Id":123,"Inactive":true,"Label":true,"Months":"string","NcoaAction":123,"NcoaSession":123,"PhoneId1":123,"PhoneId2":123,"PhoneId3":123,"PhoneNumber1":"string","PhoneNumber1Formatted":"string","PhoneNumber2":"string","PhoneNumber2Formatted":"string","PhoneNumber3":"string","PhoneNumber3Formatted":"string","PhoneSearch1":"string","PhoneSearch2":"string","PhoneSearch3":"string","PostalCode":"string","PostalCodeFormatted":"string","PrimaryIndicator":true,"StartDate":"2000-01-01T00:00:00.000Z","State":{"Id":123},"Street1":"string","Street2":"string","Street3":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UpdatedDateTime1":"2000-01-01T00:00:00.000Z","UpdatedDateTime2":"2000-01-01T00:00:00.000Z","UpdatedDateTime3":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new address along with the phones and attach all the phones to the address`,
		Long:  `Create a new address along with the phones and attach all the phones to the address. By default first phone is of phone type 1, second phone is of phone type 2 and third phone is of phone type 3.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.InternalCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_InventoryContactPermissionTypes_cmd = &cobra.Command{
		Aliases: []string{  "ICPT",  "icpt",  "inventorycontactpermissiontypes",  },
		Use: `InventoryContactPermissionTypes {"ContactPermissionType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"ProductionElementId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create an inventoryContactPermissionType`,
		Long:  `Create an inventoryContactPermissionType.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.InventoryContactPermissionTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_InventoryWebContents_cmd = &cobra.Command{
		Aliases: []string{  "IWC",  "inventorywebcontents",  "iwc",  },
		Use: `InventoryWebContents {"ContentType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"ProductionElementId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Value":"string"}`,
		Short: `Create an inventoryWebContent`,
		Long:  `Create an inventoryWebContent.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.InventoryWebContentsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_InvoiceBilling_cmd = &cobra.Command{
		Aliases: []string{  "IB",  "ib",  "invoicebilling",  },
		Use: `InvoiceBilling {"AppealId":123,"BatchTypeId":123,"BillingTypeId":123,"BusinessUnitId":123,"CutoffDateTime":"2000-01-01T00:00:00.000Z","ElectronicAddressPurposeId":123,"ElectronicAddressTypeId":123,"EndDateTime":"2000-01-01T00:00:00.000Z","InvoiceEndDateTime":"2000-01-01T00:00:00.000Z","InvoiceStartDateTime":"2000-01-01T00:00:00.000Z","IsLabel":true,"ListId":123,"MailDateTime":"2000-01-01T00:00:00.000Z","MailTypeId":123,"MaxNumberOfBillsToPrint":123,"MediaTypeId":123,"MinAmount":123.456,"MinNumberOfBillsToPrint":123,"NewSourceDescription":"string","PaymentMethodGroupId":123,"PaymentMethodId":123,"RespectElectronicAddressMarketingFlag":true,"SalutationTypeId":123,"ShouldCollectAll":true,"ShouldUpdate":true,"StartDateTime":"2000-01-01T00:00:00.000Z","UserId":"string"}`,
		Short: `Invoice billing`,
		Long:  `Invoice billing`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.InvoiceBillingBillInvoices , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Issues_cmd = &cobra.Command{
		Aliases: []string{  "I",  "i",  "issues",  },
		Use: `Issues {"ActivityType":{"Id":123},"Constituent":{"Id":123},"ContactType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"HasReminder":true,"Id":123,"IssueDate":"2000-01-01T00:00:00.000Z","Notes":"string","Origin":{"Id":123},"PackageId":123,"PerformanceId":123,"ResolvedIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UrgentIndicator":true}`,
		Short: `Create an issue for a Constituent`,
		Long:  `Create an issue for a Constituent`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.IssuesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_KeywordCategories_cmd = &cobra.Command{
		Aliases: []string{  "KC",  "kc",  "keywordcategories",  },
		Use: `KeywordCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new keyword category`,
		Long:  `Create a new keyword category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.KeywordCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Keywords_cmd = &cobra.Command{
		Aliases: []string{  "K",  "k",  "keywords",  },
		Use: `Keywords {"Category":{"Id":123},"ConstituentType":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","CustomDefaultValue":"string","CustomId":123,"CustomLimit":123,"CustomRequired":true,"DataType":"string","Description":"string","DetailColumn":"string","DetailTable":"string","EditIndicator":true,"EditMask":"string","ExtendedDescription":"string","FrequentUpdateDate":"2000-01-01T00:00:00.000Z","HelpText":"string","Id":123,"KeyColumn":"string","KeywordUse":"string","MultipleValue":true,"ParentKeyColumn":"string","ParentTable":"string","PrimaryGroupDefault":"string","ReferenceDescriptionColumn":"string","ReferenceIdColumn":"string","ReferenceSort":"string","ReferenceTable":"string","ReferenceWhere":"string","SortOrder":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UseForSearch":true,"ValuesCodedIndicator":true}`,
		Short: `Create a new keyword`,
		Long:  `Create a new keyword.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.KeywordsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Languages_cmd = &cobra.Command{
		Aliases: []string{  "L",  "l",  "languages",  },
		Use: `Languages {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new language`,
		Long:  `Create a new language.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.LanguagesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ListCategories_cmd = &cobra.Command{
		Aliases: []string{  "LC",  "lc",  "listcategories",  },
		Use: `ListCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new list category`,
		Long:  `Create a new list category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ListCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Lists_cmd = &cobra.Command{
		Aliases: []string{  "L",  "l",  "lists",  },
		Use: `Lists {"AffiliatedIndividuals":123,"AnalyticsIndicator":true,"Category":{"Id":123},"ConstituentCount":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Criteria":[{"Id":123},...],"Description":"string","EditIndicator":true,"EditMode":"string","Generate":true,"Households":123,"Id":123,"Inactive":true,"Individuals":123,"IsDynamic":true,"LastUsedDateTime":"2000-01-01T00:00:00.000Z","ListSql":"string","Organizations":123,"OutputSet":{"Id":123},"RelationshipOptions":{"AffiliatedGroupInactive":true,"AffiliatedGroupTypes":"string","AffiliatedGroupUseDates":true,"AffiliatedIndividualInactive":true,"AffiliatedIndividualTypes":"string","AffiliatedIndividualUseDates":true,"AssociatedInactive":true,"AssociatedTypes":"string","AssociatedUseDates":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","KeepOrReplaceOriginal":"string","ReplaceIndividuals":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"TMSIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a List`,
		Long:  `Create a List.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Generate"); test {
				out, err = tq.Do(*_tq, _tq.Post.ListsGenerate , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Results"); test {
				out, err = tq.Do(*_tq, _tq.Post.ListsResults , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Search"); test {
				out, err = tq.Do(*_tq, _tq.Post.ListsSearch , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.ListsCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_LoginTypes_cmd = &cobra.Command{
		Aliases: []string{  "LT",  "logintypes",  "lt",  },
		Use: `LoginTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new login type`,
		Long:  `Create a new login type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.LoginTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_MachineSettings_cmd = &cobra.Command{
		Aliases: []string{  "MS",  "machinesettings",  "ms",  },
		Use: `MachineSettings {"CardReaderHost":"string","CardReaderPort":123,"CardReaderType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"Inactive":true,"MerchantId":"string","PXStation":"string","PXUserKey":"string","PXUserName":"string","TessituraPaymentsPosDevice":"string","TessituraPaymentsPosDeviceModel":"string","TnspaySoftwareTerminal":true,"TriPOSCloudConfiguration":{"Id":123},"TriposLane":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","WorkstationName":"string"}`,
		Short: `Create a new Machine Setting`,
		Long:  `Create a new Machine Setting.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.MachineSettingsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_MailIndicators_cmd = &cobra.Command{
		Aliases: []string{  "MI",  "mailindicators",  "mi",  },
		Use: `MailIndicators {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new mail indicator`,
		Long:  `Create a new mail indicator.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.MailIndicatorsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_MediaTypes_cmd = &cobra.Command{
		Aliases: []string{  "MT",  "mediatypes",  "mt",  },
		Use: `MediaTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","GenerateCost":123.456,"Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new media type`,
		Long:  `Create a new media type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.MediaTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_MembershipLevelCategories_cmd = &cobra.Command{
		Aliases: []string{  "MLC",  "membershiplevelcategories",  "mlc",  },
		Use: `MembershipLevelCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new membership level category`,
		Long:  `Create a new membership level category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.MembershipLevelCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Memberships_cmd = &cobra.Command{
		Aliases: []string{  "M",  "m",  "memberships",  },
		Use: `Memberships {"CalcCampaignId":123,"CalcConstituentId":123,"CalcContributionAmount":123.456,"CalcContributionDate":"2000-01-01T00:00:00.000Z","CalcExpirationDate":"2000-01-01T00:00:00.000Z","CalcInitialDate":"2000-01-01T00:00:00.000Z","CrediteeId":123,"DeclineBenefits":"string","MembershipLevelOverride":"string","MembershipOrganizationId":123,"RealOrMirror":"string","RenewUpgradeIndicator":"string"}`,
		Short: `This returns a result of calculated changes to a constituent membership`,
		Long:  `This returns a result of calculated changes to a constituent membership.  This resource makes no actual changes and only returns calculated membership data for information purposes.
NOTE: As part of the upcoming changes to membership functionality, this resource will change significantly in an upcoming major Tessitura release and likely break code that references it. Please make a note that code that references it will need to be revisited as part of that upgrade process.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.MembershipsCalculate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ModeOfSaleCategories_cmd = &cobra.Command{
		Aliases: []string{  "MOSC",  "modeofsalecategories",  "mosc",  },
		Use: `ModeOfSaleCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Sequence":123,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new mode of sale category`,
		Long:  `Create a new mode of sale category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ModeOfSaleCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ModeOfSaleOffers_cmd = &cobra.Command{
		Aliases: []string{  "MOSO",  "modeofsaleoffers",  "moso",  },
		Use: `ModeOfSaleOffers {"AppealId":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EndDateTime":"2000-01-01T00:00:00.000Z","Id":123,"MaxSeats":123,"ModeOfSaleId":123,"OverrideDefaultPriceTypeIndicator":true,"PackageId":123,"PerformanceId":123,"PriceTypeId":123,"Rank":123,"SourceId":123,"StartDateTime":"2000-01-01T00:00:00.000Z","Terms":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new mode of sale offer`,
		Long:  `Create a new mode of sale offer.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ModeOfSaleOffersCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ModeOfSalePriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "MOSPT",  "modeofsalepricetypes",  "mospt",  },
		Use: `ModeOfSalePriceTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultIndicator":true,"Id":123,"ModeOfSale":{"Id":123},"PriceType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new mode of sale price type`,
		Long:  `Create a new mode of sale price type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ModeOfSalePriceTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ModeOfSaleSurveyQuestions_cmd = &cobra.Command{
		Aliases: []string{  "MOSSQ",  "modeofsalesurveyquestions",  "mossq",  },
		Use: `ModeOfSaleSurveyQuestions {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"ModeOfSale":{"Id":123},"Question":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new mode of sale survey question`,
		Long:  `Create a new mode of sale survey question.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ModeOfSaleSurveyQuestionsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ModeOfSaleUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "MOSUG",  "modeofsaleusergroups",  "mosug",  },
		Use: `ModeOfSaleUserGroups {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultIndicator":true,"Id":123,"ModeOfSale":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroupId":"string"}`,
		Short: `Create a new mode of sale/user group mapping`,
		Long:  `Create a new mode of sale/user group mapping.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ModeOfSaleUserGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ModesOfSale_cmd = &cobra.Command{
		Aliases: []string{  "MOS",  "modesofsale",  "mos",  },
		Use: `ModesOfSale {"AllowUnseatedPaidInd":true,"Category":{"Id":123},"CategoryRequired":true,"ClearSourceNoInd":true,"ClearSourceOnReload":true,"ConfirmationMode":true,"ConstLinkRequired":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultAckFormatId":123,"DefaultChannelId":123,"DefaultDeliveryMethodId":123,"DefaultHeaderFormatId":123,"DefaultSalesLayoutId":123,"Description":"string","EditDate":true,"EditSourceOnReload":true,"GeneralPublicInd":true,"HaboDays":123,"HaboForeign":true,"HoldUntilDate":"2000-01-01T00:00:00.000Z","HoldUntilDays":123,"HoldUntilMethod":"string","Id":123,"Inactive":true,"MustBePaidInd":true,"MustBeSeatedInd":true,"MustBeTicketedInd":true,"PricingRuleSetId":123,"SampleForGeneralPublic":123,"SampleForKnownConstituent":123,"SliAutoDeleteInd":true,"StartPkgOrPerf":"string","SubsSummaryRequired":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new mode of sale`,
		Long:  `Create a new mode of sale.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ModesOfSaleCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_NScanAccessAreas_cmd = &cobra.Command{
		Aliases: []string{  "NSAA",  "nsaa",  "nscanaccessareas",  },
		Use: `NScanAccessAreas {"AreaCode":"string","ConstituencyIds":"string","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EndDateTime":"2000-01-01T00:00:00.000Z","Id":123,"Inactive":true,"KeywordId":123,"KeywordValue":"string","ListId":123,"MaxEntries":123,"MembershipLevelIds":"string","PerformanceIds":"string","PriceTypeIds":"string","PriceZoneIds":"string","PromptQuantity":true,"StartDateTime":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new NScan Access Area`,
		Long:  `Create a new NScan Access Area.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.NScanAccessAreasCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_NameStatuses_cmd = &cobra.Command{
		Aliases: []string{  "NS",  "namestatuses",  "ns",  },
		Use: `NameStatuses {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new name status`,
		Long:  `Create a new name status.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.NameStatusesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ObjectPermissions_cmd = &cobra.Command{
		Aliases: []string{  "OP",  "objectpermissions",  "op",  },
		Use: `ObjectPermissions {"ApplicationObject":{"Id":123},"CanCreate":"string","CanDelete":"string","CanEdit":"string","CanView":"string","Constituency":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroup":{"Id":"string"}}`,
		Short: `Create a new object permission`,
		Long:  `Create a new object permission.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ObjectPermissionsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_OrderBilling_cmd = &cobra.Command{
		Aliases: []string{  "OB",  "ob",  "orderbilling",  },
		Use: `OrderBilling {"AppealId":123,"BatchTypeId":123,"BillingTypeId":123,"CutoffDateTime":"2000-01-01T00:00:00.000Z","EndDateTime":"2000-01-01T00:00:00.000Z","ListId":123,"MaxNumberOfBillsToPrint":123,"MediaTypeId":123,"MinAmount":123.456,"MinNumberOfBillsToPrint":123,"ModesOfSale":"string","NewSourceDescription":"string","OrderEndDateTime":"2000-01-01T00:00:00.000Z","OrderStartDateTime":"2000-01-01T00:00:00.000Z","PaymentMethodGroupId":123,"PerformanceEndDateTime":"2000-01-01T00:00:00.000Z","PerformanceStartDateTime":"2000-01-01T00:00:00.000Z","Seasons":"string","ShouldUpdate":true,"StartDateTime":"2000-01-01T00:00:00.000Z","UserId":"string"}`,
		Short: `Order billing`,
		Long:  `Order billing`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.OrderBillingBillOrders , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_OrderCategories_cmd = &cobra.Command{
		Aliases: []string{  "OC",  "oc",  "ordercategories",  },
		Use: `OrderCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new order category`,
		Long:  `Create a new order category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.OrderCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Orders_cmd = &cobra.Command{
		Aliases: []string{  "O",  "o",  "orders",  },
		Use: `Orders {"AcceptingRollovers":true,"AccountId":123,"AltAddressId":123,"AltElectronicAddressId":123,"AppealId":123,"AppliedMessageRules":"string","BatchId":123,"BusinessUnitId":123,"CategoryId":123,"ChannelId":123,"ConstituentId":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Custom0":"string","Custom1":"string","Custom2":"string","Custom3":"string","Custom4":"string","Custom5":"string","Custom6":"string","Custom7":"string","Custom8":"string","Custom9":"string","DeliveryDate":"2000-01-01T00:00:00.000Z","DeliveryMethodId":123,"HoldUntilDateTime":"2000-01-01T00:00:00.000Z","Id":123,"InitiatorId":123,"LineItems":[{"Id":123},...],"Messages":[{"Id":123},...],"MirrorLock":123,"ModeOfSaleId":123,"Notes":"string","OrderDateTime":"2000-01-01T00:00:00.000Z","ReloadPricingRules":true,"Solicitor":"string","SourceId":123,"TotalDue":123.456,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","VirtualConstituencies":"string"}`,
		Short: `This resource is currently only for interceptor plugin use`,
		Long:  `This resource is currently only for interceptor plugin use. This is called any time a new order is saved via the API or from the client application. Only OrderId is provided in the request content.
            
This resource will be invoked from a cart checkout.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("OrdersForDelivery"); test {
				out, err = tq.Do(*_tq, _tq.Post.OrdersGetOrdersForDelivery , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Price"); test {
				out, err = tq.Do(*_tq, _tq.Post.OrdersPrice , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("PrintTicketElements"); test {
				out, err = tq.Do(*_tq, _tq.Post.OrdersPrintTicketElements , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.OrdersCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Organizations_cmd = &cobra.Command{
		Aliases: []string{  "O",  "o",  "organizations",  },
		Use: `Organizations {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"LicenseeAccountCode":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new organization`,
		Long:  `Create a new organization.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.OrganizationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_OriginalSources_cmd = &cobra.Command{
		Aliases: []string{  "OS",  "originalsources",  "os",  },
		Use: `OriginalSources {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new original source`,
		Long:  `Create a new original source.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.OriginalSourcesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Origins_cmd = &cobra.Command{
		Aliases: []string{  "O",  "o",  "origins",  },
		Use: `Origins {"ActivityType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new origin`,
		Long:  `Create a new origin.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.OriginsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_OutputSets_cmd = &cobra.Command{
		Aliases: []string{  "OS",  "os",  "outputsets",  },
		Use: `OutputSets {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"ElementGroups":[{"IncludePrimaryAffiliation":true,"IsSingleRow":true,"KeywordId":123},...],"Id":123,"LastUsedDateTime":"2000-01-01T00:00:00.000Z","TMSIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create an Output Set`,
		Long:  `Create an Output Set.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.OutputSetsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PackagePriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "PPT",  "packagepricetypes",  "ppt",  },
		Use: `PackagePriceTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"PackageId":123,"PriceTypeId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new package price type`,
		Long:  `Create a new package price type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PackagePriceTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PackageTypes_cmd = &cobra.Command{
		Aliases: []string{  "PT",  "packagetypes",  "pt",  },
		Use: `PackageTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new package type`,
		Long:  `Create a new package type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PackageTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PackageWebContents_cmd = &cobra.Command{
		Aliases: []string{  "PWC",  "packagewebcontents",  "pwc",  },
		Use: `PackageWebContents {"ContentType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"PackageId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Value":"string"}`,
		Short: `Create a packageWebContent`,
		Long:  `Create a packageWebContent.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PackageWebContentsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Packages_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "packages",  },
		Use: `Packages {"ArtistIds":"string","BusinessUnitId":123,"ConstituentId":123,"FullTextSearch":"string","MatchAllPerformances":true,"ModeOfSaleId":123,"PackageEndDate":"2000-01-01T00:00:00.000Z","PackageFacilityIds":"string","PackageKeywordAndOr":"string","PackageKeywordIds":"string","PackageStartDate":"2000-01-01T00:00:00.000Z","PackageTypeIds":"string","PerformanceEndDate":"2000-01-01T00:00:00.000Z","PerformanceFacilityIds":"string","PerformanceKeywordAndOr":"string","PerformanceKeywordIds":"string","PerformanceStartDate":"2000-01-01T00:00:00.000Z","SeasonIds":"string"}`,
		Short: `Search for packages`,
		Long:  `Search for packages`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PackagesSearch , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentComponent_cmd = &cobra.Command{
		Aliases: []string{  "PC",  "paymentcomponent",  "pc",  },
		Use: `PaymentComponent {"Amount":123.456,"CardBrandsToInclude":["",...],"ComponentVersion":"string","ConstituentId":123,"MerchantId":"string","ShowStoredCards":true}`,
		Short: `This request is used to configure a transaction and retrieve the JavaScript location for implementing the Tessitura Merchant Services Payment Component`,
		Long:  `This request is used to configure a transaction and retrieve the JavaScript location for implementing the Tessitura Merchant Services Payment Component. 
For complete documentation on how to implement the Payment Component, please visit https://bitbucket.org/TN_WebShare/tessituramerchantservicesintegrationsample`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentComponentGetPaymentComponent , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentGatewayAccounts_cmd = &cobra.Command{
		Aliases: []string{  "PGA",  "paymentgatewayaccounts",  "pga",  },
		Use: `PaymentGatewayAccounts {"ConstituentId":123,"ReferenceNumber":"string"}`,
		Short: `Generate a payment card token from a ReferenceNumber obtained from a previous Authorization request (Vantiv only)`,
		Long:  `Generate a payment card token from a ReferenceNumber obtained from a previous Authorization request (Vantiv only)`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("StoreToken"); test {
				out, err = tq.Do(*_tq, _tq.Post.PaymentGatewayAccountsStoreToken , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.PaymentGatewayAccountsCreateAccount , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentGatewayActivities_cmd = &cobra.Command{
		Aliases: []string{  "PGA",  "paymentgatewayactivities",  "pga",  },
		Use: `PaymentGatewayActivities {"AccountId":123,"AccountNumber":"string","ActivityData":"string","Amount":123.456,"AuthCode":"string","AvsAddress":"string","AvsPostalcode":"string","AvsResultCode":"string","BalanceAmount":123.456,"BalanceCurrencyCode":"string","ConstituentId":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","CvvResultCode":"string","EcommerceIndicator":"string","EmvApplicationIdentifier":"string","EmvApplicationName":"string","EmvCryptogram":"string","EmvHostResponseCode":"string","EmvHostResponseMessage":"string","EmvPinVerified":"string","EntryMethod":"string","ExpirationDate":"string","Id":123,"MerchantId":"string","Name":"string","NetworkTransactionId":"string","Origin":"string","PaymentGatewayTransactionType":{"Id":123},"PaymentId":123,"PaymentMethodGroupId":123,"PaymentMethodId":123,"ProviderCommunicationDurationMs":123,"ProviderTransactionDateTime":"2000-01-01T00:00:00.000Z","ReferenceNumber":"string","ResponseCode":"string","ResponseMessage":"string","Success":"string","TerminalIdentifier":"string","TotalDurationMs":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserData":"string"}`,
		Short: `Create a new Payment Gateway Activity`,
		Long:  `Create a new Payment Gateway Activity`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentGatewayActivitiesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentGatewayCredentials_cmd = &cobra.Command{
		Aliases: []string{  "PGC",  "paymentgatewaycredentials",  "pgc",  },
		Use: `PaymentGatewayCredentials {"ConstituentId":123,"MerchantId":"string"}`,
		Short: ``,
		Long:  ``,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentGatewayCredentialsGetCredential , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentGatewayNotifications_cmd = &cobra.Command{
		Aliases: []string{  "PGN",  "paymentgatewaynotifications",  "pgn",  },
		Use: `PaymentGatewayNotifications {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EventType":"string","Id":123,"Payload":"string","ProcessedDate":"2000-01-01T00:00:00.000Z","ReceivedDate":"2000-01-01T00:00:00.000Z","Reference":"string","Topic":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new notification event`,
		Long:  `Create a new notification event.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentGatewayNotificationsCreateNotificationEvent , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentGatewayTransactionTypes_cmd = &cobra.Command{
		Aliases: []string{  "PGTT",  "paymentgatewaytransactiontypes",  "pgtt",  },
		Use: `PaymentGatewayTransactionTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Payment Gateway Transaction Type`,
		Long:  `Create a new Payment Gateway Transaction Type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentGatewayTransactionTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentMethodGroups_cmd = &cobra.Command{
		Aliases: []string{  "PMG",  "paymentmethodgroups",  "pmg",  },
		Use: `PaymentMethodGroups {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"MerchantId":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new payment method group`,
		Long:  `Create a new payment method group.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentMethodGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentMethodUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "PMUG",  "paymentmethodusergroups",  "pmug",  },
		Use: `PaymentMethodUserGroups {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"IncomeIndicator":true,"MaxRefund":123.456,"PaymentMethod":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroupId":"string"}`,
		Short: `Create a new payment method/user group mapping`,
		Long:  `Create a new payment method/user group mapping.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentMethodUserGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentMethods_cmd = &cobra.Command{
		Aliases: []string{  "PM",  "paymentmethods",  "pm",  },
		Use: `PaymentMethods {"AccountType":{"Id":123},"AuthIndicator":true,"BusinessUnitId":123,"CanRefund":true,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","CurrencyTypeId":123,"DefaultIndicator":true,"Description":"string","GiftAidIndicator":true,"GlAccountId":"string","Id":123,"Inactive":true,"Income":true,"MerchantId":"string","MerchantIdForSwipe":"string","NoCopiesOnAuth":123,"NoCopiesOnSave":123,"OpenCashDrawer":true,"PaymentMethodGroup":{"Id":123},"PaymentType":{"Id":123},"ReceiptFormatId":123,"RequireCheckIndicator":true,"RequireCvv":true,"RequirePostalCode":"string","ShortDesc":"string","StoreTenderedAmount":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UseWithCardReader":true}`,
		Short: `Create a new payment method`,
		Long:  `Create a new payment method.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentMethodsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentSignatures_cmd = &cobra.Command{
		Aliases: []string{  "PS",  "paymentsignatures",  "ps",  },
		Use: `PaymentSignatures {"Id":123}`,
		Short: `Create a new payment signature`,
		Long:  `Create a new payment signature.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("PostForOrder"); test {
				out, err = tq.Do(*_tq, _tq.Post.PaymentSignaturesPostForOrder , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.PaymentSignaturesCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PaymentTypes_cmd = &cobra.Command{
		Aliases: []string{  "PT",  "paymenttypes",  "pt",  },
		Use: `PaymentTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new payment type`,
		Long:  `Create a new payment type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Payments_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "payments",  },
		Use: `Payments {"Increment":123}`,
		Short: `Reserves a payment id generated per the request's required "increment" parameter`,
		Long:  `Reserves a payment id generated per the request's required "increment" parameter. Increment number must be greater than 0.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PaymentsReserveIds , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PerformanceGroups_cmd = &cobra.Command{
		Aliases: []string{  "PG",  "performancegroups",  "pg",  },
		Use: `PerformanceGroups {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","DisplayByZone":true,"Facility":{"Id":123},"FixedSeatIndicator":true,"Id":123,"Season":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","ZoneMap":{"Id":123}}`,
		Short: `Create a new Performance Group`,
		Long:  `Create a new Performance Group.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PerformanceGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PerformancePackageModeOfSales_cmd = &cobra.Command{
		Aliases: []string{  "PPMOS",  "performancepackagemodeofsales",  "ppmos",  },
		Use: `PerformancePackageModeOfSales {"AutoAttend":"string","ETicketReleaseDateTime":"2000-01-01T00:00:00.000Z","EndDateTime":"2000-01-01T00:00:00.000Z","Id":123,"ModeOfSaleId":123,"PackageId":123,"PerformanceId":123,"PrintIndicator":true,"PrintOnAutoAttend":true,"SeatIndicator":true,"StartDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new performance package mode of sale`,
		Long:  `Create a new performance package mode of sale.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PerformancePackageModeOfSalesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PerformancePriceLayers_cmd = &cobra.Command{
		Aliases: []string{  "PPL",  "performancepricelayers",  "ppl",  },
		Use: `PerformancePriceLayers {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultDesignationCodeId":123,"DefaultGlAccountId":123,"DefaultResaleAccountId":123,"Description":"string","EffectiveDateTime":"2000-01-01T00:00:00.000Z","Id":123,"PerformanceId":123,"PerformancePriceTypes":[{"Id":123},...],"PriceLayerType":{"Id":123},"TemplateId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new performance price layer`,
		Long:  `Create a new performance price layer.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("PostSummaries"); test {
				out, err = tq.Do(*_tq, _tq.Post.PerformancePriceLayersPostSummaries , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Search"); test {
				out, err = tq.Do(*_tq, _tq.Post.PerformancePriceLayersSearch , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SearchSummaries"); test {
				out, err = tq.Do(*_tq, _tq.Post.PerformancePriceLayersSearchSummaries , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.PerformancePriceLayersCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PerformancePriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "PPT",  "performancepricetypes",  "ppt",  },
		Use: `PerformancePriceTypes {"BaseIndicator":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DesignationCodeId":123,"EffectiveDateTime":"2000-01-01T00:00:00.000Z","EndDateTime":"2000-01-01T00:00:00.000Z","GlAccountId":123,"Id":123,"IsWithinDateRange":true,"PerformanceId":123,"PerformancePriceLayerId":123,"PerformancePrices":[{"Id":123},...],"PriceTypeId":123,"ResaleAccountId":123,"StartDateTime":"2000-01-01T00:00:00.000Z","TicketDesignId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new performance price type`,
		Long:  `Create a new performance price type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PerformancePriceTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PerformancePrices_cmd = &cobra.Command{
		Aliases: []string{  "PP",  "performanceprices",  "pp",  },
		Use: `PerformancePrices {"EditIndicator":true,"EffectiveDateTime":"2000-01-01T00:00:00.000Z","Enabled":true,"HasEvents":true,"Id":123,"IsPriceBasedOnCurrentEvent":true,"MinPrice":123.456,"PerformanceId":123,"PerformancePriceTypeId":123,"Price":123.456,"ZoneId":123}`,
		Short: `Create a new performance price`,
		Long:  `Create a new performance price.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PerformancePricesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PerformanceStatuses_cmd = &cobra.Command{
		Aliases: []string{  "PS",  "performancestatuses",  "ps",  },
		Use: `PerformanceStatuses {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new performance status`,
		Long:  `Create a new performance status.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PerformanceStatusesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PerformanceTypes_cmd = &cobra.Command{
		Aliases: []string{  "PT",  "performancetypes",  "pt",  },
		Use: `PerformanceTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","ValidCountryList":"string"}`,
		Short: `Create a new performance type`,
		Long:  `Create a new performance type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PerformanceTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Performances_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "performances",  },
		Use: `Performances {"PerformanceID":"string","HoldCodeId":123,"HoldUntilDate":"2000-01-01T00:00:00.000Z","ReplaceMode":123,"SeatID":"string"}`,
		Short: `Apply a single hold on a performance seat`,
		Long:  `Apply a single hold on a performance seat.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Copy"); test {
				out, err = tq.Do(*_tq, _tq.Post.PerformancesCopy , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Reschedule"); test {
				out, err = tq.Do(*_tq, _tq.Post.PerformancesReschedule , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Search"); test {
				out, err = tq.Do(*_tq, _tq.Post.PerformancesSearch , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SeatHolds"); test {
				out, err = tq.Do(*_tq, _tq.Post.PerformancesUpdateSeatHolds , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.PerformancesApplySingleHold , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Philanthropy_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "philanthropy",  },
		Use: `Philanthropy {"Activity":"string","Amount":123.456,"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DonatedTo":"string","DonatedToConstituent":{"Id":123},"DonationDateTime":"2000-01-01T00:00:00.000Z","Id":123,"PhilanthropyType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create an philanthropyEntry for a constituent`,
		Long:  `Create an philanthropyEntry for a constituent.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PhilanthropyCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PhilanthropyTypes_cmd = &cobra.Command{
		Aliases: []string{  "PT",  "philanthropytypes",  "pt",  },
		Use: `PhilanthropyTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new philosophy type`,
		Long:  `Create a new philosophy type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PhilanthropyTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PhoneIndicators_cmd = &cobra.Command{
		Aliases: []string{  "PI",  "phoneindicators",  "pi",  },
		Use: `PhoneIndicators {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new phone indicator`,
		Long:  `Create a new phone indicator.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PhoneIndicatorsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PhoneTypes_cmd = &cobra.Command{
		Aliases: []string{  "PT",  "phonetypes",  "pt",  },
		Use: `PhoneTypes {"AllowMarketing":true,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DayEveningIndicator":"string","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new phone type`,
		Long:  `Create a new phone type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PhoneTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Phones_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "phones",  },
		Use: `Phones {"Address":{"Id":123},"AllowTelemarketing":true,"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DayEveningIndicator":"string","EditIndicator":true,"Id":123,"Inactive":true,"PhoneFormatted":"string","PhoneNumber":"string","PhoneSearch":"string","PhoneType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new phone`,
		Long:  `Create a new phone.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PhonesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PlanPriorities_cmd = &cobra.Command{
		Aliases: []string{  "PP",  "planpriorities",  "pp",  },
		Use: `PlanPriorities {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Ranking":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new plan priority`,
		Long:  `Create a new plan priority.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PlanPrioritiesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PlanSources_cmd = &cobra.Command{
		Aliases: []string{  "PS",  "plansources",  "ps",  },
		Use: `PlanSources {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new plan source`,
		Long:  `Create a new plan source.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PlanSourcesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PlanStatuses_cmd = &cobra.Command{
		Aliases: []string{  "PS",  "planstatuses",  "ps",  },
		Use: `PlanStatuses {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rank":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new plan status`,
		Long:  `Create a new plan status.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PlanStatusesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PlanTypes_cmd = &cobra.Command{
		Aliases: []string{  "PT",  "plantypes",  "pt",  },
		Use: `PlanTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new plan type`,
		Long:  `Create a new plan type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PlanTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PlanWorkers_cmd = &cobra.Command{
		Aliases: []string{  "PW",  "planworkers",  "pw",  },
		Use: `PlanWorkers {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Plan":{"Id":123},"PrimaryIndicator":true,"Role":{"Id":123},"ShowInPortfolio":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Worker":{"Id":123}}`,
		Short: `Create a new plan worker`,
		Long:  `Create a new plan worker.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PlanWorkersCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Plans_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "plans",  },
		Use: `Plans {"AskAmount":123.456,"Campaign":{"Id":123},"CompleteByDateTime":"2000-01-01T00:00:00.000Z","Constituent":{"Id":123},"ContributionAmount":123.456,"ContributionDesignation":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","CustomDataItems":[{"DataType":"string","Description":"string","EditIndicator":true,"Index":123,"IsDropdown":true,"KeywordId":123,"Name":"string","Value":"string"},...],"EditIndicator":true,"Fund":{"Id":123},"GoalAmount":123.456,"HasOpenSteps":true,"HasSteps":true,"Id":123,"LastStepDate":"2000-01-01T00:00:00.000Z","LastStepType":{"Id":123},"LastWorkerDisplayName":"string","NextStepDate":"2000-01-01T00:00:00.000Z","NextStepType":{"Id":123},"Notes":"string","OriginalSource":{"Id":123},"PlanAssociates":"string","PrimaryWorker":{"Id":123},"Priority":{"Id":123},"Probability":123.456,"RecordedAmount":123.456,"StartDateTime":"2000-01-01T00:00:00.000Z","Status":{"Id":123},"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new plan`,
		Long:  `Create a new plan.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PlansCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PledgeBilling_cmd = &cobra.Command{
		Aliases: []string{  "PB",  "pb",  "pledgebilling",  },
		Use: `PledgeBilling {"AcknowledgementLetterId":123,"AppealId":123,"BatchTypeId":123,"BillingTypeId":123,"CampaignId":123,"CutoffDateTime":"2000-01-01T00:00:00.000Z","EndDateTime":"2000-01-01T00:00:00.000Z","FundIds":"string","IsLabel":true,"ListId":123,"MailDateTime":"2000-01-01T00:00:00.000Z","MailTypeId":123,"MaxNumberOfBillsToPrint":123,"MediaTypeId":123,"MinAmount":123.456,"MinNumberOfBillsToPrint":123,"NewSourceDescription":"string","PaymentMethodGroupId":123,"SalutationTypeId":123,"ShouldUpdate":true,"StartDateTime":"2000-01-01T00:00:00.000Z","UserId":"string"}`,
		Short: `This is not intended for use outside of the Tessitura application`,
		Long:  `This is not intended for use outside of the Tessitura application.  There is no standard way to return billing details for a run. For a given campaign, funds, bill types etc., It raises bills for all those scheduled payments that have due date between given start and end dates. It also checks to see that a bill was not raised after a given 'cut off date'.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PledgeBillingBillPledges , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PortfolioCustomElements_cmd = &cobra.Command{
		Aliases: []string{  "PCE",  "pce",  "portfoliocustomelements",  },
		Use: `PortfolioCustomElements {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DataType":123,"Description":"string","Id":123,"Inactive":true,"SqlQuery":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new portfolio custom element`,
		Long:  `Create a new portfolio custom element.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PortfolioCustomElementsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Prefixes_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "prefixes",  },
		Use: `Prefixes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new prefix`,
		Long:  `Create a new prefix.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PrefixesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Premieres_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "premieres",  },
		Use: `Premieres {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new premiere`,
		Long:  `Create a new premiere.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PremieresCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PriceCategories_cmd = &cobra.Command{
		Aliases: []string{  "PC",  "pc",  "pricecategories",  },
		Use: `PriceCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rank":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new price category`,
		Long:  `Create a new price category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PriceCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PriceLayerTypes_cmd = &cobra.Command{
		Aliases: []string{  "PLT",  "plt",  "pricelayertypes",  },
		Use: `PriceLayerTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","ExcludeFromRules":true,"Id":123,"Inactive":true,"PriceCategory":{"Id":123},"Rank":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new price layer type`,
		Long:  `Create a new price layer type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PriceLayerTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PriceTemplates_cmd = &cobra.Command{
		Aliases: []string{  "PT",  "pricetemplates",  "pt",  },
		Use: `PriceTemplates {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultDesignationCode":{"Id":123},"DefaultGlAccount":{"Id":123},"DefaultPriceLayerType":{"Id":123},"DefaultResaleAccount":{"Id":123},"Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Name":"string","PriceCategory":{"Id":123},"TemplatePriceTypes":[{"Id":123},...],"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","ZoneMap":{"Id":123}}`,
		Short: `Create a new price template`,
		Long:  `Create a new price template.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PriceTemplatesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PriceTypeCategories_cmd = &cobra.Command{
		Aliases: []string{  "PTC",  "pricetypecategories",  "ptc",  },
		Use: `PriceTypeCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new price type category`,
		Long:  `Create a new price type category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PriceTypeCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PriceTypeGroups_cmd = &cobra.Command{
		Aliases: []string{  "PTG",  "pricetypegroups",  "ptg",  },
		Use: `PriceTypeGroups {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new price type group`,
		Long:  `Create a new price type group.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PriceTypeGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PriceTypeReasons_cmd = &cobra.Command{
		Aliases: []string{  "PTR",  "pricetypereasons",  "ptr",  },
		Use: `PriceTypeReasons {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"ShortDescription":"string","TicketText":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new price type reason`,
		Long:  `Create a new price type reason.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PriceTypeReasonsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PriceTypeUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "PTUG",  "pricetypeusergroups",  "ptug",  },
		Use: `PriceTypeUserGroups {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"PriceType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroupId":"string"}`,
		Short: `Create a new price typ/user group mapping`,
		Long:  `Create a new price typ/user group mapping.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PriceTypeUserGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "PT",  "pricetypes",  "pt",  },
		Use: `PriceTypes {"AliasDescription":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultTicketDesign":{"Id":123},"Description":"string","EditIndicator":true,"EditableIndicator":true,"Id":123,"Inactive":true,"PriceTypeCategory":{"Id":123},"PriceTypeGroup":{"Id":123},"ReasonIndicator":true,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new price type`,
		Long:  `Create a new price type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PriceTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PricingRuleCategories_cmd = &cobra.Command{
		Aliases: []string{  "PRC",  "prc",  "pricingrulecategories",  },
		Use: `PricingRuleCategories {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new pricing rule category`,
		Long:  `Create a new pricing rule category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PricingRuleCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PricingRuleMessageTypes_cmd = &cobra.Command{
		Aliases: []string{  "PRMT",  "pricingrulemessagetypes",  "prmt",  },
		Use: `PricingRuleMessageTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new pricing rule message type`,
		Long:  `Create a new pricing rule message type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PricingRuleMessageTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PricingRuleSets_cmd = &cobra.Command{
		Aliases: []string{  "PRS",  "pricingrulesets",  "prs",  },
		Use: `PricingRuleSets {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Rules":[{"Id":123},...],"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new pricing rule set`,
		Long:  `Create a new pricing rule set.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PricingRuleSetsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_PricingRules_cmd = &cobra.Command{
		Aliases: []string{  "PR",  "pr",  "pricingrules",  },
		Use: `PricingRules {"Appeals":"string","ApplyOncePerOrder":true,"ApplyToLowestCommonNumberOfSeats":true,"Constituencies":"string","ConstituentAttribute":123,"ConstituentAttributeOperator":{"Id":123},"ConstituentAttributeValue1":"string","ConstituentAttributeValue2":"string","ConstituentExclusionListId":123,"ConstituentListId":123,"ConstituentRankType":123,"ConstituentRankingOperator":{"Id":123},"ConstituentRankingValue1":123,"ConstituentRankingValue2":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","DiscountAmount":123.456,"DiscountIsPercent":true,"DiscountPercentRound":123,"DiscountPriceTypeId":123,"EditIndicator":true,"EndDateTime":"2000-01-01T00:00:00.000Z","ExcludeGeneralPublic":true,"Id":123,"Inactive":true,"MaxSeats":123,"Messages":[{"Id":123},...],"OverTheLimitDateTime":"2000-01-01T00:00:00.000Z","PromotedAppeals":"string","PromotedSources":"string","QualifyingPackage":"string","QualifyingPerformance":"string","QualifyingPriceType1":"string","QualifyingPriceType2":"string","QualifyingProductionSeason":"string","QualifyingSeasonPackageType":"string","QualifyingSeatCount1Value1":123,"QualifyingSeatCount1Value2":123,"QualifyingSeatCount2Value1":123,"QualifyingSeatCount2Value2":123,"QualifyingZone":"string","RespectMinimumPrice":true,"ResultMaximumSeats":123,"ResultMaximumSeats2":123,"ResultPackage":"string","ResultPerformance":"string","ResultPriceType":"string","ResultProductionSeason":"string","ResultSeasonPackageType":"string","ResultSeatCount":123,"ResultZone":"string","RuleAction":123,"RuleCategory":{"Id":123},"RuleType":{"Id":123},"Sources":"string","StartDateTime":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new pricing rule`,
		Long:  `Create a new pricing rule.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PricingRulesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Printers_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "printers",  },
		Use: `Printers {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"MaxCol":123,"MaxRow":123,"MaxX2val":123,"MaxY2val":123,"Type":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new printer`,
		Long:  `Create a new printer.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PrintersCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ProductionSeasonMembershipOrganizations_cmd = &cobra.Command{
		Aliases: []string{  "PSMO",  "productionseasonmembershiporganizations",  "psmo",  },
		Use: `ProductionSeasonMembershipOrganizations {"AllowMultipleEntry":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"MembershipOrganization":{"Id":123},"ProductionSeason":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new production season membership organization`,
		Long:  `Create a new production season membership organization.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ProductionSeasonMembershipOrganizationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ProductionSeasons_cmd = &cobra.Command{
		Aliases: []string{  "PS",  "productionseasons",  "ps",  },
		Use: `ProductionSeasons {"ArtistIds":"string","BusinessUnitId":123,"ConstituentId":123,"FacilityIds":"string","FullTextSearch":"string","KeywordAndOr":"string","KeywordIds":"string","MatchAllPerformances":true,"ModeOfSaleId":123,"PerformanceEndDate":"2000-01-01T00:00:00.000Z","PerformanceStartDate":"2000-01-01T00:00:00.000Z","SeasonIds":"string"}`,
		Short: `Search for production seasons`,
		Long:  `Search for production seasons
Returns production seasons matching the specified search criteria.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ProductionSeasonsSearch , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Products_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "products",  },
		Use: `Products {"PackageIds":"string","PackageTypeIds":"string","PerformanceIds":"string","ProductionSeasonIds":"string"}`,
		Short: `Get product descriptions`,
		Long:  `Get product descriptions`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Search"); test {
				out, err = tq.Do(*_tq, _tq.Post.ProductsSearch , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.ProductsDescribe , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ProgramListings_cmd = &cobra.Command{
		Aliases: []string{  "PL",  "pl",  "programlistings",  },
		Use: `ProgramListings {"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DonationLevel":{"Id":123},"EditIndicator":true,"Id":123,"ProgramName":"string","ProgramType":{"Id":123},"SortName":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new program listing`,
		Long:  `Create a new program listing.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ProgramListingsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Programs_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "programs",  },
		Use: `Programs {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new program`,
		Long:  `Create a new program.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ProgramsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Pronouns_cmd = &cobra.Command{
		Aliases: []string{  "P",  "p",  "pronouns",  },
		Use: `Pronouns {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: ``,
		Long:  ``,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.PronounsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_QualificationCategories_cmd = &cobra.Command{
		Aliases: []string{  "QC",  "qc",  "qualificationcategories",  },
		Use: `QualificationCategories {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Qualification Category`,
		Long:  `Create a new Qualification Category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.QualificationCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Qualifications_cmd = &cobra.Command{
		Aliases: []string{  "Q",  "q",  "qualifications",  },
		Use: `Qualifications {"Category":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Qualification`,
		Long:  `Create a new Qualification.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.QualificationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_QueryElementFilters_cmd = &cobra.Command{
		Aliases: []string{  "QEF",  "qef",  "queryelementfilters",  },
		Use: `QueryElementFilters {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DataType":123,"Description":"string","EndOfDay":true,"FilterElement":"string","Group":{"Id":123},"Id":123,"ReferenceDescriptionColumn":"string","ReferenceIdColumn":"string","ReferenceSort":"string","ReferenceTable":"string","ReferenceWhere":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a query element filter`,
		Long:  `Create a query element filter.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.QueryElementFiltersCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_QueryElementGroups_cmd = &cobra.Command{
		Aliases: []string{  "QEG",  "qeg",  "queryelementgroups",  },
		Use: `QueryElementGroups {"Category":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DataFrom":"string","DataWhere":"string","Description":"string","Id":123,"IsVirtual":true,"NumberOfParameters":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new query element group`,
		Long:  `Create a new query element group.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.QueryElementGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_QueryElements_cmd = &cobra.Command{
		Aliases: []string{  "QE",  "qe",  "queryelements",  },
		Use: `QueryElements {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DataSelect":"string","Description":"string","Group":{"Id":123},"Id":123,"Inactive":true,"IsSingleRow":true,"KeywordId":123,"PrimaryGroupDefault":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new query element`,
		Long:  `Create a new query element.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.QueryElementsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_RankTypes_cmd = &cobra.Command{
		Aliases: []string{  "RT",  "ranktypes",  "rt",  },
		Use: `RankTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new rank type`,
		Long:  `Create a new rank type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.RankTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Rankings_cmd = &cobra.Command{
		Aliases: []string{  "R",  "r",  "rankings",  },
		Use: `Rankings {"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Rank":123,"RankType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new ranking`,
		Long:  `Create a new ranking.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.RankingsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ReceiptSettings_cmd = &cobra.Command{
		Aliases: []string{  "RS",  "receiptsettings",  "rs",  },
		Use: `ReceiptSettings {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EmailFooter":"string","EmailHeader":"string","EmailSubject":"string","Id":123,"Inactive":true,"PrintFooter":"string","PrintHeader":"string","ReceiptEmailProfile":{"Id":123},"TicketEmailProfile":{"Id":123},"TicketEmailSubject":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Receipt Setting`,
		Long:  `Create a new Receipt Setting.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ReceiptSettingsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_RecordAttendance_cmd = &cobra.Command{
		Aliases: []string{  "RA",  "ra",  "recordattendance",  },
		Use: `RecordAttendance {"OverrideDoorsOpen":true,"ProfileId":123,"TicketNo":123}`,
		Short: `Records attendance for a given ticket number`,
		Long:  `Records attendance for a given ticket number.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.RecordAttendanceRecordTicket , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ReferenceTableUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "RTUG",  "referencetableusergroups",  "rtug",  },
		Use: `ReferenceTableUserGroups {"CanEdit":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"ReferenceTable":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroupId":"string"}`,
		Short: `Create a new reference table/user group mapping`,
		Long:  `Create a new reference table/user group mapping.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ReferenceTableUserGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Registration_cmd = &cobra.Command{
		Aliases: []string{  "R",  "r",  "registration",  },
		Use: `Registration {"Address":{"AddressTypeId":123,"City":"string","CountryId":123,"PostalCode":"string","StateId":"string","Street1":"string","Street2":"string","Street3":"string"},"Affiliates":[{"AffiliationTypeId":123,"ConstituentTypeId":123,"FirstName":"string","LastName":"string","MiddleName":"string","NameIndicator":123,"NameStatusId":123,"Note":"string","SortName":"string","Title":"string"},...],"ConstituentTypeId":123,"ElectronicAddress":{"Address":"string","AllowHtmlFormat":true,"AllowMarketing":true,"ElectronicAddressTypeId":123},"EmarketIndicatorId":123,"FirstName":"string","GenderId":123,"LastName":"string","MailIndicatorId":123,"MiddleName":"string","NameStatusId":123,"OriginalSourceId":123,"PhoneIndicatorId":123,"Phones":[{"AllowTelemarketing":true,"DayEveningIndicator":"string","PhoneNumber":"string","PhoneTypeId":123},...],"PrefixId":123,"Salutation":{"BusinessTitle":"string","EnvelopeSalutation1":"string","EnvelopeSalutation2":"string","LetterSalutation":"string","SalutationTypeId":123},"SortName":"string","SourceId":123,"SuffixId":123,"WebLogin":{"Login":"string","LoginTypeId":123,"Password":"string"},"SessionKey":"string"}`,
		Short: `This is a combined resource for registering a new constituent with logging into the current session`,
		Long:  `This is a combined resource for registering a new constituent with logging into the current session. This resource combines a workflow of multiple API actions into a single request. This is primarily designed for creating a constituent with a primary electronic address, a primary login, and logging into the session using the provide login.
Creates a new constituent and login. Affiliates can be specified for the constituent to create a household account.
The login must be unique for the login type. The electronic address for this constituent must be primary. The primary indicator on ElectronicAddress is unused in this request. The session will be logged in with the new login after successful registration.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.RegistrationRegister , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_RelationshipCategories_cmd = &cobra.Command{
		Aliases: []string{  "RC",  "rc",  "relationshipcategories",  },
		Use: `RelationshipCategories {"CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new relationship category`,
		Long:  `Create a new relationship category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.RelationshipCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ReportRequests_cmd = &cobra.Command{
		Aliases: []string{  "RR",  "reportrequests",  "rr",  },
		Use: `ReportRequests {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DeletedIndicator":true,"EmailBody":"string","EmailRecipients":"string","EmailSubject":"string","EndDateTime":"2000-01-01T00:00:00.000Z","Id":123,"OutputOption":"string","Parameters":[{"ParameterId":123,"ReportId":"string","RequestId":123,"Value":"string"},...],"PublicIndicator":true,"QueueStatus":"string","ReportId":"string","ReportType":123,"RequestDateTime":"2000-01-01T00:00:00.000Z","ResultCode":"string","ResultText":"string","ScheduleId":123,"Type":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroupId":"string","UserId":"string"}`,
		Short: `Creates the report request`,
		Long:  `Creates the report request.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("GenerateScheduled"); test {
				out, err = tq.Do(*_tq, _tq.Post.ReportRequestsGenerateScheduled , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.ReportRequestsCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ReportSchedules_cmd = &cobra.Command{
		Aliases: []string{  "RS",  "reportschedules",  "rs",  },
		Use: `ReportSchedules {"DayOfWeek":123,"DayWeekNumber":123,"EndDate":"2000-01-01T00:00:00.000Z","EndTime":"2000-01-01T00:00:00.000Z","Interval":123,"StartDate":"2000-01-01T00:00:00.000Z","StartTime":"2000-01-01T00:00:00.000Z","Type":"string"}`,
		Short: `Verify the next run for a schedule's recurrence pattern by passing the pattern`,
		Long:  `Verify the next run for a schedule's recurrence pattern by passing the pattern.  Returns its calculated next run date/time.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Save"); test {
				out, err = tq.Do(*_tq, _tq.Post.ReportSchedulesSave , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.ReportSchedulesCalculateNextRun , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ReportUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "RUG",  "reportusergroups",  "rug",  },
		Use: `ReportUserGroups {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"ReportId":"string","RunRight":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroupId":"string","ViewRight":"string"}`,
		Short: `Create a new report/user group mapping`,
		Long:  `Create a new report/user group mapping.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ReportUserGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Reports_cmd = &cobra.Command{
		Aliases: []string{  "R",  "r",  "reports",  },
		Use: `Reports {"ParameterName":"string","ReportId":"string","WhereDependencies":[{"ParameterId":"string"},...]}`,
		Short: `Get parameter values for a report parameter`,
		Long:  `Get parameter values for a report parameter.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ReportsGetParameterValues , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Research_cmd = &cobra.Command{
		Aliases: []string{  "R",  "r",  "research",  },
		Use: `Research {"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"ResearchDate":"2000-01-01T00:00:00.000Z","ResearchSource":"string","ResearchType":{"Id":123},"Researcher":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a research entry for a constituent`,
		Long:  `Create a research entry for a constituent.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ResearchCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ResearchTypes_cmd = &cobra.Command{
		Aliases: []string{  "RT",  "researchtypes",  "rt",  },
		Use: `ResearchTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new research type`,
		Long:  `Create a new research type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ResearchTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ResourceCategories_cmd = &cobra.Command{
		Aliases: []string{  "RC",  "rc",  "resourcecategories",  },
		Use: `ResourceCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Resource Category`,
		Long:  `Create a new Resource Category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ResourceCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ResourceSchedules_cmd = &cobra.Command{
		Aliases: []string{  "RS",  "resourceschedules",  "rs",  },
		Use: `ResourceSchedules {"BookingAssignmentId":123,"ConstituentId":123,"Count":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EndDateTime":"2000-01-01T00:00:00.000Z","Id":123,"OverrideConflicts":true,"RecurrenceDayOfWeek":"string","RecurrenceEndDate":"2000-01-01T00:00:00.000Z","RecurrenceInterval":123,"RecurrenceOrdinal":123,"RecurrencePattern":123,"ResourceId":123,"StartDateTime":"2000-01-01T00:00:00.000Z","Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a Busy or Available resource schedule`,
		Long:  `Create a Busy or Available resource schedule.  Booking Assignment Schedules must be created in a booking.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ResourceSchedulesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ResourceTypes_cmd = &cobra.Command{
		Aliases: []string{  "RT",  "resourcetypes",  "rt",  },
		Use: `ResourceTypes {"CanBeShared":true,"Category":{"Id":123},"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"HasCapacity":true,"Id":123,"Inactive":true,"RequireAvailability":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new resource type`,
		Long:  `Create a new resource type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ResourceTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Resources_cmd = &cobra.Command{
		Aliases: []string{  "R",  "r",  "resources",  },
		Use: `Resources {"Capacity":123,"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultConfirmationText":"string","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Notes":"string","ResourceType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a Resource`,
		Long:  `Create a Resource.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("FindAvailableResources"); test {
				out, err = tq.Do(*_tq, _tq.Post.ResourcesFindAvailableResources , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ScheduleOccurrences"); test {
				out, err = tq.Do(*_tq, _tq.Post.ResourcesGetScheduleOccurrences , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.ResourcesCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SalesChannels_cmd = &cobra.Command{
		Aliases: []string{  "SC",  "saleschannels",  "sc",  },
		Use: `SalesChannels {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new sales channel`,
		Long:  `Create a new sales channel.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SalesChannelsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SalesLayoutButtonTypes_cmd = &cobra.Command{
		Aliases: []string{  "SLBT",  "saleslayoutbuttontypes",  "slbt",  },
		Use: `SalesLayoutButtonTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new sales layout button type`,
		Long:  `Create a new sales layout button type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SalesLayoutButtonTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SalesLayouts_cmd = &cobra.Command{
		Aliases: []string{  "SL",  "saleslayouts",  "sl",  },
		Use: `SalesLayouts {"Columns":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PaymentMethods":[{"Id":123},...],"PriceTypes":[{"Id":123},...],"PrimaryIndicator":true,"Rows":123,"SalesLayoutButtons":[{"Id":123},...],"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new sales layout setup`,
		Long:  `Create a new sales layout setup.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SalesLayoutsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SalutationTypes_cmd = &cobra.Command{
		Aliases: []string{  "ST",  "salutationtypes",  "st",  },
		Use: `SalutationTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new salutation type`,
		Long:  `Create a new salutation type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SalutationTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Salutations_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "salutations",  },
		Use: `Salutations {"BusinessTitle":"string","Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultIndicator":true,"EditIndicator":true,"EnvelopeSalutation1":"string","EnvelopeSalutation2":"string","Id":123,"IsFromAffiliation":true,"Label":true,"LetterSalutation":"string","SalutationType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new salutation`,
		Long:  `Create a new salutation.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SalutationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SchedulePatternTypes_cmd = &cobra.Command{
		Aliases: []string{  "SPT",  "schedulepatterntypes",  "spt",  },
		Use: `SchedulePatternTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Schedule Pattern`,
		Long:  `Create a new Schedule Pattern.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SchedulePatternTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ScheduleTypes_cmd = &cobra.Command{
		Aliases: []string{  "ST",  "scheduletypes",  "st",  },
		Use: `ScheduleTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Schedule Type`,
		Long:  `Create a new Schedule Type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ScheduleTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SeasonTypes_cmd = &cobra.Command{
		Aliases: []string{  "ST",  "seasontypes",  "st",  },
		Use: `SeasonTypes {"BusinessUnit":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new season type`,
		Long:  `Create a new season type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SeasonTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Seasons_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "seasons",  },
		Use: `Seasons {"ConfirmationNoticeFormat":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DefaultIndicator":true,"Description":"string","DisplayInSeasonOverview":true,"EndDateTime":"2000-01-01T00:00:00.000Z","FYear":123,"Id":123,"Inactive":true,"RenewalNoticeFormat":123,"StartDateTime":"2000-01-01T00:00:00.000Z","SubscriptionFund1":123,"SubscriptionFund2":123,"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","YearlySeason":123}`,
		Short: `Create a new season`,
		Long:  `Create a new season.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SeasonsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SeatCodes_cmd = &cobra.Command{
		Aliases: []string{  "SC",  "sc",  "seatcodes",  },
		Use: `SeatCodes {"BackColor":123,"Context":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","DisplayLetter":"string","ForeColor":123,"Id":123,"Inactive":true,"IsSeat":123,"TicketText":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new seat code`,
		Long:  `Create a new seat code.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SeatCodesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SeatStatuses_cmd = &cobra.Command{
		Aliases: []string{  "SS",  "seatstatuses",  "ss",  },
		Use: `SeatStatuses {"BackColor":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","ForeColor":123,"Id":123,"Inactive":true,"StatusCode":"string","StatusLegend":"string","StatusPriority":123,"Tck":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new seat status`,
		Long:  `Create a new seat status.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SeatStatusesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Sections_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "sections",  },
		Use: `Sections {"AdditionalText":"string","AdditionalText2":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"PrintDesc":"string","PrintSequence":123,"SectionLegend":"string","ShortDesc":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new section`,
		Long:  `Create a new section.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SectionsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ServiceResourceUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "SRUG",  "serviceresourceusergroups",  "srug",  },
		Use: `ServiceResourceUserGroups {"CanCreate":true,"CanDelete":true,"CanRead":true,"CanUpdate":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"ServiceResource":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UserGroupId":"string"}`,
		Short: `Create a new service resource/user group mapping`,
		Long:  `Create a new service resource/user group mapping.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ServiceResourceUserGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Session_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "session",  },
		Use: `Session {"SessionKey":"string","Name":"string","Value":"string"}`,
		Short: `Add a new session variable to specified session`,
		Long:  `Add a new session variable to specified session.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("BusinessFacingSession"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionCreateBusinessFacingSession , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LoadOrder"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionLoadOrder , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Login"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionLogin , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LoginAsGuest"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionLoginAsGuest , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LoginUsingConstituentInfo"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionLoginUsingConstituentInfo , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LoginUsingEmail"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionLoginUsingEmail , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LoginUsingExternal"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionLoginUsingExternal , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LoginUsingToken"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionLoginUsingToken , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Logout"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionLogout , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("PromoCode"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionGetPromoCode , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Reprint"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionReprint , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SendLoginCredentials"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionSendLoginCredentials , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Session"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionCreateSession , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("TransferSession"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionTransferSession , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("WebLogin"); test {
				out, err = tq.Do(*_tq, _tq.Post.SessionCreateWebLogin , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.SessionAddVariable , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SourceGroups_cmd = &cobra.Command{
		Aliases: []string{  "SG",  "sg",  "sourcegroups",  },
		Use: `SourceGroups {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new source group`,
		Long:  `Create a new source group.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SourceGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SpecialActivities_cmd = &cobra.Command{
		Aliases: []string{  "SA",  "sa",  "specialactivities",  },
		Use: `SpecialActivities {"ConstituentId":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"Notes":"string","NumberOfAttendees":123,"Performance":"string","SpecialActivityDateTime":"2000-01-01T00:00:00.000Z","Status":{"Id":123},"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","WorkerConstituentId":123}`,
		Short: `Create a new activity record`,
		Long:  `Create a new activity record.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SpecialActivitiesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SpecialActivityStatuses_cmd = &cobra.Command{
		Aliases: []string{  "SAS",  "sas",  "specialactivitystatuses",  },
		Use: `SpecialActivityStatuses {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Special Activity Status`,
		Long:  `Create a new Special Activity Status.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SpecialActivityStatusesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SpecialActivityTypes_cmd = &cobra.Command{
		Aliases: []string{  "SAT",  "sat",  "specialactivitytypes",  },
		Use: `SpecialActivityTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Special Activity Type`,
		Long:  `Create a new Special Activity Type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SpecialActivityTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_States_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "states",  },
		Use: `States {"Country":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"StateCode":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new state`,
		Long:  `Create a new state.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.StatesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_StepTypes_cmd = &cobra.Command{
		Aliases: []string{  "ST",  "st",  "steptypes",  },
		Use: `StepTypes {"AllowAttachments":"string","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UseAssociate":"string","UseCompletedOnDateTime":"string","UseDueDateTime":"string","UseNote":"string","UseWarningDays":"string","UseWorker":"string"}`,
		Short: `Create a new step type`,
		Long:  `Create a new step type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.StepTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Steps_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "steps",  },
		Use: `Steps {"Associate":{"Id":123},"CompletedOnDateTime":"2000-01-01T00:00:00.000Z","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","DueDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"NewValue":"string","Notes":"string","OldValue":"string","Plan":{"Id":123},"Priority":123,"StepDateTime":"2000-01-01T00:00:00.000Z","Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","WarningDays":123,"Worker":{"Id":123}}`,
		Short: `Create a new step`,
		Long:  `Create a new step.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("AddDocument"); test {
				out, err = tq.Do(*_tq, _tq.Post.StepsAddDocument , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.StepsCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SubLineItemStatuses_cmd = &cobra.Command{
		Aliases: []string{  "SLIS",  "slis",  "sublineitemstatuses",  },
		Use: `SubLineItemStatuses {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Priority":123,"StatusCode":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new sub line item status`,
		Long:  `Create a new sub line item status.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SubLineItemStatusesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Suffixes_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "suffixes",  },
		Use: `Suffixes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new suffix`,
		Long:  `Create a new suffix.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SuffixesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SurveyQuestions_cmd = &cobra.Command{
		Aliases: []string{  "SQ",  "sq",  "surveyquestions",  },
		Use: `SurveyQuestions {"AskType":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DataType":123,"DefaultValue":"string","Id":123,"Inactive":true,"Question":"string","ReferenceTable":"string","ReferenceTableDescriptionColumn":"string","ReferenceTableIdColumn":"string","ReferenceTableSort":"string","ReferenceTableWhereClause":"string","Required":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new survey question`,
		Long:  `Create a new survey question.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SurveyQuestionsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_SurveyResponses_cmd = &cobra.Command{
		Aliases: []string{  "SR",  "sr",  "surveyresponses",  },
		Use: `SurveyResponses {"Answer":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"OrderId":123,"QuestionId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new survey response`,
		Long:  `Create a new survey response.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.SurveyResponsesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_TemplateCategories_cmd = &cobra.Command{
		Aliases: []string{  "TC",  "tc",  "templatecategories",  },
		Use: `TemplateCategories {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new template category`,
		Long:  `Create a new template category`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.TemplateCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_TemplatePriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "TPT",  "templatepricetypes",  "tpt",  },
		Use: `TemplatePriceTypes {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DesignationCode":{"Id":123},"GlAccount":{"Id":123},"Id":123,"PriceTemplate":{"Id":123},"PriceType":{"Id":123},"ResaleAccount":{"Id":123},"TemplatePrices":[{"Id":123},...],"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new template price type`,
		Long:  `Create a new template price type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Batch"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatePriceTypesBatchCreate , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.TemplatePriceTypesCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_TemplatePrices_cmd = &cobra.Command{
		Aliases: []string{  "TP",  "templateprices",  "tp",  },
		Use: `TemplatePrices {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Enabled":true,"Id":123,"MinPrice":123.456,"Price":123.456,"TemplatePriceType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Zone":{"Id":123}}`,
		Short: `Create a new template price`,
		Long:  `Create a new template price.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Batch"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatePricesBatchCreate , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.TemplatePricesCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Templates_cmd = &cobra.Command{
		Aliases: []string{  "T",  "t",  "templates",  },
		Use: `Templates {"Category":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"IsHtmlBody":true,"TemplateBody":"string","TemplateSubject":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new template`,
		Long:  `Create a new template`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("ConstituentInfo"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatesGetConstituentInfo , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LoginCredentials"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatesGetLoginCredentials , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("OrderConfirmation"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatesGetOrderConfirmation , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("RenderConstituentInfo"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatesRenderConstituentInfo , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("RenderLoginCredentials"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatesRenderLoginCredentials , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("RenderOrderConfirmation"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatesRenderOrderConfirmation , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("RenderTickets"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatesRenderTickets , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Tickets"); test {
				out, err = tq.Do(*_tq, _tq.Post.TemplatesGetTickets , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.TemplatesCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Theaters_cmd = &cobra.Command{
		Aliases: []string{  "T",  "t",  "theaters",  },
		Use: `Theaters {"City":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DataWindowDefinition":"string","Description":"string","DrivingDirections":"string","Id":123,"Inactive":true,"MaximumNumberOfSeats":123,"Phone":"string","PostalCode":"string","State":"string","Street":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new theater`,
		Long:  `Create a new theater.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.TheatersCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_TimeSlots_cmd = &cobra.Command{
		Aliases: []string{  "TS",  "timeslots",  "ts",  },
		Use: `TimeSlots {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EndTime":"2000-01-01T00:00:00.000Z","Id":123,"Inactive":true,"StartTime":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new time slot`,
		Long:  `Create a new time slot.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.TimeSlotsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_TriPOSCloudConfigurations_cmd = &cobra.Command{
		Aliases: []string{  "TPOSCC",  "tposcc",  "triposcloudconfigurations",  },
		Use: `TriPOSCloudConfigurations {"ConfigSetting":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new TriPOS Cloud configuration`,
		Long:  `Create a new TriPOS Cloud configuration.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.TriPOSCloudConfigurationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_UpgradeCategories_cmd = &cobra.Command{
		Aliases: []string{  "UC",  "uc",  "upgradecategories",  },
		Use: `UpgradeCategories {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new Upgrade Category`,
		Long:  `Create a new Upgrade Category.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.UpgradeCategoriesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_UpgradeLogs_cmd = &cobra.Command{
		Aliases: []string{  "UL",  "ul",  "upgradelogs",  },
		Use: `UpgradeLogs {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","HotFixNumber":123,"Id":123,"ReleaseDescription":"string","ScriptId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UpgradeCategorySummary":{"Id":123},"Version":"string"}`,
		Short: `Saves the given upgradeLog`,
		Long:  `Saves the given upgradeLog.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.UpgradeLogsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_UserPreferences_cmd = &cobra.Command{
		Aliases: []string{  "UP",  "up",  "userpreferences",  },
		Use: `UserPreferences {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"Key":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Value":"string"}`,
		Short: `Create a new user preference`,
		Long:  `Create a new user preference.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("SaveBatch"); test {
				out, err = tq.Do(*_tq, _tq.Post.UserPreferencesSaveBatch , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.UserPreferencesCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Users_cmd = &cobra.Command{
		Aliases: []string{  "U",  "u",  "users",  },
		Use: `Users {"NewPassword":"string","OldPassword":"string","UserName":"string"}`,
		Short: `Allows for changing of a user's password`,
		Long:  `Allows for changing of a user's password`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.UsersChangePassword , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ValidateWebLogin_cmd = &cobra.Command{
		Aliases: []string{  "VWL",  "validateweblogin",  "vwl",  },
		Use: `ValidateWebLogin {"LoginName":"string","LoginTypeId":123,"Password":"string"}`,
		Short: `Validate a web login`,
		Long:  `Validate a web login.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ValidateWebLoginCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_WebContentTypes_cmd = &cobra.Command{
		Aliases: []string{  "WCT",  "wct",  "webcontenttypes",  },
		Use: `WebContentTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EditMask":"string","FullTextSearchIndicator":true,"Id":123,"Inactive":true,"LastContentUseUpdateDateTime":"2000-01-01T00:00:00.000Z","Limit":123,"ReferenceDescriptionColumn":"string","ReferenceIdColumn":"string","ReferenceSort":"string","ReferenceTable":"string","ReferenceWhere":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","UseWebApi":true}`,
		Short: `Create a Web Content Type`,
		Long:  `Create a Web Content Type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.WebContentTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_WebLogins_cmd = &cobra.Command{
		Aliases: []string{  "WL",  "weblogins",  "wl",  },
		Use: `WebLogins {"Constituent":{"Id":123},"ConstituentUpdateDate":"2000-01-01T00:00:00.000Z","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Email":{"Id":123},"FailedAttempts":123,"Id":123,"Inactive":true,"LastLoginDate":"2000-01-01T00:00:00.000Z","LockedDate":"2000-01-01T00:00:00.000Z","Login":"string","LoginType":{"Id":123},"PrimaryIndicator":true,"TemporaryIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new weblogin`,
		Long:  `Create a new weblogin.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.WebLoginsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_WorkerQualifications_cmd = &cobra.Command{
		Aliases: []string{  "WQ",  "workerqualifications",  "wq",  },
		Use: `WorkerQualifications {"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EndDateTime":"2000-01-01T00:00:00.000Z","Id":123,"Qualification":{"Id":123},"StartDateTime":"2000-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a WorkerQualification`,
		Long:  `Create a WorkerQualification.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.WorkerQualificationsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_WorkerRoles_cmd = &cobra.Command{
		Aliases: []string{  "WR",  "workerroles",  "wr",  },
		Use: `WorkerRoles {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"ShowInPortfolioDefault":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new worker role`,
		Long:  `Create a new worker role.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.WorkerRolesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_WorkerTypes_cmd = &cobra.Command{
		Aliases: []string{  "WT",  "workertypes",  "wt",  },
		Use: `WorkerTypes {"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new worker type`,
		Long:  `Create a new worker type.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.WorkerTypesCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Workers_cmd = &cobra.Command{
		Aliases: []string{  "W",  "w",  "workers",  },
		Use: `Workers {"ConstituentId":123,"ConstituentInactive":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"FirstName":"string","Id":123,"Inactive":true,"LastName":"string","Prefix":{"Id":123},"ShortDisplayName":"string","SortName":"string","Suffix":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","WorkerType":{"Id":123}}`,
		Short: `Create a new worker`,
		Long:  `Create a new worker.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.WorkersCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ZoneGroups_cmd = &cobra.Command{
		Aliases: []string{  "ZG",  "zg",  "zonegroups",  },
		Use: `ZoneGroups {"AliasDescription":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rank":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new zone group`,
		Long:  `Create a new zone group.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ZoneGroupsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_ZoneMaps_cmd = &cobra.Command{
		Aliases: []string{  "ZM",  "zm",  "zonemaps",  },
		Use: `ZoneMaps {"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"SeatMap":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`,
		Short: `Create a new zone map`,
		Long:  `Create a new zone map.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			
			out, err = tq.Do(*_tq, _tq.Post.ZoneMapsCreate , []byte(args[0]))
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}

var Post_Zones_cmd = &cobra.Command{
		Aliases: []string{  "Z",  "z",  "zones",  },
		Use: `Zones {"Abbreviation":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","EndTime":"string","Id":123,"Rank":123,"ShortDescription":"string","StartTime":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","ZoneGroup":{"Id":123},"ZoneLegend":"string","ZoneMapId":123,"ZoneTime":"string"}`,
		Short: `Create a new zone`,
		Long:  `Create a new zone.`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			if test, _ := cmd.Flags().GetBool("Search"); test {
				out, err = tq.Do(*_tq, _tq.Post.ZonesSearch , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Post.ZonesCreate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(string(out))
			} 
			return err
		},
	}


func init() {
		Post_cmd.AddCommand(Post_AccountTypes_cmd)
	
		Post_cmd.AddCommand(Post_Accounts_cmd) 
				Post_Accounts_cmd.Flags().Bool("DirectDebitAccount", false, 
					`Store a direct debit account.
{"AccountNumber":"string","CardExpiryMonth":123,"CardExpiryYear":123,"ConstituentId":123,"DirectDebitAccountType":{"Id":123},"Inactive":true,"Name":"string"}`) 
				Post_Accounts_cmd.Flags().Bool("SepaAccount", false, 
					`Store a SEPA Direct Debit account.
{"AccountNumber":"string","BankIdentifierCode":"string","ConstituentId":123,"Inactive":true,"MandateNumber":"string","MandateType":123,"Name":"string","SignatureDate":"2000-01-01T00:00:00.000Z"}`) 
				Post_Accounts_cmd.Flags().Bool("VantivEncryptedCardAccount", false, 
					`Create a credit card account from a Vantiv Encrypted Reader using tokenization.
{"ConstituentId":123,"ExclusiveToControlledBatchId":123,"Inactive":true,"Name":"string","PaymentMethodGroupId":123,"VantivEncryptedCard":{"Version":"string"}}`)
	
		Post_cmd.AddCommand(Post_ActionTypes_cmd)
	
		Post_cmd.AddCommand(Post_Actions_cmd)
	
		Post_cmd.AddCommand(Post_ActivityCategories_cmd)
	
		Post_cmd.AddCommand(Post_ActivityTypes_cmd)
	
		Post_cmd.AddCommand(Post_AddressTypes_cmd)
	
		Post_cmd.AddCommand(Post_Addresses_cmd)
	
		Post_cmd.AddCommand(Post_AffiliationInfo_cmd)
	
		Post_cmd.AddCommand(Post_AffiliationTypes_cmd)
	
		Post_cmd.AddCommand(Post_Affiliations_cmd)
	
		Post_cmd.AddCommand(Post_AliasTypes_cmd)
	
		Post_cmd.AddCommand(Post_Aliases_cmd)
	
		Post_cmd.AddCommand(Post_AnalyticsReports_cmd)
	
		Post_cmd.AddCommand(Post_AppealCategories_cmd)
	
		Post_cmd.AddCommand(Post_Artists_cmd)
	
		Post_cmd.AddCommand(Post_AssetTypes_cmd)
	
		Post_cmd.AddCommand(Post_Assets_cmd)
	
		Post_cmd.AddCommand(Post_AssociationTypes_cmd)
	
		Post_cmd.AddCommand(Post_Associations_cmd)
	
		Post_cmd.AddCommand(Post_Attributes_cmd)
	
		Post_cmd.AddCommand(Post_Authenticate_cmd) 
				Post_Authenticate_cmd.Flags().Bool("AuthenticateWindows", false, 
					`Authenticate the provided credentials
{"Application":"string","MachineLocation":"string","UserGroup":"string"}`) 
				Post_Authenticate_cmd.Flags().Bool("GenerateToken", false, 
					`Authenticate the provided credentials and return a timed token that can be used to proxy this result.
{"Application":"string","MachineLocation":"string","Password":"string","UserGroup":"string","UserName":"string"}`) 
				Post_Authenticate_cmd.Flags().Bool("GenerateTokenWindows", false, 
					`Authenticate the provided credentials and return a timed token that can be used to proxy this result.
{"Application":"string","MachineLocation":"string","UserGroup":"string"}`) 
				Post_Authenticate_cmd.Flags().Bool("ValidateToken", false, 
					`Validates an authentication token and returns the standard AuthenticationResponse
{"Token":"string"}`)
	
		Post_cmd.AddCommand(Post_Authorization_cmd) 
				Post_Authorization_cmd.Flags().Bool("Confirm", false, 
					`Confirm an authorization using its reference number. For all gateways, this results in a confirm transaction being written to T_PAYMENT_GATEWAY_ACTIVITY. For EPay gateway, the confirm endpoint also sends a capture transaction.
{"Amount":123.456,"IsECommerce":true,"PaymentId":123,"PaymentMethodId":123,"TransactionOrigin":"string","UserData":"string","ReferenceNumber":"string"}`) 
				Post_Authorization_cmd.Flags().Bool("ConfirmPayByLink", false, 
					`NOTE: THIS IS FOR TESSITURA USE ONLY. Custom implementations of this endpoint are not supported.
Check to see if a Pay by Link has been authorized.  For Tessitura Merchant Services only.
{"BypassNotificationEventCheck":true,"PaymentID":"string"}`) 
				Post_Authorization_cmd.Flags().Bool("Finalize", false, 
					`Finalize an authorization.  For use with Tessitura Merchant Services only. Finalizes a payment authorization derived from the Authorize request.
{"ActionData":"string","PaymentId":123,"RedirectResult":"string","StoreAccount":true}`) 
				Post_Authorization_cmd.Flags().Bool("Link", false, 
					`NOTE: THIS IS FOR TESSITURA USE ONLY. Custom implementations of this endpoint are not supported.
Create a payment link to a hosted payment form where shoppers can pay.  For Tessitura Merchant Services only.
{"AllowedPaymentMethods":["",...],"Amount":123.456,"ConstituentId":123,"CountryCode":"string","Currency":"string","Description":"string","IsECommerce":true,"LinkExpiry":"2000-01-01T00:00:00.000Z","Locale":"string","MerchantId":"string","PaymentId":123,"StoreAccount":true,"TransactionOrigin":"string"}`) 
				Post_Authorization_cmd.Flags().Bool("Reverse", false, 
					`Reverse a payment authorization using its reference number.
{"ReferenceNumber":"string","Amount":123.456,"Card":{"AccountId":123,"CardHolderName":"string","CardNumber":"string","Cvv2":"string","ExpirationDate":"string","TessituraMerchantServicesData":"string","Track1":"string","Track2":"string"},"ConstituentId":123,"IsECommerce":true,"IsElementDebit":true,"IsSwiped":true,"PaymentId":123,"PaymentMethodId":123,"TransactionOrigin":"string","UserData":"string"}`)
	
		Post_cmd.AddCommand(Post_Batch_cmd)
	
		Post_cmd.AddCommand(Post_BatchMaintenance_cmd)
	
		Post_cmd.AddCommand(Post_BatchTypeGroups_cmd)
	
		Post_cmd.AddCommand(Post_BatchTypes_cmd)
	
		Post_cmd.AddCommand(Post_BillingSchedules_cmd)
	
		Post_cmd.AddCommand(Post_BillingTypes_cmd)
	
		Post_cmd.AddCommand(Post_BookingCategories_cmd)
	
		Post_cmd.AddCommand(Post_BookingTemplates_cmd)
	
		Post_cmd.AddCommand(Post_Bookings_cmd) 
				Post_Bookings_cmd.Flags().Bool("AddDocument", false, 
					`Add a document to the booking.
{"BookingID":"string","Category":{"Id":123},"ConstituentId":123,"Contents":"AA==","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","FileName":"string","Id":123,"Notes":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`) 
				Post_Bookings_cmd.Flags().Bool("FromTemplate", false, 
					`Create a new Booking using the details and Resource Type assignments from a Booking Template.
{"BookingSource":123,"BookingTemplateId":123,"ConfirmationText":"string","DefaultCount":123,"DefaultDateTime":"2000-01-01T00:00:00.000Z","DefaultDuration":123,"Description":"string","Notes":"string"}`)
	
		Post_cmd.AddCommand(Post_BulkCopySets_cmd) 
				Post_BulkCopySets_cmd.Flags().Bool("CopyDay", false, 
					`Copies the packages, performances groups and performances from a day defined in the bulk copy set to the day specified in the request.
{"CopyToDate":"2000-01-01T00:00:00.000Z","PackageCodeCounter":123,"PerformanceCodeCounter":123,"BulkCopySetID":"string"}`) 
				Post_BulkCopySets_cmd.Flags().Bool("CopyEvent", false, 
					`Copies the performance specified in the bulk copy set to the date and time specified in the request.
{"CopyToDate":"2000-01-01T00:00:00.000Z","PerformanceCodeCounter":123,"BulkCopySetID":"string"}`) 
				Post_BulkCopySets_cmd.Flags().Bool("ReplaceExclusions", false, 
					`Replaces bulk copy exclusions for a given set by deleting them and inserting the new collection.
{"BulkCopySetID":"string","BulkDailyCopyExclusions":[{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DoNotCopy":true,"Id":123,"IncludeWithoutCopy":true,"PackageId":123,"PerformanceId":123,"SetId":123,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"},...]}`)
	
		Post_cmd.AddCommand(Post_BulkDailyCopyExclusions_cmd)
	
		Post_cmd.AddCommand(Post_BusinessUnits_cmd)
	
		Post_cmd.AddCommand(Post_CampaignDesignations_cmd)
	
		Post_cmd.AddCommand(Post_CampaignFunds_cmd)
	
		Post_cmd.AddCommand(Post_CardReaderTypes_cmd)
	
		Post_cmd.AddCommand(Post_Cart_cmd) 
				Post_Cart_cmd.Flags().Bool("AddContribution", false, 
					`Adds a contribution to the cart
The donation must be applied directly to a fund.  This method also allows a specific membership level ID to be specified.
{"Amount":123.456,"CustomDataItems":[{"DataType":"string","Description":"string","EditIndicator":true,"Index":123,"IsDropdown":true,"KeywordId":123,"Name":"string","Value":"string"},...],"FundId":123,"MembershipLevelId":123,"Notes":"string","Renew":true,"Upgrade":true,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("AddFee", false, 
					`Adds or Updates a fee
Only user-defined fees can be added.  Seat-based fees can be overridden to zero only, while order-based or user-defined fees can be overridden to any amount, as allowed by the rules in fee setup.  To add and edit a user-defined fee call this method twice, once to add the fee, and once to override the amount.
{"Action":"string","Amount":123.456,"FeeId":123,"ItemFeeId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("AddGiftCertificate", false, 
					`Adds a gift certificate for the specified amount to the cart
The resulting gift certificate number can be found with /Web/Cart (GET).
{"Amount":123.456,"Name":"string","Notes":"string","PaymentMethodId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("AddNFSPackagePerformanceItem", false, 
					`Adds a new nfs package item to the cart
This method adds a seated or unseated non fixed seat (NFS) or flex package to the cart by adding the component performances.  When the package is seated, the best seating function can be used or specific seat numbers can be passed for use with SYOS functionality.  
A NFS or flex package line item is created when the first component performance is added to the cart.The ID number from the package line item is required when the remaining component performances are added.  It is returned as NFSPackageLineItemId in the method's response.
/Web/Cart/Validation can be called at any time, setting the ValidateNFSPackages boolean to true, to determine whether all of the rules for the package have been met with items in the shopping cart.
This method will allow the reservation of held seats.  To enable this functionality, add the key ''Reserve Held Seats' to T_DEFAULTS with a value of 'Yes' under the "Tessitura Web" parent table (or organization name if operating in a consortium environment).
{"LeaveSingleSeats":true,"NFSPackageLineItemId":123,"NumberOfSeats":123,"PackageId":123,"PerformanceGroupId":123,"PerformanceId":123,"PriceType":"string","PriceTypeReason":"string","RequestedSeats":"string","SpecialRequests":"string","Unseated":true,"ZoneId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("AddOnAccount", false, 
					`Adds an On Account balance to the cart
Checkout will not be allowed for a general public order if On Account balance is added.
{"Amount":123.456,"Notes":"string","PaymentMethodId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("AddPackageItem", false, 
					`Adds a new fixed seat package item to the cart
Adds a seated or unseated fixed seat package line item to the cart and reserves seats using either the best seat function or reserves specific seats.
PackageId line items can be added as alternate/upgrade line items to another line item in the cart.  To add an alternate/upgrade line item, the parent line item ID must be retrieved using /Web/Cart (GET) and then passed as the ParentPackageLineItemId parameter value for this method.
This method will allow the reservation of held seats.To enable this functionality, add the key ''Reserve Held Seats' to T_DEFAULTS with a value of 'Yes' under the "Tessitura Web" parent table (or organization name if operating in a consortium environment).
{"LeaveSingleSeats":true,"NumberOfSeats":123,"PackageId":123,"ParentPackageLineItemId":123,"PriceType":"string","PriceTypeReason":"string","RequestedSeats":"string","Unseated":true,"ZoneId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("AddPaymentPlan", false, 
					`Sets a payment plan on the cart using a start date, end date and a specific number of payments to be spread across the date range.
The due date for the first payment is set to the entered beginning date, and the due date for subsequent payments is calculated by adding an equal number of days to each previous payment, based on the amount of time between the beginning and ending dates.
{"AccountId":123,"BillingTypeId":123,"Card":{"ExpiryMonth":123,"ExpiryYear":123,"Name":"string","Number":"string","PaymentMethodGroupId":123},"EndDate":"2000-01-01T00:00:00.000Z","NumberOfPayments":123,"StartDate":"2000-01-01T00:00:00.000Z","SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("AddPaymentPlanBasedOnBillingSchedule", false, 
					`Sets a payment plan on the cart using a start date, end date and a pre-defined billing schedule.
The number of payments, payment amounts, and payment due dates are calculated based on the selected billing schedule.  For details on setting up billing schedules see the TR_BILLING_SCHEDULE section of the System Tables document.
{"AccountId":123,"BillingScheduleId":123,"BillingTypeId":123,"Card":{"ExpiryMonth":123,"ExpiryYear":123,"Name":"string","Number":"string","PaymentMethodGroupId":123},"EndDate":"2000-01-01T00:00:00.000Z","OverrideAmountToSchedule":123.456,"StartDate":"2000-01-01T00:00:00.000Z","SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("AddPaymentPlanInstallments", false, 
					`Sets a payment plan on the cart using a start date, end date and a list of installments with amount and due date.
The total of the installment amounts must add up to the cart total. /Web/Cart/Validation can be used to validate that the payment plan is correct by passing True for ValidatePaymentPlan in that method.
{"AccountId":123,"BillingTypeId":123,"Card":{"ExpiryMonth":123,"ExpiryYear":123,"Name":"string","Number":"string","PaymentMethodGroupId":123},"PaymentPlanInstallments":[{"Amount":123.456,"DueDate":"0001-01-01T00:00:00.000Z"},...],"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("AddSubPackageItem", false, 
					`Adds a new sub package item to the cart
This method is used to add a seated or unseated super package line item to the cart for the specified session by adding the component sub packages.  When the package is seated, the best seating function can be used or specific seat numbers can be passed for use with SYOS functionality.  The method must be called once for each sub package.
A super package line item is created when the first sub package is added to the cart.The ID number from the super package line item is required when the remaining component sub packages are added.It is returned as SuperPackageLineItemId in the response.
Super package line items can be added as alternate/upgrade line items to another super package line item in the cart.  To add an alternate/upgrade line item, the parent line item ID must be passed as the ParentSuperPackageLineItemId parameter value for this method.The parent line item ID can be retrieved using the /Web/Cart (GET) method.
{"LeaveSingleSeats":true,"NumberOfSeats":123,"ParentSuperPackageLineItemId":123,"PriceType":"string","PriceTypeReason":"string","RequestedSeats":"string","SubPackageId":123,"SuperPackageLineItemId":123,"Unseated":true,"ZoneId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ApplyCashPayment", false, 
					`Applies a cash payment to the cart
{"Amount":123.456,"Notes":"string","PaymentMethodId":123,"TenderedAmount":123.456,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ApplyCheckPayment", false, 
					`Applies a check payment to the cart
{"Amount":123.456,"CheckNumber":"string","Notes":"string","PayerName":"string","PaymentMethodId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ApplyGiftCertificate", false, 
					`Applies a gift certificate as payment for a cart
{"Amount":123.456,"GiftCertificateNumber":"string","Notes":"string","SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ApplyInvoicePayment", false, 
					`Applies an invoice payment to the cart
Checkout will not be allowed for a general public order if an Invoice payment is applied
{"Amount":123.456,"Notes":"string","PaymentMethodId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ApplyOnAccountPayment", false, 
					`Applies an On Account payment to the cart.
Not valid for a general public cart.
{"Amount":123.456,"Notes":"string","PaymentMethodId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ApplyOtherPayment", false, 
					`Applies an other payment to the cart
{"Amount":123.456,"Notes":"string","PaymentMethodId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("Authorize", false, 
					`Authorize payment using a card reader in a web based transaction.
{"Amount":123.456,"IsMoto":true,"MachineId":123,"TransactionOrigin":"string","UserData":"string","SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("Checkout", false, 
					`Validates, processes payment for, and saves an order for a specified session.  
Payment information can be provided as follows:
-	The full card details can be provided in the request
-	The request includes parameters for use with the 3D Secure protocol used by credit card verification services such as Verified by Visa and MasterCard SecureCode.
-	The method also allows the credit card authorization process to be skipped, which allows the use of third party authorizations.  
-	The AccountID property in the request can be used in place of specifying credit card information.  When a valid id value from CRM/Accounts is provided and the stored card data belongs to either the session owner or the session initiator, then that card data is passed through for authorization.If the account is invalid or does not belong to the session owner or initiator, then an error is returned.
-	Additionally, this method has two additional Address Verification parameters, allowing a calling application to optionally specify the street address and zip code that represents the billing address for the credit card.

When the method is run the status of the order is checked to ensure checkout has not started. The procedure will set the status in T_WEB_CHECKOUT to one of the following values: (S)ave in progress, (C)ompleted save, (E)rror when saving.
The response includes a status and message details about the status.Possible status results are: SaveInProgress, SaveComplete, Error.
In order to facilitate the use of the interceptor capability, the checkout method now makes a POST call to Txn / Orders.By default this call does nothing unless a developer has added interceptor plug -in code to the exposure.
{"AccountId":123,"Address":"string","AllowUnderPayment":true,"Amount":123.456,"AuthorizationCode":"string","Authorize":true,"CreditCardAuthenticationCode":"string","CreditCardMonth":123,"CreditCardNumber":"string","CreditCardOwner":"string","CreditCardType":123,"CreditCardYear":123,"DeliveryDate":"2000-01-01T00:00:00.000Z","ECommerce":true,"PaymentId":123,"PaymentReference":"string","SecureValues":"string","StoreAccount":true,"ZipCode":"string","SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("CheckoutWithCard", false, 
					`Processes checkout for the cart, using card swipe information for payment. Used by TRBO.
 When the method is run the status of the order is checked to ensure checkout has not started. The procedure will set the status in T_WEB_CHECKOUT to one of the following values: (S)ave in progress, (C)ompleted save, (E)rror when saving.
The response includes a status and message details about the status.Possible status results are: SaveInProgress, SaveComplete, Error.
In order to facilitate the use of the interceptor capability, the checkout method now makes a POST call to Txn / Orders.By default this call does nothing unless a developer has added interceptor plug -in code to the exposure.
{"AllowUnderPayment":true,"Amount":123.456,"AuthorizationCode":"string","Authorize":true,"CreditCardTrack1":"string","CreditCardTrack2":"string","CreditCardType":123,"DeliveryDate":"2000-01-01T00:00:00.000Z","ECommerce":true,"StoreAccount":true,"ZipCode":"string","SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("PreviewPaymentPlanBasedOnBillingSchedule", false, 
					`Returns the payment schedule that would be applied to the current cart for the selected billing schedule without applying it to the cart.
The number of payments, payment amounts, and payment due dates are calculated based on the selected billing schedule.  For details on setting up billing schedules see the TR_BILLING_SCHEDULE section of the System Tables document.
{"BillingScheduleId":123,"EndDate":"2000-01-01T00:00:00.000Z","OverrideAmountToSchedule":123.456,"StartDate":"2000-01-01T00:00:00.000Z","SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("Price", false, 
					`Price the current web cart associated with the specified sessionKey.
{"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("PrintEmail", false, 
					`Prints tickets for specified order, lineitems, or sublineitems and returns a formatted html body and attachments
The method returns tickets for unprinted fully-paid orders or reprints printed tickets specified via order number, one or more line item numbers, or one or more sub line item numbers.  In the case of partially-paid orders, only line items or sub line items which have been fully-paid will be eligible for printing. Only tickets belonging to the customer associated via the current web session can be returned. Ticket information can be returned in the default design specified for the ticket price type, or you may specify a ticket design to utilize via the request parameters. After the tickets have been returned via the API, seats will be flagged as Ticketed in Tessitura.
When reprinting tickets, one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number.
If PrinterType = "B", ticket designs with images are not supported
{"ReceiptSettingsID":"string","HeaderDesignId":123,"IncludeReceipts":true,"LineItems":"string","Mode":123,"NewTicketNoForReprints":true,"OrderId":123,"PrinterType":"string","ReprintTickets":true,"SubLineItems":"string","TicketDesignId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("PrintPrintStrings", false, 
					`Prints tickets for specified order, lineitems, or sublineitems and returns a collection of formatted strings based on printer type.
The returned strings can then be sent to the appropriate printer. NOTE:  Currently only Zebra printer types are supported by this method. (PrinterType = "Z")
The method returns tickets for unprinted fully-paid orders or reprints printed tickets specified via order number, one or more line item numbers, or one or more sub line item numbers.  In the case of partially-paid orders, only line items or sub line items which have been fully-paid will be eligible for printing. Only tickets belonging to the customer associated via the current web session can be returned. Ticket information can be returned in the default design specified for the ticket price type, or you may specify a ticket design to utilize via the request parameters. After the tickets have been returned via the API, seats will be flagged as Ticketed in Tessitura.
When reprinting tickets, one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number.
{"HeaderDesignId":123,"IncludeReceipts":true,"LineItems":"string","Mode":123,"NewTicketNoForReprints":true,"OrderId":123,"PrinterType":"string","ReprintTickets":true,"SubLineItems":"string","TicketDesignId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("PrintTicketElements", false, 
					`Prints tickets for specified order, lineitems, or sublineitems and returns all ticket elements.
The method returns ticket data for unprinted fully-paid orders or reprints printed tickets specified via order number, one or more line item numbers, or one or more sub line item numbers.  In the case of partially-paid orders, only line items or sub line items which have been fully-paid will be eligible for printing. Only tickets belonging to the customer associated via the current web session can be returned. Ticket information can be returned in the default design specified for the ticket price type, or you may specify a ticket design to utilize via the request parameters. After the ticket data has been returned via the API, seats will be flagged as Ticketed in Tessitura.
When reprinting tickets, one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number.
{"HeaderDesignId":123,"IncludeReceipts":true,"LineItems":"string","Mode":123,"NewTicketNoForReprints":true,"OrderId":123,"PrinterType":"string","ReprintTickets":true,"SubLineItems":"string","TicketDesignId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ReserveTickets", false, 
					`Reserves tickets in cart
Adds a seated or unseated performance line item to the cart and reserves seats using either the best seat function or reserves specific seats.
This method will allow the reservation of held seats.To enable this functionality, add the key ''Reserve Held Seats' to T_DEFAULTS with a value of 'Yes' under the "Tessitura Web" parent table (or organization name if operating in a consortium environment).
{"NumberOfSeats":123,"PerformanceId":123,"PriceType":"string","PriceTypeReason":"string","RequestedSeats":"string","SpecialRequests":"string","Unseated":true,"ZoneId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ReserveTicketsForLineItem", false, 
					`Reserves tickets in cart for an existing line item
PerformanceId specified must be valid for the line item
{"LineItemID":"string","NumberOfSeats":123,"PerformanceId":123,"PriceType":"string","PriceTypeReason":"string","RequestedSeats":"string","SpecialRequests":"string","Unseated":true,"ZoneId":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ReturnTicket", false, 
					`Return a ticket by ticket number.
This method is used to return tickets (generally for exchanges).  The method can also be used to donate a ticket for resale.
Returning a ticket will generate a credit on the ticket order.The credit must be applied to another line item(performance, package, etc.), fee, contribution, or on account payment method.
Donating a ticket uses the standard Tessitura Donate for Resale function, which releases the seat without generating a credit.
{"Checksum":"string","ReturnOrDonate":"string","TicketNumber":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ReturnTicketWithSeat", false, 
					`Return a ticket by seat number.
This method is used to return tickets (generally for exchanges).  The method can also be used to donate a ticket for resale.
Returning a ticket will generate a credit on the ticket order.The credit must be applied to another line item(performance, package, etc.), fee, contribution, or on account payment method.
Donating a ticket uses the standard Tessitura Donate for Resale function, which releases the seat without generating a credit.
{"Checksum":"string","PerformanceId":123,"ReturnOrDonate":"string","SeatNumber":123,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("Validate", false, 
					`Validates various aspects of the cart
Payment Plans, Fixed Seat Packages, Non-Fixed Seat (flex) packages and Super Packages can be validated by setting the appropriate boolean in the request.
{"ValidateFSPackages":true,"ValidateNFSPackages":true,"ValidatePaymentPlan":true,"ValidateSuperPackages":true,"SessionKey":"string"}`) 
				Post_Cart_cmd.Flags().Bool("ValidateLimits", false, 
					`Validates ticket limits
Offer Limits are evaluated for the specified price type and seat count using the cart source code.  Requires either a performance ID or a package ID.
To enable ticket limit validation, add the Field Name "ENFORCE_SEAT_LIMIT_FOR_ORDERS" under the "Impresario" parent table with a value of "Yes." This setting applies to both the Web API and the Tessitura Client Application.
{"PackageId":123,"PerformanceId":123,"PriceTypeId":123,"SeatCount":123,"SessionKey":"string"}`)
	
		Post_cmd.AddCommand(Post_Colors_cmd)
	
		Post_cmd.AddCommand(Post_Composers_cmd)
	
		Post_cmd.AddCommand(Post_Constituencies_cmd)
	
		Post_cmd.AddCommand(Post_ConstituencyTypes_cmd)
	
		Post_cmd.AddCommand(Post_ConstituentDocuments_cmd)
	
		Post_cmd.AddCommand(Post_ConstituentGroups_cmd)
	
		Post_cmd.AddCommand(Post_ConstituentInactives_cmd)
	
		Post_cmd.AddCommand(Post_ConstituentProtectionTypes_cmd)
	
		Post_cmd.AddCommand(Post_ConstituentTypeAffiliates_cmd)
	
		Post_cmd.AddCommand(Post_ConstituentTypes_cmd)
	
		Post_cmd.AddCommand(Post_Constituents_cmd) 
				Post_Constituents_cmd.Flags().Bool("ConstituentUsingSnapshot", false, 
					`Create a constituent optionally with primary address, primary salutation, primary electronic address, primary &amp; general phones and affiliates information.
{"Address":{"Id":123},"Affiliates":[{"Id":123},...],"ConstituentType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DisplayName":"string","EditIndicator":true,"ElectronicAddress":{"Id":123},"EmarketIndicator":{"Id":123},"FirstName":"string","Gender":{"Id":123},"Id":123,"Inactive":{"Id":123},"InactiveReason":{"Id":123},"LastActivityDate":"2000-01-01T00:00:00.000Z","LastName":"string","MailIndicator":{"Id":123},"MiddleName":"string","NameStatus":{"Id":123},"OriginalSource":{"Id":123},"PhoneIndicator":{"Id":123},"Prefix":{"Id":123},"PrimaryPhoneNumbers":[{"Id":123},...],"ProtectionType":{"Id":123},"Salutation":{"Id":123},"ShortDisplayName":"string","SortName":"string","Suffix":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`) 
				Post_Constituents_cmd.Flags().Bool("ConvertGroupToIndividual", false, 
					`Convert existing household to an individual.
{"ConstituentID":"string","AffiliationIdsToBeDeleted":[0,...],"AffiliationsToAssociationsInfo":[{"AffiliationId":123,"AssociationTypeId":123},...],"AssociationIdsToBeDeleted":[0,...],"AssociationsToAffiliationsInfo":[{"AffiliationTypeId":123,"AssociationId":123},...],"IndividualConstituent":{"FirstName":"string","GenderId":123,"LastName":"string","MiddleName":"string","PrefixId":123,"SuffixId":123},"Merge":{"ConstituentIdToDelete":123,"ConstituentIdToKeep":123}}`) 
				Post_Constituents_cmd.Flags().Bool("ConvertIndividualToHousehold", false, 
					`Convert existing individual constituent to a household.
{"ConstituentID":"string","AffiliationTypeId":123,"ConstituentTypeId":123}`) 
				Post_Constituents_cmd.Flags().Bool("ConvertIndividualToOrganization", false, 
					`Convert existing individual constituent to an organization.
{"ConstituentID":"string","AffiliationIdsToBeDeleted":[0,...],"AffiliationsToAssociationsInfo":[{"AffiliationId":123,"AssociationTypeId":123},...],"AssociationIdsToBeDeleted":[0,...],"AssociationsToAffiliationsInfo":[{"AffiliationTypeId":123,"AssociationId":123},...],"ConstituentTypeId":123,"LastName":"string"}`) 
				Post_Constituents_cmd.Flags().Bool("SchedulePurge", false, 
					`Schedule a constituent to be purged.  This only marks a constituent for purge, but does not actually purge the constituent.  If constituent has open transactions or an order for a future performance, a bad request will be returned indicating open transactions.  Pass IgnoreWarnings = true in request to bypass and schedule.
{"ConstituentID":"string","IgnoreWarnings":true}`) 
				Post_Constituents_cmd.Flags().Bool("SearchByCardNumber", false, 
					`Search for constituents by card number.
{"CardNumber":"string"}`) 
				Post_Constituents_cmd.Flags().Bool("SwapConstituentA1A2", false, 
					`Swaps A1/A2 names on a household account and regenerates its salutation.
{"ConstituentID":"string"}`) 
				Post_Constituents_cmd.Flags().Bool("UnschedulePurge", false, 
					`Unschedule a constituent that has been previously set to be purged.  If a purge has been completed, an error will be returned.
{"ConstituentID":"string"}`)
	
		Post_cmd.AddCommand(Post_ContactPermissionCategories_cmd)
	
		Post_cmd.AddCommand(Post_ContactPermissionTypes_cmd)
	
		Post_cmd.AddCommand(Post_ContactPermissions_cmd) 
				Post_ContactPermissions_cmd.Flags().Bool("ForTransaction", false, 
					`Request a set of contact permissions relevant to an order or contribution context.  Send request with ReturnRequiredOnly to true to only send back permissions that require constituent ask.
{"InitiatorId":123,"OwnerId":123,"ProductionSeasonIds":"string","ReturnRequiredOnly":true}`)
	
		Post_cmd.AddCommand(Post_ContactPointCategories_cmd)
	
		Post_cmd.AddCommand(Post_ContactPointCategoryPurposes_cmd)
	
		Post_cmd.AddCommand(Post_ContactPointPurposeCategories_cmd)
	
		Post_cmd.AddCommand(Post_ContactPointPurposeMaps_cmd)
	
		Post_cmd.AddCommand(Post_ContactPointPurposes_cmd)
	
		Post_cmd.AddCommand(Post_ContactTypes_cmd)
	
		Post_cmd.AddCommand(Post_ContributionDesignations_cmd)
	
		Post_cmd.AddCommand(Post_ContributionImportSets_cmd)
	
		Post_cmd.AddCommand(Post_Contributions_cmd)
	
		Post_cmd.AddCommand(Post_ControlGroupUserGroups_cmd)
	
		Post_cmd.AddCommand(Post_ControlGroups_cmd)
	
		Post_cmd.AddCommand(Post_CoreIdentity_cmd)
	
		Post_cmd.AddCommand(Post_Countries_cmd)
	
		Post_cmd.AddCommand(Post_CrediteeTypes_cmd)
	
		Post_cmd.AddCommand(Post_CurrencyTypes_cmd)
	
		Post_cmd.AddCommand(Post_Custom_cmd) 
				Post_Custom_cmd.Flags().Bool("ExecuteLocalProcedureWithMultipleResultSets", false, 
					`Executes a local procedure defined in TR_LOCAL_PROCEDURE.  This resource supports multiple result sets in a registered procedure. The response object is different from Custom/Execute. For each result set, null values are not returned as properties.
{"ParameterValues":[{"Name":"string","Value":"string"},...],"Parameters":"string","ProcedureId":123,"ProcedureName":"string"}`)
	
		Post_cmd.AddCommand(Post_CustomDefaultCategories_cmd)
	
		Post_cmd.AddCommand(Post_CustomDefaults_cmd)
	
		Post_cmd.AddCommand(Post_DeliveryMethods_cmd)
	
		Post_cmd.AddCommand(Post_DesignationCodes_cmd)
	
		Post_cmd.AddCommand(Post_Diagnostics_cmd)
	
		Post_cmd.AddCommand(Post_DirectDebitAccountTypes_cmd)
	
		Post_cmd.AddCommand(Post_DiscountTypes_cmd)
	
		Post_cmd.AddCommand(Post_DocumentCategories_cmd)
	
		Post_cmd.AddCommand(Post_DonationLevels_cmd)
	
		Post_cmd.AddCommand(Post_EMV_cmd) 
				Post_EMV_cmd.Flags().Bool("Lane", false, 
					`Add a new lane to merchant
{"Cert":"string","ActivationCode":"string","Description":"string","LaneId":"string","MarketCode":"string","TerminalId":"string","Merchant":"string"}`) 
				Post_EMV_cmd.Flags().Bool("Signature", false, 
					`Accepts the signature for a Payment Express HIT authorization.
{"MachineId":123,"PaymentId":123,"SignatureMatches":true,"StoreAccount":true}`) 
				Post_EMV_cmd.Flags().Bool("Token", false, 
					`Creates a token on the specified constituent via a Payment Express HIT, TriPOSCloud, or Adyen device without authorizing a transaction.
{"ConstituentId":123,"IsMoto":true,"MachineId":123,"TransactionOrigin":"string"}`)
	
		Post_cmd.AddCommand(Post_ElectronicAddressTypes_cmd)
	
		Post_cmd.AddCommand(Post_ElectronicAddresses_cmd) 
				Post_ElectronicAddresses_cmd.Flags().Bool("Move", false, 
					`Change the ownership of the electronic address to a new constituent.
{"ConstituentID":"string","ElectronicAddressID":"string"}`)
	
		Post_cmd.AddCommand(Post_EmailProfiles_cmd)
	
		Post_cmd.AddCommand(Post_EmailResponses_cmd)
	
		Post_cmd.AddCommand(Post_Emails_cmd) 
				Post_Emails_cmd.Flags().Bool("SendConstituentInfo", false, 
					`Queues a Constituents Info email
{"ConstituentID":"string","EmailAddress":"string","EmailProfileId":123,"NameValues":[{"Name":"string","Value":"string"},...],"TemplateId":123}`) 
				Post_Emails_cmd.Flags().Bool("SendLoginCredentials", false, 
					`Queues a Login Credentials email.
This endpoint will not generate a password token and should be used for testing a login credentials template.
Use the SendCredentials endpoint in Web/Session to send a login credentials email with a generated password token.
{"LoginID":"string","EmailAddress":"string","EmailProfileId":123,"NameValues":[{"Name":"string","Value":"string"},...],"TemplateId":123}`) 
				Post_Emails_cmd.Flags().Bool("SendOrderConfirmation", false, 
					`Queues an Order Confirmation email
{"OrderID":"string","EmailAddress":"string","EmailProfileId":123,"NameValues":[{"Name":"string","Value":"string"},...],"TemplateId":123}`) 
				Post_Emails_cmd.Flags().Bool("SendTickets", false, 
					`Queues a ticket email
{"OrderID":"string","EmailAddress":"string","EmailProfileId":123,"PrintOrderTicketsRequest":{"BatchId":123,"HeaderDesignId":123,"IncludeReceipts":true,"LineItems":"string","NewTicketNoForReprints":true,"PrinterType":"string","ReprintTickets":true,"SubLineItems":"string","TicketDesignId":123},"TemplateId":123}`)
	
		Post_cmd.AddCommand(Post_EmarketIndicators_cmd)
	
		Post_cmd.AddCommand(Post_Eras_cmd)
	
		Post_cmd.AddCommand(Post_Facilities_cmd)
	
		Post_cmd.AddCommand(Post_Genders_cmd)
	
		Post_cmd.AddCommand(Post_GiftAidContactMethods_cmd)
	
		Post_cmd.AddCommand(Post_GiftAidDeclarations_cmd)
	
		Post_cmd.AddCommand(Post_GiftAidDocumentStatuses_cmd)
	
		Post_cmd.AddCommand(Post_GiftAidIneligibleReasons_cmd)
	
		Post_cmd.AddCommand(Post_GiftAidRates_cmd)
	
		Post_cmd.AddCommand(Post_GiftAidStatuses_cmd)
	
		Post_cmd.AddCommand(Post_GiftAidTypes_cmd)
	
		Post_cmd.AddCommand(Post_GiftCertificates_cmd) 
				Post_GiftCertificates_cmd.Flags().Bool("Unlock", false, 
					`Removes lock for gift certificate from any batch.
{"GiftCertificateNumber":"string"}`)
	
		Post_cmd.AddCommand(Post_HoldCodeCategories_cmd)
	
		Post_cmd.AddCommand(Post_HoldCodeUserGroups_cmd)
	
		Post_cmd.AddCommand(Post_HoldCodes_cmd)
	
		Post_cmd.AddCommand(Post_InactiveReasons_cmd)
	
		Post_cmd.AddCommand(Post_IntegrationDefaults_cmd)
	
		Post_cmd.AddCommand(Post_Integrations_cmd)
	
		Post_cmd.AddCommand(Post_InterestCategories_cmd)
	
		Post_cmd.AddCommand(Post_InterestTypes_cmd)
	
		Post_cmd.AddCommand(Post_Interests_cmd) 
				Post_Interests_cmd.Flags().Bool("Or", false, 
					`Creates, updates, or deletes interests passed as a collection. We recommend that this resource be used for making multiple edits to Constituent Interests in a single API request. Interests that exist will be updated with provided Weight and Selected values. If an existing interest is provided with a Weight of 0 or NULL and a Selected: false, the interest will be deleted. New Interests should be created with an Id of -999 (or NULL).
{"Interests":[{"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"InterestType":{"Id":123},"Selected":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Weight":123},...]}`)
	
		Post_cmd.AddCommand(Post_Internal_cmd)
	
		Post_cmd.AddCommand(Post_InventoryContactPermissionTypes_cmd)
	
		Post_cmd.AddCommand(Post_InventoryWebContents_cmd)
	
		Post_cmd.AddCommand(Post_InvoiceBilling_cmd)
	
		Post_cmd.AddCommand(Post_Issues_cmd)
	
		Post_cmd.AddCommand(Post_KeywordCategories_cmd)
	
		Post_cmd.AddCommand(Post_Keywords_cmd)
	
		Post_cmd.AddCommand(Post_Languages_cmd)
	
		Post_cmd.AddCommand(Post_ListCategories_cmd)
	
		Post_cmd.AddCommand(Post_Lists_cmd) 
				Post_Lists_cmd.Flags().Bool("Generate", false, 
					`Generate a List.
{"ListID":"string"}`) 
				Post_Lists_cmd.Flags().Bool("Results", false, 
					`Get results for List and OutputSet combination. If no outputSetId is passed in the request, a default output set must be set for the list. 
Response returns custom HTTP headers: X-Page, X-Page-Size, and X-Total-Count. Default page is 1 and default page size is 100.
{"ListID":"string","AddressPurposeId":123,"DisableListGenerate":true,"EMarketingIndicator":true,"ElectronicAddressPurposeId":123,"ElectronicAddressTypeId":123,"FormatDate":true,"MailingDateTime":"2000-01-01T00:00:00.000Z","MembershipOrganizationId":123,"OutputSetId":123,"Page":123,"PageSize":123,"SalutationTypeId":123,"SearchText":"string","SortBy":"string","UseLabelAddress":true}`) 
				Post_Lists_cmd.Flags().Bool("Search", false, 
					`Search for List. Response returns custom HTTP headers: X-Page, X-Page-Size, and X-Total-Count. Default page is 1 and default page size is 50.
{"CategoryId":123,"MyListsOnly":true,"Page":123,"PageSize":123,"SearchText":"string","ShowEmpty":true}`)
	
		Post_cmd.AddCommand(Post_LoginTypes_cmd)
	
		Post_cmd.AddCommand(Post_MachineSettings_cmd)
	
		Post_cmd.AddCommand(Post_MailIndicators_cmd)
	
		Post_cmd.AddCommand(Post_MediaTypes_cmd)
	
		Post_cmd.AddCommand(Post_MembershipLevelCategories_cmd)
	
		Post_cmd.AddCommand(Post_Memberships_cmd)
	
		Post_cmd.AddCommand(Post_ModeOfSaleCategories_cmd)
	
		Post_cmd.AddCommand(Post_ModeOfSaleOffers_cmd)
	
		Post_cmd.AddCommand(Post_ModeOfSalePriceTypes_cmd)
	
		Post_cmd.AddCommand(Post_ModeOfSaleSurveyQuestions_cmd)
	
		Post_cmd.AddCommand(Post_ModeOfSaleUserGroups_cmd)
	
		Post_cmd.AddCommand(Post_ModesOfSale_cmd)
	
		Post_cmd.AddCommand(Post_NScanAccessAreas_cmd)
	
		Post_cmd.AddCommand(Post_NameStatuses_cmd)
	
		Post_cmd.AddCommand(Post_ObjectPermissions_cmd)
	
		Post_cmd.AddCommand(Post_OrderBilling_cmd)
	
		Post_cmd.AddCommand(Post_OrderCategories_cmd)
	
		Post_cmd.AddCommand(Post_Orders_cmd) 
				Post_Orders_cmd.Flags().Bool("OrdersForDelivery", false, 
					`Get all the orders for delivery.
{"DeliveryMethods":"string","MaxRowsToReturn":123,"ModesOfSale":"string","OrderDaysInPast":123,"OrderEndDateTime":"2000-01-01T00:00:00.000Z","OrderStartDateTime":"2000-01-01T00:00:00.000Z","OrganizationName":"string","PerformanceEndDateTime":"2000-01-01T00:00:00.000Z","PerformanceStartDateTime":"2000-01-01T00:00:00.000Z","UsePrimaryEmail":true}`) 
				Post_Orders_cmd.Flags().Bool("Price", false, 
					`Prices an order(including pricing rules). Should have at least one line item, with each line item having at least one sub line item.
Individual sub line items can be ignored for pricing by passing ApplyPricing = false, on those sub line items.
{"AcceptingRollovers":true,"AccountId":123,"AltAddressId":123,"AltElectronicAddressId":123,"AppealId":123,"AppliedMessageRules":"string","BatchId":123,"BusinessUnitId":123,"CategoryId":123,"ChannelId":123,"ConstituentId":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Custom0":"string","Custom1":"string","Custom2":"string","Custom3":"string","Custom4":"string","Custom5":"string","Custom6":"string","Custom7":"string","Custom8":"string","Custom9":"string","DeliveryDate":"2000-01-01T00:00:00.000Z","DeliveryMethodId":123,"HoldUntilDateTime":"2000-01-01T00:00:00.000Z","Id":123,"InitiatorId":123,"LineItems":[{"Id":123},...],"Messages":[{"Id":123},...],"MirrorLock":123,"ModeOfSaleId":123,"Notes":"string","OrderDateTime":"2000-01-01T00:00:00.000Z","ReloadPricingRules":true,"Solicitor":"string","SourceId":123,"TotalDue":123.456,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","VirtualConstituencies":"string"}`) 
				Post_Orders_cmd.Flags().Bool("PrintTicketElements", false, 
					`Returns ticket elements by header, receipts, and tickets; created primarily for use for building HTML ticket templates
The method returns ticket data for unprinted fully-paid orders or reprints printed tickets specified via order number, one or more line item numbers, or one or more sub line item numbers.  In the case of partially-paid orders, only line items or sub line items which have been fully-paid will be eligible for printing. Ticket information can be returned in the default design specified for the ticket price type, or you may specify a ticket design to utilize via the request parameters. After the ticket data has been returned via the API, seats will be flagged as Ticketed in Tessitura.
When reprinting tickets, one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number.
Composite tickets are not currently supported, so a request to print one will instead return ticket elements for each performance, as if no composite ticket design had been selected for the package.
{"OrderID":"string","BatchId":123,"HeaderDesignId":123,"IncludeReceipts":true,"LineItems":"string","NewTicketNoForReprints":true,"PrinterType":"string","ReprintTickets":true,"SubLineItems":"string","TicketDesignId":123}`)
	
		Post_cmd.AddCommand(Post_Organizations_cmd)
	
		Post_cmd.AddCommand(Post_OriginalSources_cmd)
	
		Post_cmd.AddCommand(Post_Origins_cmd)
	
		Post_cmd.AddCommand(Post_OutputSets_cmd)
	
		Post_cmd.AddCommand(Post_PackagePriceTypes_cmd)
	
		Post_cmd.AddCommand(Post_PackageTypes_cmd)
	
		Post_cmd.AddCommand(Post_PackageWebContents_cmd)
	
		Post_cmd.AddCommand(Post_Packages_cmd)
	
		Post_cmd.AddCommand(Post_PaymentComponent_cmd)
	
		Post_cmd.AddCommand(Post_PaymentGatewayAccounts_cmd) 
				Post_PaymentGatewayAccounts_cmd.Flags().Bool("StoreToken", false, 
					`Store an externally generated payment card token in Tessitura. Note that for this call to function, the card_mnemonic column in TR_ACCOUNT_TYPE must be filled in appropriately for your credit card processor. Look for the TR_ACCOUNT_TYPE topic in the Tessitura help documentation for more information on the card mnemonic column.
{"Card":{"AccountId":123,"CardHolderName":"string","CardNumber":"string","Cvv2":"string","ExpirationDate":"string","TessituraMerchantServicesData":"string","Track1":"string","Track2":"string"},"ConstituentId":123,"DateUsed":"2000-01-01T00:00:00.000Z","IsECommerce":true,"NetworkTransactionId":"string","PaymentMethodGroupId":123,"ShopperReference":"string","Token":"string"}`)
	
		Post_cmd.AddCommand(Post_PaymentGatewayActivities_cmd)
	
		Post_cmd.AddCommand(Post_PaymentGatewayCredentials_cmd)
	
		Post_cmd.AddCommand(Post_PaymentGatewayNotifications_cmd)
	
		Post_cmd.AddCommand(Post_PaymentGatewayTransactionTypes_cmd)
	
		Post_cmd.AddCommand(Post_PaymentMethodGroups_cmd)
	
		Post_cmd.AddCommand(Post_PaymentMethodUserGroups_cmd)
	
		Post_cmd.AddCommand(Post_PaymentMethods_cmd)
	
		Post_cmd.AddCommand(Post_PaymentSignatures_cmd) 
				Post_PaymentSignatures_cmd.Flags().Bool("PostForOrder", false, 
					`Create a new payment signature.
{"OrderID":"string","Id":123}`)
	
		Post_cmd.AddCommand(Post_PaymentTypes_cmd)
	
		Post_cmd.AddCommand(Post_Payments_cmd)
	
		Post_cmd.AddCommand(Post_PerformanceGroups_cmd)
	
		Post_cmd.AddCommand(Post_PerformancePackageModeOfSales_cmd)
	
		Post_cmd.AddCommand(Post_PerformancePriceLayers_cmd) 
				Post_PerformancePriceLayers_cmd.Flags().Bool("PostSummaries", false, 
					`Create/Update the prices for a set of performances.
{"Layers":[{"DefaultDesignationCodeId":123,"DefaultGlAccountId":123,"DefaultResaleAccountId":123,"Description":"string","EffectiveDateTime":"2000-01-01T00:00:00.000Z","Id":123,"PerformanceId":123,"PerformancePriceTypes":[{"Id":123},...],"PriceLayerTypeId":123,"TemplateId":123},...]}`) 
				Post_PerformancePriceLayers_cmd.Flags().Bool("Search", false, 
					`Get all performance price layers for the list of performances. Only one of AsOfDateTime or AsOfRelativeDate can be specified to get prices effective for that date time.
{"AsOfDateTime":"string","AsOfRelativeDate":"string","PerformanceIds":"string"}`) 
				Post_PerformancePriceLayers_cmd.Flags().Bool("SearchSummaries", false, 
					`Get all performance price layers for the list of performances. Only one of AsOfDateTime or AsOfRelativeDate can be specified to get prices effective for that date time.
{"AsOfDateTime":"string","AsOfRelativeDate":"string","PerformanceIds":"string"}`)
	
		Post_cmd.AddCommand(Post_PerformancePriceTypes_cmd)
	
		Post_cmd.AddCommand(Post_PerformancePrices_cmd)
	
		Post_cmd.AddCommand(Post_PerformanceStatuses_cmd)
	
		Post_cmd.AddCommand(Post_PerformanceTypes_cmd)
	
		Post_cmd.AddCommand(Post_Performances_cmd) 
				Post_Performances_cmd.Flags().Bool("Copy", false, 
					`Copy existing performance to a new performance with options.
{"AvailSaleIndicator":true,"Code":"string","CopyCredits":true,"CopyNotes":true,"CopyOffers":true,"CopyPriceEvents":true,"CopyPriceLayers":true,"DateTime":"2000-01-01T00:00:00.000Z","DefaultSaleDateOption":123,"Description":"string","ModeOfSaleDateOption":123,"PriceEventDateOption":123,"PriceTypeDateOption":123,"ProductionSeasonId":123,"PublishDateOption":123,"ShortName":"string","SourcePerformanceId":123,"StatusId":123,"TimeSlotId":123,"TypeId":123}`) 
				Post_Performances_cmd.Flags().Bool("Reschedule", false, 
					`Reschedules an existing performance according to the provided options
{"Campaign":{"Id":123},"Code":"string","DateTime":"2000-01-01T00:00:00.000Z","DefaultSaleDateOption":123,"Id":123,"ModeOfSaleDateOption":123,"OffersDateOption":123,"PriceEventDateOption":123,"PriceTypeDateOption":123,"ProductionSeasonId":123,"PublishDateOption":123,"TimeSlotId":123}`) 
				Post_Performances_cmd.Flags().Bool("Search", false, 
					`Search for performances, based on provided criteria.
{"ArtistIds":"string","BusinessUnitId":123,"ConstituentId":123,"FacilityIds":"string","FullTextSearch":"string","KeywordAndOr":"string","KeywordIds":"string","ModeOfSaleId":123,"PerformanceEndDate":"2000-01-01T00:00:00.000Z","PerformanceStartDate":"2000-01-01T00:00:00.000Z","PerformanceTypeIds":"string","ProductionSeasonIds":"string","SeasonIds":"string"}`) 
				Post_Performances_cmd.Flags().Bool("SeatHolds", false, 
					`Update seat holds for a performance
Can be used to add or remove holds from seats for the specified performance. Specifying a hold code of -1 for a seat will remove all hold codes from that seat.
{"PerformanceID":"string","HoldUntilDate":"2000-01-01T00:00:00.000Z","OnlyAffectAvailable":true,"ReplaceMode":123,"SeatHolds":[{"HoldCodeId":123,"SeatId":123},...]}`)
	
		Post_cmd.AddCommand(Post_Philanthropy_cmd)
	
		Post_cmd.AddCommand(Post_PhilanthropyTypes_cmd)
	
		Post_cmd.AddCommand(Post_PhoneIndicators_cmd)
	
		Post_cmd.AddCommand(Post_PhoneTypes_cmd)
	
		Post_cmd.AddCommand(Post_Phones_cmd)
	
		Post_cmd.AddCommand(Post_PlanPriorities_cmd)
	
		Post_cmd.AddCommand(Post_PlanSources_cmd)
	
		Post_cmd.AddCommand(Post_PlanStatuses_cmd)
	
		Post_cmd.AddCommand(Post_PlanTypes_cmd)
	
		Post_cmd.AddCommand(Post_PlanWorkers_cmd)
	
		Post_cmd.AddCommand(Post_Plans_cmd)
	
		Post_cmd.AddCommand(Post_PledgeBilling_cmd)
	
		Post_cmd.AddCommand(Post_PortfolioCustomElements_cmd)
	
		Post_cmd.AddCommand(Post_Prefixes_cmd)
	
		Post_cmd.AddCommand(Post_Premieres_cmd)
	
		Post_cmd.AddCommand(Post_PriceCategories_cmd)
	
		Post_cmd.AddCommand(Post_PriceLayerTypes_cmd)
	
		Post_cmd.AddCommand(Post_PriceTemplates_cmd)
	
		Post_cmd.AddCommand(Post_PriceTypeCategories_cmd)
	
		Post_cmd.AddCommand(Post_PriceTypeGroups_cmd)
	
		Post_cmd.AddCommand(Post_PriceTypeReasons_cmd)
	
		Post_cmd.AddCommand(Post_PriceTypeUserGroups_cmd)
	
		Post_cmd.AddCommand(Post_PriceTypes_cmd)
	
		Post_cmd.AddCommand(Post_PricingRuleCategories_cmd)
	
		Post_cmd.AddCommand(Post_PricingRuleMessageTypes_cmd)
	
		Post_cmd.AddCommand(Post_PricingRuleSets_cmd)
	
		Post_cmd.AddCommand(Post_PricingRules_cmd)
	
		Post_cmd.AddCommand(Post_Printers_cmd)
	
		Post_cmd.AddCommand(Post_ProductionSeasonMembershipOrganizations_cmd)
	
		Post_cmd.AddCommand(Post_ProductionSeasons_cmd)
	
		Post_cmd.AddCommand(Post_Products_cmd) 
				Post_Products_cmd.Flags().Bool("Search", false, 
					`Search for products based on a set of criteria.
{"ArtistId":123,"BusinessUnitId":123,"ComposerId":123,"ConstituentId":123,"DayOfWeek":"string","EndDateRange":"2000-01-01T00:00:00.000Z","EndDateRangePackage":"2000-01-01T00:00:00.000Z","FacilityId":123,"FullText":"string","FullTextType":"string","IsWebSearch":true,"KeywordAndOr":123,"KeywordDescriptions":"string","KeywordId":123,"Keywords":"string","LanguageId":123,"ModeOfSaleId":123,"OnSaleOnly":true,"OneOrAllPerformancesInPackage":"string","PackageId":123,"PackageIds":"string","PackageSeasonId":123,"PackageTypeId":123,"PerformanceIds":"string","ProductionSeasonId":123,"ProductionSeasonIds":"string","SeasonId":123,"SeasonIds":"string","ShowAll":true,"ShowConstituentAvailability":true,"ShowGrossAvailability":true,"StartDateRange":"2000-01-01T00:00:00.000Z","StartDateRangePackage":"2000-01-01T00:00:00.000Z","TimeSlotId":123,"TitleId":123}`)
	
		Post_cmd.AddCommand(Post_ProgramListings_cmd)
	
		Post_cmd.AddCommand(Post_Programs_cmd)
	
		Post_cmd.AddCommand(Post_Pronouns_cmd)
	
		Post_cmd.AddCommand(Post_QualificationCategories_cmd)
	
		Post_cmd.AddCommand(Post_Qualifications_cmd)
	
		Post_cmd.AddCommand(Post_QueryElementFilters_cmd)
	
		Post_cmd.AddCommand(Post_QueryElementGroups_cmd)
	
		Post_cmd.AddCommand(Post_QueryElements_cmd)
	
		Post_cmd.AddCommand(Post_RankTypes_cmd)
	
		Post_cmd.AddCommand(Post_Rankings_cmd)
	
		Post_cmd.AddCommand(Post_ReceiptSettings_cmd)
	
		Post_cmd.AddCommand(Post_RecordAttendance_cmd)
	
		Post_cmd.AddCommand(Post_ReferenceTableUserGroups_cmd)
	
		Post_cmd.AddCommand(Post_Registration_cmd)
	
		Post_cmd.AddCommand(Post_RelationshipCategories_cmd)
	
		Post_cmd.AddCommand(Post_ReportRequests_cmd) 
				Post_ReportRequests_cmd.Flags().Bool("GenerateScheduled", false, 
					`
{}`)
	
		Post_cmd.AddCommand(Post_ReportSchedules_cmd) 
				Post_ReportSchedules_cmd.Flags().Bool("Save", false, 
					`Create a report schedule.
{"AsOfDateTime":"2000-01-01T00:00:00.000Z","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DayOfWeek":123,"DayWeekNumber":123,"EndDate":"2000-01-01T00:00:00.000Z","EndTime":"2000-01-01T00:00:00.000Z","HeaderRequest":{"Id":123},"Id":123,"Inactive":true,"Interval":123,"Name":"string","StartDate":"2000-01-01T00:00:00.000Z","StartTime":"2000-01-01T00:00:00.000Z","Type":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`)
	
		Post_cmd.AddCommand(Post_ReportUserGroups_cmd)
	
		Post_cmd.AddCommand(Post_Reports_cmd)
	
		Post_cmd.AddCommand(Post_Research_cmd)
	
		Post_cmd.AddCommand(Post_ResearchTypes_cmd)
	
		Post_cmd.AddCommand(Post_ResourceCategories_cmd)
	
		Post_cmd.AddCommand(Post_ResourceSchedules_cmd)
	
		Post_cmd.AddCommand(Post_ResourceTypes_cmd)
	
		Post_cmd.AddCommand(Post_Resources_cmd) 
				Post_Resources_cmd.Flags().Bool("FindAvailableResources", false, 
					`Get a set of resources available at the requested time/count/qualifications.
{"EndDateTime":"2000-01-01T00:00:00.000Z","QualificationIds":"string","ResourceCount":123,"ResourceTypeId":123,"StartDateTime":"2000-01-01T00:00:00.000Z"}`) 
				Post_Resources_cmd.Flags().Bool("ScheduleOccurrences", false, 
					`Get schedule occurrences for set of resources and/or constituents during certain period of time.
{"ConstituentIds":"string","EndDateTime":"2000-01-01T00:00:00.000Z","ExpandWorkerAssignments":true,"ResourceIds":"string","ResourceTypeIds":"string","StartDateTime":"2000-01-01T00:00:00.000Z"}`)
	
		Post_cmd.AddCommand(Post_SalesChannels_cmd)
	
		Post_cmd.AddCommand(Post_SalesLayoutButtonTypes_cmd)
	
		Post_cmd.AddCommand(Post_SalesLayouts_cmd)
	
		Post_cmd.AddCommand(Post_SalutationTypes_cmd)
	
		Post_cmd.AddCommand(Post_Salutations_cmd)
	
		Post_cmd.AddCommand(Post_SchedulePatternTypes_cmd)
	
		Post_cmd.AddCommand(Post_ScheduleTypes_cmd)
	
		Post_cmd.AddCommand(Post_SeasonTypes_cmd)
	
		Post_cmd.AddCommand(Post_Seasons_cmd)
	
		Post_cmd.AddCommand(Post_SeatCodes_cmd)
	
		Post_cmd.AddCommand(Post_SeatStatuses_cmd)
	
		Post_cmd.AddCommand(Post_Sections_cmd)
	
		Post_cmd.AddCommand(Post_ServiceResourceUserGroups_cmd)
	
		Post_cmd.AddCommand(Post_Session_cmd) 
				Post_Session_cmd.Flags().Bool("BusinessFacingSession", false, 
					`Creates a new business-facing session and returns a unique session key.
A source number and mode of sale must be supplied. An optional valid batch id may be included.
{"BusinessUnit":123,"IpAddress":"string","Organization":"string","SessionInfo":{"BatchId":123,"ModeOfSaleId":123,"PromotionCode":123}}`) 
				Post_Session_cmd.Flags().Bool("LoadOrder", false, 
					`Load an existing order into the cart and return the cart details

Once an order is loaded, changes can be made to the order. When loaded, the session mode of sale changes to the mode of sale of the loaded order. The method raises an exception if called with existing items in the cart.
This method loads all products and payments. Generally, these reloaded products and payments cannot be manipulated by the API. New products and payments can be added, then saved with Checkout.
Locked orders cannot be loaded by this method. If the method is called for a locked order, a determination of whether or not the order is locked by an abandoned web session will be made based on the last access time of the session and the Order Lock Timeout value specified in T_DEFAULTS.  (Order Lock Timeout is the number of minutes after which to consider an idle session abandoned.)  If the session is determined to be abandoned, the order will be unlocked and loaded.
NOTE:  All orders loaded by this procedure get a mir_lock value of -1.
{"OrderID":"string","SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("Login", false, 
					`Login a constituent using Username and Password.
A constituent record must have an existing login in order for successful authentication.  
A login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.
This method sets four session variables:
- UID -- The constituent ID for the session
- LoginType -- The login type used for the session
- UserName -- The username for the session
- Status -- The status of the login (P = permanent, T = temporary)
A constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.
{"LoginTypeId":123,"Password":"string","PersistSessionOnFailure":true,"PromotionCode":123,"UserName":"string","SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("LoginAsGuest", false, 
					`Login for guest checkout.
Allows anonymous checkout under constituent 0, attaching the supplied email address to the cart.  The session will be marked as a guest login.
If the email address exists attached to a login of the specified login type, that login's constituent ID will be used on the cart.
{"ElectronicAddressTypeId":123,"EmailAddress":"string","LoginTypeId":123,"SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("LoginUsingConstituentInfo", false, 
					`Login a constituent using Constituent ID, Phone Number and Postal Code.  Email can also be passed for additional validation but is optional.
A constituent record must have an existing login in order for successful authentication.  
A login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.
This method sets four session variables:
- UID -- The constituent ID for the session
- LoginType -- The login type used for the session
- UserName -- The username for the session
- Status -- The status of the login (P = permanent, T = temporary)
A constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.
{"ConstituentId":123,"EmailAddress":"string","LoginTypeId":123,"PhoneNumber":"string","PostalCode":"string","PromotionCode":123,"SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("LoginUsingEmail", false, 
					`Login a constituent using Email and Password
A constituent record must have an existing login in order for successful authentication.  
A login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.
This method sets four session variables:
- UID -- The constituent ID for the session
- LoginType -- The login type used for the session
- UserName -- The username for the session
- Status -- The status of the login (P = permanent, T = temporary)
A constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.
{"EmailAddress":"string","LoginTypeId":123,"Password":"string","PromotionCode":123,"SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("LoginUsingExternal", false, 
					`Login a constituent using External Authentication 
A constituent record must have an existing login in order for successful authentication.  
A login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.
This method sets four session variables:
- UID -- The constituent ID for the session
- LoginType -- The login type used for the session
- UserName -- The username for the session
- Status -- The status of the login (P = permanent, T = temporary)
A constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.
{"LoginTypeId":123,"PromotionCode":123,"UserName":"string","SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("LoginUsingToken", false, 
					`Login a constituent using Login Token and Email
A constituent record must have an existing login in order for successful authentication.  
A login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.
This method sets four session variables:
- UID -- The constituent ID for the session
- LoginType -- The login type used for the session
- UserName -- The username for the session
- Status -- The status of the login (P = permanent, T = temporary)
A constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.
{"EmailAddress":"string","ForgotLoginToken":"string","LoginTypeId":123,"PromotionCode":123,"SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("Logout", false, 
					`Logout a constituent
Seats locked by the session are automatically released during logout. This behavior can be disabled by setting the DISCONNECT_ON_LOGOUT entry in T_DEFAULTS or the web.config file to False.
{"SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("PromoCode", false, 
					`Returns promotion information for a session by number or description
A primary use of this method is to translate promo codes (text) into source codes (integers). This method also returns the 6 fields of text that can be recorded for each web source, which can be used to display specific messaging when a promo code is entered by a constituent.
{"PromoCode":123,"PromoCodeString":"string","SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("Reprint", false, 
					`This method causes a Print at Home reprint request to be written for the specified order.
Note that the order will only be reprinted by the Tessitura Print at Home Ticketing service if the service is configured to recognize the delivery method used by the order.
The mode of sale for the order must also be set in the TR_PAHT_CONFIGURATION table to allow TPAHT reprints.
See the Tessitura Print at Home Ticketing Service document for more details.
{"EmailAddressId":123,"OrderId":123,"SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("SendLoginCredentials", false, 
					`Sends an email with a temporary login token to a specific email address and login type.
The service searches for the email address in logins of the specified type. If it is found, a password token will be generated and the login credentials template that is configured in T_FORMAT_INFO will be sent.
{"EmailAddress":"string","LoginTypeId":123,"TemplateFormatId":123,"SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("Session", false, 
					`Creates a new session and returns a unique session key.
{"BusinessUnitId":123,"IpAddress":"string","Organization":"string","PromotionCode":123}`) 
				Post_Session_cmd.Flags().Bool("TransferSession", false, 
					` Transfers the authentication for the specified session to another session. 
This method is typically called after completing checkout, so the constituent is automatically transferred to a new session.  This avoids having to log in again. NOTE:  The new session must be generated using the /Web/Session (POST) method.
 You can choose to have the web API automatically disconnect the constituent's session from the Seat Server once transfer session has completed by setting the configuration value of DISCONNECT_SEAT_SERVER_SESSION_WHEN_TRANSFERING_SESSION to True in the Web API config file.
{"NewSessionKey":"string","SessionKey":"string"}`) 
				Post_Session_cmd.Flags().Bool("WebLogin", false, 
					`Creates a webLogin for a user and logs back into the session using new credentials.
{"SessionKey":"string","Constituent":{"Id":123},"ConstituentUpdateDate":"2000-01-01T00:00:00.000Z","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Email":{"Id":123},"FailedAttempts":123,"Id":123,"Inactive":true,"LastLoginDate":"2000-01-01T00:00:00.000Z","LockedDate":"2000-01-01T00:00:00.000Z","Login":"string","LoginType":{"Id":123},"Password":"string","PrimaryIndicator":true,"TemporaryIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"}`)
	
		Post_cmd.AddCommand(Post_SourceGroups_cmd)
	
		Post_cmd.AddCommand(Post_SpecialActivities_cmd)
	
		Post_cmd.AddCommand(Post_SpecialActivityStatuses_cmd)
	
		Post_cmd.AddCommand(Post_SpecialActivityTypes_cmd)
	
		Post_cmd.AddCommand(Post_States_cmd)
	
		Post_cmd.AddCommand(Post_StepTypes_cmd)
	
		Post_cmd.AddCommand(Post_Steps_cmd) 
				Post_Steps_cmd.Flags().Bool("AddDocument", false, 
					`Add a document to the step.
{"Category":{"Id":123},"ConstituentId":123,"Contents":"AA==","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Description":"string","FileName":"string","Id":123,"Notes":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","StepID":"string"}`)
	
		Post_cmd.AddCommand(Post_SubLineItemStatuses_cmd)
	
		Post_cmd.AddCommand(Post_Suffixes_cmd)
	
		Post_cmd.AddCommand(Post_SurveyQuestions_cmd)
	
		Post_cmd.AddCommand(Post_SurveyResponses_cmd)
	
		Post_cmd.AddCommand(Post_TemplateCategories_cmd)
	
		Post_cmd.AddCommand(Post_TemplatePriceTypes_cmd) 
				Post_TemplatePriceTypes_cmd.Flags().Bool("Batch", false, 
					`Create or update a set of template price types.
{"TemplatePriceTypes":[{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","DesignationCode":{"Id":123},"GlAccount":{"Id":123},"Id":123,"PriceTemplate":{"Id":123},"PriceType":{"Id":123},"ResaleAccount":{"Id":123},"TemplatePrices":[{"Id":123},...],"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z"},...]}`)
	
		Post_cmd.AddCommand(Post_TemplatePrices_cmd) 
				Post_TemplatePrices_cmd.Flags().Bool("Batch", false, 
					`Create or update a set of template prices.
{"TemplatePrices":[{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","EditIndicator":true,"Enabled":true,"Id":123,"MinPrice":123.456,"Price":123.456,"TemplatePriceType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Zone":{"Id":123}},...]}`)
	
		Post_cmd.AddCommand(Post_Templates_cmd) 
				Post_Templates_cmd.Flags().Bool("ConstituentInfo", false, 
					`Get a formatted html body for constituent info
{"ConstituentID":"string","Request":[{"Name":"string","Value":"string"},...],"TemplateID":"string"}`) 
				Post_Templates_cmd.Flags().Bool("LoginCredentials", false, 
					`Get a formatted html body for login credentials.
This endpoint will not generate a password token and should be used for testing a login credentials template.
Use the SendCredentials endpoint in Web/Session to send a login credentials email with a generated password token.
{"LoginID":"string","Request":[{"Name":"string","Value":"string"},...],"TemplateID":"string"}`) 
				Post_Templates_cmd.Flags().Bool("OrderConfirmation", false, 
					`Get a formatted html body for an order confirmation
{"OrderID":"string","Request":[{"Name":"string","Value":"string"},...],"TemplateID":"string"}`) 
				Post_Templates_cmd.Flags().Bool("RenderConstituentInfo", false, 
					`Return the rendered constituent info template for the provided constituent Id
{"ConstituentID":"string","Body":"string","NameValues":[{"Name":"string","Value":"string"},...]}`) 
				Post_Templates_cmd.Flags().Bool("RenderLoginCredentials", false, 
					`Return the rendered login credentials template for the provided web login id
This endpoint will not generate a password token and should be used for testing a login credentials template.
Use the SendCredentials endpoint in Web/Session to send a login credentials email with a generated password token.
{"LoginID":"string","Body":"string","NameValues":[{"Name":"string","Value":"string"},...]}`) 
				Post_Templates_cmd.Flags().Bool("RenderOrderConfirmation", false, 
					`Return the rendered order confirmation template for the provided order Id
{"OrderID":"string","Body":"string","NameValues":[{"Name":"string","Value":"string"},...]}`) 
				Post_Templates_cmd.Flags().Bool("RenderTickets", false, 
					`Return the rendered tickets for the provided order Id
Composite tickets are not currently supported, so a request to print one will instead return ticket elements for each performance, as if no composite ticket design had been selected for the package.
{"OrderID":"string","Body":"string","PrintOrderTicketsRequest":{"BatchId":123,"HeaderDesignId":123,"IncludeReceipts":true,"LineItems":"string","NewTicketNoForReprints":true,"PrinterType":"string","ReprintTickets":true,"SubLineItems":"string","TicketDesignId":123}}`) 
				Post_Templates_cmd.Flags().Bool("Tickets", false, 
					`Get a formatted html body for tickets
Composite tickets are not currently supported, so a request to print one will instead return ticket elements for each performance, as if no composite ticket design had been selected for the package.
{"OrderID":"string","BatchId":123,"HeaderDesignId":123,"IncludeReceipts":true,"LineItems":"string","NewTicketNoForReprints":true,"PrinterType":"string","ReprintTickets":true,"SubLineItems":"string","TicketDesignId":123,"TemplateID":"string"}`)
	
		Post_cmd.AddCommand(Post_Theaters_cmd)
	
		Post_cmd.AddCommand(Post_TimeSlots_cmd)
	
		Post_cmd.AddCommand(Post_TriPOSCloudConfigurations_cmd)
	
		Post_cmd.AddCommand(Post_UpgradeCategories_cmd)
	
		Post_cmd.AddCommand(Post_UpgradeLogs_cmd)
	
		Post_cmd.AddCommand(Post_UserPreferences_cmd) 
				Post_UserPreferences_cmd.Flags().Bool("SaveBatch", false, 
					`Save a batch of user preferences.
{"UserPreferences":[{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"2000-01-01T00:00:00.000Z","Id":123,"Key":"string","UpdatedBy":"string","UpdatedDateTime":"2000-01-01T00:00:00.000Z","Value":"string"},...]}`)
	
		Post_cmd.AddCommand(Post_Users_cmd)
	
		Post_cmd.AddCommand(Post_ValidateWebLogin_cmd)
	
		Post_cmd.AddCommand(Post_WebContentTypes_cmd)
	
		Post_cmd.AddCommand(Post_WebLogins_cmd)
	
		Post_cmd.AddCommand(Post_WorkerQualifications_cmd)
	
		Post_cmd.AddCommand(Post_WorkerRoles_cmd)
	
		Post_cmd.AddCommand(Post_WorkerTypes_cmd)
	
		Post_cmd.AddCommand(Post_Workers_cmd)
	
		Post_cmd.AddCommand(Post_ZoneGroups_cmd)
	
		Post_cmd.AddCommand(Post_ZoneMaps_cmd)
	
		Post_cmd.AddCommand(Post_Zones_cmd) 
				Post_Zones_cmd.Flags().Bool("Search", false, 
					`Search for products based on a set of criteria.
{"PackageIds":"string","PackageTypeIds":"string","PerformanceIds":"string","ProductionSeasonIds":"string","ZoneIds":"string"}`)
	
}


