// Code generated by tq/generator; DO NOT EDIT.

package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/skysyzygy/tq/tq"
)


var Put_AccountTypes_cmd = &cobra.Command{
		Aliases: []string{  "accounttypes",  "AT",  "at",  },
		Use: `AccountTypes {"Data":{"CardLength":"string","CardPrefix":"string","CardtypeIndicator":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditMask":"string","Id":123,"Inactive":true,"Mod10Indicator":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing account type`,
		Long:  `Update an existing account type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AccountTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Accounts_cmd = &cobra.Command{
		Aliases: []string{  "accounts",  "A",  "a",  },
		Use: `Accounts {"AccountID":"string","Request":{"CardExpiryMonth":123,"CardExpiryYear":123,"Inactive":true,"Name":"string","PaymentMethodGroupId":123,"TransactionOrigin":"string"}}`,
		Short: `Update expiration date or name on a credit card account or token`,
		Long:  `Update expiration date or name on a credit card account or token. Will also tokenize the credit card if tokenization is enabled.
PaymentMethodGroupId is ignored if the account already has a PaymentMethodGroupId assigned.  This value cannot be updated.
If tokenizing a non-tokenized card, PaymentMethodGroupId is required if one has not already been assigned to the account.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			if test, _ := cmd.Flags().GetBool("DirectDebitAccount"); test {
				out, err = tq.Do(*_tq, _tq.Put.AccountsUpdateDirectDebitAccount , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SepaAccount"); test {
				out, err = tq.Do(*_tq, _tq.Put.AccountsUpdateSepaAccount , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Put.AccountsUpdateCardNumberAccount , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ActionTypes_cmd = &cobra.Command{
		Aliases: []string{  "actiontypes",  "AT",  "at",  },
		Use: `ActionTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"LetterIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing action type`,
		Long:  `Update an existing action type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ActionTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Actions_cmd = &cobra.Command{
		Aliases: []string{  "actions",  "A",  "a",  },
		Use: `Actions {"ActionID":"string","IssueAction":{"ActionDate":"0001-01-01T00:00:00.000Z","ActionType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Issue":{"Id":123},"LetterPrintedDate":"0001-01-01T00:00:00.000Z","Notes":"string","Resolved":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"}}`,
		Short: `Update an issue action for a Constituent`,
		Long:  `Update an issue action for a Constituent`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ActionsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ActivityCategories_cmd = &cobra.Command{
		Aliases: []string{  "activitycategories",  "AC",  "ac",  },
		Use: `ActivityCategories {"Data":{"AutoClose":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing activity category`,
		Long:  `Update an existing activity category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ActivityCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ActivityTypes_cmd = &cobra.Command{
		Aliases: []string{  "activitytypes",  "AT",  "at",  },
		Use: `ActivityTypes {"Data":{"Category":{"Id":123},"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PerfIndicator":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing activity type`,
		Long:  `Update an existing activity type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ActivityTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_AddressTypes_cmd = &cobra.Command{
		Aliases: []string{  "addresstypes",  "AT",  "at",  },
		Use: `AddressTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing address type`,
		Long:  `Update an existing address type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AddressTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Addresses_cmd = &cobra.Command{
		Aliases: []string{  "addresses",  "A",  "a",  },
		Use: `Addresses {"Address":{"AddressType":{"Id":123},"AffiliatedConstituent":{"Id":123},"AltSalutationType":{"Id":123},"City":"string","Constituent":{"Id":123},"Country":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DeliveryPoint":"string","EditIndicator":true,"EndDate":"0001-01-01T00:00:00.000Z","GeoArea":123,"Id":123,"Inactive":true,"IsFromAffiliation":true,"Label":true,"Months":"string","NcoaAction":123,"NcoaSession":123,"PostalCode":"string","PostalCodeFormatted":"string","PrimaryIndicator":true,"StartDate":"0001-01-01T00:00:00.000Z","State":{"Id":123},"Street1":"string","Street1Address":{"Id":123},"Street2":"string","Street3":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"AddressID":"string"}`,
		Short: `Update an address for a Constituent by sending an XML or JSON representation of an existing Address object using HTTP PUT`,
		Long:  `Update an address for a Constituent by sending an XML or JSON representation of an existing Address object using HTTP PUT.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AddressesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_AffiliationTypes_cmd = &cobra.Command{
		Aliases: []string{  "affiliationtypes",  "AT",  "at",  },
		Use: `AffiliationTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"IsAllowedToTransactDefault":true,"IsIncludedInSearchResultsDefault":true,"RelationshipCategory":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UseSalary":true,"UseTitle":true},"ID":"string"}`,
		Short: `Update an existing affiliation type`,
		Long:  `Update an existing affiliation type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AffiliationTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Affiliations_cmd = &cobra.Command{
		Aliases: []string{  "affiliations",  "A",  "a",  },
		Use: `Affiliations {"Affiliation":{"AddressId":123,"AffiliatedName":"string","AffiliationType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"ElectronicAddressId":123,"EndDate":"0001-01-01T00:00:00.000Z","GroupConstituent":{"Id":123},"GroupConstituentName":"string","GroupConstituentSortName":"string","Id":123,"Inactive":true,"IndividualConstituent":{"Id":123},"IndividualConstituentName":"string","IndividualConstituentSortName":"string","IsAllowedToTransact":true,"IsIncludedInSearchResults":true,"NameIndicator":123,"Note":"string","PrimaryIndicator":true,"Salary":123.456,"SalutationId":123,"StartDate":"0001-01-01T00:00:00.000Z","Title":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"AffiliationID":"string"}`,
		Short: `Update an affiliation`,
		Long:  `Update an affiliation.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AffiliationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_AliasTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "at",  "aliastypes",  },
		Use: `AliasTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing alias type`,
		Long:  `Update an existing alias type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AliasTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Aliases_cmd = &cobra.Command{
		Aliases: []string{  "A",  "a",  "aliases",  },
		Use: `Aliases {"Alias":{"AliasFirstName":"string","AliasLastName":"string","AliasType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"AliasID":"string"}`,
		Short: `Update an alias`,
		Long:  `Update an alias.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AliasesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_AnalyticsReports_cmd = &cobra.Command{
		Aliases: []string{  "analyticsreports",  "AR",  "ar",  },
		Use: `AnalyticsReports {"AnalyticsReport":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Division":{"Id":123},"Id":123,"Inactive":true,"ReportPath":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"AnalyticsReportID":"string"}`,
		Short: `Update SSRS Reports for display in Analytics`,
		Long:  `Update SSRS Reports for display in Analytics.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AnalyticsReportsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_AppScreenTexts_cmd = &cobra.Command{
		Aliases: []string{  "AST",  "ast",  "appscreentexts",  },
		Use: `AppScreenTexts {"AppScreenText":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"Name":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","Value":"string"}}`,
		Short: `Create or update a new App Screen Text`,
		Long:  `Create or update a new App Screen Text.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AppScreenTextsCreateOrUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_AppealCategories_cmd = &cobra.Command{
		Aliases: []string{  "appealcategories",  "AC",  "ac",  },
		Use: `AppealCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing appeal category`,
		Long:  `Update an existing appeal category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AppealCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Artists_cmd = &cobra.Command{
		Aliases: []string{  "a",  "artists",  "A",  },
		Use: `Artists {"Artist":{"Bio":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","FirstName":"string","Id":123,"LastName":"string","MiddleName":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","VoiceId":123},"ArtistID":"string"}`,
		Short: `Update an existing artist`,
		Long:  `Update an existing artist.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ArtistsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_AssetTypes_cmd = &cobra.Command{
		Aliases: []string{  "AT",  "at",  "assettypes",  },
		Use: `AssetTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing asset type`,
		Long:  `Update an existing asset type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AssetTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Assets_cmd = &cobra.Command{
		Aliases: []string{  "assets",  "A",  "a",  },
		Use: `Assets {"Asset":{"AcquisitionDateTime":"0001-01-01T00:00:00.000Z","AssetType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"EstimatedValue":123.456,"Id":123,"Notes":"string","SaleDateTime":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"AssetID":"string"}`,
		Short: `Update an existing asset for a constituent`,
		Long:  `Update an existing asset for a constituent.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AssetsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_AssociationTypes_cmd = &cobra.Command{
		Aliases: []string{  "at",  "associationtypes",  "AT",  },
		Use: `AssociationTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"IsIncludedInSearchResultsDefault":true,"ReciprocalType":{"Id":123},"RelationshipCategory":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UseBirthDate":true,"UseGender":true},"ID":"string"}`,
		Short: `Update an existing association type`,
		Long:  `Update an existing association type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AssociationTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Associations_cmd = &cobra.Command{
		Aliases: []string{  "associations",  "A",  "a",  },
		Use: `Associations {"Association":{"AssociatedConstituent":{"Id":123},"AssociatedName":"string","AssociationType":{"Id":123},"BirthDate":"0001-01-01T00:00:00.000Z","Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"EndDate":"0001-01-01T00:00:00.000Z","Gender":{"Id":123},"Id":123,"Inactive":true,"IsIncludedInSearchResults":true,"Note":"string","ReciprocalAssociation":{"Id":123},"StartDate":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"AssociationID":"string"}`,
		Short: `Update a association`,
		Long:  `Update a association.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AssociationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Attributes_cmd = &cobra.Command{
		Aliases: []string{  "attributes",  "A",  "a",  },
		Use: `Attributes {"Attribute":{"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Keyword":{"Id":123},"KeywordConstituentType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","Value":"string"},"AttributeID":"string"}`,
		Short: `Update an attribute`,
		Long:  `Update an attribute.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AttributesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Authorization_cmd = &cobra.Command{
		Aliases: []string{  "authorization",  "A",  "a",  },
		Use: `Authorization {"PaymentID":"string"}`,
		Short: `NOTE: THIS IS FOR TESSITURA USE ONLY`,
		Long:  `NOTE: THIS IS FOR TESSITURA USE ONLY. Custom implementations of this endpoint are not supported.
Expire a payment link which has yet to be authorized or already expired.  For Tessitura Merchant Services only.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.AuthorizationExpirePayByLink , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_BatchTypeGroups_cmd = &cobra.Command{
		Aliases: []string{  "btg",  "batchtypegroups",  "BTG",  },
		Use: `BatchTypeGroups {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing batch type group`,
		Long:  `Update an existing batch type group.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BatchTypeGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_BatchTypes_cmd = &cobra.Command{
		Aliases: []string{  "batchtypes",  "BT",  "bt",  },
		Use: `BatchTypes {"Data":{"BatchTypeGroup":{"Id":123},"BusinessUnit":{"Id":123},"Category":123,"CntlIndicator":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing batch type`,
		Long:  `Update an existing batch type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BatchTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_BillingSchedules_cmd = &cobra.Command{
		Aliases: []string{  "bs",  "billingschedules",  "BS",  },
		Use: `BillingSchedules {"Data":{"BillAmounts":"string","BillDates":"string","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"LongDescription":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Billing Schedule`,
		Long:  `Update an existing Billing Schedule.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BillingSchedulesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_BillingTypes_cmd = &cobra.Command{
		Aliases: []string{  "billingtypes",  "BT",  "bt",  },
		Use: `BillingTypes {"Data":{"AutoBillingIndicator":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Billing Type`,
		Long:  `Update an existing Billing Type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BillingTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_BookingCategories_cmd = &cobra.Command{
		Aliases: []string{  "bc",  "bookingcategories",  "BC",  },
		Use: `BookingCategories {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Booking Category`,
		Long:  `Update an existing Booking Category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BookingCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_BookingTemplates_cmd = &cobra.Command{
		Aliases: []string{  "bt",  "bookingtemplates",  "BT",  },
		Use: `BookingTemplates {"BookingTemplate":{"Assignments":[{"Id":123},...],"Category":{"Id":123},"ConfirmationText":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Notes":"string","OverrideTime":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"BookingTemplateID":"string"}`,
		Short: `Update an existing Booking Template`,
		Long:  `Update an existing Booking Template`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BookingTemplatesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Bookings_cmd = &cobra.Command{
		Aliases: []string{  "b",  "bookings",  "B",  },
		Use: `Bookings {"Booking":{"Assignments":[{"Id":123},...],"BookingSource":123,"Category":{"Id":123},"ConfirmationText":"string","Context":{},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultCount":123,"DefaultDateTime":"0001-01-01T00:00:00.000Z","DefaultDuration":123,"Description":"string","EditIndicator":true,"Id":123,"Notes":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"BookingID":"string"}`,
		Short: `Update an existing Booking`,
		Long:  `Update an existing Booking`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BookingsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_BulkCopySets_cmd = &cobra.Command{
		Aliases: []string{  "bulkcopysets",  "BCS",  "bcs",  },
		Use: `BulkCopySets {"BulkCopySet":{"AvailableForSaleIndicator":true,"ControlGroup":{"Id":123},"CopyCredits":true,"CopyNotes":true,"CopyOffers":true,"CopyPriceEvents":true,"CopyPrices":true,"CreateFriday":true,"CreateFromDateTime":"0001-01-01T00:00:00.000Z","CreateLocation":"string","CreateMode":"string","CreateMonday":true,"CreateSaturday":true,"CreateSunday":true,"CreateThursday":true,"CreateToDateTime":"0001-01-01T00:00:00.000Z","CreateTuesday":true,"CreateWednesday":true,"CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultRelativeDates":"string","Id":123,"Inactive":true,"OverrideOnSale":true,"PackageCode":"string","PackageCodeSeed":123,"PackageModeOfSaleRelativeDates":"string","PerformanceCode":"string","PerformanceCodeSeed":123,"PerformanceDescription":"string","PerformanceModeOfSaleRelativeDates":"string","PerformanceStatus":{"Id":123},"PerformanceTime":"string","PerformanceType":{"Id":123},"PriceEventRelativeDates":"string","PriceTypeRelativeDates":"string","ProductionSeason":{"Id":123},"PublishRelativeDates":"string","ReferenceDay":"0001-01-01T00:00:00.000Z","ReferencePerformanceId":123,"ReferenceSeasonString":"string","SetDescription":"string","SetType":123,"ShortName":"string","TimeSlot":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"BulkCopySetID":"string"}`,
		Short: `Updates an existing bulk copy set`,
		Long:  `Updates an existing bulk copy set.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BulkCopySetsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_BulkDailyCopyExclusions_cmd = &cobra.Command{
		Aliases: []string{  "bulkdailycopyexclusions",  "BDCE",  "bdce",  },
		Use: `BulkDailyCopyExclusions {"BulkDailyCopyExclusion":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DoNotCopy":true,"Id":123,"IncludeWithoutCopy":true,"PackageId":123,"PerformanceId":123,"SetId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"BulkDailyCopyExclusionID":"string"}`,
		Short: `Updates an existing bulk daily copy exclusion`,
		Long:  `Updates an existing bulk daily copy exclusion.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BulkDailyCopyExclusionsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_BusinessUnits_cmd = &cobra.Command{
		Aliases: []string{  "businessunits",  "BU",  "bu",  },
		Use: `BusinessUnits {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing business unit`,
		Long:  `Update an existing business unit.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.BusinessUnitsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_CampaignDesignations_cmd = &cobra.Command{
		Aliases: []string{  "campaigndesignations",  "CD",  "cd",  },
		Use: `CampaignDesignations {"CampaignDesignation":{"Campaign":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultIndicator":true,"Designation":{"Id":123},"EditIndicator":true,"GoalAmount":123.456,"Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"CampaignDesignationID":"string"}`,
		Short: `Update an association between a Designation and a Campaign`,
		Long:  `Update an association between a Designation and a Campaign.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.CampaignDesignationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_CampaignFunds_cmd = &cobra.Command{
		Aliases: []string{  "campaignfunds",  "CF",  "cf",  },
		Use: `CampaignFunds {"CampaignFund":{"Campaign":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"EndDateTime":"0001-01-01T00:00:00.000Z","Fund":{"Id":123},"GoalAmount":123.456,"Id":123,"StartDateTime":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"CampaignFundID":"string"}`,
		Short: `Update a Fund association to a Campaign`,
		Long:  `Update a Fund association to a Campaign.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.CampaignFundsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_CardReaderTypes_cmd = &cobra.Command{
		Aliases: []string{  "cardreadertypes",  "CRT",  "crt",  },
		Use: `CardReaderTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Card Reader Type`,
		Long:  `Update an existing Card Reader Type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.CardReaderTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Cart_cmd = &cobra.Command{
		Aliases: []string{  "cart",  "C",  "c",  },
		Use: `Cart {"LineItemID":"string","Request":{"DiscountTypeId":123},"SessionKey":"string"}`,
		Short: `Applies a discounted price to all sub line items for a line item`,
		Long:  `Applies a discounted price to all sub line items for a line item
For packages, the discount can only be applied to package line items.
The status field in the response will return as S if the discount can be used or E with a description of the error if the discount cannot be used.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			if test, _ := cmd.Flags().GetBool("ApplySubLineItemDiscount"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartApplySubLineItemDiscount , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("CartFlags"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateCartFlags , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("CartProperties"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateCartProperties , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("CartPropertiesCustomData"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateCartPropertiesCustomData , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("ContributionCustomData"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateContributionCustomData , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LineItemPrice"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateLineItemPrice , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LineItemPriceType"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateLineItemPriceType , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LineItemSource"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateLineItemSource , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("LineItemSpecialRequest"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateLineItemSpecialRequest , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("PaymentPlan"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdatePaymentPlan , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SubLineItemPrice"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateSubLineItemPrice , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SubLineItemPriceType"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateSubLineItemPriceType , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("SubLineItemRecipient"); test {
				out, err = tq.Do(*_tq, _tq.Put.CartUpdateSubLineItemRecipient , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Put.CartApplyLineItemDiscount , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Colors_cmd = &cobra.Command{
		Aliases: []string{  "c",  "colors",  "C",  },
		Use: `Colors {"Data":{"ColorValue":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing color`,
		Long:  `Update an existing color.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ColorsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Composers_cmd = &cobra.Command{
		Aliases: []string{  "C",  "c",  "composers",  },
		Use: `Composers {"Data":{"Bio":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","FirstName":"string","Id":123,"Inactive":true,"LastName":"string","MiddleName":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing composer`,
		Long:  `Update an existing composer.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ComposersUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Constituencies_cmd = &cobra.Command{
		Aliases: []string{  "constituencies",  "C",  "c",  },
		Use: `Constituencies {"Constituency":{"ConstituencyType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"EndDate":"0001-01-01T00:00:00.000Z","Id":123,"StartDate":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ConstituencyID":"string"}`,
		Short: `Update a constituency`,
		Long:  `Update a constituency.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ConstituenciesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ConstituencyTypes_cmd = &cobra.Command{
		Aliases: []string{  "ct",  "constituencytypes",  "CT",  },
		Use: `ConstituencyTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rank":123,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing constituency type`,
		Long:  `Update an existing constituency type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ConstituencyTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ConstituentDocuments_cmd = &cobra.Command{
		Aliases: []string{  "CD",  "cd",  "constituentdocuments",  },
		Use: `ConstituentDocuments {"Document":{"Category":{"Id":123},"ConstituentId":123,"Contents":"AA==","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","FileName":"string","Id":123,"Notes":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"DocumentID":"string"}`,
		Short: `Update an existing document for a constituent`,
		Long:  `Update an existing document for a constituent.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ConstituentDocumentsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ConstituentGroups_cmd = &cobra.Command{
		Aliases: []string{  "constituentgroups",  "CG",  "cg",  },
		Use: `ConstituentGroups {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing constituent group`,
		Long:  `Update an existing constituent group.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ConstituentGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ConstituentInactives_cmd = &cobra.Command{
		Aliases: []string{  "constituentinactives",  "CI",  "ci",  },
		Use: `ConstituentInactives {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing constituent inactive`,
		Long:  `Update an existing constituent inactive.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ConstituentInactivesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ConstituentProtectionTypes_cmd = &cobra.Command{
		Aliases: []string{  "constituentprotectiontypes",  "CPT",  "cpt",  },
		Use: `ConstituentProtectionTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing constituent protection type`,
		Long:  `Update an existing constituent protection type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ConstituentProtectionTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ConstituentTypeAffiliates_cmd = &cobra.Command{
		Aliases: []string{  "constituenttypeaffiliates",  "CTA",  "cta",  },
		Use: `ConstituentTypeAffiliates {"Data":{"AffiliationType":{"Id":123},"ConstituentType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","HouseholdPrimary":true,"Id":123,"Rank":123,"ShowWithGroup":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing constituent type affiliate`,
		Long:  `Update an existing constituent type affiliate.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ConstituentTypeAffiliatesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ConstituentTypes_cmd = &cobra.Command{
		Aliases: []string{  "CT",  "ct",  "constituenttypes",  },
		Use: `ConstituentTypes {"Data":{"AddressTypeId":123,"ConstituentGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultAffiliatedConstituentTypeId":123,"DefaultAffiliationTypeId":123,"DefaultIndicator":true,"DefaultSalutationId":123,"Description":"string","ElectronicAddressTypeId":123,"GiftAidIndicator":true,"Id":123,"Inactive":true,"LoginTypeId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing constituent type`,
		Long:  `Update an existing constituent type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ConstituentTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Constituents_cmd = &cobra.Command{
		Aliases: []string{  "constituents",  "C",  "c",  },
		Use: `Constituents {"Constituent":{"ConstituentType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DisplayName":"string","EmarketIndicator":{"Id":123},"FirstName":"string","Gender":{"Id":123},"Id":123,"Inactive":{"Id":123},"InactiveReason":{"Id":123},"LastActivityDate":"0001-01-01T00:00:00.000Z","LastGiftDate":"0001-01-01T00:00:00.000Z","LastName":"string","LastTicketDate":"0001-01-01T00:00:00.000Z","MailIndicator":{"Id":123},"MiddleName":"string","NameStatus":{"Id":123},"OriginalSource":{"Id":123},"PhoneIndicator":{"Id":123},"Prefix":{"Id":123},"ProtectionType":{"Id":123},"SortName":"string","Suffix":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ConstituentID":"string"}`,
		Short: `Update a constituent`,
		Long:  `Update a constituent. Only the information about constituent can be updated. If addresses, electronicAddresses, salutations or phones data are passed, they will be ignored.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ConstituentsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContactPermissionCategories_cmd = &cobra.Command{
		Aliases: []string{  "contactpermissioncategories",  "CPC",  "cpc",  },
		Use: `ContactPermissionCategories {"Data":{"AskFrequencyMonths":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing contact permission category`,
		Long:  `Update an existing contact permission category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContactPermissionCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContactPermissionTypes_cmd = &cobra.Command{
		Aliases: []string{  "contactpermissiontypes",  "CPT",  "cpt",  },
		Use: `ContactPermissionTypes {"Data":{"Category":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultValueForAdd":"string","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Presenter":true,"Rank":123,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing contact permission type`,
		Long:  `Update an existing contact permission type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContactPermissionTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContactPermissions_cmd = &cobra.Command{
		Aliases: []string{  "contactpermissions",  "CP",  "cp",  },
		Use: `ContactPermissions {"ContactPermission":{"Answer":"string","Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"LastAskedDateTime":"0001-01-01T00:00:00.000Z","ShouldAsk":true,"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ContactPermissionID":"string"}`,
		Short: `Update a contact permission`,
		Long:  `Update a contact permission`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContactPermissionsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContactPointCategories_cmd = &cobra.Command{
		Aliases: []string{  "contactpointcategories",  "CPC",  "cpc",  },
		Use: `ContactPointCategories {"Data":{"ContactPointKey":"string","ContactPointTable":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing contact point category`,
		Long:  `Update an existing contact point category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContactPointCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContactPointCategoryPurposes_cmd = &cobra.Command{
		Aliases: []string{  "CPCP",  "cpcp",  "contactpointcategorypurposes",  },
		Use: `ContactPointCategoryPurposes {"Data":{"ContactPointCategory":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"Purpose":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing contact point category purpose`,
		Long:  `Update an existing contact point category purpose.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContactPointCategoryPurposesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContactPointPurposeCategories_cmd = &cobra.Command{
		Aliases: []string{  "cppc",  "contactpointpurposecategories",  "CPPC",  },
		Use: `ContactPointPurposeCategories {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing contact point purpose category`,
		Long:  `Update an existing contact point purpose category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContactPointPurposeCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContactPointPurposeMaps_cmd = &cobra.Command{
		Aliases: []string{  "contactpointpurposemaps",  "CPPM",  "cppm",  },
		Use: `ContactPointPurposeMaps {"ContactPointPurposeMap":{"ContactPoint":{"Id":123},"ContactPointCategory":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Purpose":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ContactPointPurposeMapID":"string"}`,
		Short: `Update a contact point purpose`,
		Long:  `Update a contact point purpose.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContactPointPurposeMapsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContactPointPurposes_cmd = &cobra.Command{
		Aliases: []string{  "cpp",  "contactpointpurposes",  "CPP",  },
		Use: `ContactPointPurposes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PurposeCategory":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing contact point purpose`,
		Long:  `Update an existing contact point purpose.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContactPointPurposesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContactTypes_cmd = &cobra.Command{
		Aliases: []string{  "contacttypes",  "CT",  "ct",  },
		Use: `ContactTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing contact type`,
		Long:  `Update an existing contact type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContactTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContributionDesignations_cmd = &cobra.Command{
		Aliases: []string{  "cd",  "contributiondesignations",  "CD",  },
		Use: `ContributionDesignations {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"LetterText":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing contribution designation`,
		Long:  `Update an existing contribution designation.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContributionDesignationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ContributionImportSets_cmd = &cobra.Command{
		Aliases: []string{  "CIS",  "cis",  "contributionimportsets",  },
		Use: `ContributionImportSets {"Data":{"AccountMatchKeyword":{"Id":123},"AcknowledgmentLetterMode":123,"BatchType":{"Id":123},"BillingSchedule":{"Id":123},"BillingType":{"Id":123},"Campaign":{"Id":123},"ContributionDateTime":"0001-01-01T00:00:00.000Z","ContributionPayMode":123,"CreateLocation":"string","CreatePotentialDuplicate":true,"CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","CrediteeMode":123,"CrediteeType":{"Id":123},"DefaultConstituentType":{"Id":123},"DefaultCountryCode":"string","DefaultHouseholdConstituentType":{"Id":123},"DefaultOriginalSource":{"Id":123},"Description":"string","Designation":{"Id":123},"FilePath":"string","FormatFile":"string","Fund":{"Id":123},"Id":123,"ImportRefNoLocation":123,"Inactive":true,"PaymentMethod":{"Id":123},"SalesChannel":{"Id":123},"Source":{"Id":123},"StripPhoneFormatting":true,"TransactAsHousehold":true,"TransactAsHouseholdCreditee":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","Worker":{"Id":123}},"ID":"string"}`,
		Short: `Update an existing contributionImportSet`,
		Long:  `Update an existing contributionImportSet.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContributionImportSetsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Contributions_cmd = &cobra.Command{
		Aliases: []string{  "contributions",  "C",  "c",  },
		Use: `Contributions {"Contribution":{"AccountId":123,"AppealId":123,"BatchId":123,"BillingAccount":"string","BillingTypeId":123,"BusinessUnitId":123,"Campaign":{"Id":123},"Cancel":"string","Channel":{"Id":123},"Constituent":{"Id":123},"ContributionAmount":123.456,"ContributionDateTime":"0001-01-01T00:00:00.000Z","ContributionDesignation":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Custom0":"string","Custom1":"string","Custom2":"string","Custom3":"string","Custom4":"string","Custom5":"string","Custom6":"string","Custom7":"string","Custom8":"string","Custom9":"string","EditIndicator":true,"Fund":{"Id":123},"Id":123,"Initiator":{"Id":123},"KindGiftDescription":"string","KindGiftTransferDateTime":"0001-01-01T00:00:00.000Z","MatchIndicator":"string","MatchingContributionId":123,"MediaType":{"Id":123},"MirrorLock":123,"Notes":"string","PaymentEndDateTime":"0001-01-01T00:00:00.000Z","PaymentStartDateTime":"0001-01-01T00:00:00.000Z","Plan":{"Id":123},"PledgeStatusId":123,"ReceivedAmount":123.456,"Solicitor":"string","SourceId":123,"Type":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ContributionID":"string"}`,
		Short: `This resource is currently strictly for interceptor plugin use`,
		Long:  `This resource is currently strictly for interceptor plugin use. This is called any time an existing contribution is updated from contribution editor in the client application. Only Id (ref_no) is provided in the request content.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ContributionsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ControlGroupUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "controlgroupusergroups",  "CGUG",  "cgug",  },
		Use: `ControlGroupUserGroups {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultIndicator":true,"EditIndicator":true,"Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroupId":"string"},"ID":"string"}`,
		Short: `Update an existing control group/user group mapping`,
		Long:  `Update an existing control group/user group mapping.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ControlGroupUserGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ControlGroups_cmd = &cobra.Command{
		Aliases: []string{  "controlgroups",  "CG",  "cg",  },
		Use: `ControlGroups {"Data":{"CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Permission":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing control group`,
		Long:  `Update an existing control group.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ControlGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Countries_cmd = &cobra.Command{
		Aliases: []string{  "c",  "countries",  "C",  },
		Use: `Countries {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DecimalSeparator":"string","Description":"string","Id":123,"Inactive":true,"IsoAlpha2Code":"string","IsoAlpha3Code":"string","PhoneCode":"string","PhoneEditstring":"string","PhoneMask":"string","PhoneValidLengths":"string","ReqCity":true,"ReqPcode":true,"ShortDesc":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UseAvs":"string","UseStateField":"string","ZipEditstring":"string","ZipMask":"string","ZipValidLengths":"string"},"ID":"string"}`,
		Short: `Update an existing country`,
		Long:  `Update an existing country.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.CountriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_CrediteeTypes_cmd = &cobra.Command{
		Aliases: []string{  "CT",  "ct",  "crediteetypes",  },
		Use: `CrediteeTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","CreditMembershipIndicator":true,"Description":"string","GiftAidIndicator":true,"Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing crediteeType`,
		Long:  `Update an existing crediteeType.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.CrediteeTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_CurrencyTypes_cmd = &cobra.Command{
		Aliases: []string{  "currencytypes",  "CT",  "ct",  },
		Use: `CurrencyTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rate":123.456,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing currency type`,
		Long:  `Update an existing currency type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.CurrencyTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Custom_cmd = &cobra.Command{
		Aliases: []string{  "custom",  "C",  "c",  },
		Use: `Custom {"ID":"string","Request":"string","ResourceName":"string"}`,
		Short: `Update the details of an entry in the table for the resource as defined by {resourceName} in TR_DATASERVICE_TABLES with the given id {Id}`,
		Long:  `Update the details of an entry in the table for the resource as defined by {resourceName} in TR_DATASERVICE_TABLES with the given id {Id}.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.CustomUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_CustomDefaultCategories_cmd = &cobra.Command{
		Aliases: []string{  "cdc",  "customdefaultcategories",  "CDC",  },
		Use: `CustomDefaultCategories {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing custom default category`,
		Long:  `Update an existing custom default category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.CustomDefaultCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_CustomDefaults_cmd = &cobra.Command{
		Aliases: []string{  "CD",  "cd",  "customdefaults",  },
		Use: `CustomDefaults {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","CustomDefaultCategory":{"Id":123},"DefaultValue":"string","Description":"string","FieldName":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing custom default`,
		Long:  `Update an existing custom default.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.CustomDefaultsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_DeliveryMethods_cmd = &cobra.Command{
		Aliases: []string{  "deliverymethods",  "DM",  "dm",  },
		Use: `DeliveryMethods {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PrintAtHome":true,"RequireAddress":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing delivery method`,
		Long:  `Update an existing delivery method.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.DeliveryMethodsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_DesignationCodes_cmd = &cobra.Command{
		Aliases: []string{  "dc",  "designationcodes",  "DC",  },
		Use: `DesignationCodes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing designation code`,
		Long:  `Update an existing designation code.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.DesignationCodesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Diagnostics_cmd = &cobra.Command{
		Aliases: []string{  "diagnostics",  "D",  "d",  },
		Use: `Diagnostics {"Diagnostic":{"CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"DiagnosticID":"string"}`,
		Short: `Dummy end point to check availability of HTTP PUT`,
		Long:  `Dummy end point to check availability of HTTP PUT.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.DiagnosticsPut , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_DirectDebitAccountTypes_cmd = &cobra.Command{
		Aliases: []string{  "ddat",  "directdebitaccounttypes",  "DDAT",  },
		Use: `DirectDebitAccountTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing direct debit account type`,
		Long:  `Update an existing direct debit account type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.DirectDebitAccountTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_DiscountTypes_cmd = &cobra.Command{
		Aliases: []string{  "DT",  "dt",  "discounttypes",  },
		Use: `DiscountTypes {"Data":{"Amount":123.456,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PercentIndicator":true,"RespectMinimumPrice":true,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing discount type`,
		Long:  `Update an existing discount type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.DiscountTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_DocumentCategories_cmd = &cobra.Command{
		Aliases: []string{  "documentcategories",  "DC",  "dc",  },
		Use: `DocumentCategories {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"ParentTableName":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing documentCategory`,
		Long:  `Update an existing documentCategory.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.DocumentCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_DonationLevels_cmd = &cobra.Command{
		Aliases: []string{  "donationlevels",  "DL",  "dl",  },
		Use: `DonationLevels {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"ProgramType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing donation level`,
		Long:  `Update an existing donation level.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.DonationLevelsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_EMV_cmd = &cobra.Command{
		Aliases: []string{  "emv",  },
		Use: `EMV {"Cert":"string","LaneID":"string","Merchant":"string","Profile":{"IdleMessage":"string"}}`,
		Short: `Set idle message for a specific lane`,
		Long:  `Set idle message for a specific lane`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.EMVSetIdleMessage , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ElectronicAddressTypes_cmd = &cobra.Command{
		Aliases: []string{  "EAT",  "eat",  "electronicaddresstypes",  },
		Use: `ElectronicAddressTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"IsEmail":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing electronic address type`,
		Long:  `Update an existing electronic address type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ElectronicAddressTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ElectronicAddresses_cmd = &cobra.Command{
		Aliases: []string{  "electronicaddresses",  "EA",  "ea",  },
		Use: `ElectronicAddresses {"ElectronicAddress":{"Address":"string","AffiliatedConstituent":{"Id":123},"AllowHtmlFormat":true,"AllowMarketing":true,"AltSalutationType":{"Id":123},"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"ElectronicAddressType":{"Id":123},"EndDate":"0001-01-01T00:00:00.000Z","Id":123,"Inactive":true,"IsEmail":true,"IsFromAffiliation":true,"Months":"string","PrimaryIndicator":true,"StartDate":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ElectronicAddressID":"string"}`,
		Short: `Update an electronic address`,
		Long:  `Update an electronic address.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ElectronicAddressesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_EmailProfiles_cmd = &cobra.Command{
		Aliases: []string{  "emailprofiles",  "EP",  "ep",  },
		Use: `EmailProfiles {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EmailBcc":"string","EmailCc":"string","EmailDefaultSubject":"string","EmailFrom":"string","Id":123,"Inactive":true,"SMTPPassword":"string","SMTPPort":123,"SMTPServer":"string","SMTPUserName":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UseSsl":true},"ID":"string"}`,
		Short: `Update an existing email profile`,
		Long:  `Update an existing email profile`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.EmailProfilesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_EmarketIndicators_cmd = &cobra.Command{
		Aliases: []string{  "emarketindicators",  "EI",  "ei",  },
		Use: `EmarketIndicators {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing emarket indicator`,
		Long:  `Update an existing emarket indicator.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.EmarketIndicatorsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Eras_cmd = &cobra.Command{
		Aliases: []string{  "e",  "eras",  "E",  },
		Use: `Eras {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing era`,
		Long:  `Update an existing era.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ErasUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Facilities_cmd = &cobra.Command{
		Aliases: []string{  "facilities",  "F",  "f",  },
		Use: `Facilities {"Facility":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultBestSeatMapId":123,"DefaultZoneMapId":123,"Description":"string","Id":123,"SeatMap":{"Id":123},"Theater":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update a Facility`,
		Long:  `Update a Facility.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.FacilitiesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Genders_cmd = &cobra.Command{
		Aliases: []string{  "genders",  "G",  "g",  },
		Use: `Genders {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultPrefix":{"Id":123},"Description":"string","Id":123,"Inactive":true,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing gender`,
		Long:  `Update an existing gender.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.GendersUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_GiftAidContactMethods_cmd = &cobra.Command{
		Aliases: []string{  "giftaidcontactmethods",  "GACM",  "gacm",  },
		Use: `GiftAidContactMethods {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing gift aid contact method`,
		Long:  `Update an existing gift aid contact method.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.GiftAidContactMethodsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_GiftAidDeclarations_cmd = &cobra.Command{
		Aliases: []string{  "giftaiddeclarations",  "GAD",  "gad",  },
		Use: `GiftAidDeclarations {"GiftAidDeclaration":{"ConfirmDateTime":"0001-01-01T00:00:00.000Z","Constituent":{"Id":123},"ContactMethod":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DocumentStatus":{"Id":123},"EligibleIndicator":true,"EndDateTime":"0001-01-01T00:00:00.000Z","GiftAidType":{"Id":123},"Id":123,"IneligibleReason":{"Id":123},"Notes":"string","ReceivedDateTime":"0001-01-01T00:00:00.000Z","StartDateTime":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"GiftAidDeclarationID":"string"}`,
		Short: `Update a Gift Aid Declaration`,
		Long:  `Update a Gift Aid Declaration.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.GiftAidDeclarationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_GiftAidDocumentStatuses_cmd = &cobra.Command{
		Aliases: []string{  "giftaiddocumentstatuses",  "GADS",  "gads",  },
		Use: `GiftAidDocumentStatuses {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing gift aid document status`,
		Long:  `Update an existing gift aid document status.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.GiftAidDocumentStatusesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_GiftAidIneligibleReasons_cmd = &cobra.Command{
		Aliases: []string{  "gair",  "giftaidineligiblereasons",  "GAIR",  },
		Use: `GiftAidIneligibleReasons {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing gift aid ineligible reason`,
		Long:  `Update an existing gift aid ineligible reason.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.GiftAidIneligibleReasonsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_GiftAidRates_cmd = &cobra.Command{
		Aliases: []string{  "gar",  "giftaidrates",  "GAR",  },
		Use: `GiftAidRates {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EndDateTime":"0001-01-01T00:00:00.000Z","Id":123,"Rate":123.456,"StartDateTime":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing gift aid rate`,
		Long:  `Update an existing gift aid rate.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.GiftAidRatesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_GiftAidStatuses_cmd = &cobra.Command{
		Aliases: []string{  "giftaidstatuses",  "GAS",  "gas",  },
		Use: `GiftAidStatuses {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing gift aid status`,
		Long:  `Update an existing gift aid status.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.GiftAidStatusesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_GiftAidTypes_cmd = &cobra.Command{
		Aliases: []string{  "giftaidtypes",  "GAT",  "gat",  },
		Use: `GiftAidTypes {"Data":{"CharityClaimsRef":"string","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing gift aid type`,
		Long:  `Update an existing gift aid type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.GiftAidTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_HoldCodeCategories_cmd = &cobra.Command{
		Aliases: []string{  "holdcodecategories",  "HCC",  "hcc",  },
		Use: `HoldCodeCategories {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Hold Code Category`,
		Long:  `Update an existing Hold Code Category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.HoldCodeCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_HoldCodeUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "holdcodeusergroups",  "HCUG",  "hcug",  },
		Use: `HoldCodeUserGroups {"HoldCodeUserGroup":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","HoldCode":{"Id":123},"Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroupId":"string"},"HoldCodeUserGroupID":"string"}`,
		Short: `Update an existing hold code/user group mapping`,
		Long:  `Update an existing hold code/user group mapping.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.HoldCodeUserGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_HoldCodes_cmd = &cobra.Command{
		Aliases: []string{  "holdcodes",  "HC",  "hc",  },
		Use: `HoldCodes {"HoldCode":{"BlackoutIndicator":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Legend":"string","Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"HoldCodeID":"string"}`,
		Short: `Update an existing Hold Code`,
		Long:  `Update an existing Hold Code.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.HoldCodesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_InactiveReasons_cmd = &cobra.Command{
		Aliases: []string{  "inactivereasons",  "IR",  "ir",  },
		Use: `InactiveReasons {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing inactive reason`,
		Long:  `Update an existing inactive reason.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.InactiveReasonsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_IntegrationDefaults_cmd = &cobra.Command{
		Aliases: []string{  "integrationdefaults",  "ID",  "id",  },
		Use: `IntegrationDefaults {"Data":{"AccessId":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultValue":"string","Description":"string","FieldName":"string","Id":123,"Integration":{"Id":123},"Organization":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Integration Default`,
		Long:  `Update an existing Integration Default.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.IntegrationDefaultsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Integrations_cmd = &cobra.Command{
		Aliases: []string{  "i",  "integrations",  "I",  },
		Use: `Integrations {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing action type`,
		Long:  `Update an existing action type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.IntegrationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_InterestCategories_cmd = &cobra.Command{
		Aliases: []string{  "interestcategories",  "IC",  "ic",  },
		Use: `InterestCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing interest category`,
		Long:  `Update an existing interest category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.InterestCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_InterestTypes_cmd = &cobra.Command{
		Aliases: []string{  "interesttypes",  "IT",  "it",  },
		Use: `InterestTypes {"Data":{"Category":{"Id":123},"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"SearchIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UsedIn":"string"},"ID":"string"}`,
		Short: `Update an existing interest type`,
		Long:  `Update an existing interest type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.InterestTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Interests_cmd = &cobra.Command{
		Aliases: []string{  "interests",  "I",  "i",  },
		Use: `Interests {"Interest":{"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"InterestType":{"Id":123},"Selected":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","Weight":123},"InterestID":"string"}`,
		Short: `Update an interest`,
		Long:  `Update an interest. If the interest is not selected and the weight is 0 or null, it will be deleted.
For bulk interest edits, consider the CRM/Interests/CreateOrUpdate batching resource which allows multiple interests to be created, updated, or removed in a single request.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.InterestsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Internal_cmd = &cobra.Command{
		Aliases: []string{  "internal",  "I",  "i",  },
		Use: `Internal {"AddressDetail":{"AddressType":{"Id":123},"AffiliatedConstituent":{"Id":123},"AllowTelemarketing1":true,"AllowTelemarketing2":true,"AllowTelemarketing3":true,"AltSalutationType":{"Id":123},"City":"string","Constituent":{"Id":123},"Country":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DayEveningIndicator1":"string","DayEveningIndicator2":"string","DayEveningIndicator3":"string","DeliveryPoint":"string","EditIndicator":true,"EditIndicator1":true,"EditIndicator2":true,"EditIndicator3":true,"EndDate":"0001-01-01T00:00:00.000Z","GeoArea":123,"Id":123,"Inactive":true,"Label":true,"Months":"string","NcoaAction":123,"NcoaSession":123,"PhoneId1":123,"PhoneId2":123,"PhoneId3":123,"PhoneNumber1":"string","PhoneNumber1Formatted":"string","PhoneNumber2":"string","PhoneNumber2Formatted":"string","PhoneNumber3":"string","PhoneNumber3Formatted":"string","PhoneSearch1":"string","PhoneSearch2":"string","PhoneSearch3":"string","PostalCode":"string","PostalCodeFormatted":"string","PrimaryIndicator":true,"StartDate":"0001-01-01T00:00:00.000Z","State":{"Id":123},"Street1":"string","Street2":"string","Street3":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UpdatedDateTime1":"0001-01-01T00:00:00.000Z","UpdatedDateTime2":"0001-01-01T00:00:00.000Z","UpdatedDateTime3":"0001-01-01T00:00:00.000Z"},"AddressID":"string"}`,
		Short: `Update an address and phones`,
		Long:  `Update an address and phones. If the entire information about a phone is added newly then create a new phone. If the phone number of a phone is not given then delete that phone.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.InternalUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_InventoryContactPermissionTypes_cmd = &cobra.Command{
		Aliases: []string{  "inventorycontactpermissiontypes",  "ICPT",  "icpt",  },
		Use: `InventoryContactPermissionTypes {"InventoryContactPermissionType":{"ContactPermissionType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"ProductionElementId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"InventoryContactPermissionTypeID":"string"}`,
		Short: `Updated an existing inventoryContactPermissionType`,
		Long:  `Updated an existing inventoryContactPermissionType.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.InventoryContactPermissionTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_InventoryWebContents_cmd = &cobra.Command{
		Aliases: []string{  "inventorywebcontents",  "IWC",  "iwc",  },
		Use: `InventoryWebContents {"InventoryWebContent":{"ContentType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"ProductionElementId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","Value":"string"},"InventoryWebContentID":"string"}`,
		Short: `Update an existing inventoryWebContent`,
		Long:  `Update an existing inventoryWebContent.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.InventoryWebContentsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Issues_cmd = &cobra.Command{
		Aliases: []string{  "issues",  "I",  "i",  },
		Use: `Issues {"Issue":{"ActivityType":{"Id":123},"Constituent":{"Id":123},"ContactType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"HasReminder":true,"Id":123,"IssueDate":"0001-01-01T00:00:00.000Z","Notes":"string","Origin":{"Id":123},"PackageId":123,"PerformanceId":123,"ResolvedIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UrgentIndicator":true},"IssueID":"string"}`,
		Short: `Update an issue for a Constituent`,
		Long:  `Update an issue for a Constituent`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.IssuesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_KeywordCategories_cmd = &cobra.Command{
		Aliases: []string{  "kc",  "keywordcategories",  "KC",  },
		Use: `KeywordCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing keyword category`,
		Long:  `Update an existing keyword category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.KeywordCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Keywords_cmd = &cobra.Command{
		Aliases: []string{  "k",  "keywords",  "K",  },
		Use: `Keywords {"Data":{"Category":{"Id":123},"ConstituentType":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","CustomDefaultValue":"string","CustomId":123,"CustomLimit":123,"CustomRequired":true,"DataType":"string","Description":"string","DetailColumn":"string","DetailTable":"string","EditIndicator":true,"EditMask":"string","ExtendedDescription":"string","FrequentUpdateDate":"0001-01-01T00:00:00.000Z","HelpText":"string","Id":123,"KeyColumn":"string","KeywordUse":"string","MultipleValue":true,"ParentKeyColumn":"string","ParentTable":"string","PrimaryGroupDefault":"string","ReferenceDescriptionColumn":"string","ReferenceIdColumn":"string","ReferenceSort":"string","ReferenceTable":"string","ReferenceWhere":"string","SortOrder":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UseForSearch":true,"ValuesCodedIndicator":true},"ID":"string"}`,
		Short: `Update an existing keyword`,
		Long:  `Update an existing keyword.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.KeywordsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Languages_cmd = &cobra.Command{
		Aliases: []string{  "languages",  "L",  "l",  },
		Use: `Languages {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing language`,
		Long:  `Update an existing language.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.LanguagesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ListCategories_cmd = &cobra.Command{
		Aliases: []string{  "listcategories",  "LC",  "lc",  },
		Use: `ListCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing list category`,
		Long:  `Update an existing list category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ListCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Lists_cmd = &cobra.Command{
		Aliases: []string{  "lists",  "L",  "l",  },
		Use: `Lists {"List":{"AffiliatedIndividuals":123,"AnalyticsIndicator":true,"Category":{"Id":123},"ConstituentCount":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Criteria":[{"Id":123},...],"Description":"string","EditIndicator":true,"EditMode":"string","Generate":true,"Households":123,"Id":123,"Inactive":true,"Individuals":123,"IsDynamic":true,"LastUsedDateTime":"0001-01-01T00:00:00.000Z","ListSql":"string","Organizations":123,"OutputSet":{"Id":123},"RelationshipOptions":{"Id":123},"TMSIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ListID":"string"}`,
		Short: `Update an existing List`,
		Long:  `Update an existing List.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			if test, _ := cmd.Flags().GetBool("Contents"); test {
				out, err = tq.Do(*_tq, _tq.Put.ListsUpdateContents , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Put.ListsUpdate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_LoginTypes_cmd = &cobra.Command{
		Aliases: []string{  "logintypes",  "LT",  "lt",  },
		Use: `LoginTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing login type`,
		Long:  `Update an existing login type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.LoginTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_MachineSettings_cmd = &cobra.Command{
		Aliases: []string{  "machinesettings",  "MS",  "ms",  },
		Use: `MachineSettings {"Data":{"CardReaderHost":"string","CardReaderPort":123,"CardReaderType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"Inactive":true,"MerchantId":"string","PXStation":"string","PXUserKey":"string","PXUserName":"string","TessituraPaymentsPosDevice":"string","TessituraPaymentsPosDeviceModel":"string","TnspaySoftwareTerminal":true,"TriPOSCloudConfiguration":{"Id":123},"TriposLane":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","WorkstationName":"string"},"ID":"string"}`,
		Short: `Update an existing Machine Setting`,
		Long:  `Update an existing Machine Setting.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.MachineSettingsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_MailIndicators_cmd = &cobra.Command{
		Aliases: []string{  "mailindicators",  "MI",  "mi",  },
		Use: `MailIndicators {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing mail indicator`,
		Long:  `Update an existing mail indicator.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.MailIndicatorsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_MediaTypes_cmd = &cobra.Command{
		Aliases: []string{  "mediatypes",  "MT",  "mt",  },
		Use: `MediaTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","GenerateCost":123.456,"Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing media type`,
		Long:  `Update an existing media type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.MediaTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_MembershipLevelCategories_cmd = &cobra.Command{
		Aliases: []string{  "membershiplevelcategories",  "MLC",  "mlc",  },
		Use: `MembershipLevelCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing membership level category`,
		Long:  `Update an existing membership level category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.MembershipLevelCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ModeOfSaleCategories_cmd = &cobra.Command{
		Aliases: []string{  "modeofsalecategories",  "MOSC",  "mosc",  },
		Use: `ModeOfSaleCategories {"ModeOfSaleCategory":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Sequence":123,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ModeOfSaleCategoryID":"string"}`,
		Short: `Update an existing mode of sale category`,
		Long:  `Update an existing mode of sale category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ModeOfSaleCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ModeOfSaleOffers_cmd = &cobra.Command{
		Aliases: []string{  "modeofsaleoffers",  "MOSO",  "moso",  },
		Use: `ModeOfSaleOffers {"ModeOfSaleOffer":{"AppealId":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EndDateTime":"0001-01-01T00:00:00.000Z","Id":123,"MaxSeats":123,"ModeOfSaleId":123,"OverrideDefaultPriceTypeIndicator":true,"PackageId":123,"PerformanceId":123,"PriceTypeId":123,"Rank":123,"SourceId":123,"StartDateTime":"0001-01-01T00:00:00.000Z","Terms":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ModeOfSaleOfferID":"string"}`,
		Short: `Update an existing mode of sale offer`,
		Long:  `Update an existing mode of sale offer.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ModeOfSaleOffersUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ModeOfSalePriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "modeofsalepricetypes",  "MOSPT",  "mospt",  },
		Use: `ModeOfSalePriceTypes {"ModeOfSalePriceType":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultIndicator":true,"Id":123,"ModeOfSale":{"Id":123},"PriceType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ModeOfSalePriceTypeID":"string"}`,
		Short: `Update an existing mode of sale price type`,
		Long:  `Update an existing mode of sale price type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ModeOfSalePriceTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ModeOfSaleSurveyQuestions_cmd = &cobra.Command{
		Aliases: []string{  "modeofsalesurveyquestions",  "MOSSQ",  "mossq",  },
		Use: `ModeOfSaleSurveyQuestions {"ModeOfSaleSurveyQuestion":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"ModeOfSale":{"Id":123},"Question":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ModeOfSaleSurveyQuestionID":"string"}`,
		Short: `Update an existing mode of sale survey question`,
		Long:  `Update an existing mode of sale survey question.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ModeOfSaleSurveyQuestionsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ModeOfSaleUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "MOSUG",  "mosug",  "modeofsaleusergroups",  },
		Use: `ModeOfSaleUserGroups {"ModeOfSaleUserGroup":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultIndicator":true,"Id":123,"ModeOfSale":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroupId":"string"},"ModeOfSaleUserGroupID":"string"}`,
		Short: `Update an existing mode of sale/user group mapping`,
		Long:  `Update an existing mode of sale/user group mapping.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ModeOfSaleUserGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ModesOfSale_cmd = &cobra.Command{
		Aliases: []string{  "modesofsale",  "MOS",  "mos",  },
		Use: `ModesOfSale {"ModeOfSale":{"AllowUnseatedPaidInd":true,"Category":{"Id":123},"CategoryRequired":true,"ClearSourceNoInd":true,"ClearSourceOnReload":true,"ConfirmationMode":true,"ConstLinkRequired":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultAckFormatId":123,"DefaultChannelId":123,"DefaultDeliveryMethodId":123,"DefaultHeaderFormatId":123,"DefaultSalesLayoutId":123,"Description":"string","EditDate":true,"EditSourceOnReload":true,"GeneralPublicInd":true,"HaboDays":123,"HaboForeign":true,"HoldUntilDate":"0001-01-01T00:00:00.000Z","HoldUntilDays":123,"HoldUntilMethod":"string","Id":123,"Inactive":true,"MustBePaidInd":true,"MustBeSeatedInd":true,"MustBeTicketedInd":true,"PricingRuleSetId":123,"SampleForGeneralPublic":123,"SampleForKnownConstituent":123,"SliAutoDeleteInd":true,"StartPkgOrPerf":"string","SubsSummaryRequired":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ModeOfSaleID":"string"}`,
		Short: `Update an existing mode of sale`,
		Long:  `Update an existing mode of sale.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ModesOfSaleUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_NScanAccessAreas_cmd = &cobra.Command{
		Aliases: []string{  "NSAA",  "nsaa",  "nscanaccessareas",  },
		Use: `NScanAccessAreas {"Data":{"AreaCode":"string","ConstituencyIds":"string","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EndDateTime":"0001-01-01T00:00:00.000Z","Id":123,"Inactive":true,"KeywordId":123,"KeywordValue":"string","ListId":123,"MaxEntries":123,"MembershipLevelIds":"string","PerformanceIds":"string","PriceTypeIds":"string","PriceZoneIds":"string","PromptQuantity":true,"StartDateTime":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing NScan Access Area`,
		Long:  `Update an existing NScan Access Area.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.NScanAccessAreasUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_NameStatuses_cmd = &cobra.Command{
		Aliases: []string{  "namestatuses",  "NS",  "ns",  },
		Use: `NameStatuses {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing name status`,
		Long:  `Update an existing name status.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.NameStatusesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ObjectPermissions_cmd = &cobra.Command{
		Aliases: []string{  "objectpermissions",  "OP",  "op",  },
		Use: `ObjectPermissions {"Data":{"ApplicationObject":{"Id":123},"CanCreate":"string","CanDelete":"string","CanEdit":"string","CanView":"string","Constituency":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroup":{"Id":123}},"ID":"string"}`,
		Short: `Update an existing object permission`,
		Long:  `Update an existing object permission.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ObjectPermissionsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_OrderCategories_cmd = &cobra.Command{
		Aliases: []string{  "ordercategories",  "OC",  "oc",  },
		Use: `OrderCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing order category`,
		Long:  `Update an existing order category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.OrderCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Orders_cmd = &cobra.Command{
		Aliases: []string{  "orders",  "O",  "o",  },
		Use: `Orders {"Order":{"AcceptingRollovers":true,"AccountId":123,"AltAddressId":123,"AltElectronicAddressId":123,"AppealId":123,"AppliedMessageRules":"string","BatchId":123,"BusinessUnitId":123,"CategoryId":123,"ChannelId":123,"ConstituentId":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Custom0":"string","Custom1":"string","Custom2":"string","Custom3":"string","Custom4":"string","Custom5":"string","Custom6":"string","Custom7":"string","Custom8":"string","Custom9":"string","DeliveryDate":"0001-01-01T00:00:00.000Z","DeliveryMethodId":123,"HoldUntilDateTime":"0001-01-01T00:00:00.000Z","Id":123,"InitiatorId":123,"LineItems":[{"Id":123},...],"Messages":[{"Id":123},...],"MirrorLock":123,"ModeOfSaleId":123,"Notes":"string","OrderDateTime":"0001-01-01T00:00:00.000Z","ReloadPricingRules":true,"Solicitor":"string","SourceId":123,"TotalDue":123.456,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","VirtualConstituencies":"string"},"OrderID":"string"}`,
		Short: `This resource is currently strictly for interceptor plugin use`,
		Long:  `This resource is currently strictly for interceptor plugin use. This is called any time an order is saved via the API or from the client application. Only OrderId is provided in the request content.
            
This resource will be invoked from a cart checkout.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.OrdersUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Organizations_cmd = &cobra.Command{
		Aliases: []string{  "organizations",  "O",  "o",  },
		Use: `Organizations {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"LicenseeAccountCode":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing organization`,
		Long:  `Update an existing organization.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.OrganizationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_OriginalSources_cmd = &cobra.Command{
		Aliases: []string{  "originalsources",  "OS",  "os",  },
		Use: `OriginalSources {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing original source`,
		Long:  `Update an existing original source.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.OriginalSourcesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Origins_cmd = &cobra.Command{
		Aliases: []string{  "O",  "o",  "origins",  },
		Use: `Origins {"Data":{"ActivityType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing origin`,
		Long:  `Update an existing origin.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.OriginsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_OutputSets_cmd = &cobra.Command{
		Aliases: []string{  "outputsets",  "OS",  "os",  },
		Use: `OutputSets {"OutputSet":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"ElementGroups":[{"Id":123},...],"Id":123,"LastUsedDateTime":"0001-01-01T00:00:00.000Z","TMSIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"OutputSetID":"string"}`,
		Short: `Update an existing Output Set`,
		Long:  `Update an existing Output Set.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.OutputSetsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PackagePriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "ppt",  "packagepricetypes",  "PPT",  },
		Use: `PackagePriceTypes {"PackagePriceType":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"PackageId":123,"PriceTypeId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"PackagePriceTypeID":"string"}`,
		Short: `Update an existing package price type`,
		Long:  `Update an existing package price type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PackagePriceTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PackageTypes_cmd = &cobra.Command{
		Aliases: []string{  "packagetypes",  "PT",  "pt",  },
		Use: `PackageTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing package type`,
		Long:  `Update an existing package type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PackageTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PackageWebContents_cmd = &cobra.Command{
		Aliases: []string{  "packagewebcontents",  "PWC",  "pwc",  },
		Use: `PackageWebContents {"PackageWebContent":{"ContentType":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"PackageId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","Value":"string"},"PackageWebContentID":"string"}`,
		Short: `Update an existing packageWebContent`,
		Long:  `Update an existing packageWebContent.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PackageWebContentsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PaymentGatewayActivities_cmd = &cobra.Command{
		Aliases: []string{  "paymentgatewayactivities",  "PGA",  "pga",  },
		Use: `PaymentGatewayActivities {"PaymentGatewayActivity":{"AccountId":123,"AccountNumber":"string","ActivityData":"string","Amount":123.456,"AuthCode":"string","AvsAddress":"string","AvsPostalcode":"string","AvsResultCode":"string","BalanceAmount":123.456,"BalanceCurrencyCode":"string","ConstituentId":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","CvvResultCode":"string","EcommerceIndicator":"string","EmvApplicationIdentifier":"string","EmvApplicationName":"string","EmvCryptogram":"string","EmvHostResponseCode":"string","EmvHostResponseMessage":"string","EmvPinVerified":"string","EntryMethod":"string","ExpirationDate":"string","Id":123,"MerchantId":"string","Name":"string","NetworkTransactionId":"string","Origin":"string","PaymentGatewayTransactionType":{"Id":123},"PaymentId":123,"PaymentMethodGroupId":123,"PaymentMethodId":123,"ProviderCommunicationDurationMs":123,"ProviderTransactionDateTime":"0001-01-01T00:00:00.000Z","ReferenceNumber":"string","ResponseCode":"string","ResponseMessage":"string","Success":"string","TerminalIdentifier":"string","TotalDurationMs":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserData":"string"},"PaymentGatewayActivityID":"string"}`,
		Short: `Update an existing Payment Gateway Activity`,
		Long:  `Update an existing Payment Gateway Activity`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PaymentGatewayActivitiesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PaymentGatewayNotifications_cmd = &cobra.Command{
		Aliases: []string{  "pgn",  "paymentgatewaynotifications",  "PGN",  },
		Use: `PaymentGatewayNotifications {"NotificationEvent":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EventType":"string","Id":123,"Payload":"string","ProcessedDate":"0001-01-01T00:00:00.000Z","ReceivedDate":"0001-01-01T00:00:00.000Z","Reference":"string","Topic":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"NotificationEventID":"string"}`,
		Short: `Update a notification event`,
		Long:  `Update a notification event.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PaymentGatewayNotificationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PaymentGatewayTransactionTypes_cmd = &cobra.Command{
		Aliases: []string{  "paymentgatewaytransactiontypes",  "PGTT",  "pgtt",  },
		Use: `PaymentGatewayTransactionTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Payment Gateway Transaction Type`,
		Long:  `Update an existing Payment Gateway Transaction Type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PaymentGatewayTransactionTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PaymentMethodGroups_cmd = &cobra.Command{
		Aliases: []string{  "PMG",  "pmg",  "paymentmethodgroups",  },
		Use: `PaymentMethodGroups {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"MerchantId":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing payment method group`,
		Long:  `Update an existing payment method group.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PaymentMethodGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PaymentMethodUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "paymentmethodusergroups",  "PMUG",  "pmug",  },
		Use: `PaymentMethodUserGroups {"PaymentMethodUserGroup":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"IncomeIndicator":true,"MaxRefund":123.456,"PaymentMethod":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroupId":"string"},"PaymentMethodUserGroupID":"string"}`,
		Short: `Update an existing payment method/user group mapping`,
		Long:  `Update an existing payment method/user group mapping.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PaymentMethodUserGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PaymentMethods_cmd = &cobra.Command{
		Aliases: []string{  "paymentmethods",  "PM",  "pm",  },
		Use: `PaymentMethods {"PaymentMethod":{"AccountType":{"Id":123},"AuthIndicator":true,"BusinessUnitId":123,"CanRefund":true,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","CurrencyTypeId":123,"DefaultIndicator":true,"Description":"string","GiftAidIndicator":true,"GlAccountId":"string","Id":123,"Inactive":true,"Income":true,"MerchantId":"string","MerchantIdForSwipe":"string","NoCopiesOnAuth":123,"NoCopiesOnSave":123,"OpenCashDrawer":true,"PaymentMethodGroup":{"Id":123},"PaymentType":{"Id":123},"ReceiptFormatId":123,"RequireCheckIndicator":true,"RequireCvv":true,"RequirePostalCode":"string","ShortDesc":"string","StoreTenderedAmount":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UseWithCardReader":true},"PaymentMethodID":"string"}`,
		Short: `Update an existing payment method`,
		Long:  `Update an existing payment method.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PaymentMethodsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PaymentSignatures_cmd = &cobra.Command{
		Aliases: []string{  "paymentsignatures",  "PS",  "ps",  },
		Use: `PaymentSignatures {"PaymentSignature":{"Id":123},"PaymentSignatureID":"string"}`,
		Short: `Update an existing payment signature`,
		Long:  `Update an existing payment signature.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PaymentSignaturesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PaymentTypes_cmd = &cobra.Command{
		Aliases: []string{  "PT",  "pt",  "paymenttypes",  },
		Use: `PaymentTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing payment type`,
		Long:  `Update an existing payment type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PaymentTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PerformanceGroups_cmd = &cobra.Command{
		Aliases: []string{  "performancegroups",  "PG",  "pg",  },
		Use: `PerformanceGroups {"ID":"string","PerformanceGroup":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","DisplayByZone":true,"Facility":{"Id":123},"FixedSeatIndicator":true,"Id":123,"Season":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","ZoneMap":{"Id":123}}}`,
		Short: `Update a Performance Group`,
		Long:  `Update a Performance Group.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PerformanceGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PerformancePackageModeOfSales_cmd = &cobra.Command{
		Aliases: []string{  "performancepackagemodeofsales",  "PPMOS",  "ppmos",  },
		Use: `PerformancePackageModeOfSales {"PerformancePackageModeOfSale":{"AutoAttend":"string","ETicketReleaseDateTime":"0001-01-01T00:00:00.000Z","EndDateTime":"0001-01-01T00:00:00.000Z","Id":123,"ModeOfSaleId":123,"PackageId":123,"PerformanceId":123,"PrintIndicator":true,"PrintOnAutoAttend":true,"SeatIndicator":true,"StartDateTime":"0001-01-01T00:00:00.000Z"},"PerformancePackageModeOfSaleID":"string"}`,
		Short: `Update an existing performance package mode of sale`,
		Long:  `Update an existing performance package mode of sale.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PerformancePackageModeOfSalesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PerformancePriceLayers_cmd = &cobra.Command{
		Aliases: []string{  "performancepricelayers",  "PPL",  "ppl",  },
		Use: `PerformancePriceLayers {"PerformancePriceLayer":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultDesignationCodeId":123,"DefaultGlAccountId":123,"DefaultResaleAccountId":123,"Description":"string","EffectiveDateTime":"0001-01-01T00:00:00.000Z","Id":123,"PerformanceId":123,"PerformancePriceTypes":[{"Id":123},...],"PriceLayerType":{"Id":123},"TemplateId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"PerformancePriceLayerID":"string"}`,
		Short: `Update an existing performance price layer`,
		Long:  `Update an existing performance price layer.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			if test, _ := cmd.Flags().GetBool("Prices"); test {
				out, err = tq.Do(*_tq, _tq.Put.PerformancePriceLayersUpdatePrices , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Put.PerformancePriceLayersUpdate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PerformancePriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "performancepricetypes",  "PPT",  "ppt",  },
		Use: `PerformancePriceTypes {"PerformancePriceType":{"BaseIndicator":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DesignationCodeId":123,"EffectiveDateTime":"0001-01-01T00:00:00.000Z","EndDateTime":"0001-01-01T00:00:00.000Z","GlAccountId":123,"Id":123,"IsWithinDateRange":true,"PerformanceId":123,"PerformancePriceLayerId":123,"PerformancePrices":[{"Id":123},...],"PriceTypeId":123,"ResaleAccountId":123,"StartDateTime":"0001-01-01T00:00:00.000Z","TicketDesignId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"PerformancePriceTypeID":"string"}`,
		Short: `Update an existing performance price type`,
		Long:  `Update an existing performance price type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			if test, _ := cmd.Flags().GetBool("Base"); test {
				out, err = tq.Do(*_tq, _tq.Put.PerformancePriceTypesUpdateBase , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Bulk"); test {
				out, err = tq.Do(*_tq, _tq.Put.PerformancePriceTypesBulkUpdate , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Put.PerformancePriceTypesUpdate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PerformancePrices_cmd = &cobra.Command{
		Aliases: []string{  "performanceprices",  "PP",  "pp",  },
		Use: `PerformancePrices {"PerformancePrice":{"EditIndicator":true,"EffectiveDateTime":"0001-01-01T00:00:00.000Z","Enabled":true,"HasEvents":true,"Id":123,"IsPriceBasedOnCurrentEvent":true,"MinPrice":123.456,"PerformanceId":123,"PerformancePriceTypeId":123,"Price":123.456,"ZoneId":123},"PerformancePriceID":"string"}`,
		Short: `Update an existing performance price`,
		Long:  `Update an existing performance price.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PerformancePricesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PerformanceStatuses_cmd = &cobra.Command{
		Aliases: []string{  "PS",  "ps",  "performancestatuses",  },
		Use: `PerformanceStatuses {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing performance status`,
		Long:  `Update an existing performance status.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PerformanceStatusesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PerformanceTypes_cmd = &cobra.Command{
		Aliases: []string{  "performancetypes",  "PT",  "pt",  },
		Use: `PerformanceTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","ValidCountryList":"string"},"ID":"string"}`,
		Short: `Update an existing performance type`,
		Long:  `Update an existing performance type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PerformanceTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Performances_cmd = &cobra.Command{
		Aliases: []string{  "performances",  "P",  "p",  },
		Use: `Performances {"ExpireSeatHoldRequest":{"ExpireAsOfDate":"0001-01-01T00:00:00.000Z","SeatIds":"string"},"HoldCodeID":"string","PerformanceID":"string"}`,
		Short: `Expires seat holds for a performance and hold code`,
		Long:  `Expires seat holds for a performance and hold code`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PerformancesExpireSeatHolds , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Philanthropy_cmd = &cobra.Command{
		Aliases: []string{  "p",  "philanthropy",  "P",  },
		Use: `Philanthropy {"PhilanthropyEntry":{"Activity":"string","Amount":123.456,"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DonatedTo":"string","DonatedToConstituent":{"Id":123},"DonationDateTime":"0001-01-01T00:00:00.000Z","Id":123,"PhilanthropyType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"PhilanthropyEntryID":"string"}`,
		Short: `Updated an existing philanthropyEntry for a constituent`,
		Long:  `Updated an existing philanthropyEntry for a constituent.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PhilanthropyUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PhilanthropyTypes_cmd = &cobra.Command{
		Aliases: []string{  "philanthropytypes",  "PT",  "pt",  },
		Use: `PhilanthropyTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing philosophy type`,
		Long:  `Update an existing philosophy type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PhilanthropyTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PhoneIndicators_cmd = &cobra.Command{
		Aliases: []string{  "phoneindicators",  "PI",  "pi",  },
		Use: `PhoneIndicators {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing phone indicator`,
		Long:  `Update an existing phone indicator.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PhoneIndicatorsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PhoneTypes_cmd = &cobra.Command{
		Aliases: []string{  "pt",  "phonetypes",  "PT",  },
		Use: `PhoneTypes {"Data":{"AllowMarketing":true,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DayEveningIndicator":"string","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing phone type`,
		Long:  `Update an existing phone type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PhoneTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Phones_cmd = &cobra.Command{
		Aliases: []string{  "phones",  "P",  "p",  },
		Use: `Phones {"Phone":{"Address":{"Id":123},"AllowTelemarketing":true,"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DayEveningIndicator":"string","EditIndicator":true,"Id":123,"Inactive":true,"PhoneFormatted":"string","PhoneNumber":"string","PhoneSearch":"string","PhoneType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"PhoneID":"string"}`,
		Short: `Update a phone`,
		Long:  `Update a phone.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PhonesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PlanPriorities_cmd = &cobra.Command{
		Aliases: []string{  "planpriorities",  "PP",  "pp",  },
		Use: `PlanPriorities {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Ranking":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing plan priority`,
		Long:  `Update an existing plan priority.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PlanPrioritiesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PlanSources_cmd = &cobra.Command{
		Aliases: []string{  "plansources",  "PS",  "ps",  },
		Use: `PlanSources {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing plan source`,
		Long:  `Update an existing plan source.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PlanSourcesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PlanStatuses_cmd = &cobra.Command{
		Aliases: []string{  "planstatuses",  "PS",  "ps",  },
		Use: `PlanStatuses {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rank":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing plan status`,
		Long:  `Update an existing plan status.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PlanStatusesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PlanTypes_cmd = &cobra.Command{
		Aliases: []string{  "plantypes",  "PT",  "pt",  },
		Use: `PlanTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing plan type`,
		Long:  `Update an existing plan type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PlanTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PlanWorkers_cmd = &cobra.Command{
		Aliases: []string{  "planworkers",  "PW",  "pw",  },
		Use: `PlanWorkers {"PlanWorker":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Plan":{"Id":123},"PrimaryIndicator":true,"Role":{"Id":123},"ShowInPortfolio":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","Worker":{"Id":123}},"PlanWorkerID":"string"}`,
		Short: `Update an existing plan worker`,
		Long:  `Update an existing plan worker.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PlanWorkersUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Plans_cmd = &cobra.Command{
		Aliases: []string{  "plans",  "P",  "p",  },
		Use: `Plans {"Plan":{"AskAmount":123.456,"Campaign":{"Id":123},"CompleteByDateTime":"0001-01-01T00:00:00.000Z","Constituent":{"Id":123},"ContributionAmount":123.456,"ContributionDesignation":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","CustomDataItems":[{"Id":123},...],"EditIndicator":true,"Fund":{"Id":123},"GoalAmount":123.456,"HasOpenSteps":true,"HasSteps":true,"Id":123,"LastStepDate":"0001-01-01T00:00:00.000Z","LastStepType":{"Id":123},"LastWorkerDisplayName":"string","NextStepDate":"0001-01-01T00:00:00.000Z","NextStepType":{"Id":123},"Notes":"string","OriginalSource":{"Id":123},"PlanAssociates":"string","PrimaryWorker":{"Id":123},"Priority":{"Id":123},"Probability":123.456,"RecordedAmount":123.456,"StartDateTime":"0001-01-01T00:00:00.000Z","Status":{"Id":123},"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"PlanID":"string"}`,
		Short: `Update an existing plan`,
		Long:  `Update an existing plan.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PlansUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PortfolioCustomElements_cmd = &cobra.Command{
		Aliases: []string{  "portfoliocustomelements",  "PCE",  "pce",  },
		Use: `PortfolioCustomElements {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DataType":123,"Description":"string","Id":123,"Inactive":true,"SqlQuery":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing portfolio custom element`,
		Long:  `Update an existing portfolio custom element.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PortfolioCustomElementsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Prefixes_cmd = &cobra.Command{
		Aliases: []string{  "prefixes",  "P",  "p",  },
		Use: `Prefixes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing prefix`,
		Long:  `Update an existing prefix.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PrefixesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Premieres_cmd = &cobra.Command{
		Aliases: []string{  "premieres",  "P",  "p",  },
		Use: `Premieres {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing premiere`,
		Long:  `Update an existing premiere.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PremieresUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PriceCategories_cmd = &cobra.Command{
		Aliases: []string{  "pricecategories",  "PC",  "pc",  },
		Use: `PriceCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rank":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing price category`,
		Long:  `Update an existing price category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PriceCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PriceEvents_cmd = &cobra.Command{
		Aliases: []string{  "priceevents",  "PE",  "pe",  },
		Use: `PriceEvents {"Request":{"EventDateTime":"0001-01-01T00:00:00.000Z","EventIds":"string"}}`,
		Short: `Move a set of price events to a new date`,
		Long:  `Move a set of price events to a new date.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PriceEventsMoveTo , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PriceLayerTypes_cmd = &cobra.Command{
		Aliases: []string{  "PLT",  "plt",  "pricelayertypes",  },
		Use: `PriceLayerTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","ExcludeFromRules":true,"Id":123,"Inactive":true,"PriceCategory":{"Id":123},"Rank":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing price layer type`,
		Long:  `Update an existing price layer type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PriceLayerTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PriceTemplates_cmd = &cobra.Command{
		Aliases: []string{  "pricetemplates",  "PT",  "pt",  },
		Use: `PriceTemplates {"PriceTemplate":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultDesignationCode":{"Id":123},"DefaultGlAccount":{"Id":123},"DefaultPriceLayerType":{"Id":123},"DefaultResaleAccount":{"Id":123},"Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Name":"string","PriceCategory":{"Id":123},"TemplatePriceTypes":[{"Id":123},...],"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","ZoneMap":{"Id":123}},"PriceTemplateID":"string"}`,
		Short: `Update an existing price template`,
		Long:  `Update an existing price template.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PriceTemplatesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PriceTypeCategories_cmd = &cobra.Command{
		Aliases: []string{  "pricetypecategories",  "PTC",  "ptc",  },
		Use: `PriceTypeCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing price type category`,
		Long:  `Update an existing price type category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PriceTypeCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PriceTypeGroups_cmd = &cobra.Command{
		Aliases: []string{  "pricetypegroups",  "PTG",  "ptg",  },
		Use: `PriceTypeGroups {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing price type group`,
		Long:  `Update an existing price type group.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PriceTypeGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PriceTypeReasons_cmd = &cobra.Command{
		Aliases: []string{  "pricetypereasons",  "PTR",  "ptr",  },
		Use: `PriceTypeReasons {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"ShortDescription":"string","TicketText":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing price type reason`,
		Long:  `Update an existing price type reason.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PriceTypeReasonsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PriceTypeUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "pricetypeusergroups",  "PTUG",  "ptug",  },
		Use: `PriceTypeUserGroups {"PriceTypeUserGroup":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"PriceType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroupId":"string"},"PriceTypeUserGroupID":"string"}`,
		Short: `Update an existing price type/user group mapping`,
		Long:  `Update an existing price type/user group mapping.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PriceTypeUserGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "pricetypes",  "PT",  "pt",  },
		Use: `PriceTypes {"PriceType":{"AliasDescription":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultTicketDesign":{"Id":123},"Description":"string","EditIndicator":true,"EditableIndicator":true,"Id":123,"Inactive":true,"PriceTypeCategory":{"Id":123},"PriceTypeGroup":{"Id":123},"ReasonIndicator":true,"ShortDescription":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"PriceTypeID":"string"}`,
		Short: `Update an existing price type`,
		Long:  `Update an existing price type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PriceTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PricingRuleCategories_cmd = &cobra.Command{
		Aliases: []string{  "PRC",  "prc",  "pricingrulecategories",  },
		Use: `PricingRuleCategories {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing pricing rule category`,
		Long:  `Update an existing pricing rule category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PricingRuleCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PricingRuleMessageTypes_cmd = &cobra.Command{
		Aliases: []string{  "prmt",  "pricingrulemessagetypes",  "PRMT",  },
		Use: `PricingRuleMessageTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing pricing rule message type`,
		Long:  `Update an existing pricing rule message type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PricingRuleMessageTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PricingRuleSets_cmd = &cobra.Command{
		Aliases: []string{  "pricingrulesets",  "PRS",  "prs",  },
		Use: `PricingRuleSets {"PricingRuleSet":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Rules":[{"Id":123},...],"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"PricingRuleSetID":"string"}`,
		Short: `Update an existing pricing rule set`,
		Long:  `Update an existing pricing rule set.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PricingRuleSetsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_PricingRules_cmd = &cobra.Command{
		Aliases: []string{  "pr",  "pricingrules",  "PR",  },
		Use: `PricingRules {"PricingRule":{"Appeals":"string","ApplyOncePerOrder":true,"ApplyToLowestCommonNumberOfSeats":true,"Constituencies":"string","ConstituentAttribute":123,"ConstituentAttributeOperator":{"Id":123},"ConstituentAttributeValue1":"string","ConstituentAttributeValue2":"string","ConstituentExclusionListId":123,"ConstituentListId":123,"ConstituentRankType":123,"ConstituentRankingOperator":{"Id":123},"ConstituentRankingValue1":123,"ConstituentRankingValue2":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","DiscountAmount":123.456,"DiscountIsPercent":true,"DiscountPercentRound":123,"DiscountPriceTypeId":123,"EditIndicator":true,"EndDateTime":"0001-01-01T00:00:00.000Z","ExcludeGeneralPublic":true,"Id":123,"Inactive":true,"MaxSeats":123,"Messages":[{"Id":123},...],"OverTheLimitDateTime":"0001-01-01T00:00:00.000Z","PromotedAppeals":"string","PromotedSources":"string","QualifyingPackage":"string","QualifyingPerformance":"string","QualifyingPriceType1":"string","QualifyingPriceType2":"string","QualifyingProductionSeason":"string","QualifyingSeasonPackageType":"string","QualifyingSeatCount1Value1":123,"QualifyingSeatCount1Value2":123,"QualifyingSeatCount2Value1":123,"QualifyingSeatCount2Value2":123,"QualifyingZone":"string","RespectMinimumPrice":true,"ResultMaximumSeats":123,"ResultMaximumSeats2":123,"ResultPackage":"string","ResultPerformance":"string","ResultPriceType":"string","ResultProductionSeason":"string","ResultSeasonPackageType":"string","ResultSeatCount":123,"ResultZone":"string","RuleAction":123,"RuleCategory":{"Id":123},"RuleType":{"Id":123},"Sources":"string","StartDateTime":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"PricingRuleID":"string"}`,
		Short: `Update an existing pricing rule`,
		Long:  `Update an existing pricing rule.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PricingRulesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Printers_cmd = &cobra.Command{
		Aliases: []string{  "printers",  "P",  "p",  },
		Use: `Printers {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"MaxCol":123,"MaxRow":123,"MaxX2val":123,"MaxY2val":123,"Type":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing printer`,
		Long:  `Update an existing printer.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PrintersUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ProductionSeasonMembershipOrganizations_cmd = &cobra.Command{
		Aliases: []string{  "productionseasonmembershiporganizations",  "PSMO",  "psmo",  },
		Use: `ProductionSeasonMembershipOrganizations {"ID":"string","ProductionSeasonMembershipOrganization":{"AllowMultipleEntry":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"MembershipOrganization":{"Id":123},"ProductionSeason":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"}}`,
		Short: `Update an existing production season membership organization`,
		Long:  `Update an existing production season membership organization.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ProductionSeasonMembershipOrganizationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ProgramListings_cmd = &cobra.Command{
		Aliases: []string{  "programlistings",  "PL",  "pl",  },
		Use: `ProgramListings {"ProgramListing":{"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DonationLevel":{"Id":123},"EditIndicator":true,"Id":123,"ProgramName":"string","ProgramType":{"Id":123},"SortName":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ProgramListingID":"string"}`,
		Short: `Update a program listing`,
		Long:  `Update a program listing.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ProgramListingsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Programs_cmd = &cobra.Command{
		Aliases: []string{  "programs",  "P",  "p",  },
		Use: `Programs {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing program`,
		Long:  `Update an existing program.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ProgramsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Pronouns_cmd = &cobra.Command{
		Aliases: []string{  "pronouns",  "P",  "p",  },
		Use: `Pronouns {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: ``,
		Long:  ``,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.PronounsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_QualificationCategories_cmd = &cobra.Command{
		Aliases: []string{  "qualificationcategories",  "QC",  "qc",  },
		Use: `QualificationCategories {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Qualification Category`,
		Long:  `Update an existing Qualification Category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.QualificationCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Qualifications_cmd = &cobra.Command{
		Aliases: []string{  "qualifications",  "Q",  "q",  },
		Use: `Qualifications {"Data":{"Category":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Qualification`,
		Long:  `Update an existing Qualification.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.QualificationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_QueryElementFilters_cmd = &cobra.Command{
		Aliases: []string{  "queryelementfilters",  "QEF",  "qef",  },
		Use: `QueryElementFilters {"QueryElementFilter":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DataType":123,"Description":"string","EndOfDay":true,"FilterElement":"string","Group":{"Id":123},"Id":123,"ReferenceDescriptionColumn":"string","ReferenceIdColumn":"string","ReferenceSort":"string","ReferenceTable":"string","ReferenceWhere":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"QueryElementFilterID":"string"}`,
		Short: `Update an existing query element filter`,
		Long:  `Update an existing query element filter.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.QueryElementFiltersUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_QueryElementGroups_cmd = &cobra.Command{
		Aliases: []string{  "queryelementgroups",  "QEG",  "qeg",  },
		Use: `QueryElementGroups {"QueryElementGroup":{"Category":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DataFrom":"string","DataWhere":"string","Description":"string","Id":123,"IsVirtual":true,"NumberOfParameters":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"QueryElementGroupID":"string"}`,
		Short: `Update an existing query element group`,
		Long:  `Update an existing query element group.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.QueryElementGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_QueryElements_cmd = &cobra.Command{
		Aliases: []string{  "queryelements",  "QE",  "qe",  },
		Use: `QueryElements {"ID":"string","QueryElement":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DataSelect":"string","Description":"string","Group":{"Id":123},"Id":123,"Inactive":true,"IsSingleRow":true,"KeywordId":123,"PrimaryGroupDefault":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"}}`,
		Short: `Update an existing query element`,
		Long:  `Update an existing query element.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.QueryElementsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_RankTypes_cmd = &cobra.Command{
		Aliases: []string{  "ranktypes",  "RT",  "rt",  },
		Use: `RankTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing rank type`,
		Long:  `Update an existing rank type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.RankTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Rankings_cmd = &cobra.Command{
		Aliases: []string{  "rankings",  "R",  "r",  },
		Use: `Rankings {"Ranking":{"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"Rank":123,"RankType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"RankingID":"string"}`,
		Short: `Update a ranking`,
		Long:  `Update a ranking.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.RankingsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ReceiptSettings_cmd = &cobra.Command{
		Aliases: []string{  "rs",  "receiptsettings",  "RS",  },
		Use: `ReceiptSettings {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EmailFooter":"string","EmailHeader":"string","EmailSubject":"string","Id":123,"Inactive":true,"PrintFooter":"string","PrintHeader":"string","ReceiptEmailProfile":{"Id":123},"TicketEmailProfile":{"Id":123},"TicketEmailSubject":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Receipt Setting`,
		Long:  `Update an existing Receipt Setting.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ReceiptSettingsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ReferenceTableUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "referencetableusergroups",  "RTUG",  "rtug",  },
		Use: `ReferenceTableUserGroups {"Data":{"CanEdit":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"ReferenceTable":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroupId":"string"},"ID":"string"}`,
		Short: `Update an existing reference table/user group mapping`,
		Long:  `Update an existing reference table/user group mapping.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ReferenceTableUserGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_RelationshipCategories_cmd = &cobra.Command{
		Aliases: []string{  "relationshipcategories",  "RC",  "rc",  },
		Use: `RelationshipCategories {"Data":{"CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing relationship category`,
		Long:  `Update an existing relationship category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.RelationshipCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ReportRequests_cmd = &cobra.Command{
		Aliases: []string{  "RR",  "rr",  "reportrequests",  },
		Use: `ReportRequests {"ID":"string","ReportRequest":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DeletedIndicator":true,"EmailBody":"string","EmailRecipients":"string","EmailSubject":"string","EndDateTime":"0001-01-01T00:00:00.000Z","Id":123,"OutputOption":"string","Parameters":[{"Id":123},...],"PublicIndicator":true,"QueueStatus":"string","ReportId":"string","ReportType":123,"RequestDateTime":"0001-01-01T00:00:00.000Z","ResultCode":"string","ResultText":"string","ScheduleId":123,"Type":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroupId":"string","UserId":"string"}}`,
		Short: `Update the details of a report request`,
		Long:  `Update the details of a report request.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			if test, _ := cmd.Flags().GetBool("FlushIncomplete"); test {
				out, err = tq.Do(*_tq, _tq.Put.ReportRequestsFlushIncomplete , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Put.ReportRequestsUpdate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ReportSchedules_cmd = &cobra.Command{
		Aliases: []string{  "reportschedules",  "RS",  "rs",  },
		Use: `ReportSchedules {"ID":"string","ReportSchedule":{"AsOfDateTime":"0001-01-01T00:00:00.000Z","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DayOfWeek":123,"DayWeekNumber":123,"EndDate":"0001-01-01T00:00:00.000Z","EndTime":"0001-01-01T00:00:00.000Z","HeaderRequest":{"Id":123},"Id":123,"Inactive":true,"Interval":123,"Name":"string","StartDate":"0001-01-01T00:00:00.000Z","StartTime":"0001-01-01T00:00:00.000Z","Type":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"}}`,
		Short: `Update the details of a report schedule`,
		Long:  `Update the details of a report schedule.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ReportSchedulesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ReportUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "reportusergroups",  "RUG",  "rug",  },
		Use: `ReportUserGroups {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"ReportId":"string","RunRight":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroupId":"string","ViewRight":"string"},"ID":"string"}`,
		Short: `Update an existing report/user group mapping`,
		Long:  `Update an existing report/user group mapping.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ReportUserGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Research_cmd = &cobra.Command{
		Aliases: []string{  "research",  "R",  "r",  },
		Use: `Research {"ResearchEntry":{"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"ResearchDate":"0001-01-01T00:00:00.000Z","ResearchSource":"string","ResearchType":{"Id":123},"Researcher":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ResearchEntryID":"string"}`,
		Short: `Updated an existing research entry for a constituent`,
		Long:  `Updated an existing research entry for a constituent.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ResearchUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ResearchTypes_cmd = &cobra.Command{
		Aliases: []string{  "researchtypes",  "RT",  "rt",  },
		Use: `ResearchTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing research type`,
		Long:  `Update an existing research type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ResearchTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ResourceCategories_cmd = &cobra.Command{
		Aliases: []string{  "resourcecategories",  "RC",  "rc",  },
		Use: `ResourceCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Resource Category`,
		Long:  `Update an existing Resource Category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ResourceCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ResourceSchedules_cmd = &cobra.Command{
		Aliases: []string{  "resourceschedules",  "RS",  "rs",  },
		Use: `ResourceSchedules {"ResourceSchedule":{"BookingAssignmentId":123,"ConstituentId":123,"Count":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EndDateTime":"0001-01-01T00:00:00.000Z","Id":123,"OverrideConflicts":true,"RecurrenceDayOfWeek":"string","RecurrenceEndDate":"0001-01-01T00:00:00.000Z","RecurrenceInterval":123,"RecurrenceOrdinal":123,"RecurrencePattern":123,"ResourceId":123,"StartDateTime":"0001-01-01T00:00:00.000Z","Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ResourceScheduleID":"string"}`,
		Short: `Update a specific resource schedule`,
		Long:  `Update a specific resource schedule.  Only Busy or Available types can be updated.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ResourceSchedulesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ResourceTypes_cmd = &cobra.Command{
		Aliases: []string{  "resourcetypes",  "RT",  "rt",  },
		Use: `ResourceTypes {"ID":"string","ResourceType":{"CanBeShared":true,"Category":{"Id":123},"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"HasCapacity":true,"Id":123,"Inactive":true,"RequireAvailability":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"}}`,
		Short: `Update an existing resource type`,
		Long:  `Update an existing resource type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ResourceTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Resources_cmd = &cobra.Command{
		Aliases: []string{  "resources",  "R",  "r",  },
		Use: `Resources {"ID":"string","Resource":{"Capacity":123,"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultConfirmationText":"string","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Notes":"string","ResourceType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"}}`,
		Short: `Update an existing Resource`,
		Long:  `Update an existing Resource.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ResourcesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SalesChannels_cmd = &cobra.Command{
		Aliases: []string{  "saleschannels",  "SC",  "sc",  },
		Use: `SalesChannels {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing sales channel`,
		Long:  `Update an existing sales channel.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SalesChannelsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SalesLayoutButtonTypes_cmd = &cobra.Command{
		Aliases: []string{  "saleslayoutbuttontypes",  "SLBT",  "slbt",  },
		Use: `SalesLayoutButtonTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing sales layout button type`,
		Long:  `Update an existing sales layout button type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SalesLayoutButtonTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SalesLayouts_cmd = &cobra.Command{
		Aliases: []string{  "saleslayouts",  "SL",  "sl",  },
		Use: `SalesLayouts {"SalesLayout":{"Columns":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"PaymentMethods":[{"Id":123},...],"PriceTypes":[{"Id":123},...],"PrimaryIndicator":true,"Rows":123,"SalesLayoutButtons":[{"Id":123},...],"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"SalesLayoutID":"string"}`,
		Short: `Update an existing sales layout setup`,
		Long:  `Update an existing sales layout setup.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SalesLayoutsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SalutationTypes_cmd = &cobra.Command{
		Aliases: []string{  "salutationtypes",  "ST",  "st",  },
		Use: `SalutationTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing salutation type`,
		Long:  `Update an existing salutation type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SalutationTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Salutations_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "salutations",  },
		Use: `Salutations {"Salutation":{"BusinessTitle":"string","Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultIndicator":true,"EditIndicator":true,"EnvelopeSalutation1":"string","EnvelopeSalutation2":"string","Id":123,"IsFromAffiliation":true,"Label":true,"LetterSalutation":"string","SalutationType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"SalutationID":"string"}`,
		Short: `Update a salutation`,
		Long:  `Update a salutation.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SalutationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SchedulePatternTypes_cmd = &cobra.Command{
		Aliases: []string{  "spt",  "schedulepatterntypes",  "SPT",  },
		Use: `SchedulePatternTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Schedule Pattern`,
		Long:  `Update an existing Schedule Pattern.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SchedulePatternTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ScheduleTypes_cmd = &cobra.Command{
		Aliases: []string{  "scheduletypes",  "ST",  "st",  },
		Use: `ScheduleTypes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Schedule Type`,
		Long:  `Update an existing Schedule Type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ScheduleTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SeasonTypes_cmd = &cobra.Command{
		Aliases: []string{  "seasontypes",  "ST",  "st",  },
		Use: `SeasonTypes {"Data":{"BusinessUnit":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing season type`,
		Long:  `Update an existing season type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SeasonTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Seasons_cmd = &cobra.Command{
		Aliases: []string{  "seasons",  "S",  "s",  },
		Use: `Seasons {"Data":{"ConfirmationNoticeFormat":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DefaultIndicator":true,"Description":"string","DisplayInSeasonOverview":true,"EndDateTime":"0001-01-01T00:00:00.000Z","FYear":123,"Id":123,"Inactive":true,"RenewalNoticeFormat":123,"StartDateTime":"0001-01-01T00:00:00.000Z","SubscriptionFund1":123,"SubscriptionFund2":123,"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","YearlySeason":123},"ID":"string"}`,
		Short: `Update an existing season`,
		Long:  `Update an existing season.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SeasonsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SeatCodes_cmd = &cobra.Command{
		Aliases: []string{  "seatcodes",  "SC",  "sc",  },
		Use: `SeatCodes {"Data":{"BackColor":123,"Context":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","DisplayLetter":"string","ForeColor":123,"Id":123,"Inactive":true,"IsSeat":123,"TicketText":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing seat code`,
		Long:  `Update an existing seat code.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SeatCodesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SeatStatuses_cmd = &cobra.Command{
		Aliases: []string{  "seatstatuses",  "SS",  "ss",  },
		Use: `SeatStatuses {"Data":{"BackColor":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","ForeColor":123,"Id":123,"Inactive":true,"StatusCode":"string","StatusLegend":"string","StatusPriority":123,"Tck":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing seat status`,
		Long:  `Update an existing seat status.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SeatStatusesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Sections_cmd = &cobra.Command{
		Aliases: []string{  "sections",  "S",  "s",  },
		Use: `Sections {"Data":{"AdditionalText":"string","AdditionalText2":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"PrintDesc":"string","PrintSequence":123,"SectionLegend":"string","ShortDesc":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing section`,
		Long:  `Update an existing section.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SectionsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ServiceResourceUserGroups_cmd = &cobra.Command{
		Aliases: []string{  "srug",  "serviceresourceusergroups",  "SRUG",  },
		Use: `ServiceResourceUserGroups {"Data":{"CanCreate":true,"CanDelete":true,"CanRead":true,"CanUpdate":true,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"ServiceResource":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UserGroupId":"string"},"ID":"string"}`,
		Short: `Update an existing service resource/user group mapping`,
		Long:  `Update an existing service resource/user group mapping.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ServiceResourceUserGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Session_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "session",  },
		Use: `Session {"Request":{"ConstituentId":123,"OverridePrompt":true},"SessionKey":"string"}`,
		Short: `Sets the current constituent on the cart for a business facing session`,
		Long:  `Sets the current constituent on the cart for a business facing session
If the Constituent is a primary affiliate of a household, the method obeys the "TRANSACT_AS_HOUSEHOLD_ORDER" entry in T_DEFAULTS to determine if the household constituent should be set. 
If the default is set to "Prompt", both the household and individual are returned, to allow the user to be queried. To set the constituent to the users choice pass in the selected constituent id and set OverridePrompt to true.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			if test, _ := cmd.Flags().GetBool("SetExpiration"); test {
				out, err = tq.Do(*_tq, _tq.Put.SessionSetExpiration , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("Variable"); test {
				out, err = tq.Do(*_tq, _tq.Put.SessionUpdateVariable , []byte(args[0]))
			} else if test, _ := cmd.Flags().GetBool("WebLogin"); test {
				out, err = tq.Do(*_tq, _tq.Put.SessionUpdateWebLogin , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Put.SessionSetConstituent , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SourceGroups_cmd = &cobra.Command{
		Aliases: []string{  "sourcegroups",  "SG",  "sg",  },
		Use: `SourceGroups {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing source group`,
		Long:  `Update an existing source group.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SourceGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SpecialActivities_cmd = &cobra.Command{
		Aliases: []string{  "specialactivities",  "SA",  "sa",  },
		Use: `SpecialActivities {"SpecialActivity":{"ConstituentId":123,"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"Notes":"string","NumberOfAttendees":123,"Performance":"string","SpecialActivityDateTime":"0001-01-01T00:00:00.000Z","Status":{"Id":123},"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","WorkerConstituentId":123},"SpecialActivityID":"string"}`,
		Short: `Update an activity record`,
		Long:  `Update an activity record.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SpecialActivitiesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SpecialActivityStatuses_cmd = &cobra.Command{
		Aliases: []string{  "specialactivitystatuses",  "SAS",  "sas",  },
		Use: `SpecialActivityStatuses {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an Special Activity Status`,
		Long:  `Update an Special Activity Status.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SpecialActivityStatusesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SpecialActivityTypes_cmd = &cobra.Command{
		Aliases: []string{  "specialactivitytypes",  "SAT",  "sat",  },
		Use: `SpecialActivityTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Special Activity Type`,
		Long:  `Update an existing Special Activity Type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SpecialActivityTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_States_cmd = &cobra.Command{
		Aliases: []string{  "states",  "S",  "s",  },
		Use: `States {"Data":{"Country":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"StateCode":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing state`,
		Long:  `Update an existing state.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.StatesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_StepTypes_cmd = &cobra.Command{
		Aliases: []string{  "steptypes",  "ST",  "st",  },
		Use: `StepTypes {"Data":{"AllowAttachments":"string","ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UseAssociate":"string","UseCompletedOnDateTime":"string","UseDueDateTime":"string","UseNote":"string","UseWarningDays":"string","UseWorker":"string"},"ID":"string"}`,
		Short: `Update an existing step type`,
		Long:  `Update an existing step type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.StepTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Steps_cmd = &cobra.Command{
		Aliases: []string{  "s",  "steps",  "S",  },
		Use: `Steps {"Step":{"Associate":{"Id":123},"CompletedOnDateTime":"0001-01-01T00:00:00.000Z","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","DueDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Id":123,"NewValue":"string","Notes":"string","OldValue":"string","Plan":{"Id":123},"Priority":123,"StepDateTime":"0001-01-01T00:00:00.000Z","Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","WarningDays":123,"Worker":{"Id":123}},"StepID":"string"}`,
		Short: `Update an existing step`,
		Long:  `Update an existing step.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			if test, _ := cmd.Flags().GetBool("Document"); test {
				out, err = tq.Do(*_tq, _tq.Put.StepsUpdateDocument , []byte(args[0]))
			} else {
				out, err = tq.Do(*_tq, _tq.Put.StepsUpdate , []byte(args[0]))
			}
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SubLineItemStatuses_cmd = &cobra.Command{
		Aliases: []string{  "sublineitemstatuses",  "SLIS",  "slis",  },
		Use: `SubLineItemStatuses {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Priority":123,"StatusCode":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing sub line item status`,
		Long:  `Update an existing sub line item status.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SubLineItemStatusesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Suffixes_cmd = &cobra.Command{
		Aliases: []string{  "S",  "s",  "suffixes",  },
		Use: `Suffixes {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing suffix`,
		Long:  `Update an existing suffix.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SuffixesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SurveyQuestions_cmd = &cobra.Command{
		Aliases: []string{  "surveyquestions",  "SQ",  "sq",  },
		Use: `SurveyQuestions {"Data":{"AskType":123,"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DataType":123,"DefaultValue":"string","Id":123,"Inactive":true,"Question":"string","ReferenceTable":"string","ReferenceTableDescriptionColumn":"string","ReferenceTableIdColumn":"string","ReferenceTableSort":"string","ReferenceTableWhereClause":"string","Required":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing survey question`,
		Long:  `Update an existing survey question.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SurveyQuestionsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_SurveyResponses_cmd = &cobra.Command{
		Aliases: []string{  "sr",  "surveyresponses",  "SR",  },
		Use: `SurveyResponses {"SurveyResponse":{"Answer":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"OrderId":123,"QuestionId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"SurveyResponseID":"string"}`,
		Short: `Update an existing survey response`,
		Long:  `Update an existing survey response.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.SurveyResponsesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_TemplateCategories_cmd = &cobra.Command{
		Aliases: []string{  "templatecategories",  "TC",  "tc",  },
		Use: `TemplateCategories {"ID":"string","TemplateCategory":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"Type":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"}}`,
		Short: `Update an existing template category`,
		Long:  `Update an existing template category`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.TemplateCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_TemplatePriceTypes_cmd = &cobra.Command{
		Aliases: []string{  "TPT",  "tpt",  "templatepricetypes",  },
		Use: `TemplatePriceTypes {"TemplatePriceType":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DesignationCode":{"Id":123},"GlAccount":{"Id":123},"Id":123,"PriceTemplate":{"Id":123},"PriceType":{"Id":123},"ResaleAccount":{"Id":123},"TemplatePrices":[{"Id":123},...],"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"TemplatePriceTypeID":"string"}`,
		Short: `Update an existing template price type`,
		Long:  `Update an existing template price type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.TemplatePriceTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_TemplatePrices_cmd = &cobra.Command{
		Aliases: []string{  "TP",  "tp",  "templateprices",  },
		Use: `TemplatePrices {"TemplatePrice":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Enabled":true,"Id":123,"MinPrice":123.456,"Price":123.456,"TemplatePriceType":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","Zone":{"Id":123}},"TemplatePriceID":"string"}`,
		Short: `Update an existing template price`,
		Long:  `Update an existing template price.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.TemplatePricesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Templates_cmd = &cobra.Command{
		Aliases: []string{  "templates",  "T",  "t",  },
		Use: `Templates {"Template":{"Category":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditIndicator":true,"Id":123,"Inactive":true,"IsHtmlBody":true,"TemplateBody":"string","TemplateSubject":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"TemplateID":"string"}`,
		Short: `Update an existing template`,
		Long:  `Update an existing template`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.TemplatesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Theaters_cmd = &cobra.Command{
		Aliases: []string{  "theaters",  "T",  "t",  },
		Use: `Theaters {"Data":{"City":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","DataWindowDefinition":"string","Description":"string","DrivingDirections":"string","Id":123,"Inactive":true,"MaximumNumberOfSeats":123,"Phone":"string","PostalCode":"string","State":"string","Street":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing theater`,
		Long:  `Update an existing theater.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.TheatersUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_TimeSlots_cmd = &cobra.Command{
		Aliases: []string{  "ts",  "timeslots",  "TS",  },
		Use: `TimeSlots {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EndTime":"0001-01-01T00:00:00.000Z","Id":123,"Inactive":true,"StartTime":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing time slot`,
		Long:  `Update an existing time slot.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.TimeSlotsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_TriPOSCloudConfigurations_cmd = &cobra.Command{
		Aliases: []string{  "triposcloudconfigurations",  "TPOSCC",  "tposcc",  },
		Use: `TriPOSCloudConfigurations {"Data":{"ConfigSetting":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing TriPOS Cloud configuration`,
		Long:  `Update an existing TriPOS Cloud configuration.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.TriPOSCloudConfigurationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_UpgradeCategories_cmd = &cobra.Command{
		Aliases: []string{  "upgradecategories",  "UC",  "uc",  },
		Use: `UpgradeCategories {"Data":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing Upgrade Category`,
		Long:  `Update an existing Upgrade Category.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.UpgradeCategoriesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_UpgradeLogs_cmd = &cobra.Command{
		Aliases: []string{  "upgradelogs",  "UL",  "ul",  },
		Use: `UpgradeLogs {"UpgradeLog":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","HotFixNumber":123,"Id":123,"ReleaseDescription":"string","ScriptId":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UpgradeCategorySummary":{"Id":123},"Version":"string"},"UpgradeLogID":"string"}`,
		Short: `Updates the given upgradeLog`,
		Long:  `Updates the given upgradeLog.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.UpgradeLogsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_UserPreferences_cmd = &cobra.Command{
		Aliases: []string{  "userpreferences",  "UP",  "up",  },
		Use: `UserPreferences {"ID":"string","UserPreference":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Id":123,"Key":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","Value":"string"}}`,
		Short: `Update a user preference by id`,
		Long:  `Update a user preference by id.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.UserPreferencesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_WebContentTypes_cmd = &cobra.Command{
		Aliases: []string{  "WCT",  "wct",  "webcontenttypes",  },
		Use: `WebContentTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EditMask":"string","FullTextSearchIndicator":true,"Id":123,"Inactive":true,"LastContentUseUpdateDateTime":"0001-01-01T00:00:00.000Z","Limit":123,"ReferenceDescriptionColumn":"string","ReferenceIdColumn":"string","ReferenceSort":"string","ReferenceTable":"string","ReferenceWhere":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","UseWebApi":true},"ID":"string"}`,
		Short: `Update an existing Web Content Type`,
		Long:  `Update an existing Web Content Type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.WebContentTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_WebLogins_cmd = &cobra.Command{
		Aliases: []string{  "wl",  "weblogins",  "WL",  },
		Use: `WebLogins {"Login":{"Constituent":{"Id":123},"ConstituentUpdateDate":"0001-01-01T00:00:00.000Z","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"Email":{"Id":123},"FailedAttempts":123,"Id":123,"Inactive":true,"LastLoginDate":"0001-01-01T00:00:00.000Z","LockedDate":"0001-01-01T00:00:00.000Z","Login":"string","LoginType":{"Id":123},"PrimaryIndicator":true,"TemporaryIndicator":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"LoginID":"string"}`,
		Short: `Update a weblogin`,
		Long:  `Update a weblogin.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.WebLoginsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_WorkerQualifications_cmd = &cobra.Command{
		Aliases: []string{  "wq",  "workerqualifications",  "WQ",  },
		Use: `WorkerQualifications {"WorkerQualification":{"Constituent":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EndDateTime":"0001-01-01T00:00:00.000Z","Id":123,"Qualification":{"Id":123},"StartDateTime":"0001-01-01T00:00:00.000Z","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"WorkerQualificationID":"string"}`,
		Short: `Update an existing WorkerQualification`,
		Long:  `Update an existing WorkerQualification.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.WorkerQualificationsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_WorkerRoles_cmd = &cobra.Command{
		Aliases: []string{  "workerroles",  "WR",  "wr",  },
		Use: `WorkerRoles {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"ShowInPortfolioDefault":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing worker role`,
		Long:  `Update an existing worker role.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.WorkerRolesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_WorkerTypes_cmd = &cobra.Command{
		Aliases: []string{  "WT",  "wt",  "workertypes",  },
		Use: `WorkerTypes {"Data":{"ControlGroup":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing worker type`,
		Long:  `Update an existing worker type.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.WorkerTypesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Workers_cmd = &cobra.Command{
		Aliases: []string{  "workers",  "W",  "w",  },
		Use: `Workers {"Worker":{"ConstituentId":123,"ConstituentInactive":{"Id":123},"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","EditIndicator":true,"FirstName":"string","Id":123,"Inactive":true,"LastName":"string","Prefix":{"Id":123},"ShortDisplayName":"string","SortName":"string","Suffix":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","WorkerType":{"Id":123}},"WorkerID":"string"}`,
		Short: `Update an existing worker`,
		Long:  `Update an existing worker.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.WorkersUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ZoneGroups_cmd = &cobra.Command{
		Aliases: []string{  "zonegroups",  "ZG",  "zg",  },
		Use: `ZoneGroups {"Data":{"AliasDescription":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"Rank":123,"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"ID":"string"}`,
		Short: `Update an existing zone group`,
		Long:  `Update an existing zone group.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ZoneGroupsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_ZoneMaps_cmd = &cobra.Command{
		Aliases: []string{  "zonemaps",  "ZM",  "zm",  },
		Use: `ZoneMaps {"ID":"string","ZoneMap":{"CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","Id":123,"Inactive":true,"SeatMap":{"Id":123},"UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"}}`,
		Short: `Update an existing zone map`,
		Long:  `Update an existing zone map.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ZoneMapsUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}

var Put_Zones_cmd = &cobra.Command{
		Aliases: []string{  "zones",  "Z",  "z",  },
		Use: `Zones {"Zone":{"Abbreviation":"string","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","EndTime":"string","Id":123,"Rank":123,"ShortDescription":"string","StartTime":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z","ZoneGroup":{"Id":123},"ZoneLegend":"string","ZoneMapId":123,"ZoneTime":"string"},"ZoneID":"string","ZoneMapID":"string"}`,
		Short: `Update an existing zone`,
		Long:  `Update an existing zone.`,
		PreRun: tqInit,
		Run: func(cmd *cobra.Command, args []string) {
			var out []byte
			var err error
			if _tq == nil || _tq.TessituraServiceWeb == nil {
				_tq.Log.Error("login failed, exiting")
				return
			}
			
			out, err = tq.Do(*_tq, _tq.Put.ZonesUpdate , []byte(args[0]))
			if err == nil {
				fmt.Println(out)
			} else {
				_tq.Log.Error(err.Error())
			}
		},
	}


func init() {
		Put_cmd.AddCommand(Put_AccountTypes_cmd)
	
		Put_cmd.AddCommand(Put_Accounts_cmd) 
				Put_Accounts_cmd.Flags().Bool("DirectDebitAccount", false, `Updates expiration date or name on a direct debit account.
{"AccountID":"string","Request":{"CardExpiryMonth":123,"CardExpiryYear":123,"DirectDebitAccountType":{"Id":123},"Inactive":true,"Name":"string"}}`) 
				Put_Accounts_cmd.Flags().Bool("SepaAccount", false, `Updates information on a SEPA Direct Debit Account.
{"AccountID":"string","Request":{"BankIdentifierCode":"string","Inactive":true,"MandateType":123,"Name":"string","SignatureDate":"0001-01-01T00:00:00.000Z"}}`)
	
		Put_cmd.AddCommand(Put_ActionTypes_cmd)
	
		Put_cmd.AddCommand(Put_Actions_cmd)
	
		Put_cmd.AddCommand(Put_ActivityCategories_cmd)
	
		Put_cmd.AddCommand(Put_ActivityTypes_cmd)
	
		Put_cmd.AddCommand(Put_AddressTypes_cmd)
	
		Put_cmd.AddCommand(Put_Addresses_cmd)
	
		Put_cmd.AddCommand(Put_AffiliationTypes_cmd)
	
		Put_cmd.AddCommand(Put_Affiliations_cmd)
	
		Put_cmd.AddCommand(Put_AliasTypes_cmd)
	
		Put_cmd.AddCommand(Put_Aliases_cmd)
	
		Put_cmd.AddCommand(Put_AnalyticsReports_cmd)
	
		Put_cmd.AddCommand(Put_AppScreenTexts_cmd)
	
		Put_cmd.AddCommand(Put_AppealCategories_cmd)
	
		Put_cmd.AddCommand(Put_Artists_cmd)
	
		Put_cmd.AddCommand(Put_AssetTypes_cmd)
	
		Put_cmd.AddCommand(Put_Assets_cmd)
	
		Put_cmd.AddCommand(Put_AssociationTypes_cmd)
	
		Put_cmd.AddCommand(Put_Associations_cmd)
	
		Put_cmd.AddCommand(Put_Attributes_cmd)
	
		Put_cmd.AddCommand(Put_Authorization_cmd)
	
		Put_cmd.AddCommand(Put_BatchTypeGroups_cmd)
	
		Put_cmd.AddCommand(Put_BatchTypes_cmd)
	
		Put_cmd.AddCommand(Put_BillingSchedules_cmd)
	
		Put_cmd.AddCommand(Put_BillingTypes_cmd)
	
		Put_cmd.AddCommand(Put_BookingCategories_cmd)
	
		Put_cmd.AddCommand(Put_BookingTemplates_cmd)
	
		Put_cmd.AddCommand(Put_Bookings_cmd)
	
		Put_cmd.AddCommand(Put_BulkCopySets_cmd)
	
		Put_cmd.AddCommand(Put_BulkDailyCopyExclusions_cmd)
	
		Put_cmd.AddCommand(Put_BusinessUnits_cmd)
	
		Put_cmd.AddCommand(Put_CampaignDesignations_cmd)
	
		Put_cmd.AddCommand(Put_CampaignFunds_cmd)
	
		Put_cmd.AddCommand(Put_CardReaderTypes_cmd)
	
		Put_cmd.AddCommand(Put_Cart_cmd) 
				Put_Cart_cmd.Flags().Bool("ApplySubLineItemDiscount", false, `Applies a discounted price to a sub line item

The status field in the response will return as S if the discount can be used or E with a description of the error if the discount cannot be used.
{"Request":{"DiscountTypeId":123},"SessionKey":"string","SubLineItemID":"string"}`) 
				Put_Cart_cmd.Flags().Bool("CartFlags", false, `Updates flags on the cart
{"Request":{"ShouldCalculateFees":true,"ShouldCalculatePrices":true},"SessionKey":"string"}`) 
				Put_Cart_cmd.Flags().Bool("CartProperties", false, `Updates cart properties
See the notes on the request for specific documentation on each item that can be set. <br /> 
Before making a request to PUT cart properties, you should make a GET request to obtain all current property values. Make updates to any of the properties that need changing, and pass the entire cart properties object back into your put request. This ensures that all property values that are set, but should not change, persist and are not overwritten unintentioanlly.
{"CartProperties":{"AddressId":123,"CategoryId":123,"ChannelId":123,"DeliveryMethodId":123,"ElectronicAddressId":123,"HoldUntilDateTime":"0001-01-01T00:00:00.000Z","InitiatorId":123,"ModeOfSaleId":123,"Notes":"string","OrderDateTime":"0001-01-01T00:00:00.000Z","PhoneId":123,"Solicitor":"string","SourceId":123},"SessionKey":"string"}`) 
				Put_Cart_cmd.Flags().Bool("CartPropertiesCustomData", false, `Updates a custom data value in the cart properties
Note: Only the Index and Value properties in the request should be used.
{"CustomDataItem":{"DataType":"string","Description":"string","EditIndicator":true,"Index":123,"IsDropdown":true,"KeywordId":123,"Name":"string","Value":"string"},"CustomID":"string","SessionKey":"string"}`) 
				Put_Cart_cmd.Flags().Bool("ContributionCustomData", false, `Updates a custom data value for a contribution in the cart
Note: Only the Index and Value properties in the request object should be used.
{"CustomDataItem":{"DataType":"string","Description":"string","EditIndicator":true,"Index":123,"IsDropdown":true,"KeywordId":123,"Name":"string","Value":"string"},"CustomID":"string","LineItemID":"string","SessionKey":"string"}`) 
				Put_Cart_cmd.Flags().Bool("LineItemPrice", false, `Updates the price on all sub line items for the line item
A price can only be edited if the price type has been marked as editable, zones on the price map have been designated as editable, and the seat is in one of the editable zones.
The status field in the response will return as S if the price can be applied or E with a description of the error if the price cannot be applied.
{"LineItemID":"string","Request":{"NewPrice":123.456},"SessionKey":"string"}`) 
				Put_Cart_cmd.Flags().Bool("LineItemPriceType", false, `Updates the price type on all sub line items for a given lineitem
Can be filtered by those have a current price type as specified by OriginalPriceType
{"LineItemID":"string","Request":{"NewPriceType":123,"NewPriceTypeReason":123,"OriginalPriceType":123},"SessionKey":"string"}`) 
				Put_Cart_cmd.Flags().Bool("LineItemSource", false, `Updates the source on a line item
Allows the source of an individual line to be updated.  When a line is created, by reserving a tickets for a performance or package, the line source is copied from the session source. This method allows the line source to be updated.
Offers and Pricing Rules consider line source, not the session source.
{"LineItemID":"string","Request":{"SourceId":123},"SessionKey":"string"}`) 
				Put_Cart_cmd.Flags().Bool("LineItemSpecialRequest", false, `Updates Special Request info on a line item
{"LineItemID":"string","Request":{"AisleSeat":"string","Category":{"Id":123},"ContiguousSeats":123,"EndPrice":123.456,"EndingRow":"string","EndingSeat":"string","HoldCode":123,"LeaveSingleSeats":true,"NoStairs":true,"Notes":"string","StartPrice":123.456,"StartingRow":"string","StartingSeat":"string","WheelchairSeats":123},"SessionKey":"string"}`) 
				Put_Cart_cmd.Flags().Bool("PaymentPlan", false, `Allows the billing and credit card information to be updated on an existing payment plan for the cart.
{"Request":{"AccountId":123,"BillingTypeId":123,"Card":{"Id":123}},"SessionKey":"string"}`) 
				Put_Cart_cmd.Flags().Bool("SubLineItemPrice", false, `Updates the price on a sub line item.
A price can only be edited if the price type has been marked as editable, zones on the price map have been designated as editable, and the seat is in one of the editable zones.
The status field in the response will return as S if the price can be applied or E with a description of the error if the price cannot be applied.
{"Request":{"NewPrice":123.456},"SessionKey":"string","SubLineItemID":"string"}`) 
				Put_Cart_cmd.Flags().Bool("SubLineItemPriceType", false, `Updates the price type on a sub line item
{"Request":{"NewPriceType":123,"NewPriceTypeReason":123,"OriginalPriceType":123},"SessionKey":"string","SubLineItemID":"string"}`) 
				Put_Cart_cmd.Flags().Bool("SubLineItemRecipient", false, `Updates the recipient on a sub line item
{"Request":{"RecipientId":123},"SessionKey":"string","SubLineItemID":"string"}`)
	
		Put_cmd.AddCommand(Put_Colors_cmd)
	
		Put_cmd.AddCommand(Put_Composers_cmd)
	
		Put_cmd.AddCommand(Put_Constituencies_cmd)
	
		Put_cmd.AddCommand(Put_ConstituencyTypes_cmd)
	
		Put_cmd.AddCommand(Put_ConstituentDocuments_cmd)
	
		Put_cmd.AddCommand(Put_ConstituentGroups_cmd)
	
		Put_cmd.AddCommand(Put_ConstituentInactives_cmd)
	
		Put_cmd.AddCommand(Put_ConstituentProtectionTypes_cmd)
	
		Put_cmd.AddCommand(Put_ConstituentTypeAffiliates_cmd)
	
		Put_cmd.AddCommand(Put_ConstituentTypes_cmd)
	
		Put_cmd.AddCommand(Put_Constituents_cmd)
	
		Put_cmd.AddCommand(Put_ContactPermissionCategories_cmd)
	
		Put_cmd.AddCommand(Put_ContactPermissionTypes_cmd)
	
		Put_cmd.AddCommand(Put_ContactPermissions_cmd)
	
		Put_cmd.AddCommand(Put_ContactPointCategories_cmd)
	
		Put_cmd.AddCommand(Put_ContactPointCategoryPurposes_cmd)
	
		Put_cmd.AddCommand(Put_ContactPointPurposeCategories_cmd)
	
		Put_cmd.AddCommand(Put_ContactPointPurposeMaps_cmd)
	
		Put_cmd.AddCommand(Put_ContactPointPurposes_cmd)
	
		Put_cmd.AddCommand(Put_ContactTypes_cmd)
	
		Put_cmd.AddCommand(Put_ContributionDesignations_cmd)
	
		Put_cmd.AddCommand(Put_ContributionImportSets_cmd)
	
		Put_cmd.AddCommand(Put_Contributions_cmd)
	
		Put_cmd.AddCommand(Put_ControlGroupUserGroups_cmd)
	
		Put_cmd.AddCommand(Put_ControlGroups_cmd)
	
		Put_cmd.AddCommand(Put_Countries_cmd)
	
		Put_cmd.AddCommand(Put_CrediteeTypes_cmd)
	
		Put_cmd.AddCommand(Put_CurrencyTypes_cmd)
	
		Put_cmd.AddCommand(Put_Custom_cmd)
	
		Put_cmd.AddCommand(Put_CustomDefaultCategories_cmd)
	
		Put_cmd.AddCommand(Put_CustomDefaults_cmd)
	
		Put_cmd.AddCommand(Put_DeliveryMethods_cmd)
	
		Put_cmd.AddCommand(Put_DesignationCodes_cmd)
	
		Put_cmd.AddCommand(Put_Diagnostics_cmd)
	
		Put_cmd.AddCommand(Put_DirectDebitAccountTypes_cmd)
	
		Put_cmd.AddCommand(Put_DiscountTypes_cmd)
	
		Put_cmd.AddCommand(Put_DocumentCategories_cmd)
	
		Put_cmd.AddCommand(Put_DonationLevels_cmd)
	
		Put_cmd.AddCommand(Put_EMV_cmd)
	
		Put_cmd.AddCommand(Put_ElectronicAddressTypes_cmd)
	
		Put_cmd.AddCommand(Put_ElectronicAddresses_cmd)
	
		Put_cmd.AddCommand(Put_EmailProfiles_cmd)
	
		Put_cmd.AddCommand(Put_EmarketIndicators_cmd)
	
		Put_cmd.AddCommand(Put_Eras_cmd)
	
		Put_cmd.AddCommand(Put_Facilities_cmd)
	
		Put_cmd.AddCommand(Put_Genders_cmd)
	
		Put_cmd.AddCommand(Put_GiftAidContactMethods_cmd)
	
		Put_cmd.AddCommand(Put_GiftAidDeclarations_cmd)
	
		Put_cmd.AddCommand(Put_GiftAidDocumentStatuses_cmd)
	
		Put_cmd.AddCommand(Put_GiftAidIneligibleReasons_cmd)
	
		Put_cmd.AddCommand(Put_GiftAidRates_cmd)
	
		Put_cmd.AddCommand(Put_GiftAidStatuses_cmd)
	
		Put_cmd.AddCommand(Put_GiftAidTypes_cmd)
	
		Put_cmd.AddCommand(Put_HoldCodeCategories_cmd)
	
		Put_cmd.AddCommand(Put_HoldCodeUserGroups_cmd)
	
		Put_cmd.AddCommand(Put_HoldCodes_cmd)
	
		Put_cmd.AddCommand(Put_InactiveReasons_cmd)
	
		Put_cmd.AddCommand(Put_IntegrationDefaults_cmd)
	
		Put_cmd.AddCommand(Put_Integrations_cmd)
	
		Put_cmd.AddCommand(Put_InterestCategories_cmd)
	
		Put_cmd.AddCommand(Put_InterestTypes_cmd)
	
		Put_cmd.AddCommand(Put_Interests_cmd)
	
		Put_cmd.AddCommand(Put_Internal_cmd)
	
		Put_cmd.AddCommand(Put_InventoryContactPermissionTypes_cmd)
	
		Put_cmd.AddCommand(Put_InventoryWebContents_cmd)
	
		Put_cmd.AddCommand(Put_Issues_cmd)
	
		Put_cmd.AddCommand(Put_KeywordCategories_cmd)
	
		Put_cmd.AddCommand(Put_Keywords_cmd)
	
		Put_cmd.AddCommand(Put_Languages_cmd)
	
		Put_cmd.AddCommand(Put_ListCategories_cmd)
	
		Put_cmd.AddCommand(Put_Lists_cmd) 
				Put_Lists_cmd.Flags().Bool("Contents", false, `Import constituent ids into an existing list.
{"ListID":"string","ListImportRequest":{"Id":123}}`)
	
		Put_cmd.AddCommand(Put_LoginTypes_cmd)
	
		Put_cmd.AddCommand(Put_MachineSettings_cmd)
	
		Put_cmd.AddCommand(Put_MailIndicators_cmd)
	
		Put_cmd.AddCommand(Put_MediaTypes_cmd)
	
		Put_cmd.AddCommand(Put_MembershipLevelCategories_cmd)
	
		Put_cmd.AddCommand(Put_ModeOfSaleCategories_cmd)
	
		Put_cmd.AddCommand(Put_ModeOfSaleOffers_cmd)
	
		Put_cmd.AddCommand(Put_ModeOfSalePriceTypes_cmd)
	
		Put_cmd.AddCommand(Put_ModeOfSaleSurveyQuestions_cmd)
	
		Put_cmd.AddCommand(Put_ModeOfSaleUserGroups_cmd)
	
		Put_cmd.AddCommand(Put_ModesOfSale_cmd)
	
		Put_cmd.AddCommand(Put_NScanAccessAreas_cmd)
	
		Put_cmd.AddCommand(Put_NameStatuses_cmd)
	
		Put_cmd.AddCommand(Put_ObjectPermissions_cmd)
	
		Put_cmd.AddCommand(Put_OrderCategories_cmd)
	
		Put_cmd.AddCommand(Put_Orders_cmd)
	
		Put_cmd.AddCommand(Put_Organizations_cmd)
	
		Put_cmd.AddCommand(Put_OriginalSources_cmd)
	
		Put_cmd.AddCommand(Put_Origins_cmd)
	
		Put_cmd.AddCommand(Put_OutputSets_cmd)
	
		Put_cmd.AddCommand(Put_PackagePriceTypes_cmd)
	
		Put_cmd.AddCommand(Put_PackageTypes_cmd)
	
		Put_cmd.AddCommand(Put_PackageWebContents_cmd)
	
		Put_cmd.AddCommand(Put_PaymentGatewayActivities_cmd)
	
		Put_cmd.AddCommand(Put_PaymentGatewayNotifications_cmd)
	
		Put_cmd.AddCommand(Put_PaymentGatewayTransactionTypes_cmd)
	
		Put_cmd.AddCommand(Put_PaymentMethodGroups_cmd)
	
		Put_cmd.AddCommand(Put_PaymentMethodUserGroups_cmd)
	
		Put_cmd.AddCommand(Put_PaymentMethods_cmd)
	
		Put_cmd.AddCommand(Put_PaymentSignatures_cmd)
	
		Put_cmd.AddCommand(Put_PaymentTypes_cmd)
	
		Put_cmd.AddCommand(Put_PerformanceGroups_cmd)
	
		Put_cmd.AddCommand(Put_PerformancePackageModeOfSales_cmd)
	
		Put_cmd.AddCommand(Put_PerformancePriceLayers_cmd) 
				Put_PerformancePriceLayers_cmd.Flags().Bool("Prices", false, `Update a set of prices across one or more performances.
{"PriceUpdateRequests":[{"Editable":true,"EffectiveDateTime":"0001-01-01T00:00:00.000Z","Enabled":true,"MinPrice":123.456,"PerformanceIds":"string","Price":123.456,"PriceLayerTypeId":123,"PriceTypeId":123,"ZoneId":123},...]}`)
	
		Put_cmd.AddCommand(Put_PerformancePriceTypes_cmd) 
				Put_PerformancePriceTypes_cmd.Flags().Bool("Base", false, `Update base indicator on performance price types for a set of performances and price type.
{"PerformanceIds":"string","PriceLayerTypeIds":"string","PriceTypeID":"string"}`) 
				Put_PerformancePriceTypes_cmd.Flags().Bool("Bulk", false, `Update the performance price types for a set of performances.
{"PerformancePriceType":[{"BaseIndicator":true,"DesignationCodeId":123,"EndDateTime":"0001-01-01T00:00:00.000Z","GlAccountId":123,"PerformanceIds":"string","PriceLayerTypeIds":"string","PriceTypeIds":"string","ResaleAccountId":123,"StartDateTime":"0001-01-01T00:00:00.000Z","TicketDesignId":123},...]}`)
	
		Put_cmd.AddCommand(Put_PerformancePrices_cmd)
	
		Put_cmd.AddCommand(Put_PerformanceStatuses_cmd)
	
		Put_cmd.AddCommand(Put_PerformanceTypes_cmd)
	
		Put_cmd.AddCommand(Put_Performances_cmd)
	
		Put_cmd.AddCommand(Put_Philanthropy_cmd)
	
		Put_cmd.AddCommand(Put_PhilanthropyTypes_cmd)
	
		Put_cmd.AddCommand(Put_PhoneIndicators_cmd)
	
		Put_cmd.AddCommand(Put_PhoneTypes_cmd)
	
		Put_cmd.AddCommand(Put_Phones_cmd)
	
		Put_cmd.AddCommand(Put_PlanPriorities_cmd)
	
		Put_cmd.AddCommand(Put_PlanSources_cmd)
	
		Put_cmd.AddCommand(Put_PlanStatuses_cmd)
	
		Put_cmd.AddCommand(Put_PlanTypes_cmd)
	
		Put_cmd.AddCommand(Put_PlanWorkers_cmd)
	
		Put_cmd.AddCommand(Put_Plans_cmd)
	
		Put_cmd.AddCommand(Put_PortfolioCustomElements_cmd)
	
		Put_cmd.AddCommand(Put_Prefixes_cmd)
	
		Put_cmd.AddCommand(Put_Premieres_cmd)
	
		Put_cmd.AddCommand(Put_PriceCategories_cmd)
	
		Put_cmd.AddCommand(Put_PriceEvents_cmd)
	
		Put_cmd.AddCommand(Put_PriceLayerTypes_cmd)
	
		Put_cmd.AddCommand(Put_PriceTemplates_cmd)
	
		Put_cmd.AddCommand(Put_PriceTypeCategories_cmd)
	
		Put_cmd.AddCommand(Put_PriceTypeGroups_cmd)
	
		Put_cmd.AddCommand(Put_PriceTypeReasons_cmd)
	
		Put_cmd.AddCommand(Put_PriceTypeUserGroups_cmd)
	
		Put_cmd.AddCommand(Put_PriceTypes_cmd)
	
		Put_cmd.AddCommand(Put_PricingRuleCategories_cmd)
	
		Put_cmd.AddCommand(Put_PricingRuleMessageTypes_cmd)
	
		Put_cmd.AddCommand(Put_PricingRuleSets_cmd)
	
		Put_cmd.AddCommand(Put_PricingRules_cmd)
	
		Put_cmd.AddCommand(Put_Printers_cmd)
	
		Put_cmd.AddCommand(Put_ProductionSeasonMembershipOrganizations_cmd)
	
		Put_cmd.AddCommand(Put_ProgramListings_cmd)
	
		Put_cmd.AddCommand(Put_Programs_cmd)
	
		Put_cmd.AddCommand(Put_Pronouns_cmd)
	
		Put_cmd.AddCommand(Put_QualificationCategories_cmd)
	
		Put_cmd.AddCommand(Put_Qualifications_cmd)
	
		Put_cmd.AddCommand(Put_QueryElementFilters_cmd)
	
		Put_cmd.AddCommand(Put_QueryElementGroups_cmd)
	
		Put_cmd.AddCommand(Put_QueryElements_cmd)
	
		Put_cmd.AddCommand(Put_RankTypes_cmd)
	
		Put_cmd.AddCommand(Put_Rankings_cmd)
	
		Put_cmd.AddCommand(Put_ReceiptSettings_cmd)
	
		Put_cmd.AddCommand(Put_ReferenceTableUserGroups_cmd)
	
		Put_cmd.AddCommand(Put_RelationshipCategories_cmd)
	
		Put_cmd.AddCommand(Put_ReportRequests_cmd) 
				Put_ReportRequests_cmd.Flags().Bool("FlushIncomplete", false, `Update the status of all the running requests to error.
`)
	
		Put_cmd.AddCommand(Put_ReportSchedules_cmd)
	
		Put_cmd.AddCommand(Put_ReportUserGroups_cmd)
	
		Put_cmd.AddCommand(Put_Research_cmd)
	
		Put_cmd.AddCommand(Put_ResearchTypes_cmd)
	
		Put_cmd.AddCommand(Put_ResourceCategories_cmd)
	
		Put_cmd.AddCommand(Put_ResourceSchedules_cmd)
	
		Put_cmd.AddCommand(Put_ResourceTypes_cmd)
	
		Put_cmd.AddCommand(Put_Resources_cmd)
	
		Put_cmd.AddCommand(Put_SalesChannels_cmd)
	
		Put_cmd.AddCommand(Put_SalesLayoutButtonTypes_cmd)
	
		Put_cmd.AddCommand(Put_SalesLayouts_cmd)
	
		Put_cmd.AddCommand(Put_SalutationTypes_cmd)
	
		Put_cmd.AddCommand(Put_Salutations_cmd)
	
		Put_cmd.AddCommand(Put_SchedulePatternTypes_cmd)
	
		Put_cmd.AddCommand(Put_ScheduleTypes_cmd)
	
		Put_cmd.AddCommand(Put_SeasonTypes_cmd)
	
		Put_cmd.AddCommand(Put_Seasons_cmd)
	
		Put_cmd.AddCommand(Put_SeatCodes_cmd)
	
		Put_cmd.AddCommand(Put_SeatStatuses_cmd)
	
		Put_cmd.AddCommand(Put_Sections_cmd)
	
		Put_cmd.AddCommand(Put_ServiceResourceUserGroups_cmd)
	
		Put_cmd.AddCommand(Put_Session_cmd) 
				Put_Session_cmd.Flags().Bool("SetExpiration", false, `Changes the deadline after which a session's reserved seats are released
All times are relative to the machine on which the Tessitura Seat Server runs, including the time zone. The method either takes an absolute deadline time or an offset in seconds which is used to shorten or lengthen the time until expiration. The deadline is not the exact moment at which the seats are released, but rather when they are marked as expired. The Tessitura Seat Server will terminate the session when the next cleanup cycle is run (every 60 seconds or so). The method will return the new expiration date/time of the session.  The expiration date/time takes precendence over the offset if both are provided in the request.
{"Request":{"Expiration":"0001-01-01T00:00:00.000Z","TimeOffset":123},"SessionKey":"string"}`) 
				Put_Session_cmd.Flags().Bool("Variable", false, `Update the value of an existing session variable.
{"SessionKey":"string","SessionVariable":{"Name":"string","Value":"string"}}`) 
				Put_Session_cmd.Flags().Bool("WebLogin", false, `Updates the login information for a user and logs back into the session using new credentials.

Current and new values must be submitted for login username, password, and email.  To retain any of the current values pass the same value for both the current and the new parameter.  After successfully updating the user account, the user is automatically logged in with the new login information.

When updating a login where the password has been forgotten, submit the request with a null password.
{"Request":{"EmailAddress":"string","LoginName":"string","LoginTypeId":123,"NewEmailAddress":"string","NewLoginName":"string","NewPassword":"string","Password":"string","PromotionCode":123},"SessionKey":"string"}`)
	
		Put_cmd.AddCommand(Put_SourceGroups_cmd)
	
		Put_cmd.AddCommand(Put_SpecialActivities_cmd)
	
		Put_cmd.AddCommand(Put_SpecialActivityStatuses_cmd)
	
		Put_cmd.AddCommand(Put_SpecialActivityTypes_cmd)
	
		Put_cmd.AddCommand(Put_States_cmd)
	
		Put_cmd.AddCommand(Put_StepTypes_cmd)
	
		Put_cmd.AddCommand(Put_Steps_cmd) 
				Put_Steps_cmd.Flags().Bool("Document", false, `Update a document attached to a step.
{"Document":{"Category":{"Id":123},"ConstituentId":123,"Contents":"AA==","CreateLocation":"string","CreatedBy":"string","CreatedDateTime":"0001-01-01T00:00:00.000Z","Description":"string","FileName":"string","Id":123,"Notes":"string","UpdatedBy":"string","UpdatedDateTime":"0001-01-01T00:00:00.000Z"},"DocumentID":"string","StepID":"string"}`)
	
		Put_cmd.AddCommand(Put_SubLineItemStatuses_cmd)
	
		Put_cmd.AddCommand(Put_Suffixes_cmd)
	
		Put_cmd.AddCommand(Put_SurveyQuestions_cmd)
	
		Put_cmd.AddCommand(Put_SurveyResponses_cmd)
	
		Put_cmd.AddCommand(Put_TemplateCategories_cmd)
	
		Put_cmd.AddCommand(Put_TemplatePriceTypes_cmd)
	
		Put_cmd.AddCommand(Put_TemplatePrices_cmd)
	
		Put_cmd.AddCommand(Put_Templates_cmd)
	
		Put_cmd.AddCommand(Put_Theaters_cmd)
	
		Put_cmd.AddCommand(Put_TimeSlots_cmd)
	
		Put_cmd.AddCommand(Put_TriPOSCloudConfigurations_cmd)
	
		Put_cmd.AddCommand(Put_UpgradeCategories_cmd)
	
		Put_cmd.AddCommand(Put_UpgradeLogs_cmd)
	
		Put_cmd.AddCommand(Put_UserPreferences_cmd)
	
		Put_cmd.AddCommand(Put_WebContentTypes_cmd)
	
		Put_cmd.AddCommand(Put_WebLogins_cmd)
	
		Put_cmd.AddCommand(Put_WorkerQualifications_cmd)
	
		Put_cmd.AddCommand(Put_WorkerRoles_cmd)
	
		Put_cmd.AddCommand(Put_WorkerTypes_cmd)
	
		Put_cmd.AddCommand(Put_Workers_cmd)
	
		Put_cmd.AddCommand(Put_ZoneGroups_cmd)
	
		Put_cmd.AddCommand(Put_ZoneMaps_cmd)
	
		Put_cmd.AddCommand(Put_Zones_cmd)
	
}


