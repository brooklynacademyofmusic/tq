// Code generated by tq/generator; DO NOT EDIT.

package cmd

import (
	"github.com/spf13/cobra"
	"github.com/skysyzygy/tq/tq"
)


var Get_AccountTypes_cmd = &cobra.Command{
		Use: `AccountTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an account type by id`,
		Long:  `Get the details of an account type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AccountTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.AccountTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.AccountTypesGet)
			}
			return
		},
	}

var Get_Accounts_cmd = &cobra.Command{
		Use: `Accounts`,
		Example: tq.JSONHighlight(`{"AccountID":"string"}`),
		Short: `Get details of a specific credit card account`,
		Long:  `Get details of a specific credit card account`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AccountsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.AccountsGet)
			}
			return
		},
	}

var Get_ActionTypes_cmd = &cobra.Command{
		Use: `ActionTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an action type by id`,
		Long:  `Get the details of an action type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ActionTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ActionTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ActionTypesGet)
			}
			return
		},
	}

var Get_Actions_cmd = &cobra.Command{
		Use: `Actions`,
		Example: tq.JSONHighlight(`{"IssueActionID":"string"}`),
		Short: `Get details of an issue action`,
		Long:  `Get details of an issue action.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ActionsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ActionsGet)
			}
			return
		},
	}

var Get_ActivityCategories_cmd = &cobra.Command{
		Use: `ActivityCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an activity category by id`,
		Long:  `Get the details of an activity category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ActivityCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ActivityCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ActivityCategoriesGet)
			}
			return
		},
	}

var Get_ActivityTypes_cmd = &cobra.Command{
		Use: `ActivityTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an activity type by id`,
		Long:  `Get the details of an activity type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ActivityTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ActivityTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ActivityTypesGet)
			}
			return
		},
	}

var Get_AddressTypes_cmd = &cobra.Command{
		Use: `AddressTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an address type by id`,
		Long:  `Get the details of an address type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AddressTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.AddressTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.AddressTypesGet)
			}
			return
		},
	}

var Get_Addresses_cmd = &cobra.Command{
		Use: `Addresses`,
		Example: tq.JSONHighlight(`{"AddressID":"string"}`),
		Short: `Get details of an address using addressId as a URL query parameter`,
		Long:  `Get details of an address using addressId as a URL query parameter. Returns 404 Not Found if an address with the specified Id is not found.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AddressesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.AddressesGet)
			}
			return
		},
	}

var Get_AffiliationTypes_cmd = &cobra.Command{
		Use: `AffiliationTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an affiliation type by id`,
		Long:  `Get the details of an affiliation type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AffiliationTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.AffiliationTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.AffiliationTypesGet)
			}
			return
		},
	}

var Get_Affiliations_cmd = &cobra.Command{
		Use: `Affiliations`,
		Example: tq.JSONHighlight(`{"AffiliationID":"string"}`),
		Short: `Get details of an affiliation`,
		Long:  `Get details of an affiliation.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AffiliationsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.AffiliationsGet)
			}
			return
		},
	}

var Get_AliasTypes_cmd = &cobra.Command{
		Use: `AliasTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an alias type by id`,
		Long:  `Get the details of an alias type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AliasTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.AliasTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.AliasTypesGet)
			}
			return
		},
	}

var Get_Aliases_cmd = &cobra.Command{
		Use: `Aliases`,
		Example: tq.JSONHighlight(`{"AliasID":"string"}`),
		Short: `Get details of an alias`,
		Long:  `Get details of an alias.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AliasesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.AliasesGet)
			}
			return
		},
	}

var Get_AnalyticsCubes_cmd = &cobra.Command{
		Use: `AnalyticsCubes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an analytics cube`,
		Long:  `Get the details of an analytics cube.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AnalyticsCubesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.AnalyticsCubesGet)
			}
			return
		},
	}

var Get_AnalyticsReports_cmd = &cobra.Command{
		Use: `AnalyticsReports`,
		Example: tq.JSONHighlight(`{"AnalyticsReportID":"string"}`),
		Short: `Get a single SSRS Report for display in Analytics`,
		Long:  `Get a single SSRS Report for display in Analytics.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AnalyticsReportsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.AnalyticsReportsGet)
			}
			return
		},
	}

var Get_AppScreenTexts_cmd = &cobra.Command{
		Use: `AppScreenTexts`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an App Screen Text by id`,
		Long:  `Get the details of an App Screen Text by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AppScreenTextsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.AppScreenTextsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.AppScreenTextsGet)
			}
			return
		},
	}

var Get_AppealCategories_cmd = &cobra.Command{
		Use: `AppealCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an appeal category by id`,
		Long:  `Get the details of an appeal category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AppealCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.AppealCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.AppealCategoriesGet)
			}
			return
		},
	}

var Get_Appeals_cmd = &cobra.Command{
		Use: `Appeals`,
		Example: tq.JSONHighlight(`{"AppealID":"string"}`),
		Short: `Get details of an Appeal`,
		Long:  `Get details of an Appeal.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.AppealsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.AppealsGet)
			}
			return
		},
	}

var Get_ApplicationObjects_cmd = &cobra.Command{
		Use: `ApplicationObjects`,
		Example: tq.JSONHighlight(``),
		Short: `Get all application objects valid for the context usergroup`,
		Long:  `Get all application objects valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.ApplicationObjectsGetAll)
			return
		},
	}

var Get_Artists_cmd = &cobra.Command{
		Use: `Artists`,
		Example: tq.JSONHighlight(`{"ArtistID":"string"}`),
		Short: `Get details of an existing artist`,
		Long:  `Get details of an existing artist.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ArtistsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ArtistsGet)
			}
			return
		},
	}

var Get_AssetTypes_cmd = &cobra.Command{
		Use: `AssetTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an asset type by id`,
		Long:  `Get the details of an asset type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AssetTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.AssetTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.AssetTypesGet)
			}
			return
		},
	}

var Get_Assets_cmd = &cobra.Command{
		Use: `Assets`,
		Example: tq.JSONHighlight(`{"AssetID":"string"}`),
		Short: `Get details of an asset`,
		Long:  `Get details of an asset.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AssetsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.AssetsGet)
			}
			return
		},
	}

var Get_AssociationTypes_cmd = &cobra.Command{
		Use: `AssociationTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an association type by id`,
		Long:  `Get the details of an association type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AssociationTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.AssociationTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.AssociationTypesGet)
			}
			return
		},
	}

var Get_Associations_cmd = &cobra.Command{
		Use: `Associations`,
		Example: tq.JSONHighlight(`{"AssociationID":"string"}`),
		Short: `Get details of an association`,
		Long:  `Get details of an association.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AssociationsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.AssociationsGet)
			}
			return
		},
	}

var Get_AttendanceHistory_cmd = &cobra.Command{
		Use: `AttendanceHistory`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`),
		Short: `Attendance History for a selected constituent optionally including primary affiliates`,
		Long:  `Attendance History for a selected constituent optionally including primary affiliates.  Does not return history based on recipient for the selected constituent(s).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.AttendanceHistoryGetAll)
			return
		},
	}

var Get_Attributes_cmd = &cobra.Command{
		Use: `Attributes`,
		Example: tq.JSONHighlight(`{"AttributeID":"string"}`),
		Short: `Get details of an attribute`,
		Long:  `Get details of an attribute.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AttributesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.AttributesGet)
			}
			return
		},
	}

var Get_AuditLogs_cmd = &cobra.Command{
		Use: `AuditLogs`,
		Example: tq.JSONHighlight(`{"AuditLog":"string"}`),
		Short: `Get details of a audit log`,
		Long:  `Get details of a audit log.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.AuditLogsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Details"); test {
				err = tq.Do(_tq, _tq.Get.AuditLogsGetDetails)
			} else {
				err = tq.Do(_tq, _tq.Get.AuditLogsGet)
			}
			return
		},
	}

var Get_Authenticate_cmd = &cobra.Command{
		Use: `Authenticate`,
		Example: tq.JSONHighlight(``),
		Short: `This is a no-op operation for windows authentication diagnostics`,
		Long:  `This is a no-op operation for windows authentication diagnostics.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.AuthenticateWindowsAuthentication)
			return
		},
	}

var Get_BatchMaintenance_cmd = &cobra.Command{
		Use: `BatchMaintenance`,
		Example: tq.JSONHighlight(`{"BatchID":"string"}`),
		Short: `Get a single Batch`,
		Long:  `Get a single Batch`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Active"); test {
				err = tq.Do(_tq, _tq.Get.BatchMaintenanceActive)
			} else {
				err = tq.Do(_tq, _tq.Get.BatchMaintenanceGet)
			}
			return
		},
	}

var Get_BatchTypeGroups_cmd = &cobra.Command{
		Use: `BatchTypeGroups`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a batch type group by id`,
		Long:  `Get the details of a batch type group by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.BatchTypeGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.BatchTypeGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.BatchTypeGroupsGet)
			}
			return
		},
	}

var Get_BatchTypeUserGroup_cmd = &cobra.Command{
		Use: `BatchTypeUserGroup`,
		Example: tq.JSONHighlight(`{"UserGroup":"string"}`),
		Short: `Get all batch type/user group mappings`,
		Long:  `Get all batch type/user group mappings.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.BatchTypeUserGroupGetAll)
			return
		},
	}

var Get_BatchTypes_cmd = &cobra.Command{
		Use: `BatchTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a batch type by id`,
		Long:  `Get the details of a batch type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.BatchTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.BatchTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.BatchTypesGet)
			}
			return
		},
	}

var Get_BillingSchedules_cmd = &cobra.Command{
		Use: `BillingSchedules`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Billing Schedule`,
		Long:  `Get the details of a Billing Schedule. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.BillingSchedulesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.BillingSchedulesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.BillingSchedulesGet)
			}
			return
		},
	}

var Get_BillingTypes_cmd = &cobra.Command{
		Use: `BillingTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Billing Type by id`,
		Long:  `Get the details of a Billing Type by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.BillingTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.BillingTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.BillingTypesGet)
			}
			return
		},
	}

var Get_BookingCategories_cmd = &cobra.Command{
		Use: `BookingCategories`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Booking Category by id`,
		Long:  `Get the details of a Booking Category by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.BookingCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.BookingCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.BookingCategoriesGet)
			}
			return
		},
	}

var Get_BookingTemplates_cmd = &cobra.Command{
		Use: `BookingTemplates`,
		Example: tq.JSONHighlight(`{"BookingTemplateID":"string"}`),
		Short: `Get a Booking Template by ID`,
		Long:  `Get a Booking Template by ID`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.BookingTemplatesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.BookingTemplatesGet)
			}
			return
		},
	}

var Get_Bookings_cmd = &cobra.Command{
		Use: `Bookings`,
		Example: tq.JSONHighlight(`{"BookingID":"string"}`),
		Short: `Get a Booking by id`,
		Long:  `Get a Booking by id`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("AllDocumentSummaries"); test {
				err = tq.Do(_tq, _tq.Get.BookingsGetAllDocumentSummaries)
			} else if test, _ := cmd.Flags().GetBool("AllDocuments"); test {
				err = tq.Do(_tq, _tq.Get.BookingsGetAllDocuments)
			} else if test, _ := cmd.Flags().GetBool("Document"); test {
				err = tq.Do(_tq, _tq.Get.BookingsGetDocument)
			} else if test, _ := cmd.Flags().GetBool("Summary"); test {
				err = tq.Do(_tq, _tq.Get.BookingsGetSummary)
			} else {
				err = tq.Do(_tq, _tq.Get.BookingsGet)
			}
			return
		},
	}

var Get_BulkCopySets_cmd = &cobra.Command{
		Use: `BulkCopySets`,
		Example: tq.JSONHighlight(`{"BulkCopySetID":"string"}`),
		Short: `Get a bulk copy set by Id`,
		Long:  `Get a bulk copy set by Id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.BulkCopySetsGetAll)
			} else if test, _ := cmd.Flags().GetBool("DayForCopy"); test {
				err = tq.Do(_tq, _tq.Get.BulkCopySetsGetDayForCopy)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.BulkCopySetsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.BulkCopySetsGet)
			}
			return
		},
	}

var Get_BulkDailyCopyExclusions_cmd = &cobra.Command{
		Use: `BulkDailyCopyExclusions`,
		Example: tq.JSONHighlight(`{"BulkDailyCopyExclusionID":"string"}`),
		Short: `Get a bulk daily copy exclusion by id`,
		Long:  `Get a bulk daily copy exclusion by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.BulkDailyCopyExclusionsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.BulkDailyCopyExclusionsGet)
			}
			return
		},
	}

var Get_BusinessUnits_cmd = &cobra.Command{
		Use: `BusinessUnits`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a business unit by id`,
		Long:  `Get the details of a business unit by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.BusinessUnitsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.BusinessUnitsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.BusinessUnitsGet)
			}
			return
		},
	}

var Get_Cache_cmd = &cobra.Command{
		Use: `Cache`,
		Example: tq.JSONHighlight(``),
		Short: ``,
		Long:  ``,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.CacheInit)
			return
		},
	}

var Get_CampaignDesignations_cmd = &cobra.Command{
		Use: `CampaignDesignations`,
		Example: tq.JSONHighlight(`{"CampaignDesignationID":"string"}`),
		Short: `Get a single Designation associated to a Campaign`,
		Long:  `Get a single Designation associated to a Campaign.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CampaignDesignationsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.CampaignDesignationsGet)
			}
			return
		},
	}

var Get_CampaignFunds_cmd = &cobra.Command{
		Use: `CampaignFunds`,
		Example: tq.JSONHighlight(`{"CampaignFundID":"string"}`),
		Short: `Get a single Fund associated to a Campaign`,
		Long:  `Get a single Fund associated to a Campaign.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CampaignFundsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.CampaignFundsGet)
			}
			return
		},
	}

var Get_Campaigns_cmd = &cobra.Command{
		Use: `Campaigns`,
		Example: tq.JSONHighlight(`{"CampaignID":"string"}`),
		Short: `Get summary of a specific campaign`,
		Long:  `Get summary of a specific campaign.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.CampaignsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.CampaignsGet)
			}
			return
		},
	}

var Get_CardReaderTypes_cmd = &cobra.Command{
		Use: `CardReaderTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Card Reader Type by id`,
		Long:  `Get the details of a Card Reader Type by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CardReaderTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.CardReaderTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.CardReaderTypesGet)
			}
			return
		},
	}

var Get_Cart_cmd = &cobra.Command{
		Use: `Cart`,
		Example: tq.JSONHighlight(`{"MessageTypes":"string", "SavedCart":"string", "SessionKey":"string"}`),
		Short: `Gets the cart details`,
		Long:  `Gets the cart details`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("CartProperties"); test {
				err = tq.Do(_tq, _tq.Get.CartGetCartProperties)
			} else if test, _ := cmd.Flags().GetBool("Messages"); test {
				err = tq.Do(_tq, _tq.Get.CartGetMessages)
			} else if test, _ := cmd.Flags().GetBool("ReceiptString"); test {
				err = tq.Do(_tq, _tq.Get.CartGetReceiptString)
			} else if test, _ := cmd.Flags().GetBool("Summary"); test {
				err = tq.Do(_tq, _tq.Get.CartGetSummary)
			} else {
				err = tq.Do(_tq, _tq.Get.CartGet)
			}
			return
		},
	}

var Get_Colors_cmd = &cobra.Command{
		Use: `Colors`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a color by id`,
		Long:  `Get the details of a color by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ColorsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ColorsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ColorsGet)
			}
			return
		},
	}

var Get_Composers_cmd = &cobra.Command{
		Use: `Composers`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a composer by id`,
		Long:  `Get the details of a composer by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ComposersGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ComposersGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ComposersGet)
			}
			return
		},
	}

var Get_Constituencies_cmd = &cobra.Command{
		Use: `Constituencies`,
		Example: tq.JSONHighlight(`{"ConstituencyID":"string"}`),
		Short: `Get details of constituency`,
		Long:  `Get details of constituency.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ConstituenciesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ConstituenciesGet)
			}
			return
		},
	}

var Get_ConstituencyTypes_cmd = &cobra.Command{
		Use: `ConstituencyTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a constituency type by id`,
		Long:  `Get the details of a constituency type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ConstituencyTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ConstituencyTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ConstituencyTypesGet)
			}
			return
		},
	}

var Get_ConstituentContributions_cmd = &cobra.Command{
		Use: `ConstituentContributions`,
		Example: tq.JSONHighlight(`{"CampaignIds":"string", "ConstituentID":"string", "EndDate":"string", "FundIds":"string", "IncludeAffiliations":"string", "StartDate":"string"}`),
		Short: `Get contributions for a constituent`,
		Long:  `Get contributions for a constituent.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.ConstituentContributionsGetAll)
			return
		},
	}

var Get_ConstituentDocuments_cmd = &cobra.Command{
		Use: `ConstituentDocuments`,
		Example: tq.JSONHighlight(`{"DocumentID":"string"}`),
		Short: `Get the details of a document for a constituent`,
		Long:  `Get the details of a document for a constituent.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentDocumentsGetAll)
			} else if test, _ := cmd.Flags().GetBool("AllSummary"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentDocumentsGetAllSummary)
			} else {
				err = tq.Do(_tq, _tq.Get.ConstituentDocumentsGet)
			}
			return
		},
	}

var Get_ConstituentGroups_cmd = &cobra.Command{
		Use: `ConstituentGroups`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a constituent group by id`,
		Long:  `Get the details of a constituent group by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ConstituentGroupsGet)
			}
			return
		},
	}

var Get_ConstituentInactives_cmd = &cobra.Command{
		Use: `ConstituentInactives`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a constituent inactive by id`,
		Long:  `Get the details of a constituent inactive by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentInactivesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentInactivesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ConstituentInactivesGet)
			}
			return
		},
	}

var Get_ConstituentProtectionTypes_cmd = &cobra.Command{
		Use: `ConstituentProtectionTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a constituent protection type by id`,
		Long:  `Get the details of a constituent protection type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentProtectionTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentProtectionTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ConstituentProtectionTypesGet)
			}
			return
		},
	}

var Get_ConstituentTypeAffiliates_cmd = &cobra.Command{
		Use: `ConstituentTypeAffiliates`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a constituent type affiliate by id`,
		Long:  `Get the details of a constituent type affiliate by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentTypeAffiliatesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentTypeAffiliatesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ConstituentTypeAffiliatesGet)
			}
			return
		},
	}

var Get_ConstituentTypes_cmd = &cobra.Command{
		Use: `ConstituentTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a constituent type by id`,
		Long:  `Get the details of a constituent type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ConstituentTypesGet)
			}
			return
		},
	}

var Get_Constituents_cmd = &cobra.Command{
		Use: `Constituents`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string"}`),
		Short: `Get the details of a Constituent using id`,
		Long:  `Get the details of a Constituent using id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Constituent"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentsGetConstituent)
			} else if test, _ := cmd.Flags().GetBool("ConstituentDevelopmentInfo"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentsGetConstituentDevelopmentInfo)
			} else if test, _ := cmd.Flags().GetBool("ConstituentSnapshot"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentsGetConstituentSnapshot)
			} else if test, _ := cmd.Flags().GetBool("Constituents"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentsGetConstituents)
			} else if test, _ := cmd.Flags().GetBool("DefaultHeader"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentsGetDefaultHeader)
			} else if test, _ := cmd.Flags().GetBool("FlexHeader"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentsGetFlexHeader)
			} else if test, _ := cmd.Flags().GetBool("Header"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentsGetHeader)
			} else if test, _ := cmd.Flags().GetBool("PrimaryHousehold"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentsGetPrimaryHousehold)
			} else if test, _ := cmd.Flags().GetBool("Search"); test {
				err = tq.Do(_tq, _tq.Get.ConstituentsSearch)
			} else {
				err = tq.Do(_tq, _tq.Get.ConstituentsGet)
			}
			return
		},
	}

var Get_ContactPermissionCategories_cmd = &cobra.Command{
		Use: `ContactPermissionCategories`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a contact permission category`,
		Long:  `Get the details of a contact permission category. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resource in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContactPermissionCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ContactPermissionCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ContactPermissionCategoriesGet)
			}
			return
		},
	}

var Get_ContactPermissionTypes_cmd = &cobra.Command{
		Use: `ContactPermissionTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a contact permission type`,
		Long:  `Get the details of a contact permission type. To get the resource only if the user has write/edit access, pass filter="writeonly".  To get the resource in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContactPermissionTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("ForProductionSeasons"); test {
				err = tq.Do(_tq, _tq.Get.ContactPermissionTypesGetForProductionSeasons)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ContactPermissionTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ContactPermissionTypesGet)
			}
			return
		},
	}

var Get_ContactPermissions_cmd = &cobra.Command{
		Use: `ContactPermissions`,
		Example: tq.JSONHighlight(`{"ContactPermissionID":"string"}`),
		Short: `Get details of a contact permission`,
		Long:  `Get details of a contact permission`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContactPermissionsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ContactPermissionsGet)
			}
			return
		},
	}

var Get_ContactPointCategories_cmd = &cobra.Command{
		Use: `ContactPointCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a contact point category by id`,
		Long:  `Get the details of a contact point category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContactPointCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ContactPointCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ContactPointCategoriesGet)
			}
			return
		},
	}

var Get_ContactPointCategoryPurposes_cmd = &cobra.Command{
		Use: `ContactPointCategoryPurposes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a contact point category purpose by id`,
		Long:  `Get the details of a contact point category purpose by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContactPointCategoryPurposesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ContactPointCategoryPurposesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ContactPointCategoryPurposesGet)
			}
			return
		},
	}

var Get_ContactPointPurposeCategories_cmd = &cobra.Command{
		Use: `ContactPointPurposeCategories`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a contact point purpose category by id`,
		Long:  `Get the details of a contact point purpose category by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContactPointPurposeCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ContactPointPurposeCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ContactPointPurposeCategoriesGet)
			}
			return
		},
	}

var Get_ContactPointPurposeMaps_cmd = &cobra.Command{
		Use: `ContactPointPurposeMaps`,
		Example: tq.JSONHighlight(`{"ContactPointPurposeMapID":"string"}`),
		Short: `Get details of a contact point purpose`,
		Long:  `Get details of a contact point purpose.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContactPointPurposeMapsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ContactPointPurposeMapsGet)
			}
			return
		},
	}

var Get_ContactPointPurposes_cmd = &cobra.Command{
		Use: `ContactPointPurposes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a contact point purpose by id`,
		Long:  `Get the details of a contact point purpose by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContactPointPurposesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ContactPointPurposesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ContactPointPurposesGet)
			}
			return
		},
	}

var Get_ContactPoints_cmd = &cobra.Command{
		Use: `ContactPoints`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`),
		Short: `Get all the delivery points for the specified constituent (constituentId) and all its visible affiliation's delivery point purposes as well`,
		Long:  `Get all the delivery points for the specified constituent (constituentId) and all its visible affiliation's delivery point purposes as well. To exclude delivery point purposes of the visible affiliations pass includeAffiliations=false.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.ContactPointsGetAll)
			return
		},
	}

var Get_ContactTypes_cmd = &cobra.Command{
		Use: `ContactTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a contact type by id`,
		Long:  `Get the details of a contact type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContactTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ContactTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ContactTypesGet)
			}
			return
		},
	}

var Get_ContextInformation_cmd = &cobra.Command{
		Use: `ContextInformation`,
		Example: tq.JSONHighlight(``),
		Short: `Get a commonly used set of default values for the user and usergroup in the current security context`,
		Long:  `Get a commonly used set of default values for the user and usergroup in the current security context.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.ContextInformationGet)
			return
		},
	}

var Get_ContributionDesignations_cmd = &cobra.Command{
		Use: `ContributionDesignations`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a contribution designation by id`,
		Long:  `Get the details of a contribution designation by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContributionDesignationsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ContributionDesignationsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ContributionDesignationsGet)
			}
			return
		},
	}

var Get_ContributionImportSets_cmd = &cobra.Command{
		Use: `ContributionImportSets`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a contributionImportSet by id`,
		Long:  `Get the details of a contributionImportSet by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ContributionImportSetsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ContributionImportSetsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ContributionImportSetsGet)
			}
			return
		},
	}

var Get_ControlGroupUserGroups_cmd = &cobra.Command{
		Use: `ControlGroupUserGroups`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get the details of a control group/user group mapping by id`,
		Long:  `Get the details of a control group/user group mapping by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ControlGroupUserGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ControlGroupUserGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ControlGroupUserGroupsGet)
			}
			return
		},
	}

var Get_ControlGroups_cmd = &cobra.Command{
		Use: `ControlGroups`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a control group by id`,
		Long:  `Get the details of a control group by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ControlGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ControlGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ControlGroupsGet)
			}
			return
		},
	}

var Get_CoreIdentity_cmd = &cobra.Command{
		Use: `CoreIdentity`,
		Example: tq.JSONHighlight(``),
		Short: ``,
		Long:  ``,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.CoreIdentityToken)
			return
		},
	}

var Get_Countries_cmd = &cobra.Command{
		Use: `Countries`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a country by id`,
		Long:  `Get the details of a country by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CountriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.CountriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.CountriesGet)
			}
			return
		},
	}

var Get_CrediteeTypes_cmd = &cobra.Command{
		Use: `CrediteeTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a crediteeType by id`,
		Long:  `Get the details of a crediteeType by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CrediteeTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.CrediteeTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.CrediteeTypesGet)
			}
			return
		},
	}

var Get_Credits_cmd = &cobra.Command{
		Use: `Credits`,
		Example: tq.JSONHighlight(`{"ProductionElementIds":"string"}`),
		Short: `Returns all credits for the requested production element`,
		Long:  `Returns all credits for the requested production element, and all credits from above it in the production hierarchy.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.CreditsGetCredits)
			return
		},
	}

var Get_CriterionOperators_cmd = &cobra.Command{
		Use: `CriterionOperators`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a criterion operator by id`,
		Long:  `Get the details of a criterion operator by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CriterionOperatorsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.CriterionOperatorsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.CriterionOperatorsGet)
			}
			return
		},
	}

var Get_CumulativeGivingReceipts_cmd = &cobra.Command{
		Use: `CumulativeGivingReceipts`,
		Example: tq.JSONHighlight(`{"CumulativeGivingReceiptID":"string"}`),
		Short: `Get details of an cumulativeGivingReceipt`,
		Long:  `Get details of an cumulativeGivingReceipt.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CumulativeGivingReceiptsGetAll)
			} else if test, _ := cmd.Flags().GetBool("ForSession"); test {
				err = tq.Do(_tq, _tq.Get.CumulativeGivingReceiptsGetForSession)
			} else {
				err = tq.Do(_tq, _tq.Get.CumulativeGivingReceiptsGet)
			}
			return
		},
	}

var Get_CurrencyTypes_cmd = &cobra.Command{
		Use: `CurrencyTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a currency type by id`,
		Long:  `Get the details of a currency type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CurrencyTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.CurrencyTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.CurrencyTypesGet)
			}
			return
		},
	}

var Get_Custom_cmd = &cobra.Command{
		Use: `Custom`,
		Example: tq.JSONHighlight(``),
		Short: `Get the metadata information of a custom table as defined by TR_DATASERVICE_TABLES and TR_DATASERVICE_COLUMNS`,
		Long:  `Get the metadata information of a custom table as defined by TR_DATASERVICE_TABLES and TR_DATASERVICE_COLUMNS.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.CustomGetMetadata)
			return
		},
	}

var Get_CustomDefaultCategories_cmd = &cobra.Command{
		Use: `CustomDefaultCategories`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a custom default category by id`,
		Long:  `Get the details of a custom default category by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CustomDefaultCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.CustomDefaultCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.CustomDefaultCategoriesGet)
			}
			return
		},
	}

var Get_CustomDefaults_cmd = &cobra.Command{
		Use: `CustomDefaults`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a custom default by id`,
		Long:  `Get the details of a custom default by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.CustomDefaultsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.CustomDefaultsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.CustomDefaultsGet)
			}
			return
		},
	}

var Get_DeliveryMethods_cmd = &cobra.Command{
		Use: `DeliveryMethods`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a delivery method by id`,
		Long:  `Get the details of a delivery method by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.DeliveryMethodsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.DeliveryMethodsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.DeliveryMethodsGet)
			}
			return
		},
	}

var Get_DesignationCodes_cmd = &cobra.Command{
		Use: `DesignationCodes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a designation code by id`,
		Long:  `Get the details of a designation code by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.DesignationCodesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.DesignationCodesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.DesignationCodesGet)
			}
			return
		},
	}

var Get_Designs_cmd = &cobra.Command{
		Use: `Designs`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a design by id`,
		Long:  `Get the details of a design by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.DesignsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.DesignsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.DesignsGet)
			}
			return
		},
	}

var Get_Diagnostics_cmd = &cobra.Command{
		Use: `Diagnostics`,
		Example: tq.JSONHighlight(``),
		Short: `Validates Encryption Key Dates`,
		Long:  `Validates Encryption Key Dates.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("SeatServerStatus"); test {
				err = tq.Do(_tq, _tq.Get.DiagnosticsGetSeatServerStatus)
			} else if test, _ := cmd.Flags().GetBool("Status"); test {
				err = tq.Do(_tq, _tq.Get.DiagnosticsGetStatus)
			} else if test, _ := cmd.Flags().GetBool("StatusReport"); test {
				err = tq.Do(_tq, _tq.Get.DiagnosticsGetStatusReport)
			} else {
				err = tq.Do(_tq, _tq.Get.DiagnosticsEncryptionKeyCheck)
			}
			return
		},
	}

var Get_DirectDebitAccountTypes_cmd = &cobra.Command{
		Use: `DirectDebitAccountTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a direct debit account type by id`,
		Long:  `Get the details of a direct debit account type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.DirectDebitAccountTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.DirectDebitAccountTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.DirectDebitAccountTypesGet)
			}
			return
		},
	}

var Get_DiscountTypes_cmd = &cobra.Command{
		Use: `DiscountTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a discount type by id`,
		Long:  `Get the details of a discount type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.DiscountTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.DiscountTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.DiscountTypesGet)
			}
			return
		},
	}

var Get_Divisions_cmd = &cobra.Command{
		Use: `Divisions`,
		Example: tq.JSONHighlight(``),
		Short: `Get the control group/division mappings for the specified division`,
		Long:  `Get the control group/division mappings for the specified division.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("ForDivision"); test {
				err = tq.Do(_tq, _tq.Get.DivisionsGetForDivision)
			} else {
				err = tq.Do(_tq, _tq.Get.DivisionsGetAll)
			}
			return
		},
	}

var Get_DocumentCategories_cmd = &cobra.Command{
		Use: `DocumentCategories`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a documentCategory by id`,
		Long:  `Get the details of a documentCategory by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.DocumentCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.DocumentCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.DocumentCategoriesGet)
			}
			return
		},
	}

var Get_Documents_cmd = &cobra.Command{
		Use: `Documents`,
		Example: tq.JSONHighlight(`{"DocumentID":"string"}`),
		Short: `Get the details of a document`,
		Long:  `Get the details of a document.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.DocumentsGetAll)
			} else if test, _ := cmd.Flags().GetBool("AllSummary"); test {
				err = tq.Do(_tq, _tq.Get.DocumentsGetAllSummary)
			} else if test, _ := cmd.Flags().GetBool("Settings"); test {
				err = tq.Do(_tq, _tq.Get.DocumentsSettings)
			} else {
				err = tq.Do(_tq, _tq.Get.DocumentsGet)
			}
			return
		},
	}

var Get_DonationLevels_cmd = &cobra.Command{
		Use: `DonationLevels`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a donation level by id`,
		Long:  `Get the details of a donation level by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.DonationLevelsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.DonationLevelsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.DonationLevelsGet)
			}
			return
		},
	}

var Get_EMV_cmd = &cobra.Command{
		Use: `EMV`,
		Example: tq.JSONHighlight(`{"Cert":"string", "Merchant":"string"}`),
		Short: `Retrieve information on all lanes associated with merchant`,
		Long:  `Retrieve information on all lanes associated with merchant`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("ConnectionStatus"); test {
				err = tq.Do(_tq, _tq.Get.EMVGetConnectionStatus)
			} else if test, _ := cmd.Flags().GetBool("ConnectionStatusHistory"); test {
				err = tq.Do(_tq, _tq.Get.EMVGetConnectionStatusHistory)
			} else if test, _ := cmd.Flags().GetBool("IdleMessage"); test {
				err = tq.Do(_tq, _tq.Get.EMVGetIdleMessage)
			} else if test, _ := cmd.Flags().GetBool("Lane"); test {
				err = tq.Do(_tq, _tq.Get.EMVGetLane)
			} else {
				err = tq.Do(_tq, _tq.Get.EMVGetAllLanes)
			}
			return
		},
	}

var Get_ElectronicAddressTypes_cmd = &cobra.Command{
		Use: `ElectronicAddressTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an electronic address type by id`,
		Long:  `Get the details of an electronic address type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ElectronicAddressTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ElectronicAddressTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ElectronicAddressTypesGet)
			}
			return
		},
	}

var Get_ElectronicAddresses_cmd = &cobra.Command{
		Use: `ElectronicAddresses`,
		Example: tq.JSONHighlight(`{"ElectronicAddressID":"string"}`),
		Short: `Get details of an electronic address`,
		Long:  `Get details of an electronic address.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ElectronicAddressesGetAll)
			} else if test, _ := cmd.Flags().GetBool("IsAttachedToLogin"); test {
				err = tq.Do(_tq, _tq.Get.ElectronicAddressesIsAttachedToLogin)
			} else {
				err = tq.Do(_tq, _tq.Get.ElectronicAddressesGet)
			}
			return
		},
	}

var Get_EmailProfiles_cmd = &cobra.Command{
		Use: `EmailProfiles`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an email profile by id`,
		Long:  `Get the details of an email profile by id`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.EmailProfilesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.EmailProfilesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.EmailProfilesGet)
			}
			return
		},
	}

var Get_EmarketIndicators_cmd = &cobra.Command{
		Use: `EmarketIndicators`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an emarket indicator by id`,
		Long:  `Get the details of an emarket indicator by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.EmarketIndicatorsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.EmarketIndicatorsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.EmarketIndicatorsGet)
			}
			return
		},
	}

var Get_Eras_cmd = &cobra.Command{
		Use: `Eras`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an era by id`,
		Long:  `Get the details of an era by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ErasGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ErasGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ErasGet)
			}
			return
		},
	}

var Get_EventControl_cmd = &cobra.Command{
		Use: `EventControl`,
		Example: tq.JSONHighlight(`{"EndDate":"string", "StartDate":"string"}`),
		Short: `Returns a response containing a list of EventControl rows for the N-Scan event control table`,
		Long:  `Returns a response containing a list of EventControl rows for the N-Scan event control table.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.EventControlGetAll)
			return
		},
	}

var Get_Facilities_cmd = &cobra.Command{
		Use: `Facilities`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get details of a Facility`,
		Long:  `Get details of a Facility.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.FacilitiesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Screens"); test {
				err = tq.Do(_tq, _tq.Get.FacilitiesGetScreens)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.FacilitiesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.FacilitiesGet)
			}
			return
		},
	}

var Get_Fees_cmd = &cobra.Command{
		Use: `Fees`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get details of a fee`,
		Long:  `Get details of a fee.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.FeesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.FeesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.FeesGet)
			}
			return
		},
	}

var Get_FinanceContributions_cmd = &cobra.Command{
		Use: `FinanceContributions`,
		Example: tq.JSONHighlight(`{"ContributionID":"string"}`),
		Short: `Get details of a contribution`,
		Long:  `Get details of a contribution.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.FinanceContributionsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.FinanceContributionsGet)
			}
			return
		},
	}

var Get_Formats_cmd = &cobra.Command{
		Use: `Formats`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a format by id`,
		Long:  `Get the details of a format by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.FormatsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.FormatsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.FormatsGet)
			}
			return
		},
	}

var Get_Funds_cmd = &cobra.Command{
		Use: `Funds`,
		Example: tq.JSONHighlight(`{"FundID":"string"}`),
		Short: `Get details of a specific fund`,
		Long:  `Get details of a specific fund`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.FundsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.FundsGet)
			}
			return
		},
	}

var Get_GLAccounts_cmd = &cobra.Command{
		Use: `GLAccounts`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a gl account by id`,
		Long:  `Get the details of a gl account by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.GLAccountsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.GLAccountsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.GLAccountsGet)
			}
			return
		},
	}

var Get_Genders_cmd = &cobra.Command{
		Use: `Genders`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a gender by id`,
		Long:  `Get the details of a gender by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.GendersGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.GendersGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.GendersGet)
			}
			return
		},
	}

var Get_GiftAidContactMethods_cmd = &cobra.Command{
		Use: `GiftAidContactMethods`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a gift aid contact method by id`,
		Long:  `Get the details of a gift aid contact method by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidContactMethodsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidContactMethodsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.GiftAidContactMethodsGet)
			}
			return
		},
	}

var Get_GiftAidDeclarations_cmd = &cobra.Command{
		Use: `GiftAidDeclarations`,
		Example: tq.JSONHighlight(`{"GiftAidDeclarationID":"string"}`),
		Short: `Gets a single Gift Aid Declaration`,
		Long:  `Gets a single Gift Aid Declaration.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidDeclarationsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.GiftAidDeclarationsGet)
			}
			return
		},
	}

var Get_GiftAidDocumentStatuses_cmd = &cobra.Command{
		Use: `GiftAidDocumentStatuses`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a gift aid document status by id`,
		Long:  `Get the details of a gift aid document status by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidDocumentStatusesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidDocumentStatusesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.GiftAidDocumentStatusesGet)
			}
			return
		},
	}

var Get_GiftAidIneligibleReasons_cmd = &cobra.Command{
		Use: `GiftAidIneligibleReasons`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a gift aid ineligible reason by id`,
		Long:  `Get the details of a gift aid ineligible reason by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidIneligibleReasonsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidIneligibleReasonsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.GiftAidIneligibleReasonsGet)
			}
			return
		},
	}

var Get_GiftAidRates_cmd = &cobra.Command{
		Use: `GiftAidRates`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a gift aid rate by id`,
		Long:  `Get the details of a gift aid rate by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidRatesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidRatesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.GiftAidRatesGet)
			}
			return
		},
	}

var Get_GiftAidStatuses_cmd = &cobra.Command{
		Use: `GiftAidStatuses`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a gift aid status by id`,
		Long:  `Get the details of a gift aid status by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidStatusesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidStatusesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.GiftAidStatusesGet)
			}
			return
		},
	}

var Get_GiftAidTypes_cmd = &cobra.Command{
		Use: `GiftAidTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a gift aid type by id`,
		Long:  `Get the details of a gift aid type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.GiftAidTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.GiftAidTypesGet)
			}
			return
		},
	}

var Get_GiftCertificates_cmd = &cobra.Command{
		Use: `GiftCertificates`,
		Example: tq.JSONHighlight(`{"GiftCertificateNumber":"string"}`),
		Short: `Get details of a specific gift certificate`,
		Long:  `Get details of a specific gift certificate.
The original amount, amount used and balance are all returned.  Amounts applied to a current web session are included.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.GiftCertificatesGet)
			return
		},
	}

var Get_HoldCodeCategories_cmd = &cobra.Command{
		Use: `HoldCodeCategories`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Hold Code Category by id`,
		Long:  `Get the details of a Hold Code Category by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.HoldCodeCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.HoldCodeCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.HoldCodeCategoriesGet)
			}
			return
		},
	}

var Get_HoldCodeUserGroups_cmd = &cobra.Command{
		Use: `HoldCodeUserGroups`,
		Example: tq.JSONHighlight(`{"HoldCodeUserGroupID":"string"}`),
		Short: `Get the details of a hold code/user group mapping by id`,
		Long:  `Get the details of a hold code/user group mapping by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.HoldCodeUserGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.HoldCodeUserGroupsGetSummaries)
			} else if test, _ := cmd.Flags().GetBool("Summary"); test {
				err = tq.Do(_tq, _tq.Get.HoldCodeUserGroupsGetSummary)
			} else {
				err = tq.Do(_tq, _tq.Get.HoldCodeUserGroupsGet)
			}
			return
		},
	}

var Get_HoldCodes_cmd = &cobra.Command{
		Use: `HoldCodes`,
		Example: tq.JSONHighlight(`{"HoldCodeID":"string"}`),
		Short: `Get details of a Hold Code`,
		Long:  `Get details of a Hold Code.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.HoldCodesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.HoldCodesGet)
			}
			return
		},
	}

var Get_InactiveReasons_cmd = &cobra.Command{
		Use: `InactiveReasons`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an inactive reason by id`,
		Long:  `Get the details of an inactive reason by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.InactiveReasonsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.InactiveReasonsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.InactiveReasonsGet)
			}
			return
		},
	}

var Get_IntegrationDefaults_cmd = &cobra.Command{
		Use: `IntegrationDefaults`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get the details of an Integration Default by id`,
		Long:  `Get the details of an Integration Default by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.IntegrationDefaultsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.IntegrationDefaultsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.IntegrationDefaultsGet)
			}
			return
		},
	}

var Get_Integrations_cmd = &cobra.Command{
		Use: `Integrations`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an action type by id`,
		Long:  `Get the details of an action type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.IntegrationsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.IntegrationsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.IntegrationsGet)
			}
			return
		},
	}

var Get_InterestCategories_cmd = &cobra.Command{
		Use: `InterestCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an interest category by id`,
		Long:  `Get the details of an interest category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.InterestCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.InterestCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.InterestCategoriesGet)
			}
			return
		},
	}

var Get_InterestTypes_cmd = &cobra.Command{
		Use: `InterestTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an interest type by id`,
		Long:  `Get the details of an interest type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.InterestTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.InterestTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.InterestTypesGet)
			}
			return
		},
	}

var Get_Interests_cmd = &cobra.Command{
		Use: `Interests`,
		Example: tq.JSONHighlight(`{"InterestID":"string"}`),
		Short: `Get details of an interest`,
		Long:  `Get details of an interest.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.InterestsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.InterestsGet)
			}
			return
		},
	}

var Get_Internal_cmd = &cobra.Command{
		Use: `Internal`,
		Example: tq.JSONHighlight(`{"AddressID":"string"}`),
		Short: `Get details of an address and all the phones attached to it`,
		Long:  `Get details of an address and all the phones attached to it.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.InternalGetAll)
			} else if test, _ := cmd.Flags().GetBool("ConstituentMiniSnapshot"); test {
				err = tq.Do(_tq, _tq.Get.InternalGetConstituentMiniSnapshot)
			} else {
				err = tq.Do(_tq, _tq.Get.InternalGet)
			}
			return
		},
	}

var Get_InventoryContactPermissionTypes_cmd = &cobra.Command{
		Use: `InventoryContactPermissionTypes`,
		Example: tq.JSONHighlight(`{"InventoryContactPermissionTypeID":"string"}`),
		Short: `Get details of an inventoryContactPermissionType`,
		Long:  `Get details of an inventoryContactPermissionType.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.InventoryContactPermissionTypesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.InventoryContactPermissionTypesGet)
			}
			return
		},
	}

var Get_InventoryWebContents_cmd = &cobra.Command{
		Use: `InventoryWebContents`,
		Example: tq.JSONHighlight(`{"InventoryWebContentID":"string"}`),
		Short: `Get details of an inventoryWebContent`,
		Long:  `Get details of an inventoryWebContent.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.InventoryWebContentsGetAll)
			} else if test, _ := cmd.Flags().GetBool("AllSummaries"); test {
				err = tq.Do(_tq, _tq.Get.InventoryWebContentsGetAllSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.InventoryWebContentsGet)
			}
			return
		},
	}

var Get_InvoiceBilling_cmd = &cobra.Command{
		Use: `InvoiceBilling`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get status of a processing automated billing run`,
		Long:  `Get status of a processing automated billing run.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.InvoiceBillingStatus)
			return
		},
	}

var Get_Issues_cmd = &cobra.Command{
		Use: `Issues`,
		Example: tq.JSONHighlight(`{"IssueID":"string"}`),
		Short: `Get details of a customer issue`,
		Long:  `Get details of a customer issue.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.IssuesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.IssuesGet)
			}
			return
		},
	}

var Get_KeywordCategories_cmd = &cobra.Command{
		Use: `KeywordCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a keyword category by id`,
		Long:  `Get the details of a keyword category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.KeywordCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.KeywordCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.KeywordCategoriesGet)
			}
			return
		},
	}

var Get_Keywords_cmd = &cobra.Command{
		Use: `Keywords`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a keyword by id`,
		Long:  `Get the details of a keyword by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.KeywordsGetAll)
			} else if test, _ := cmd.Flags().GetBool("DataFor"); test {
				err = tq.Do(_tq, _tq.Get.KeywordsGetDataFor)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.KeywordsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.KeywordsGet)
			}
			return
		},
	}

var Get_Languages_cmd = &cobra.Command{
		Use: `Languages`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a language by id`,
		Long:  `Get the details of a language by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.LanguagesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.LanguagesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.LanguagesGet)
			}
			return
		},
	}

var Get_ListCategories_cmd = &cobra.Command{
		Use: `ListCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a list category by id`,
		Long:  `Get the details of a list category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ListCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ListCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ListCategoriesGet)
			}
			return
		},
	}

var Get_Lists_cmd = &cobra.Command{
		Use: `Lists`,
		Example: tq.JSONHighlight(`{"ListID":"string"}`),
		Short: `Get a single List without contents`,
		Long:  `Get a single List without contents.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Contents"); test {
				err = tq.Do(_tq, _tq.Get.ListsGetContents)
			} else if test, _ := cmd.Flags().GetBool("ContentsDetail"); test {
				err = tq.Do(_tq, _tq.Get.ListsGetContentsDetail)
			} else if test, _ := cmd.Flags().GetBool("ListCriterionMatchReasons"); test {
				err = tq.Do(_tq, _tq.Get.ListsGetListCriterionMatchReasons)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ListsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ListsGet)
			}
			return
		},
	}

var Get_LoginTypes_cmd = &cobra.Command{
		Use: `LoginTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a login type by id`,
		Long:  `Get the details of a login type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.LoginTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.LoginTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.LoginTypesGet)
			}
			return
		},
	}

var Get_MachineSettings_cmd = &cobra.Command{
		Use: `MachineSettings`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Machine Setting by id`,
		Long:  `Get the details of a Machine Setting by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.MachineSettingsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.MachineSettingsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.MachineSettingsGet)
			}
			return
		},
	}

var Get_MailIndicators_cmd = &cobra.Command{
		Use: `MailIndicators`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a mail indicator by id`,
		Long:  `Get the details of a mail indicator by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.MailIndicatorsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.MailIndicatorsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.MailIndicatorsGet)
			}
			return
		},
	}

var Get_MediaTypes_cmd = &cobra.Command{
		Use: `MediaTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a media type by id`,
		Long:  `Get the details of a media type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.MediaTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.MediaTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.MediaTypesGet)
			}
			return
		},
	}

var Get_MembershipLevelCategories_cmd = &cobra.Command{
		Use: `MembershipLevelCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a membership level category by id`,
		Long:  `Get the details of a membership level category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.MembershipLevelCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.MembershipLevelCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.MembershipLevelCategoriesGet)
			}
			return
		},
	}

var Get_MembershipLevels_cmd = &cobra.Command{
		Use: `MembershipLevels`,
		Example: tq.JSONHighlight(`{"MembershipLevelID":"string"}`),
		Short: `Get a specific membership level`,
		Long:  `Get a specific membership level.
NOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.MembershipLevelsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.MembershipLevelsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.MembershipLevelsGet)
			}
			return
		},
	}

var Get_MembershipOrganizations_cmd = &cobra.Command{
		Use: `MembershipOrganizations`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get a specific membership organization`,
		Long:  `Get a specific membership organization.
NOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.MembershipOrganizationsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.MembershipOrganizationsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.MembershipOrganizationsGet)
			}
			return
		},
	}

var Get_MembershipStandings_cmd = &cobra.Command{
		Use: `MembershipStandings`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get a specific MembershipStanding by id`,
		Long:  `Get a specific MembershipStanding by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.MembershipStandingsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.MembershipStandingsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.MembershipStandingsGet)
			}
			return
		},
	}

var Get_Memberships_cmd = &cobra.Command{
		Use: `Memberships`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string", "MembershipOrgIds":"string", "OnlyShowCurrent":"string", "OnlyShowDefault":"string"}`),
		Short: `Returns membership details for a constituent`,
		Long:  `Returns membership details for a constituent.
NOTE: As part of the upcoming changes to membership functionality, this resource will change significantly in an upcoming major Tessitura release and likely break code that references it. Please make a note that code that references it will need to be revisited as part of that upgrade process.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.MembershipsGetAll)
			return
		},
	}

var Get_MerchantReferences_cmd = &cobra.Command{
		Use: `MerchantReferences`,
		Example: tq.JSONHighlight(`{"MerchantAccount":"string", "PaymentID":"string"}`),
		Short: ``,
		Long:  ``,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.MerchantReferencesReference)
			return
		},
	}

var Get_Merchants_cmd = &cobra.Command{
		Use: `Merchants`,
		Example: tq.JSONHighlight(``),
		Short: `Retrieve Merchant List`,
		Long:  `Retrieve Merchant List`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.MerchantsGetMerchants)
			return
		},
	}

var Get_ModeOfSaleCategories_cmd = &cobra.Command{
		Use: `ModeOfSaleCategories`,
		Example: tq.JSONHighlight(`{"ModeOfSaleCategoryID":"string"}`),
		Short: `Get details of a mode of sale category`,
		Long:  `Get details of a mode of sale category.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ModeOfSaleCategoriesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ModeOfSaleCategoriesGet)
			}
			return
		},
	}

var Get_ModeOfSaleOffers_cmd = &cobra.Command{
		Use: `ModeOfSaleOffers`,
		Example: tq.JSONHighlight(`{"ModeOfSaleOfferID":"string"}`),
		Short: `Get details of a mode of sale offer`,
		Long:  `Get details of a mode of sale offer.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ModeOfSaleOffersGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ModeOfSaleOffersGet)
			}
			return
		},
	}

var Get_ModeOfSalePriceTypes_cmd = &cobra.Command{
		Use: `ModeOfSalePriceTypes`,
		Example: tq.JSONHighlight(`{"ModeOfSalePriceTypeID":"string"}`),
		Short: `Get details of a mode of sale price type`,
		Long:  `Get details of a mode of sale price type.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ModeOfSalePriceTypesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ModeOfSalePriceTypesGet)
			}
			return
		},
	}

var Get_ModeOfSaleSurveyQuestions_cmd = &cobra.Command{
		Use: `ModeOfSaleSurveyQuestions`,
		Example: tq.JSONHighlight(`{"ModeOfSaleSurveyQuestionID":"string"}`),
		Short: `Get details of a mode of sale survey question`,
		Long:  `Get details of a mode of sale survey question.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ModeOfSaleSurveyQuestionsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ModeOfSaleSurveyQuestionsGet)
			}
			return
		},
	}

var Get_ModeOfSaleUserGroups_cmd = &cobra.Command{
		Use: `ModeOfSaleUserGroups`,
		Example: tq.JSONHighlight(`{"ModeOfSaleUserGroupID":"string"}`),
		Short: `Get the details of a mode of sale/user group mapping by id`,
		Long:  `Get the details of a mode of sale/user group mapping by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ModeOfSaleUserGroupsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ModeOfSaleUserGroupsGet)
			}
			return
		},
	}

var Get_ModesOfSale_cmd = &cobra.Command{
		Use: `ModesOfSale`,
		Example: tq.JSONHighlight(`{"ModeOfSaleID":"string"}`),
		Short: `Get details of an existing mode of sale`,
		Long:  `Get details of an existing mode of sale.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ModesOfSaleGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ModesOfSaleGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ModesOfSaleGet)
			}
			return
		},
	}

var Get_NScanAccessAreas_cmd = &cobra.Command{
		Use: `NScanAccessAreas`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an NScan Access Area by id`,
		Long:  `Get the details of an NScan Access Area by id. To get the resource only if the user has write/edit access, pass filter="writeonly".. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.NScanAccessAreasGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.NScanAccessAreasGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.NScanAccessAreasGet)
			}
			return
		},
	}

var Get_NameStatuses_cmd = &cobra.Command{
		Use: `NameStatuses`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a name status by id`,
		Long:  `Get the details of a name status by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.NameStatusesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.NameStatusesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.NameStatusesGet)
			}
			return
		},
	}

var Get_ObjectPermissions_cmd = &cobra.Command{
		Use: `ObjectPermissions`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get the details of an object permission by id`,
		Long:  `Get the details of an object permission by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ObjectPermissionsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ObjectPermissionsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ObjectPermissionsGet)
			}
			return
		},
	}

var Get_OrderBilling_cmd = &cobra.Command{
		Use: `OrderBilling`,
		Example: tq.JSONHighlight(`{"OrderBillingID":"string"}`),
		Short: `Reprint Order billing`,
		Long:  `Reprint Order billing`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Status"); test {
				err = tq.Do(_tq, _tq.Get.OrderBillingStatus)
			} else {
				err = tq.Do(_tq, _tq.Get.OrderBillingReprint)
			}
			return
		},
	}

var Get_OrderCategories_cmd = &cobra.Command{
		Use: `OrderCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an order category by id`,
		Long:  `Get the details of an order category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.OrderCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.OrderCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.OrderCategoriesGet)
			}
			return
		},
	}

var Get_Orders_cmd = &cobra.Command{
		Use: `Orders`,
		Example: tq.JSONHighlight(`{"OrderID":"string"}`),
		Short: `Get the details of an existing Order as the contract OrderProductsView`,
		Long:  `Get the details of an existing Order as the contract OrderProductsView, which mirrors the structure of the Cart response entity from GET Web/{sessionKey}/Cart. This resource can be used to fetch any saved order in this view. Order HTML templates use this response contract (OrdersProductsView) as the model within the template. Orders actively in a session/cart will not be available here until after checkout.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.OrdersGetProductsView)
			return
		},
	}

var Get_Organizations_cmd = &cobra.Command{
		Use: `Organizations`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an organization by ID`,
		Long:  `Get the details of an organization by ID. To get the resource in maintenance mode (ignoring control groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.OrganizationsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.OrganizationsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.OrganizationsGet)
			}
			return
		},
	}

var Get_OriginalSources_cmd = &cobra.Command{
		Use: `OriginalSources`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an original source by id`,
		Long:  `Get the details of an original source by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.OriginalSourcesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.OriginalSourcesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.OriginalSourcesGet)
			}
			return
		},
	}

var Get_Origins_cmd = &cobra.Command{
		Use: `Origins`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an origin by id`,
		Long:  `Get the details of an origin by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.OriginsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.OriginsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.OriginsGet)
			}
			return
		},
	}

var Get_OutputSets_cmd = &cobra.Command{
		Use: `OutputSets`,
		Example: tq.JSONHighlight(`{"OutputSetID":"string"}`),
		Short: `Get a single Output Set`,
		Long:  `Get a single Output Set.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.OutputSetsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.OutputSetsGet)
			}
			return
		},
	}

var Get_PackageHistory_cmd = &cobra.Command{
		Use: `PackageHistory`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string", "OrderEndDate":"string", "OrderStartDate":"string", "PackageID":"string", "PackageTypeID":"string", "SeasonID":"string"}`),
		Short: `Gets history information for packages`,
		Long:  `Gets history information for packages`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.PackageHistoryGetAll)
			return
		},
	}

var Get_PackagePriceTypes_cmd = &cobra.Command{
		Use: `PackagePriceTypes`,
		Example: tq.JSONHighlight(`{"PackagePriceTypeID":"string"}`),
		Short: `Get details of a specific package price type`,
		Long:  `Get details of a specific package price type.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PackagePriceTypesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PackagePriceTypesGet)
			}
			return
		},
	}

var Get_PackageTypes_cmd = &cobra.Command{
		Use: `PackageTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a package type by id`,
		Long:  `Get the details of a package type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PackageTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PackageTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PackageTypesGet)
			}
			return
		},
	}

var Get_PackageWebContents_cmd = &cobra.Command{
		Use: `PackageWebContents`,
		Example: tq.JSONHighlight(`{"PackageWebContentID":"string"}`),
		Short: `Get details of a packageWebContent`,
		Long:  `Get details of a packageWebContent.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PackageWebContentsGetAll)
			} else if test, _ := cmd.Flags().GetBool("AllSummaries"); test {
				err = tq.Do(_tq, _tq.Get.PackageWebContentsGetAllSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PackageWebContentsGet)
			}
			return
		},
	}

var Get_Packages_cmd = &cobra.Command{
		Use: `Packages`,
		Example: tq.JSONHighlight(`{"PackageID":"string"}`),
		Short: `Get details of a package`,
		Long:  `Get details of a package.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PackagesGetAll)
			} else if test, _ := cmd.Flags().GetBool("PackageDetail"); test {
				err = tq.Do(_tq, _tq.Get.PackagesGetPackageDetail)
			} else if test, _ := cmd.Flags().GetBool("PerformanceGroupDetails"); test {
				err = tq.Do(_tq, _tq.Get.PackagesGetPerformanceGroupDetails)
			} else if test, _ := cmd.Flags().GetBool("Prices"); test {
				err = tq.Do(_tq, _tq.Get.PackagesGetPrices)
			} else if test, _ := cmd.Flags().GetBool("SeatFees"); test {
				err = tq.Do(_tq, _tq.Get.PackagesGetSeatFees)
			} else if test, _ := cmd.Flags().GetBool("SeatSummaries"); test {
				err = tq.Do(_tq, _tq.Get.PackagesGetSeatSummaries)
			} else if test, _ := cmd.Flags().GetBool("Seats"); test {
				err = tq.Do(_tq, _tq.Get.PackagesGetSeats)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PackagesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PackagesGet)
			}
			return
		},
	}

var Get_PaymentGatewayActivities_cmd = &cobra.Command{
		Use: `PaymentGatewayActivities`,
		Example: tq.JSONHighlight(`{"PaymentGatewayActivityID":"string"}`),
		Short: `Get a single Payment Gateway Activity`,
		Long:  `Get a single Payment Gateway Activity`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PaymentGatewayActivitiesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PaymentGatewayActivitiesGet)
			}
			return
		},
	}

var Get_PaymentGatewayConfiguration_cmd = &cobra.Command{
		Use: `PaymentGatewayConfiguration`,
		Example: tq.JSONHighlight(``),
		Short: `Retrieve Payment Gateway Configuration`,
		Long:  `Retrieve Payment Gateway Configuration`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.PaymentGatewayConfigurationGetConfiguration)
			return
		},
	}

var Get_PaymentGatewayNotifications_cmd = &cobra.Command{
		Use: `PaymentGatewayNotifications`,
		Example: tq.JSONHighlight(`{"NotificationType":"string", "Reference":"string"}`),
		Short: `Get all notification events by reference`,
		Long:  `Get all notification events by reference.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Check"); test {
				err = tq.Do(_tq, _tq.Get.PaymentGatewayNotificationsCheck)
			} else if test, _ := cmd.Flags().GetBool("Notification"); test {
				err = tq.Do(_tq, _tq.Get.PaymentGatewayNotificationsGetNotification)
			} else if test, _ := cmd.Flags().GetBool("NotificationEvent"); test {
				err = tq.Do(_tq, _tq.Get.PaymentGatewayNotificationsGetNotificationEvent)
			} else {
				err = tq.Do(_tq, _tq.Get.PaymentGatewayNotificationsGetAllNotificationEvents)
			}
			return
		},
	}

var Get_PaymentGatewayTransactionTypes_cmd = &cobra.Command{
		Use: `PaymentGatewayTransactionTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Payment Gateway Transaction Type by id`,
		Long:  `Get the details of a Payment Gateway Transaction Type by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PaymentGatewayTransactionTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PaymentGatewayTransactionTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PaymentGatewayTransactionTypesGet)
			}
			return
		},
	}

var Get_PaymentHistory_cmd = &cobra.Command{
		Use: `PaymentHistory`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string", "EndDate":"string", "IncludeAffiliates":"string", "Page":"string", "PageSize":"string", "PaymentTypeID":"string", "SortByDirection":"string", "SortByField":"string", "StartDate":"string", "TransactionID":"string"}`),
		Short: `Gets history information for payments by constituent`,
		Long:  `Gets history information for payments by constituent.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.PaymentHistoryGetAll)
			return
		},
	}

var Get_PaymentMethodGroups_cmd = &cobra.Command{
		Use: `PaymentMethodGroups`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a payment method group by id`,
		Long:  `Get the details of a payment method group by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PaymentMethodGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PaymentMethodGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PaymentMethodGroupsGet)
			}
			return
		},
	}

var Get_PaymentMethodUserGroups_cmd = &cobra.Command{
		Use: `PaymentMethodUserGroups`,
		Example: tq.JSONHighlight(`{"PaymentMethodUserGroupID":"string"}`),
		Short: `Get details of a payment method/user group mapping by id`,
		Long:  `Get details of a payment method/user group mapping by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PaymentMethodUserGroupsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PaymentMethodUserGroupsGet)
			}
			return
		},
	}

var Get_PaymentMethods_cmd = &cobra.Command{
		Use: `PaymentMethods`,
		Example: tq.JSONHighlight(`{"PaymentMethodID":"string"}`),
		Short: `Get details of a payment method`,
		Long:  `Get details of a payment method.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PaymentMethodsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Check"); test {
				err = tq.Do(_tq, _tq.Get.PaymentMethodsCheck)
			} else if test, _ := cmd.Flags().GetBool("TranslateMnemonic"); test {
				err = tq.Do(_tq, _tq.Get.PaymentMethodsTranslateMnemonic)
			} else {
				err = tq.Do(_tq, _tq.Get.PaymentMethodsGet)
			}
			return
		},
	}

var Get_PaymentSignatures_cmd = &cobra.Command{
		Use: `PaymentSignatures`,
		Example: tq.JSONHighlight(`{"PaymentSignatureID":"string"}`),
		Short: `Get details of a payment signature`,
		Long:  `Get details of a payment signature.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PaymentSignaturesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PaymentSignaturesGet)
			}
			return
		},
	}

var Get_PaymentTypes_cmd = &cobra.Command{
		Use: `PaymentTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a payment type by id`,
		Long:  `Get the details of a payment type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PaymentTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PaymentTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PaymentTypesGet)
			}
			return
		},
	}

var Get_Payments_cmd = &cobra.Command{
		Use: `Payments`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get a single payment`,
		Long:  `Get a single payment.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PaymentsGetAll)
			} else if test, _ := cmd.Flags().GetBool("AvailableForRefund"); test {
				err = tq.Do(_tq, _tq.Get.PaymentsAvailableForRefund)
			} else if test, _ := cmd.Flags().GetBool("OnAccountBalances"); test {
				err = tq.Do(_tq, _tq.Get.PaymentsGetOnAccountBalances)
			} else {
				err = tq.Do(_tq, _tq.Get.PaymentsGet)
			}
			return
		},
	}

var Get_PerformanceGroups_cmd = &cobra.Command{
		Use: `PerformanceGroups`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get details of a Performance Group`,
		Long:  `Get details of a Performance Group.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PerformanceGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PerformanceGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PerformanceGroupsGet)
			}
			return
		},
	}

var Get_PerformancePackageModeOfSales_cmd = &cobra.Command{
		Use: `PerformancePackageModeOfSales`,
		Example: tq.JSONHighlight(`{"PerformancePackageModeOfSaleID":"string"}`),
		Short: `Get details of a performance package mode of sale`,
		Long:  `Get details of a performance package mode of sale.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PerformancePackageModeOfSalesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PerformancePackageModeOfSalesGet)
			}
			return
		},
	}

var Get_PerformancePriceLayers_cmd = &cobra.Command{
		Use: `PerformancePriceLayers`,
		Example: tq.JSONHighlight(`{"AsOfDateTime":"string", "PerformancePriceLayerID":"string"}`),
		Short: `Get details of a performance price layer`,
		Long:  `Get details of a performance price layer.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Counts"); test {
				err = tq.Do(_tq, _tq.Get.PerformancePriceLayersGetCounts)
			} else if test, _ := cmd.Flags().GetBool("PriceCount"); test {
				err = tq.Do(_tq, _tq.Get.PerformancePriceLayersGetPriceCount)
			} else {
				err = tq.Do(_tq, _tq.Get.PerformancePriceLayersGet)
			}
			return
		},
	}

var Get_PerformancePriceTypes_cmd = &cobra.Command{
		Use: `PerformancePriceTypes`,
		Example: tq.JSONHighlight(`{"AsOfDateTime":"string", "PerformancePriceTypeID":"string"}`),
		Short: `Get details of a performance price type`,
		Long:  `Get details of a performance price type.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PerformancePriceTypesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PerformancePriceTypesGet)
			}
			return
		},
	}

var Get_PerformancePrices_cmd = &cobra.Command{
		Use: `PerformancePrices`,
		Example: tq.JSONHighlight(`{"AsOfDateTime":"string", "PerformancePriceID":"string"}`),
		Short: `Get details of a performance price`,
		Long:  `Get details of a performance price.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PerformancePricesGetAll)
			} else if test, _ := cmd.Flags().GetBool("AllWithEvents"); test {
				err = tq.Do(_tq, _tq.Get.PerformancePricesGetAllWithEvents)
			} else if test, _ := cmd.Flags().GetBool("Audit"); test {
				err = tq.Do(_tq, _tq.Get.PerformancePricesGetAudit)
			} else {
				err = tq.Do(_tq, _tq.Get.PerformancePricesGet)
			}
			return
		},
	}

var Get_PerformanceStatuses_cmd = &cobra.Command{
		Use: `PerformanceStatuses`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a performance status by id`,
		Long:  `Get the details of a performance status by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PerformanceStatusesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PerformanceStatusesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PerformanceStatusesGet)
			}
			return
		},
	}

var Get_PerformanceTypes_cmd = &cobra.Command{
		Use: `PerformanceTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a performance type by id`,
		Long:  `Get the details of a performance type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PerformanceTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PerformanceTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PerformanceTypesGet)
			}
			return
		},
	}

var Get_Performances_cmd = &cobra.Command{
		Use: `Performances`,
		Example: tq.JSONHighlight(`{"PerformanceID":"string"}`),
		Short: `Get details of a performance`,
		Long:  `Get details of a performance.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetAll)
			} else if test, _ := cmd.Flags().GetBool("AuditEntries"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetAuditEntries)
			} else if test, _ := cmd.Flags().GetBool("PerformanceZoneAvailabilities"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetPerformanceZoneAvailabilities)
			} else if test, _ := cmd.Flags().GetBool("PerformanceZoneAvailabilityWithConstituent"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetPerformanceZoneAvailabilityWithConstituent)
			} else if test, _ := cmd.Flags().GetBool("Prices"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetPrices)
			} else if test, _ := cmd.Flags().GetBool("SeatFees"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetSeatFees)
			} else if test, _ := cmd.Flags().GetBool("SeatHoldDetails"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetSeatHoldDetails)
			} else if test, _ := cmd.Flags().GetBool("SeatSummaries"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetSeatSummaries)
			} else if test, _ := cmd.Flags().GetBool("Seats"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetSeats)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PerformancesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PerformancesGet)
			}
			return
		},
	}

var Get_Philanthropy_cmd = &cobra.Command{
		Use: `Philanthropy`,
		Example: tq.JSONHighlight(`{"PhilanthropyEntryID":"string"}`),
		Short: `Get details of an philanthropyEntry`,
		Long:  `Get details of an philanthropyEntry.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PhilanthropyGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PhilanthropyGet)
			}
			return
		},
	}

var Get_PhilanthropyTypes_cmd = &cobra.Command{
		Use: `PhilanthropyTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of philosophy type by id`,
		Long:  `Get the details of philosophy type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PhilanthropyTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PhilanthropyTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PhilanthropyTypesGet)
			}
			return
		},
	}

var Get_PhoneIndicators_cmd = &cobra.Command{
		Use: `PhoneIndicators`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a phone indicator by id`,
		Long:  `Get the details of a phone indicator by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PhoneIndicatorsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PhoneIndicatorsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PhoneIndicatorsGet)
			}
			return
		},
	}

var Get_PhoneTypes_cmd = &cobra.Command{
		Use: `PhoneTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a phone type by id`,
		Long:  `Get the details of a phone type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PhoneTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PhoneTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PhoneTypesGet)
			}
			return
		},
	}

var Get_Phones_cmd = &cobra.Command{
		Use: `Phones`,
		Example: tq.JSONHighlight(`{"PhoneID":"string"}`),
		Short: `Get details of a phone`,
		Long:  `Get details of a phone.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PhonesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PhonesGet)
			}
			return
		},
	}

var Get_PlanPriorities_cmd = &cobra.Command{
		Use: `PlanPriorities`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a plan priority by id`,
		Long:  `Get the details of a plan priority by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PlanPrioritiesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PlanPrioritiesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PlanPrioritiesGet)
			}
			return
		},
	}

var Get_PlanSources_cmd = &cobra.Command{
		Use: `PlanSources`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a plan source by id`,
		Long:  `Get the details of a plan source by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PlanSourcesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PlanSourcesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PlanSourcesGet)
			}
			return
		},
	}

var Get_PlanStatuses_cmd = &cobra.Command{
		Use: `PlanStatuses`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a plan status by id`,
		Long:  `Get the details of a plan status by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PlanStatusesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PlanStatusesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PlanStatusesGet)
			}
			return
		},
	}

var Get_PlanTypes_cmd = &cobra.Command{
		Use: `PlanTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a plan type by id`,
		Long:  `Get the details of a plan type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PlanTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PlanTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PlanTypesGet)
			}
			return
		},
	}

var Get_PlanWorkers_cmd = &cobra.Command{
		Use: `PlanWorkers`,
		Example: tq.JSONHighlight(`{"PlanWorkerID":"string"}`),
		Short: `Get details of a plan worker`,
		Long:  `Get details of a plan worker.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PlanWorkersGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PlanWorkersGet)
			}
			return
		},
	}

var Get_Plans_cmd = &cobra.Command{
		Use: `Plans`,
		Example: tq.JSONHighlight(`{"PlanID":"string"}`),
		Short: `Get details of a plan`,
		Long:  `Get details of a plan.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PlansGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PlansGet)
			}
			return
		},
	}

var Get_PledgeBilling_cmd = &cobra.Command{
		Use: `PledgeBilling`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get status of a pledge billing run`,
		Long:  `Get status of a pledge billing run. Job is finished processing when IsCompleted is true.  Only billing runs using automated billing will be running after the response from a POST to Txn/PledgeBilling.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.PledgeBillingGetStatus)
			return
		},
	}

var Get_PortfolioCustomElements_cmd = &cobra.Command{
		Use: `PortfolioCustomElements`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a portfolio custom element by id`,
		Long:  `Get the details of a portfolio custom element by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PortfolioCustomElementsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PortfolioCustomElementsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PortfolioCustomElementsGet)
			}
			return
		},
	}

var Get_Portfolios_cmd = &cobra.Command{
		Use: `Portfolios`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string", "Page":"string", "PageSize":"string", "PlanCustomColumns":"string", "PortfolioCustomColumns":"string", "PrimaryOnly":"string", "StatusIds":"string", "WorkerRoleIds":"string"}`),
		Short: `Get portfolio for a constituent`,
		Long:  `Get portfolio for a constituent.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("PortfolioEntry"); test {
				err = tq.Do(_tq, _tq.Get.PortfoliosGetPortfolioEntry)
			} else {
				err = tq.Do(_tq, _tq.Get.PortfoliosGet)
			}
			return
		},
	}

var Get_Prefixes_cmd = &cobra.Command{
		Use: `Prefixes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a prefix by id`,
		Long:  `Get the details of a prefix by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PrefixesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PrefixesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PrefixesGet)
			}
			return
		},
	}

var Get_Premieres_cmd = &cobra.Command{
		Use: `Premieres`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a premiere by id`,
		Long:  `Get the details of a premiere by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PremieresGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PremieresGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PremieresGet)
			}
			return
		},
	}

var Get_PriceCategories_cmd = &cobra.Command{
		Use: `PriceCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a price category by id`,
		Long:  `Get the details of a price category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PriceCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PriceCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PriceCategoriesGet)
			}
			return
		},
	}

var Get_PriceEvents_cmd = &cobra.Command{
		Use: `PriceEvents`,
		Example: tq.JSONHighlight(`{"PriceEventID":"string"}`),
		Short: `Get details of a price event`,
		Long:  `Get details of a price event.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PriceEventsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Dates"); test {
				err = tq.Do(_tq, _tq.Get.PriceEventsGetDates)
			} else {
				err = tq.Do(_tq, _tq.Get.PriceEventsGet)
			}
			return
		},
	}

var Get_PriceLayerTypes_cmd = &cobra.Command{
		Use: `PriceLayerTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a price layer type by id`,
		Long:  `Get the details of a price layer type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PriceLayerTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PriceLayerTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PriceLayerTypesGet)
			}
			return
		},
	}

var Get_PriceTemplates_cmd = &cobra.Command{
		Use: `PriceTemplates`,
		Example: tq.JSONHighlight(`{"PriceTemplateID":"string"}`),
		Short: `Get details of a price template`,
		Long:  `Get details of a price template.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PriceTemplatesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PriceTemplatesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PriceTemplatesGet)
			}
			return
		},
	}

var Get_PriceTypeCategories_cmd = &cobra.Command{
		Use: `PriceTypeCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a price type category by id`,
		Long:  `Get the details of a price type category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypeCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypeCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PriceTypeCategoriesGet)
			}
			return
		},
	}

var Get_PriceTypeGroups_cmd = &cobra.Command{
		Use: `PriceTypeGroups`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a price type group by id`,
		Long:  `Get the details of a price type group by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypeGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypeGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PriceTypeGroupsGet)
			}
			return
		},
	}

var Get_PriceTypeReasons_cmd = &cobra.Command{
		Use: `PriceTypeReasons`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a price type reason by id`,
		Long:  `Get the details of a price type reason by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypeReasonsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypeReasonsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PriceTypeReasonsGet)
			}
			return
		},
	}

var Get_PriceTypeUserGroups_cmd = &cobra.Command{
		Use: `PriceTypeUserGroups`,
		Example: tq.JSONHighlight(`{"PriceTypeUserGroupID":"string"}`),
		Short: `Get details of a price type/user group mapping by id`,
		Long:  `Get details of a price type/user group mapping by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypeUserGroupsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.PriceTypeUserGroupsGet)
			}
			return
		},
	}

var Get_PriceTypes_cmd = &cobra.Command{
		Use: `PriceTypes`,
		Example: tq.JSONHighlight(`{"PriceTypeID":"string"}`),
		Short: `Get details of a price type`,
		Long:  `Get details of a price type.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Reasons"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypesGetReasons)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypesGetSummaries)
			} else if test, _ := cmd.Flags().GetBool("ValidPriceTypes"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypesGetValidPriceTypes)
			} else if test, _ := cmd.Flags().GetBool("ValidZones"); test {
				err = tq.Do(_tq, _tq.Get.PriceTypesGetValidZones)
			} else {
				err = tq.Do(_tq, _tq.Get.PriceTypesGet)
			}
			return
		},
	}

var Get_PricingRuleCategories_cmd = &cobra.Command{
		Use: `PricingRuleCategories`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a pricing rule category by id`,
		Long:  `Get the details of a pricing rule category by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PricingRuleCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PricingRuleCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PricingRuleCategoriesGet)
			}
			return
		},
	}

var Get_PricingRuleMessageTypes_cmd = &cobra.Command{
		Use: `PricingRuleMessageTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a pricing rule message type by id`,
		Long:  `Get the details of a pricing rule message type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PricingRuleMessageTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PricingRuleMessageTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PricingRuleMessageTypesGet)
			}
			return
		},
	}

var Get_PricingRuleSets_cmd = &cobra.Command{
		Use: `PricingRuleSets`,
		Example: tq.JSONHighlight(`{"PricingRuleSetID":"string"}`),
		Short: `Get details of a pricing rule set`,
		Long:  `Get details of a pricing rule set.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PricingRuleSetsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PricingRuleSetsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PricingRuleSetsGet)
			}
			return
		},
	}

var Get_PricingRuleTypes_cmd = &cobra.Command{
		Use: `PricingRuleTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a pricing rule type by id`,
		Long:  `Get the details of a pricing rule type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PricingRuleTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PricingRuleTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PricingRuleTypesGet)
			}
			return
		},
	}

var Get_PricingRules_cmd = &cobra.Command{
		Use: `PricingRules`,
		Example: tq.JSONHighlight(`{"PricingRuleID":"string"}`),
		Short: `Get details of a pricing rule`,
		Long:  `Get details of a pricing rule.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PricingRulesGetAll)
			} else if test, _ := cmd.Flags().GetBool("AllSummary"); test {
				err = tq.Do(_tq, _tq.Get.PricingRulesGetAllSummary)
			} else {
				err = tq.Do(_tq, _tq.Get.PricingRulesGet)
			}
			return
		},
	}

var Get_Printers_cmd = &cobra.Command{
		Use: `Printers`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a printer by id`,
		Long:  `Get the details of a printer by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PrintersGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PrintersGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PrintersGet)
			}
			return
		},
	}

var Get_ProductKeywords_cmd = &cobra.Command{
		Use: `ProductKeywords`,
		Example: tq.JSONHighlight(`{"KeywordIds":"string", "PackageIds":"string", "ProductionElementIds":"string", "ShowAll":"string"}`),
		Short: `Returns keywords for the requested production elements or packages`,
		Long:  `Returns keywords for the requested production elements or packages.

For Production Elements: If the keyword is found, returns the keyword and the lowest level at which it was found in the production hierarchy (Title, Production, Production Season, Performance) for the requested element. Optionally, all matching keywords anywhere above the requested element in the production hierarchy can be returned with the ShowAll parameter.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.ProductKeywordsGetKeywords)
			return
		},
	}

var Get_ProductionSeasonMembershipOrganizations_cmd = &cobra.Command{
		Use: `ProductionSeasonMembershipOrganizations`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get details of a specific production season membership organization`,
		Long:  `Get details of a specific production season membership organization.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ProductionSeasonMembershipOrganizationsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ProductionSeasonMembershipOrganizationsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ProductionSeasonMembershipOrganizationsGet)
			}
			return
		},
	}

var Get_ProductionSeasons_cmd = &cobra.Command{
		Use: `ProductionSeasons`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get details of a specific production season`,
		Long:  `Get details of a specific production season.
Returns the full details for a single production season, including description and short description, season, first and last performance date, and the four ticket text lines.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ProductionSeasonsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ProductionSeasonsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ProductionSeasonsGet)
			}
			return
		},
	}

var Get_Productions_cmd = &cobra.Command{
		Use: `Productions`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get details of a specific production`,
		Long:  `Get details of a specific production.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ProductionsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ProductionsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ProductionsGet)
			}
			return
		},
	}

var Get_ProgramListings_cmd = &cobra.Command{
		Use: `ProgramListings`,
		Example: tq.JSONHighlight(`{"ProgramListingID":"string"}`),
		Short: `Get details of a program listing`,
		Long:  `Get details of a program listing.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ProgramListingsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ProgramListingsGet)
			}
			return
		},
	}

var Get_Programs_cmd = &cobra.Command{
		Use: `Programs`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a program by id`,
		Long:  `Get the details of a program by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ProgramsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ProgramsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ProgramsGet)
			}
			return
		},
	}

var Get_Pronouns_cmd = &cobra.Command{
		Use: `Pronouns`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: ``,
		Long:  ``,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.PronounsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.PronounsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.PronounsGet)
			}
			return
		},
	}

var Get_QualificationCategories_cmd = &cobra.Command{
		Use: `QualificationCategories`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Qualification Category by id`,
		Long:  `Get the details of a Qualification Category by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.QualificationCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.QualificationCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.QualificationCategoriesGet)
			}
			return
		},
	}

var Get_Qualifications_cmd = &cobra.Command{
		Use: `Qualifications`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Qualification by id`,
		Long:  `Get the details of a Qualification by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.QualificationsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.QualificationsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.QualificationsGet)
			}
			return
		},
	}

var Get_QueryElementFilters_cmd = &cobra.Command{
		Use: `QueryElementFilters`,
		Example: tq.JSONHighlight(`{"QueryElementFilterID":"string"}`),
		Short: `Get a specific query element filter`,
		Long:  `Get a specific query element filter.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.QueryElementFiltersGetAll)
			} else if test, _ := cmd.Flags().GetBool("DataFor"); test {
				err = tq.Do(_tq, _tq.Get.QueryElementFiltersGetDataFor)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.QueryElementFiltersGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.QueryElementFiltersGet)
			}
			return
		},
	}

var Get_QueryElementGroups_cmd = &cobra.Command{
		Use: `QueryElementGroups`,
		Example: tq.JSONHighlight(`{"QueryElementGroupID":"string"}`),
		Short: `Get the details of a query element group by id`,
		Long:  `Get the details of a query element group by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.QueryElementGroupsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.QueryElementGroupsGet)
			}
			return
		},
	}

var Get_QueryElements_cmd = &cobra.Command{
		Use: `QueryElements`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get details of a query element by id`,
		Long:  `Get details of a query element by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.QueryElementsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.QueryElementsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.QueryElementsGet)
			}
			return
		},
	}

var Get_RankTypes_cmd = &cobra.Command{
		Use: `RankTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a rank type by id`,
		Long:  `Get the details of a rank type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.RankTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.RankTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.RankTypesGet)
			}
			return
		},
	}

var Get_Rankings_cmd = &cobra.Command{
		Use: `Rankings`,
		Example: tq.JSONHighlight(`{"RankingID":"string"}`),
		Short: `Get details of a ranking`,
		Long:  `Get details of a ranking.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.RankingsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.RankingsGet)
			}
			return
		},
	}

var Get_ReceiptSettings_cmd = &cobra.Command{
		Use: `ReceiptSettings`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Receipt Setting by id`,
		Long:  `Get the details of a Receipt Setting by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ReceiptSettingsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ReceiptSettingsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ReceiptSettingsGet)
			}
			return
		},
	}

var Get_ReferenceColumns_cmd = &cobra.Command{
		Use: `ReferenceColumns`,
		Example: tq.JSONHighlight(`{"MaintenanceMode":"string"}`),
		Short: `Get all reference columns`,
		Long:  `Get all reference columns. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ReferenceColumnsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ReferenceColumnsGetAll)
			}
			return
		},
	}

var Get_ReferenceTableUserGroups_cmd = &cobra.Command{
		Use: `ReferenceTableUserGroups`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get the details of a reference table/user group mapping by id`,
		Long:  `Get the details of a reference table/user group mapping by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ReferenceTableUserGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ReferenceTableUserGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ReferenceTableUserGroupsGet)
			}
			return
		},
	}

var Get_ReferenceTables_cmd = &cobra.Command{
		Use: `ReferenceTables`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get details for a reference table by Id`,
		Long:  `Get details for a reference table by Id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ReferenceTablesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ReferenceTablesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ReferenceTablesGet)
			}
			return
		},
	}

var Get_RelationshipCategories_cmd = &cobra.Command{
		Use: `RelationshipCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a relationship category by id`,
		Long:  `Get the details of a relationship category by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.RelationshipCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.RelationshipCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.RelationshipCategoriesGet)
			}
			return
		},
	}

var Get_Relationships_cmd = &cobra.Command{
		Use: `Relationships`,
		Example: tq.JSONHighlight(`{"ActiveOnly":"string", "AssociatedConstituentID":"string", "ConstituentID":"string", "EndActiveDate":"string", "IncludeAffiliations":"string", "StartActiveDate":"string"}`),
		Short: `Get all affiliations and associations of the specified constituent id or get all affiliations and associations of the specified associated constituent id`,
		Long:  `Get all affiliations and associations of the specified constituent id or get all affiliations and associations of the specified associated constituent id. If both are specified get all the associations and affiliations between them.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.RelationshipsGetAll)
			return
		},
	}

var Get_ReportRequests_cmd = &cobra.Command{
		Use: `ReportRequests`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get a report request`,
		Long:  `Get a report request.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ReportRequestsGetAll)
			} else if test, _ := cmd.Flags().GetBool("AllExpired"); test {
				err = tq.Do(_tq, _tq.Get.ReportRequestsGetAllExpired)
			} else if test, _ := cmd.Flags().GetBool("Queued"); test {
				err = tq.Do(_tq, _tq.Get.ReportRequestsGetQueued)
			} else {
				err = tq.Do(_tq, _tq.Get.ReportRequestsGet)
			}
			return
		},
	}

var Get_ReportSchedules_cmd = &cobra.Command{
		Use: `ReportSchedules`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get a report schedule`,
		Long:  `Get a report schedule.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ReportSchedulesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ReportSchedulesGet)
			}
			return
		},
	}

var Get_ReportUserGroups_cmd = &cobra.Command{
		Use: `ReportUserGroups`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get the details of a report/user group mapping by id`,
		Long:  `Get the details of a report/user group mapping by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ReportUserGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ReportUserGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ReportUserGroupsGet)
			}
			return
		},
	}

var Get_Reports_cmd = &cobra.Command{
		Use: `Reports`,
		Example: tq.JSONHighlight(`{"ReportID":"string"}`),
		Short: `Get details of a report`,
		Long:  `Get details of a report.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ReportsGetAll)
			} else if test, _ := cmd.Flags().GetBool("CustomData"); test {
				err = tq.Do(_tq, _tq.Get.ReportsGetCustomData)
			} else if test, _ := cmd.Flags().GetBool("ReportCategories"); test {
				err = tq.Do(_tq, _tq.Get.ReportsGetReportCategories)
			} else if test, _ := cmd.Flags().GetBool("ReportDefaults"); test {
				err = tq.Do(_tq, _tq.Get.ReportsGetReportDefaults)
			} else if test, _ := cmd.Flags().GetBool("ReportParameters"); test {
				err = tq.Do(_tq, _tq.Get.ReportsGetReportParameters)
			} else {
				err = tq.Do(_tq, _tq.Get.ReportsGet)
			}
			return
		},
	}

var Get_Research_cmd = &cobra.Command{
		Use: `Research`,
		Example: tq.JSONHighlight(`{"ResearchEntryID":"string"}`),
		Short: `Get details of a research entry`,
		Long:  `Get details of a research entry.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ResearchGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ResearchGet)
			}
			return
		},
	}

var Get_ResearchTypes_cmd = &cobra.Command{
		Use: `ResearchTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of research type by id`,
		Long:  `Get the details of research type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ResearchTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ResearchTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ResearchTypesGet)
			}
			return
		},
	}

var Get_ResourceCategories_cmd = &cobra.Command{
		Use: `ResourceCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Resource Category by id`,
		Long:  `Get the details of a Resource Category by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ResourceCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ResourceCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ResourceCategoriesGet)
			}
			return
		},
	}

var Get_ResourceSchedules_cmd = &cobra.Command{
		Use: `ResourceSchedules`,
		Example: tq.JSONHighlight(`{"ResourceScheduleID":"string"}`),
		Short: `Get a single resource schedule`,
		Long:  `Get a single resource schedule.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ResourceSchedulesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.ResourceSchedulesGet)
			}
			return
		},
	}

var Get_ResourceTypes_cmd = &cobra.Command{
		Use: `ResourceTypes`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get all resource types`,
		Long:  `Get all resource types.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ResourceTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ResourceTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ResourceTypesGet)
			}
			return
		},
	}

var Get_Resources_cmd = &cobra.Command{
		Use: `Resources`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get a specific Resource`,
		Long:  `Get a specific Resource.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ResourcesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Details"); test {
				err = tq.Do(_tq, _tq.Get.ResourcesGetDetails)
			} else if test, _ := cmd.Flags().GetBool("HasUsages"); test {
				err = tq.Do(_tq, _tq.Get.ResourcesHasUsages)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ResourcesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ResourcesGet)
			}
			return
		},
	}

var Get_SalesChannels_cmd = &cobra.Command{
		Use: `SalesChannels`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a sales channel by id`,
		Long:  `Get the details of a sales channel by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SalesChannelsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SalesChannelsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SalesChannelsGet)
			}
			return
		},
	}

var Get_SalesLayoutButtonTypes_cmd = &cobra.Command{
		Use: `SalesLayoutButtonTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a sales layout button type by id`,
		Long:  `Get the details of a sales layout button type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SalesLayoutButtonTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SalesLayoutButtonTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SalesLayoutButtonTypesGet)
			}
			return
		},
	}

var Get_SalesLayouts_cmd = &cobra.Command{
		Use: `SalesLayouts`,
		Example: tq.JSONHighlight(`{"SalesLayoutID":"string"}`),
		Short: `Get details of a sales layout setup`,
		Long:  `Get details of a sales layout setup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("ForSale"); test {
				err = tq.Do(_tq, _tq.Get.SalesLayoutsGetForSale)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SalesLayoutsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SalesLayoutsGet)
			}
			return
		},
	}

var Get_SalutationTypes_cmd = &cobra.Command{
		Use: `SalutationTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a salutation type by id`,
		Long:  `Get the details of a salutation type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SalutationTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SalutationTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SalutationTypesGet)
			}
			return
		},
	}

var Get_Salutations_cmd = &cobra.Command{
		Use: `Salutations`,
		Example: tq.JSONHighlight(`{"SalutationID":"string"}`),
		Short: `Get details of a salutation`,
		Long:  `Get details of a salutation.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SalutationsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Generate"); test {
				err = tq.Do(_tq, _tq.Get.SalutationsGenerate)
			} else {
				err = tq.Do(_tq, _tq.Get.SalutationsGet)
			}
			return
		},
	}

var Get_SchedulePatternTypes_cmd = &cobra.Command{
		Use: `SchedulePatternTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Schedule Pattern by id`,
		Long:  `Get the details of a Schedule Pattern by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SchedulePatternTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SchedulePatternTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SchedulePatternTypesGet)
			}
			return
		},
	}

var Get_ScheduleTypes_cmd = &cobra.Command{
		Use: `ScheduleTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Schedule Type by id`,
		Long:  `Get the details of a Schedule Type by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ScheduleTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ScheduleTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ScheduleTypesGet)
			}
			return
		},
	}

var Get_SeasonTypes_cmd = &cobra.Command{
		Use: `SeasonTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a season type by id`,
		Long:  `Get the details of a season type by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SeasonTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SeasonTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SeasonTypesGet)
			}
			return
		},
	}

var Get_Seasons_cmd = &cobra.Command{
		Use: `Seasons`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a season by id`,
		Long:  `Get the details of a season by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SeasonsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SeasonsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SeasonsGet)
			}
			return
		},
	}

var Get_SeatCodes_cmd = &cobra.Command{
		Use: `SeatCodes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a seat code by id`,
		Long:  `Get the details of a seat code by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SeatCodesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SeatCodesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SeatCodesGet)
			}
			return
		},
	}

var Get_SeatStatuses_cmd = &cobra.Command{
		Use: `SeatStatuses`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a seat status by id`,
		Long:  `Get the details of a seat status by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SeatStatusesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SeatStatusesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SeatStatusesGet)
			}
			return
		},
	}

var Get_Sections_cmd = &cobra.Command{
		Use: `Sections`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a section by id`,
		Long:  `Get the details of a section by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SectionsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SectionsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SectionsGet)
			}
			return
		},
	}

var Get_SecurityBatchTypes_cmd = &cobra.Command{
		Use: `SecurityBatchTypes`,
		Example: tq.JSONHighlight(``),
		Short: `Get all batch type/user group mappings valid for the context usergroup`,
		Long:  `Get all batch type/user group mappings valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityBatchTypesGetAll)
			return
		},
	}

var Get_SecurityControlGroups_cmd = &cobra.Command{
		Use: `SecurityControlGroups`,
		Example: tq.JSONHighlight(``),
		Short: `Get all control group/user group mappings valid for the context usergroup`,
		Long:  `Get all control group/user group mappings valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityControlGroupsGetAll)
			return
		},
	}

var Get_SecurityHoldCodes_cmd = &cobra.Command{
		Use: `SecurityHoldCodes`,
		Example: tq.JSONHighlight(``),
		Short: `Get all hold code/user group mappings valid for the context usergroup`,
		Long:  `Get all hold code/user group mappings valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityHoldCodesGetAll)
			return
		},
	}

var Get_SecurityModesOfSale_cmd = &cobra.Command{
		Use: `SecurityModesOfSale`,
		Example: tq.JSONHighlight(``),
		Short: `Get all mode of sale/user group mappings valid for the context usergroup`,
		Long:  `Get all mode of sale/user group mappings valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityModesOfSaleGetAll)
			return
		},
	}

var Get_SecurityObjectPermissions_cmd = &cobra.Command{
		Use: `SecurityObjectPermissions`,
		Example: tq.JSONHighlight(`{"ConstituencyID":"string", "ObjectIds":"string", "Objectid":"string"}`),
		Short: `Get all the object permissions valid for the context usergroup`,
		Long:  `Get all the object permissions valid for the context usergroup. Optionally filter by constituency id and/or object id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityObjectPermissionsGetAll)
			return
		},
	}

var Get_SecurityPaymentMethods_cmd = &cobra.Command{
		Use: `SecurityPaymentMethods`,
		Example: tq.JSONHighlight(`{"Amount":"string"}`),
		Short: `Get all payment method/user group mappings valid for the context usergroup`,
		Long:  `Get all payment method/user group mappings valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityPaymentMethodsGetAll)
			return
		},
	}

var Get_SecurityPriceTypes_cmd = &cobra.Command{
		Use: `SecurityPriceTypes`,
		Example: tq.JSONHighlight(``),
		Short: `Get all price type/user group mappings valid for the context usergroup`,
		Long:  `Get all price type/user group mappings valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityPriceTypesGetAll)
			return
		},
	}

var Get_SecurityReferenceTables_cmd = &cobra.Command{
		Use: `SecurityReferenceTables`,
		Example: tq.JSONHighlight(``),
		Short: `Get all the reference table/user group mappings valid for the context usergroup`,
		Long:  `Get all the reference table/user group mappings valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityReferenceTablesGetAll)
			return
		},
	}

var Get_SecurityReports_cmd = &cobra.Command{
		Use: `SecurityReports`,
		Example: tq.JSONHighlight(``),
		Short: `Get all report/user group mappings valid for the context usergroup`,
		Long:  `Get all report/user group mappings valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityReportsGetAll)
			return
		},
	}

var Get_SecurityServiceResources_cmd = &cobra.Command{
		Use: `SecurityServiceResources`,
		Example: tq.JSONHighlight(``),
		Short: `Get all service resource/user group mappings valid for the context usergroup`,
		Long:  `Get all service resource/user group mappings valid for the context usergroup.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SecurityServiceResourcesGetAll)
			return
		},
	}

var Get_SecurityUserGroups_cmd = &cobra.Command{
		Use: `SecurityUserGroups`,
		Example: tq.JSONHighlight(`{"Application":"string", "UserName":"string"}`),
		Short: `Get all security user groups`,
		Long:  `Get all security user groups.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("DefaultUserGroup"); test {
				err = tq.Do(_tq, _tq.Get.SecurityUserGroupsGetDefaultUserGroup)
			} else if test, _ := cmd.Flags().GetBool("ManagedGroups"); test {
				err = tq.Do(_tq, _tq.Get.SecurityUserGroupsGetManagedGroups)
			} else {
				err = tq.Do(_tq, _tq.Get.SecurityUserGroupsGetAll)
			}
			return
		},
	}

var Get_ServiceResourceUserGroups_cmd = &cobra.Command{
		Use: `ServiceResourceUserGroups`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get the details of a service resource/user group mapping by id`,
		Long:  `Get the details of a service resource/user group mapping by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ServiceResourceUserGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ServiceResourceUserGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ServiceResourceUserGroupsGet)
			}
			return
		},
	}

var Get_ServiceResources_cmd = &cobra.Command{
		Use: `ServiceResources`,
		Example: tq.JSONHighlight(`{"MaintenanceMode":"string"}`),
		Short: `Get all service resources`,
		Long:  `Get all service resources. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ServiceResourcesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ServiceResourcesGetAll)
			}
			return
		},
	}

var Get_Session_cmd = &cobra.Command{
		Use: `Session`,
		Example: tq.JSONHighlight(`{"SessionKey":"string"}`),
		Short: `Returns details summarizing a web session's state`,
		Long:  `Returns details summarizing a web session's state.
Includes counts of cart products, the login status, MOS and Source`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Default"); test {
				err = tq.Do(_tq, _tq.Get.SessionGetDefault)
			} else if test, _ := cmd.Flags().GetBool("DeliveryMethods"); test {
				err = tq.Do(_tq, _tq.Get.SessionGetDeliveryMethods)
			} else if test, _ := cmd.Flags().GetBool("Expiration"); test {
				err = tq.Do(_tq, _tq.Get.SessionGetExpiration)
			} else if test, _ := cmd.Flags().GetBool("OnAccountBalances"); test {
				err = tq.Do(_tq, _tq.Get.SessionGetOnAccountBalances)
			} else if test, _ := cmd.Flags().GetBool("OrderSearch"); test {
				err = tq.Do(_tq, _tq.Get.SessionOrderSearch)
			} else if test, _ := cmd.Flags().GetBool("Variable"); test {
				err = tq.Do(_tq, _tq.Get.SessionGetVariable)
			} else if test, _ := cmd.Flags().GetBool("Variables"); test {
				err = tq.Do(_tq, _tq.Get.SessionGetVariables)
			} else {
				err = tq.Do(_tq, _tq.Get.SessionGet)
			}
			return
		},
	}

var Get_SourceGroups_cmd = &cobra.Command{
		Use: `SourceGroups`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a source group by id`,
		Long:  `Get the details of a source group by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SourceGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SourceGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SourceGroupsGet)
			}
			return
		},
	}

var Get_Sources_cmd = &cobra.Command{
		Use: `Sources`,
		Example: tq.JSONHighlight(`{"SourceID":"string"}`),
		Short: `Get details of a Source`,
		Long:  `Get details of a Source.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SourcesGetSummaries)
			} else if test, _ := cmd.Flags().GetBool("WebExpiring"); test {
				err = tq.Do(_tq, _tq.Get.SourcesGetWebExpiring)
			} else {
				err = tq.Do(_tq, _tq.Get.SourcesGet)
			}
			return
		},
	}

var Get_SpecialActivities_cmd = &cobra.Command{
		Use: `SpecialActivities`,
		Example: tq.JSONHighlight(`{"SpecialActivityID":"string"}`),
		Short: `Get details of an activity record`,
		Long:  `Get details of an activity record.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SpecialActivitiesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.SpecialActivitiesGet)
			}
			return
		},
	}

var Get_SpecialActivityStatuses_cmd = &cobra.Command{
		Use: `SpecialActivityStatuses`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Special Activity Status by id`,
		Long:  `Get the details of a Special Activity Status by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SpecialActivityStatusesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SpecialActivityStatusesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SpecialActivityStatusesGet)
			}
			return
		},
	}

var Get_SpecialActivityTypes_cmd = &cobra.Command{
		Use: `SpecialActivityTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a Special Activity Type by id`,
		Long:  `Get the details of a Special Activity Type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SpecialActivityTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SpecialActivityTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SpecialActivityTypesGet)
			}
			return
		},
	}

var Get_States_cmd = &cobra.Command{
		Use: `States`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a state by id`,
		Long:  `Get the details of a state by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.StatesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.StatesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.StatesGet)
			}
			return
		},
	}

var Get_StepTypes_cmd = &cobra.Command{
		Use: `StepTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a step type by id`,
		Long:  `Get the details of a step type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.StepTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.StepTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.StepTypesGet)
			}
			return
		},
	}

var Get_Steps_cmd = &cobra.Command{
		Use: `Steps`,
		Example: tq.JSONHighlight(`{"StepID":"string"}`),
		Short: `Get details of a step`,
		Long:  `Get details of a step.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.StepsGetAll)
			} else if test, _ := cmd.Flags().GetBool("AllDocumentSummaries"); test {
				err = tq.Do(_tq, _tq.Get.StepsGetAllDocumentSummaries)
			} else if test, _ := cmd.Flags().GetBool("AllDocuments"); test {
				err = tq.Do(_tq, _tq.Get.StepsGetAllDocuments)
			} else {
				err = tq.Do(_tq, _tq.Get.StepsGet)
			}
			return
		},
	}

var Get_SubLineItemStatuses_cmd = &cobra.Command{
		Use: `SubLineItemStatuses`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a sub line item status by id`,
		Long:  `Get the details of a sub line item status by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SubLineItemStatusesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SubLineItemStatusesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SubLineItemStatusesGet)
			}
			return
		},
	}

var Get_SubLineItems_cmd = &cobra.Command{
		Use: `SubLineItems`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string", "IncludePackageBaseSubLineitems":"string", "OrderEndDate":"string", "OrderID":"string", "OrderStartDate":"string", "PerformanceEndDate":"string", "PerformanceStartDate":"string", "PerformanceTypeIds":"string", "SubLineItemStatusIds":"string"}`),
		Short: `Returns sub line item summary data for a constituent`,
		Long:  `Returns sub line item summary data for a constituent`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.SubLineItemsGetSubLineItemSummaries)
			return
		},
	}

var Get_Suffixes_cmd = &cobra.Command{
		Use: `Suffixes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a suffix by id`,
		Long:  `Get the details of a suffix by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SuffixesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SuffixesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SuffixesGet)
			}
			return
		},
	}

var Get_SurveyQuestions_cmd = &cobra.Command{
		Use: `SurveyQuestions`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a survey question by id`,
		Long:  `Get the details of a survey question by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SurveyQuestionsGetAll)
			} else if test, _ := cmd.Flags().GetBool("DataFor"); test {
				err = tq.Do(_tq, _tq.Get.SurveyQuestionsGetDataFor)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SurveyQuestionsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SurveyQuestionsGet)
			}
			return
		},
	}

var Get_SurveyResponses_cmd = &cobra.Command{
		Use: `SurveyResponses`,
		Example: tq.JSONHighlight(`{"SurveyResponseID":"string"}`),
		Short: `Get details of a survey response`,
		Long:  `Get details of a survey response.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.SurveyResponsesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.SurveyResponsesGet)
			}
			return
		},
	}

var Get_SystemDefaults_cmd = &cobra.Command{
		Use: `SystemDefaults`,
		Example: tq.JSONHighlight(`{"MaintenanceMode":"string"}`),
		Short: `Get all system defaults`,
		Long:  `Get all system defaults. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("Default"); test {
				err = tq.Do(_tq, _tq.Get.SystemDefaultsGetDefault)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.SystemDefaultsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.SystemDefaultsGetAll)
			}
			return
		},
	}

var Get_TemplateCategories_cmd = &cobra.Command{
		Use: `TemplateCategories`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a template category by id`,
		Long:  `Get the details of a template category by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.TemplateCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.TemplateCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.TemplateCategoriesGet)
			}
			return
		},
	}

var Get_TemplatePriceTypes_cmd = &cobra.Command{
		Use: `TemplatePriceTypes`,
		Example: tq.JSONHighlight(`{"TemplatePriceTypeID":"string"}`),
		Short: `Get details of a template price type`,
		Long:  `Get details of a template price type.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.TemplatePriceTypesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.TemplatePriceTypesGet)
			}
			return
		},
	}

var Get_TemplatePrices_cmd = &cobra.Command{
		Use: `TemplatePrices`,
		Example: tq.JSONHighlight(`{"TemplatePriceID":"string"}`),
		Short: `Get details of a template price`,
		Long:  `Get details of a template price.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.TemplatePricesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.TemplatePricesGet)
			}
			return
		},
	}

var Get_TemplateTypes_cmd = &cobra.Command{
		Use: `TemplateTypes`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a template type by id`,
		Long:  `Get the details of a template type by id. To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.TemplateTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.TemplateTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.TemplateTypesGet)
			}
			return
		},
	}

var Get_Templates_cmd = &cobra.Command{
		Use: `Templates`,
		Example: tq.JSONHighlight(`{"TemplateID":"string"}`),
		Short: `Get the details of a template by id`,
		Long:  `Get the details of a template by id`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.TemplatesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.TemplatesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.TemplatesGet)
			}
			return
		},
	}

var Get_Theaters_cmd = &cobra.Command{
		Use: `Theaters`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a theater by id`,
		Long:  `Get the details of a theater by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.TheatersGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.TheatersGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.TheatersGet)
			}
			return
		},
	}

var Get_TicketHistory_cmd = &cobra.Command{
		Use: `TicketHistory`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string", "OrderEndDate":"string", "OrderStartDate":"string", "PerformanceEndDate":"string", "PerformanceID":"string", "PerformanceStartDate":"string", "ProductionSeasonID":"string", "SeasonID":"string"}`),
		Short: `Gets history information for tickets`,
		Long:  `Gets history information for tickets`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.TicketHistoryGetAll)
			return
		},
	}

var Get_TimeSlots_cmd = &cobra.Command{
		Use: `TimeSlots`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a time slot by id`,
		Long:  `Get the details of a time slot by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.TimeSlotsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.TimeSlotsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.TimeSlotsGet)
			}
			return
		},
	}

var Get_Titles_cmd = &cobra.Command{
		Use: `Titles`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get details of a specific title`,
		Long:  `Get details of a specific title.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.TitlesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.TitlesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.TitlesGet)
			}
			return
		},
	}

var Get_TransactionHistory_cmd = &cobra.Command{
		Use: `TransactionHistory`,
		Example: tq.JSONHighlight(`{"ConstituentID":"string", "EndDate":"string", "IncludeAffiliations":"string", "Page":"string", "PageSize":"string", "PaymentID":"string", "ReferenceID":"string", "SortByDirection":"string", "SortByField":"string", "StartDate":"string"}`),
		Short: `Get details of all transaction histories for the specified constituent id and all its visible affiliations' transaction histories as well`,
		Long:  `Get details of all transaction histories for the specified constituent id and all its visible affiliations' transaction histories as well. To exclude transaction histories of the visible affiliations pass includeAffiliations=false. This resource is paged. Pass filters such as transaction reference id, payment id, or start and end date to limit the results. Results can also be sorted.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.TransactionHistoryGetAll)
			return
		},
	}

var Get_TriPOSCloudConfigurations_cmd = &cobra.Command{
		Use: `TriPOSCloudConfigurations`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a TriPOS Cloud configuration by id`,
		Long:  `Get the details of a TriPOS Cloud configuration by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.TriPOSCloudConfigurationsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.TriPOSCloudConfigurationsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.TriPOSCloudConfigurationsGet)
			}
			return
		},
	}

var Get_UpgradeCategories_cmd = &cobra.Command{
		Use: `UpgradeCategories`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of an Upgrade Category by id`,
		Long:  `Get the details of an Upgrade Category by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.UpgradeCategoriesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.UpgradeCategoriesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.UpgradeCategoriesGet)
			}
			return
		},
	}

var Get_UpgradeLogs_cmd = &cobra.Command{
		Use: `UpgradeLogs`,
		Example: tq.JSONHighlight(`{"UpgradeLogID":"string"}`),
		Short: `Returns an upgradeLog for the given id`,
		Long:  `Returns an upgradeLog for the given id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.UpgradeLogsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.UpgradeLogsGet)
			}
			return
		},
	}

var Get_UserGroups_cmd = &cobra.Command{
		Use: `UserGroups`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a user group by id`,
		Long:  `Get the details of a user group by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.UserGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.UserGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.UserGroupsGet)
			}
			return
		},
	}

var Get_UserPreferences_cmd = &cobra.Command{
		Use: `UserPreferences`,
		Example: tq.JSONHighlight(`{"Key":"string"}`),
		Short: `Get a specific user preference by key`,
		Long:  `Get a specific user preference by key.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.UserPreferencesGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.UserPreferencesGet)
			}
			return
		},
	}

var Get_Users_cmd = &cobra.Command{
		Use: `Users`,
		Example: tq.JSONHighlight(`{"UserName":"string"}`),
		Short: `Get the details of a user for the specified username`,
		Long:  `Get the details of a user for the specified username.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("ActiveDirectoryUser"); test {
				err = tq.Do(_tq, _tq.Get.UsersGetActiveDirectoryUser)
			} else if test, _ := cmd.Flags().GetBool("UserInformationForActiveDirectoryUser"); test {
				err = tq.Do(_tq, _tq.Get.UsersGetUserInformationForActiveDirectoryUser)
			} else if test, _ := cmd.Flags().GetBool("UsersForUserGroup"); test {
				err = tq.Do(_tq, _tq.Get.UsersGetUsersForUserGroup)
			} else {
				err = tq.Do(_tq, _tq.Get.UsersGet)
			}
			return
		},
	}

var Get_WebContentTypes_cmd = &cobra.Command{
		Use: `WebContentTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get a specific web content type`,
		Long:  `Get a specific web content type.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.WebContentTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("DataFor"); test {
				err = tq.Do(_tq, _tq.Get.WebContentTypesGetDataFor)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.WebContentTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.WebContentTypesGet)
			}
			return
		},
	}

var Get_WebContents_cmd = &cobra.Command{
		Use: `WebContents`,
		Example: tq.JSONHighlight(`{"ContentTypeIds":"string", "PackageIds":"string", "ProductionElementIds":"string", "ShowAll":"string"}`),
		Short: `Returns web content for the requested production elements or packages`,
		Long:  `Returns web content for the requested production elements or packages.
The result can be filtered by content types.  At least one package id or production element id is required.
If the content type is found, returns the content value at the lowest level at which it was found in the production hierarchy (Title, Production, Production Season, Performance) for the requested element. Optionally, all matching content anywhere above the requested element in the production hierarchy can be returned with the ShowAll parameter.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			
			err = tq.Do(_tq, _tq.Get.WebContentsGetWebContents)
			return
		},
	}

var Get_WebLogins_cmd = &cobra.Command{
		Use: `WebLogins`,
		Example: tq.JSONHighlight(`{"WebLoginID":"string"}`),
		Short: `Get details of a weblogin`,
		Long:  `Get details of a weblogin.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.WebLoginsGetAll)
			} else if test, _ := cmd.Flags().GetBool("LoginCredentials"); test {
				err = tq.Do(_tq, _tq.Get.WebLoginsGetLoginCredentials)
			} else if test, _ := cmd.Flags().GetBool("Search"); test {
				err = tq.Do(_tq, _tq.Get.WebLoginsSearch)
			} else {
				err = tq.Do(_tq, _tq.Get.WebLoginsGet)
			}
			return
		},
	}

var Get_WorkerQualifications_cmd = &cobra.Command{
		Use: `WorkerQualifications`,
		Example: tq.JSONHighlight(`{"WorkerQualificationID":"string"}`),
		Short: `Get a single WorkerQualification by Id`,
		Long:  `Get a single WorkerQualification by Id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.WorkerQualificationsGetAll)
			} else {
				err = tq.Do(_tq, _tq.Get.WorkerQualificationsGet)
			}
			return
		},
	}

var Get_WorkerRoles_cmd = &cobra.Command{
		Use: `WorkerRoles`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a worker role by id`,
		Long:  `Get the details of a worker role by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.WorkerRolesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.WorkerRolesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.WorkerRolesGet)
			}
			return
		},
	}

var Get_WorkerTypes_cmd = &cobra.Command{
		Use: `WorkerTypes`,
		Example: tq.JSONHighlight(`{"Filter":"string", "ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a worker type by id`,
		Long:  `Get the details of a worker type by id. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.WorkerTypesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.WorkerTypesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.WorkerTypesGet)
			}
			return
		},
	}

var Get_Workers_cmd = &cobra.Command{
		Use: `Workers`,
		Example: tq.JSONHighlight(`{"WorkerID":"string"}`),
		Short: `Get details of a worker`,
		Long:  `Get details of a worker.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.WorkersGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.WorkersGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.WorkersGet)
			}
			return
		},
	}

var Get_ZoneGroups_cmd = &cobra.Command{
		Use: `ZoneGroups`,
		Example: tq.JSONHighlight(`{"ID":"string", "MaintenanceMode":"string"}`),
		Short: `Get the details of a zone group by id`,
		Long:  `Get the details of a zone group by id.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ZoneGroupsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ZoneGroupsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ZoneGroupsGet)
			}
			return
		},
	}

var Get_ZoneMaps_cmd = &cobra.Command{
		Use: `ZoneMaps`,
		Example: tq.JSONHighlight(`{"ID":"string"}`),
		Short: `Get details of a specific zone map`,
		Long:  `Get details of a specific zone map.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ZoneMapsGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ZoneMapsGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ZoneMapsGet)
			}
			return
		},
	}

var Get_Zones_cmd = &cobra.Command{
		Use: `Zones`,
		Example: tq.JSONHighlight(`{"ZoneID":"string", "ZoneMapID":"string"}`),
		Short: `Get details of a specific zone`,
		Long:  `Get details of a specific zone.`,
		PreRunE: initTq,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if test, _ := cmd.Flags().GetBool("All"); test {
				err = tq.Do(_tq, _tq.Get.ZonesGetAll)
			} else if test, _ := cmd.Flags().GetBool("Summaries"); test {
				err = tq.Do(_tq, _tq.Get.ZonesGetSummaries)
			} else {
				err = tq.Do(_tq, _tq.Get.ZonesGet)
			}
			return
		},
	}


func init() {
		Get_cmd.AddCommand(Get_AccountTypes_cmd) 
				Get_AccountTypes_cmd.Flags().Bool("All", false, 
					`Get all account types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_AccountTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all account types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Accounts_cmd) 
				Get_Accounts_cmd.Flags().Bool("All", false, 
					`Get details of all the credit card, direct debit, and SEPA accounts for the specified constituent id and all its visible affiliates' accounts as well.
To exclude accounts of the visible affiliates pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"AccountTypeID":"string", "ConstituentID":"string", "IncludeAffiliates":"string", "IncludeInactive":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ActionTypes_cmd) 
				Get_ActionTypes_cmd.Flags().Bool("All", false, 
					`Get all action types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ActionTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all action types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Actions_cmd) 
				Get_Actions_cmd.Flags().Bool("All", false, 
					`Get details of all the actions for the given constituent or issue.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IssueID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ActivityCategories_cmd) 
				Get_ActivityCategories_cmd.Flags().Bool("All", false, 
					`Get all activity categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ActivityCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all activity categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ActivityTypes_cmd) 
				Get_ActivityTypes_cmd.Flags().Bool("All", false, 
					`Get all activity types. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ActivityTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all activity types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_AddressTypes_cmd) 
				Get_AddressTypes_cmd.Flags().Bool("All", false, 
					`Get all address types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_AddressTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all address types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Addresses_cmd) 
				Get_Addresses_cmd.Flags().Bool("All", false, 
					`Get details of all the addresses for the specified constituent id and all its visible affiliation's addresses as well. To exclude addresses of the visible affiliations pass includeAffiliations=false. To get only the primary addresses, pass primaryOnly=true.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string", "IncludeFromAffiliations":"string", "PrimaryOnly":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_AffiliationTypes_cmd) 
				Get_AffiliationTypes_cmd.Flags().Bool("All", false, 
					`` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentTypeID":"string", "Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_AffiliationTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all affiliation types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Affiliations_cmd) 
				Get_Affiliations_cmd.Flags().Bool("All", false, 
					`Get details of all the affiliation of the specified individual constituent id or get all the affiliations of the specified group constituent id. If both individual constituent id and group constituent id are specified get all the affiliations between them. To filter the affiliations that are active within certain date then pass values for start date and end date.To fetch primary affiliations alone pass primaryOnly=true. To limit the associations returned to those that are primary or that are marked as showWithGroup, pass showWithGroup=true.` + "\nQuery:\n" + tq.JSONHighlight(`{"EndActiveDate":"string", "GroupConstituentID":"string", "IndividualConstituentID":"string", "PrimaryOnly":"string", "ShowWithGroup":"string", "StartActiveDate":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_AliasTypes_cmd) 
				Get_AliasTypes_cmd.Flags().Bool("All", false, 
					`Get all alias types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_AliasTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all alias types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Aliases_cmd) 
				Get_Aliases_cmd.Flags().Bool("All", false, 
					`Get details of all the aliases for the specified constituent id and all its visible affiliation's aliases as well. To exclude aliases of the visible affiliations pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_AnalyticsCubes_cmd) 
				Get_AnalyticsCubes_cmd.Flags().Bool("All", false, 
					`Get all analytics cubes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_AnalyticsReports_cmd) 
				Get_AnalyticsReports_cmd.Flags().Bool("All", false, 
					`Get all SSRS Reports for display in Analytics.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_AppScreenTexts_cmd) 
				Get_AppScreenTexts_cmd.Flags().Bool("All", false, 
					`Get details of all App Screen Texts. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_AppScreenTexts_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all App Screen Texts.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_AppealCategories_cmd) 
				Get_AppealCategories_cmd.Flags().Bool("All", false, 
					`Get all appeal categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_AppealCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all appeal categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Appeals_cmd) 
				Get_Appeals_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all Appeals.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveOnly":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ApplicationObjects_cmd)
	
		Get_cmd.AddCommand(Get_Artists_cmd) 
				Get_Artists_cmd.Flags().Bool("All", false, 
					`Get details of all artists.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_AssetTypes_cmd) 
				Get_AssetTypes_cmd.Flags().Bool("All", false, 
					`Get all asset types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_AssetTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all asset types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Assets_cmd) 
				Get_Assets_cmd.Flags().Bool("All", false, 
					`Get details of all the assets for the specified constituent id and all its visible affiliations' assets as well. To exclude assets of the visible affiliations pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_AssociationTypes_cmd) 
				Get_AssociationTypes_cmd.Flags().Bool("All", false, 
					`Get all association types. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_AssociationTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all association types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Associations_cmd) 
				Get_Associations_cmd.Flags().Bool("All", false, 
					`Get details of all the association of the specified constituent id or get all the associations of the specified associated constituent id. If both constituent id and associated constituent id are specified get all the associations between them. To filter the associations that are active within certain date then pass values for start date and end date.` + "\nQuery:\n" + tq.JSONHighlight(`{"AssociatedConstituentID":"string", "ConstituentID":"string", "EndActiveDate":"string", "StartActiveDate":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_AttendanceHistory_cmd)
	
		Get_cmd.AddCommand(Get_Attributes_cmd) 
				Get_Attributes_cmd.Flags().Bool("All", false, 
					`Get details of all the attributes for the specified constituent id and all its visible affiliation's attributes as well. To exclude attributes of the visible affiliations pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_AuditLogs_cmd) 
				Get_AuditLogs_cmd.Flags().Bool("All", false, 
					`Get all audit logs. The audit log response is paginated with default pageIndex = 1 and pageSize = 100. To get the
audit log between a specific time interval specify auditStartTime and auditEndTime. If only auditStartTime is
specified then all audit entries after that time would be returned. If only auditEndTime is specified then all
audit entries before that time would be returned.` + "\nQuery:\n" + tq.JSONHighlight(`{"Action":"string", "AuditEndTime":"string", "AuditStartTime":"string", "EntityIds":"string", "IncludeSubEntities":"string", "PageIndex":"string", "PageSize":"string", "Table":"string"}`) + "\n") 
				Get_AuditLogs_cmd.Flags().Bool("Details", false, 
					`Get audit log details.` + "\nQuery:\n" + tq.JSONHighlight(`{"Action":"string", "AuditEndTime":"string", "AuditStartTime":"string", "EntityIds":"string", "IncludeSubEntities":"string", "PageIndex":"string", "PageSize":"string", "Table":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Authenticate_cmd)
	
		Get_cmd.AddCommand(Get_BatchMaintenance_cmd) 
				Get_BatchMaintenance_cmd.Flags().Bool("Active", false, 
					`Returns all open or held batches owned by the service user. Optionally filters out controlled batches` + "\nQuery:\n" + tq.JSONHighlight(`{"IncludeControlled":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_BatchTypeGroups_cmd) 
				Get_BatchTypeGroups_cmd.Flags().Bool("All", false, 
					`Get all batch type groups. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_BatchTypeGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all batch type groups.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_BatchTypeUserGroup_cmd)
	
		Get_cmd.AddCommand(Get_BatchTypes_cmd) 
				Get_BatchTypes_cmd.Flags().Bool("All", false, 
					`Get all batch types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_BatchTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all batch types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_BillingSchedules_cmd) 
				Get_BillingSchedules_cmd.Flags().Bool("All", false, 
					`Get all Billing Schedules. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_BillingSchedules_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Billing Schedules.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_BillingTypes_cmd) 
				Get_BillingTypes_cmd.Flags().Bool("All", false, 
					`Get details of all Billing Types. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true".` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_BillingTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Billing Types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_BookingCategories_cmd) 
				Get_BookingCategories_cmd.Flags().Bool("All", false, 
					`Get all Booking Categories. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_BookingCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Booking Categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_BookingTemplates_cmd) 
				Get_BookingTemplates_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all Booking Templates, filtered optionally by category.` + "\nQuery:\n" + tq.JSONHighlight(`{"CategoryID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Bookings_cmd) 
				Get_Bookings_cmd.Flags().Bool("AllDocumentSummaries", false, 
					`Get summary of all the documents associated with the booking. (Excluding the file contents)` + "\nQuery:\n" + tq.JSONHighlight(`{"BookingID":"string"}`) + "\n") 
				Get_Bookings_cmd.Flags().Bool("AllDocuments", false, 
					`Get all the documents associated with the booking (Including the file contents).` + "\nQuery:\n" + tq.JSONHighlight(`{"BookingID":"string"}`) + "\n") 
				Get_Bookings_cmd.Flags().Bool("Document", false, 
					`Get the document associated with the documentId (Including the file contents).` + "\nQuery:\n" + tq.JSONHighlight(`{"BookingID":"string", "DocumentID":"string"}`) + "\n") 
				Get_Bookings_cmd.Flags().Bool("Summary", false, 
					`Get a summary for a single Booking.` + "\nQuery:\n" + tq.JSONHighlight(`{"BookingID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_BulkCopySets_cmd) 
				Get_BulkCopySets_cmd.Flags().Bool("All", false, 
					`Get all bulk copy sets.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_BulkCopySets_cmd.Flags().Bool("DayForCopy", false, 
					`Returns the packages and performances that will be copied for the daily bulk copy set` + "\nQuery:\n" + tq.JSONHighlight(`{"BulkCopySetID":"string"}`) + "\n") 
				Get_BulkCopySets_cmd.Flags().Bool("Summaries", false, 
					`Get a summary of all bulk copy sets.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_BulkDailyCopyExclusions_cmd) 
				Get_BulkDailyCopyExclusions_cmd.Flags().Bool("All", false, 
					`Get all bulk daily copy exclusions for a given bulk copy set.` + "\nQuery:\n" + tq.JSONHighlight(`{"BulkCopySetID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_BusinessUnits_cmd) 
				Get_BusinessUnits_cmd.Flags().Bool("All", false, 
					`Get all business units. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_BusinessUnits_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all business units.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Cache_cmd)
	
		Get_cmd.AddCommand(Get_CampaignDesignations_cmd) 
				Get_CampaignDesignations_cmd.Flags().Bool("All", false, 
					`Get all Designations associated to a Campaign.` + "\nQuery:\n" + tq.JSONHighlight(`{"CampaignID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_CampaignFunds_cmd) 
				Get_CampaignFunds_cmd.Flags().Bool("All", false, 
					`Get all Funds associated to a Campaign.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "CampaignID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Campaigns_cmd) 
				Get_Campaigns_cmd.Flags().Bool("Summaries", false, 
					`Return a collection of all campaigns in summary, optionally excluding inactive campaigns.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveOnly":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_CardReaderTypes_cmd) 
				Get_CardReaderTypes_cmd.Flags().Bool("All", false, 
					`Get details of all Card Reader Types. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_CardReaderTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Card Reader Types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Cart_cmd) 
				Get_Cart_cmd.Flags().Bool("CartProperties", false, 
					`Returns cart properties` + "\nQuery:\n" + tq.JSONHighlight(`{"SessionKey":"string"}`) + "\n") 
				Get_Cart_cmd.Flags().Bool("Messages", false, 
					`Gets the pricing rule messages for the current cart.
Both Message Only and Rule messages are returned.` + "\nQuery:\n" + tq.JSONHighlight(`{"MessageTypes":"string", "SavedCart":"string", "SessionKey":"string"}`) + "\n") 
				Get_Cart_cmd.Flags().Bool("ReceiptString", false, 
					`Returns a formatted receipt for a cart` + "\nQuery:\n" + tq.JSONHighlight(`{"ReceiptSettingsID":"string", "SessionKey":"string", "TargetFormat":"string"}`) + "\n") 
				Get_Cart_cmd.Flags().Bool("Summary", false, 
					`Gets the cart summary
Used by TRBO.  Returns the cart with product lines summarized by price type, zone and price.` + "\nQuery:\n" + tq.JSONHighlight(`{"MessageTypes":"string", "SavedCart":"string", "SessionKey":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Colors_cmd) 
				Get_Colors_cmd.Flags().Bool("All", false, 
					`Get all colors. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Colors_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all colors.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Composers_cmd) 
				Get_Composers_cmd.Flags().Bool("All", false, 
					`Get all composers. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Composers_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all composers.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Constituencies_cmd) 
				Get_Constituencies_cmd.Flags().Bool("All", false, 
					`Get details of all the constituencies for the specified constituent id and all its visible affiliation's constituencies as well. To exclude constituencies of the visible affiliations pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ConstituencyTypes_cmd) 
				Get_ConstituencyTypes_cmd.Flags().Bool("All", false, 
					`Get all constituency types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ConstituencyTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all constituency types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ConstituentContributions_cmd)
	
		Get_cmd.AddCommand(Get_ConstituentDocuments_cmd) 
				Get_ConstituentDocuments_cmd.Flags().Bool("All", false, 
					`Get all the documents for a particular constituent including file contents.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n") 
				Get_ConstituentDocuments_cmd.Flags().Bool("AllSummary", false, 
					`Get summary of all the documents for the constituent. Only a summary of file information is returned.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ConstituentGroups_cmd) 
				Get_ConstituentGroups_cmd.Flags().Bool("All", false, 
					`Get all constituent groups. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ConstituentGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all constituent groups.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ConstituentInactives_cmd) 
				Get_ConstituentInactives_cmd.Flags().Bool("All", false, 
					`Get all constituent inactives. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ConstituentInactives_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all constituent inactives.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ConstituentProtectionTypes_cmd) 
				Get_ConstituentProtectionTypes_cmd.Flags().Bool("All", false, 
					`Get all constituent protection types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ConstituentProtectionTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all constituent protection types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ConstituentTypeAffiliates_cmd) 
				Get_ConstituentTypeAffiliates_cmd.Flags().Bool("All", false, 
					`Get all constituent type affiliates. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ConstituentTypeAffiliates_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all constituent type affiliates.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ConstituentTypes_cmd) 
				Get_ConstituentTypes_cmd.Flags().Bool("All", false, 
					`Get all constituent types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ConstituentTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all constituent types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Constituents_cmd) 
				Get_Constituents_cmd.Flags().Bool("Constituent", false, 
					`Get constituent details with addresses, electronicAddresses, salutations and phones. To exclude information about visible affiliations pass includeAffiliations="false"` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n") 
				Get_Constituents_cmd.Flags().Bool("ConstituentDevelopmentInfo", false, 
					`Get constituent information for fundraising.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string"}`) + "\n") 
				Get_Constituents_cmd.Flags().Bool("ConstituentSnapshot", false, 
					`Get constituent details along with primary address, primary salutation, primary electronic address, phones and affiliates information.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string"}`) + "\n") 
				Get_Constituents_cmd.Flags().Bool("Constituents", false, 
					`Get multiple Constituents given a set of constituentIds.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentIds":"string"}`) + "\n") 
				Get_Constituents_cmd.Flags().Bool("DefaultHeader", false, 
					`Return the default header for the constituent, including configured flexible header names and values.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string"}`) + "\n") 
				Get_Constituents_cmd.Flags().Bool("FlexHeader", false, 
					`Get the details of a flex header for a constituent` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "HeaderID":"string"}`) + "\n") 
				Get_Constituents_cmd.Flags().Bool("Header", false, 
					`Return constituent header details, including configured flexible header names and values.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "HeaderID":"string"}`) + "\n") 
				Get_Constituents_cmd.Flags().Bool("PrimaryHousehold", false, 
					`Get primary household constituent details for a provided constituentId.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string"}`) + "\n") 
				Get_Constituents_cmd.Flags().Bool("Search", false, 
					`Search for constituents using one of four possible search modes.  Querystring parameters are valid based on the "type" parameter value.
Single Line (type=fluent)
Sample:  CRM/Constituents/Search?type=fluent&amp;q=Huff
Single Line search type (or fluent) is the default search if not provided in querystring.  Single line search works on string patterns in the passed search value ("q" param).  Patterns are as follows:
	Value contains only alpha characters - interpreted as a last name search.  To search with first name, pass comma then additional search value ("last, first").
	Text enclosed in quotes is interpreted as a search for name ("ACE 123 Corporation").
	value containing an @ symbol is interpreted as an email address.
	Value starting with # is interpreted as a phone number search.
	Value containing alpha and numeric characters is interpreted as a postal code.  UK and other countries should omit spaces for postal code search values.
Basic search type permits parameters constituentId, ln, fn, street, and post. Sample URL: CRM/Constituents/Search?type=basic&amp;ln=Huff&amp;fn=Frank&amp;post=20746
Advanced search type permits parameters atype, op, and value. Sample URL:  CRM/Constituents/Search?type=advanced&amp;atype=Email&amp;op=Like&amp;value=%25@gmail.com
Attribute search type permits parameters key, op, value. Sample URL:  CRM/Constituents/Search?type=attribute&amp;key=Board+Affiliation&amp;op=Equals&amp;value=Association+Member` + "\nQuery:\n" + tq.JSONHighlight(`{"Atype":"string", "ConstituencyIds":"string", "ConstituentGroups":"string", "ConstituentID":"string", "Dup":"string", "Fn":"string", "IncludeAffiliates":"string", "Key":"string", "ListID":"string", "Ln":"string", "Op":"string", "Page":"string", "PageSize":"string", "Post":"string", "Q":"string", "Street":"string", "Type":"string", "Value":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ContactPermissionCategories_cmd) 
				Get_ContactPermissionCategories_cmd.Flags().Bool("All", false, 
					`Get all contact permission categories.  To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ContactPermissionCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all contact permission categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ContactPermissionTypes_cmd) 
				Get_ContactPermissionTypes_cmd.Flags().Bool("All", false, 
					`Get all contact permission types. To get the resource only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ContactPermissionTypes_cmd.Flags().Bool("ForProductionSeasons", false, 
					`Get all contact permission types assigned to a set of production seasons.` + "\nQuery:\n" + tq.JSONHighlight(`{"ProductionSeasonIds":"string"}`) + "\n") 
				Get_ContactPermissionTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all contact permission types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ContactPermissions_cmd) 
				Get_ContactPermissions_cmd.Flags().Bool("All", false, 
					`Get all the contact permissions for the specified constituent and its affiliations if requested` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveOnly":"string", "ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ContactPointCategories_cmd) 
				Get_ContactPointCategories_cmd.Flags().Bool("All", false, 
					`Get all contact point categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ContactPointCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all contact point categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ContactPointCategoryPurposes_cmd) 
				Get_ContactPointCategoryPurposes_cmd.Flags().Bool("All", false, 
					`Get all contact point category purposes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ContactPointCategoryPurposes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all contact point category purposes.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ContactPointPurposeCategories_cmd) 
				Get_ContactPointPurposeCategories_cmd.Flags().Bool("All", false, 
					`Get all contact point purpose categories. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ContactPointPurposeCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all contact point purpose categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ContactPointPurposeMaps_cmd) 
				Get_ContactPointPurposeMaps_cmd.Flags().Bool("All", false, 
					`Get details of all the contact point purposes for the specified constituent (constituentId) and all its visible affiliation's contact point purposes as well. To exclude contact point purposes of the visible affiliations pass includeAffiliations=false. To get contact point purposes for a contact point pass contactPointId.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "ContactPointCategoryID":"string", "ContactPointID":"string", "IncludeAffiliations":"string", "PurposeID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ContactPointPurposes_cmd) 
				Get_ContactPointPurposes_cmd.Flags().Bool("All", false, 
					`Get all contact point purposes. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ContactPointPurposes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all contact point purposes.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ContactPoints_cmd)
	
		Get_cmd.AddCommand(Get_ContactTypes_cmd) 
				Get_ContactTypes_cmd.Flags().Bool("All", false, 
					`Get all contact types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ContactTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all contact types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ContextInformation_cmd)
	
		Get_cmd.AddCommand(Get_ContributionDesignations_cmd) 
				Get_ContributionDesignations_cmd.Flags().Bool("All", false, 
					`Get all contribution designations. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ContributionDesignations_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all contribution designations.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ContributionImportSets_cmd) 
				Get_ContributionImportSets_cmd.Flags().Bool("All", false, 
					`Get all contributionImportSets. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups if this is a secured resource), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ContributionImportSets_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all contributionImportSets.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ControlGroupUserGroups_cmd) 
				Get_ControlGroupUserGroups_cmd.Flags().Bool("All", false, 
					`Get all control group/user group mappings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_ControlGroupUserGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all control group/user group mappings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ControlGroups_cmd) 
				Get_ControlGroups_cmd.Flags().Bool("All", false, 
					`Get all control groups. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ControlGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all control groups.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_CoreIdentity_cmd)
	
		Get_cmd.AddCommand(Get_Countries_cmd) 
				Get_Countries_cmd.Flags().Bool("All", false, 
					`Get all countries. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Countries_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all countries.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_CrediteeTypes_cmd) 
				Get_CrediteeTypes_cmd.Flags().Bool("All", false, 
					`Get all crediteeTypes. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups if this is a secured resource), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_CrediteeTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all crediteeTypes.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Credits_cmd)
	
		Get_cmd.AddCommand(Get_CriterionOperators_cmd) 
				Get_CriterionOperators_cmd.Flags().Bool("All", false, 
					`Get all criterion operators. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_CriterionOperators_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all criterion operators.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_CumulativeGivingReceipts_cmd) 
				Get_CumulativeGivingReceipts_cmd.Flags().Bool("All", false, 
					`Get Cumulative Giving Receipts for the specified constituent id and affiliation Cumulative Giving Receipts as well. To exclude receipts of the visible affiliations pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n") 
				Get_CumulativeGivingReceipts_cmd.Flags().Bool("ForSession", false, 
					`To retrieve a specific receipt for a session, pass sessionId and constituentId.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "SessionID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_CurrencyTypes_cmd) 
				Get_CurrencyTypes_cmd.Flags().Bool("All", false, 
					`Get all currency types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_CurrencyTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all currency types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Custom_cmd)
	
		Get_cmd.AddCommand(Get_CustomDefaultCategories_cmd) 
				Get_CustomDefaultCategories_cmd.Flags().Bool("All", false, 
					`Get all custom default categories. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_CustomDefaultCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all custom default categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_CustomDefaults_cmd) 
				Get_CustomDefaults_cmd.Flags().Bool("All", false, 
					`Get all custom defaults. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_CustomDefaults_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all custom defaults.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_DeliveryMethods_cmd) 
				Get_DeliveryMethods_cmd.Flags().Bool("All", false, 
					`Get all delivery methods. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_DeliveryMethods_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all delivery methods.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_DesignationCodes_cmd) 
				Get_DesignationCodes_cmd.Flags().Bool("All", false, 
					`Get all designation codes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_DesignationCodes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all designation codes.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Designs_cmd) 
				Get_Designs_cmd.Flags().Bool("All", false, 
					`Get all designs. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Designs_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all designs.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Diagnostics_cmd) 
				Get_Diagnostics_cmd.Flags().Bool("SeatServerStatus", false, 
					`Returns status of the seat server connection.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_Diagnostics_cmd.Flags().Bool("Status", false, 
					`Returns status of the application connection to database and service version information.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_Diagnostics_cmd.Flags().Bool("StatusReport", false, 
					`Returns status of the application connection to database and service version information as an html page.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_DirectDebitAccountTypes_cmd) 
				Get_DirectDebitAccountTypes_cmd.Flags().Bool("All", false, 
					`Get all direct debit currency types.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_DirectDebitAccountTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all direct debit account types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_DiscountTypes_cmd) 
				Get_DiscountTypes_cmd.Flags().Bool("All", false, 
					`Get all discount types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_DiscountTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all discount types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Divisions_cmd) 
				Get_Divisions_cmd.Flags().Bool("ForDivision", false, 
					`Get the control group/division mappings for the specified division.` + "\nQuery:\n" + tq.JSONHighlight(`{"DivisionID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_DocumentCategories_cmd) 
				Get_DocumentCategories_cmd.Flags().Bool("All", false, 
					`Get all documentCategories. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_DocumentCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all documentCategories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Documents_cmd) 
				Get_Documents_cmd.Flags().Bool("All", false, 
					`Get all the documents for a particular resource including file contents.  Only documents associated with steps may be returned at this time.` + "\nQuery:\n" + tq.JSONHighlight(`{"StepID":"string"}`) + "\n") 
				Get_Documents_cmd.Flags().Bool("AllSummary", false, 
					`Get summary of all the documents for the step.  Only a summary of file information is returned.` + "\nQuery:\n" + tq.JSONHighlight(`{"StepID":"string"}`) + "\n") 
				Get_Documents_cmd.Flags().Bool("Settings", false, 
					`Get configuration settings for uploading documents.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_DonationLevels_cmd) 
				Get_DonationLevels_cmd.Flags().Bool("All", false, 
					`Get all donation levels. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_DonationLevels_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all donation levels.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_EMV_cmd) 
				Get_EMV_cmd.Flags().Bool("ConnectionStatus", false, 
					`Get connection status for a lane` + "\nQuery:\n" + tq.JSONHighlight(`{"Cert":"string", "LaneID":"string", "Merchant":"string"}`) + "\n") 
				Get_EMV_cmd.Flags().Bool("ConnectionStatusHistory", false, 
					`Get connection status history for a lane` + "\nQuery:\n" + tq.JSONHighlight(`{"Cert":"string", "LaneID":"string", "Merchant":"string"}`) + "\n") 
				Get_EMV_cmd.Flags().Bool("IdleMessage", false, 
					`Retrieve idle message for a specific lane` + "\nQuery:\n" + tq.JSONHighlight(`{"Cert":"string", "LaneID":"string", "Merchant":"string"}`) + "\n") 
				Get_EMV_cmd.Flags().Bool("Lane", false, 
					`Retrieve information for a specific lane` + "\nQuery:\n" + tq.JSONHighlight(`{"Cert":"string", "LaneID":"string", "Merchant":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ElectronicAddressTypes_cmd) 
				Get_ElectronicAddressTypes_cmd.Flags().Bool("All", false, 
					`Get all electronic address types. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ElectronicAddressTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all electronic address types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ElectronicAddresses_cmd) 
				Get_ElectronicAddresses_cmd.Flags().Bool("All", false, 
					`Get electronic addresses for constituent(s) or query general public electronic addresses for a specific address.
            
Either constituentIds, useGeneralPublic, or address must be specified in request. For constituent electronic address, visible affiliation electronic addresses can be included with includeAffiliations=true. To exclude electronic addresses of the visible affiliations pass includeAffiliations=false. To retrieve only the primary electronic addresses, pass primaryOnly=true.` + "\nQuery:\n" + tq.JSONHighlight(`{"Address":"string", "ConstituentIds":"string", "ElectronicAddressTypeID":"string", "IncludeAffiliations":"string", "IncludeFromAffiliations":"string", "PrimaryOnly":"string", "UseGeneralPublic":"string"}`) + "\n") 
				Get_ElectronicAddresses_cmd.Flags().Bool("IsAttachedToLogin", false, 
					`Check if the specified electronic address is attached to a web login.` + "\nQuery:\n" + tq.JSONHighlight(`{"ElectronicAddressID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_EmailProfiles_cmd) 
				Get_EmailProfiles_cmd.Flags().Bool("All", false, 
					`Get all email profiles` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_EmailProfiles_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all email profiles` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_EmarketIndicators_cmd) 
				Get_EmarketIndicators_cmd.Flags().Bool("All", false, 
					`Get all emarket indicators. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_EmarketIndicators_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all emarket indicators.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Eras_cmd) 
				Get_Eras_cmd.Flags().Bool("All", false, 
					`Get all eras. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Eras_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all eras.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_EventControl_cmd)
	
		Get_cmd.AddCommand(Get_Facilities_cmd) 
				Get_Facilities_cmd.Flags().Bool("All", false, 
					`Get details of all the Facilities.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_Facilities_cmd.Flags().Bool("Screens", false, 
					`Returns details of all screens and the HouseMap for the facility.  The screen details include which other screens are assigned to each screen navigation arrow button.` + "\nQuery:\n" + tq.JSONHighlight(`{"FacilityID":"string"}`) + "\n") 
				Get_Facilities_cmd.Flags().Bool("Summaries", false, 
					`Get summary representation of all Facilities.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Fees_cmd) 
				Get_Fees_cmd.Flags().Bool("All", false, 
					`Get all fees.` + "\nQuery:\n" + tq.JSONHighlight(`{"FeeCategoryIds":"string", "SeasonID":"string", "UserDefined":"string"}`) + "\n") 
				Get_Fees_cmd.Flags().Bool("Summaries", false, 
					`Get summary representation of all fees.` + "\nQuery:\n" + tq.JSONHighlight(`{"FeeCategoryIds":"string", "SeasonID":"string", "UserDefined":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_FinanceContributions_cmd) 
				Get_FinanceContributions_cmd.Flags().Bool("All", false, 
					`Get details of all the contributions for the specified plan.` + "\nQuery:\n" + tq.JSONHighlight(`{"PlanID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Formats_cmd) 
				Get_Formats_cmd.Flags().Bool("All", false, 
					`Get all formats. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Formats_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all formats.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Funds_cmd) 
				Get_Funds_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all funds.` + "\nQuery:\n" + tq.JSONHighlight(`{"TicketingIndicator":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_GLAccounts_cmd) 
				Get_GLAccounts_cmd.Flags().Bool("All", false, 
					`Get all gl accounts. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_GLAccounts_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all gl accounts.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Genders_cmd) 
				Get_Genders_cmd.Flags().Bool("All", false, 
					`Get all available gender values. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Genders_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all gender values.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_GiftAidContactMethods_cmd) 
				Get_GiftAidContactMethods_cmd.Flags().Bool("All", false, 
					`Get all gift aid contact methods. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_GiftAidContactMethods_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all gift aid contact methods.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_GiftAidDeclarations_cmd) 
				Get_GiftAidDeclarations_cmd.Flags().Bool("All", false, 
					`Gets all Gift Aid Declarations for a provided constituent including primary affiliates by default.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_GiftAidDocumentStatuses_cmd) 
				Get_GiftAidDocumentStatuses_cmd.Flags().Bool("All", false, 
					`Get all gift aid document statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_GiftAidDocumentStatuses_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all gift aid document statuses.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_GiftAidIneligibleReasons_cmd) 
				Get_GiftAidIneligibleReasons_cmd.Flags().Bool("All", false, 
					`Get all gift aid ineligible reasons. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_GiftAidIneligibleReasons_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all gift aid ineligible reasons.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_GiftAidRates_cmd) 
				Get_GiftAidRates_cmd.Flags().Bool("All", false, 
					`Get all gift aid rates. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_GiftAidRates_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all gift aid rates.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_GiftAidStatuses_cmd) 
				Get_GiftAidStatuses_cmd.Flags().Bool("All", false, 
					`Get all gift aid statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_GiftAidStatuses_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all gift aid statuses.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_GiftAidTypes_cmd) 
				Get_GiftAidTypes_cmd.Flags().Bool("All", false, 
					`Get all gift aid types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_GiftAidTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all gift aid types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_GiftCertificates_cmd)
	
		Get_cmd.AddCommand(Get_HoldCodeCategories_cmd) 
				Get_HoldCodeCategories_cmd.Flags().Bool("All", false, 
					`Get all Hold Code Categories. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_HoldCodeCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Hold Code Categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_HoldCodeUserGroups_cmd) 
				Get_HoldCodeUserGroups_cmd.Flags().Bool("All", false, 
					`Get all hold code/user group mappings.  Optional filter for a UserGroup or HoldCode.` + "\nQuery:\n" + tq.JSONHighlight(`{"HoldCode":"string", "UserGroup":"string"}`) + "\n") 
				Get_HoldCodeUserGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all hold code/user group mappings.  Optional filter for a UserGroup or HoldCode.` + "\nQuery:\n" + tq.JSONHighlight(`{"HoldCode":"string", "UserGroup":"string"}`) + "\n") 
				Get_HoldCodeUserGroups_cmd.Flags().Bool("Summary", false, 
					`Get summary representation of a hold code/user group mapping by id.` + "\nQuery:\n" + tq.JSONHighlight(`{"HoldCodeUserGroupID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_HoldCodes_cmd) 
				Get_HoldCodes_cmd.Flags().Bool("All", false, 
					`Get details of all Hold Codes.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_InactiveReasons_cmd) 
				Get_InactiveReasons_cmd.Flags().Bool("All", false, 
					`Get all inactive reasons. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_InactiveReasons_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all inactive reasons.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_IntegrationDefaults_cmd) 
				Get_IntegrationDefaults_cmd.Flags().Bool("All", false, 
					`Get all Integration Defaults. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_IntegrationDefaults_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Integration Defaults.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Integrations_cmd) 
				Get_Integrations_cmd.Flags().Bool("All", false, 
					`Get all action types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Integrations_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all action types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_InterestCategories_cmd) 
				Get_InterestCategories_cmd.Flags().Bool("All", false, 
					`Get all interest categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_InterestCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all interest categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_InterestTypes_cmd) 
				Get_InterestTypes_cmd.Flags().Bool("All", false, 
					`Get all interest types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_InterestTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all interest types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Interests_cmd) 
				Get_Interests_cmd.Flags().Bool("All", false, 
					`Get all the interests of the specified constituent id. To exclude attributes of the visible affiliations pass includeAffiliations=false. To filter the interests of specific categories pass comma separted values under categories.` + "\nQuery:\n" + tq.JSONHighlight(`{"CategoryIds":"string", "ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Internal_cmd) 
				Get_Internal_cmd.Flags().Bool("All", false, 
					`Get details of all the addresses and the phones attached to them of the constituent id. To exclude addresses and the phones of the visible affiliations pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string", "IncludeFromAffiliations":"string"}`) + "\n") 
				Get_Internal_cmd.Flags().Bool("ConstituentMiniSnapshot", false, 
					`Get constituent details along with primary address, primary salutation, primary electronic address, primary &amp; general phones.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_InventoryContactPermissionTypes_cmd) 
				Get_InventoryContactPermissionTypes_cmd.Flags().Bool("All", false, 
					`Get details of all the Contact Permission Types associated to Production Seasons.  Inventory Contact Permission Type is a mapping of a Contact Permission Type to a Production Season.` + "\nQuery:\n" + tq.JSONHighlight(`{"ProductionSeasonIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_InventoryWebContents_cmd) 
				Get_InventoryWebContents_cmd.Flags().Bool("All", false, 
					`Get details of all the inventoryWebContents.` + "\nQuery:\n" + tq.JSONHighlight(`{"ContentTypeIds":"string", "ProductionElementIds":"string"}`) + "\n") 
				Get_InventoryWebContents_cmd.Flags().Bool("AllSummaries", false, 
					`Get details of all the inventoryWebContents.` + "\nQuery:\n" + tq.JSONHighlight(`{"ContentTypeIds":"string", "ProductionElementIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_InvoiceBilling_cmd)
	
		Get_cmd.AddCommand(Get_Issues_cmd) 
				Get_Issues_cmd.Flags().Bool("All", false, 
					`Get all the details of all the issues for the specified constituent id. If you want to filter the issues based on date pass in the values for 'startDate' and 'endDate'. If you want to filter issues based on contact type, category, activity type, origin, performance number or package number pass in the corresponding values in comma separated values.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActivityTypeIds":"string", "CategoryIds":"string", "ConstituentID":"string", "ContactTypeIds":"string", "EndDate":"string", "IncludeAffiliations":"string", "OriginIds":"string", "PackageIds":"string", "PerformanceIds":"string", "Resolved":"string", "StartDate":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_KeywordCategories_cmd) 
				Get_KeywordCategories_cmd.Flags().Bool("All", false, 
					`Get all keyword categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_KeywordCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all keyword categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Keywords_cmd) 
				Get_Keywords_cmd.Flags().Bool("All", false, 
					`Get all keywords. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_Keywords_cmd.Flags().Bool("DataFor", false, 
					`Gets potential values for a Keyword as KeywordDataItems.` + "\nQuery:\n" + tq.JSONHighlight(`{"KeywordID":"string"}`) + "\n") 
				Get_Keywords_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all keywords.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Languages_cmd) 
				Get_Languages_cmd.Flags().Bool("All", false, 
					`Get all languages. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Languages_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all languages.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ListCategories_cmd) 
				Get_ListCategories_cmd.Flags().Bool("All", false, 
					`Get all list categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ListCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all list categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Lists_cmd) 
				Get_Lists_cmd.Flags().Bool("Contents", false, 
					`Gets Constituent ids for the contents of a List.` + "\nQuery:\n" + tq.JSONHighlight(`{"ListID":"string"}`) + "\n") 
				Get_Lists_cmd.Flags().Bool("ContentsDetail", false, 
					`Gets Constituent details for the contents of a List.` + "\nQuery:\n" + tq.JSONHighlight(`{"ListID":"string"}`) + "\n") 
				Get_Lists_cmd.Flags().Bool("ListCriterionMatchReasons", false, 
					`Returns list criteria match reasons for a constituent in a list.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "ListID":"string"}`) + "\n") 
				Get_Lists_cmd.Flags().Bool("Summaries", false, 
					`Get a summary of all Lists.` + "\nQuery:\n" + tq.JSONHighlight(`{"ListIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_LoginTypes_cmd) 
				Get_LoginTypes_cmd.Flags().Bool("All", false, 
					`Get all login types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_LoginTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all login types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_MachineSettings_cmd) 
				Get_MachineSettings_cmd.Flags().Bool("All", false, 
					`Get details of all Machine Settings. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_MachineSettings_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Machine Settings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_MailIndicators_cmd) 
				Get_MailIndicators_cmd.Flags().Bool("All", false, 
					`Get all mail indicators. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_MailIndicators_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all mail indicators.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_MediaTypes_cmd) 
				Get_MediaTypes_cmd.Flags().Bool("All", false, 
					`Get all media types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_MediaTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all media types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_MembershipLevelCategories_cmd) 
				Get_MembershipLevelCategories_cmd.Flags().Bool("All", false, 
					`Get all membership level categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_MembershipLevelCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all membership level categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_MembershipLevels_cmd) 
				Get_MembershipLevels_cmd.Flags().Bool("All", false, 
					`Get a summary list of all membership levels. MembershipOrgId is required.
NOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.` + "\nQuery:\n" + tq.JSONHighlight(`{"MembershipOrgID":"string"}`) + "\n") 
				Get_MembershipLevels_cmd.Flags().Bool("Summaries", false, 
					`Get a list of membership levels. MembershipOrgId is required.
NOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.` + "\nQuery:\n" + tq.JSONHighlight(`{"MembershipOrgID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_MembershipOrganizations_cmd) 
				Get_MembershipOrganizations_cmd.Flags().Bool("All", false, 
					`Get a list of all membership organizations.
NOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_MembershipOrganizations_cmd.Flags().Bool("Summaries", false, 
					`Get a list of all membership organizations in summary.
NOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_MembershipStandings_cmd) 
				Get_MembershipStandings_cmd.Flags().Bool("All", false, 
					`Get all Membership Standings.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_MembershipStandings_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all MembershipStandings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Memberships_cmd)
	
		Get_cmd.AddCommand(Get_MerchantReferences_cmd)
	
		Get_cmd.AddCommand(Get_Merchants_cmd)
	
		Get_cmd.AddCommand(Get_ModeOfSaleCategories_cmd) 
				Get_ModeOfSaleCategories_cmd.Flags().Bool("All", false, 
					`Get all mode of sale categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ModeOfSaleOffers_cmd) 
				Get_ModeOfSaleOffers_cmd.Flags().Bool("All", false, 
					`Get all mode of sale offers. The mode of sale id, performace ids, or package ids is required. Performance ids and package ids used together will return no results.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "ModeOfSaleID":"string", "PackageIds":"string", "PerformanceIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ModeOfSalePriceTypes_cmd) 
				Get_ModeOfSalePriceTypes_cmd.Flags().Bool("All", false, 
					`Get all mode of sale price types.` + "\nQuery:\n" + tq.JSONHighlight(`{"ModeOfSaleID":"string", "PriceTypeID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ModeOfSaleSurveyQuestions_cmd) 
				Get_ModeOfSaleSurveyQuestions_cmd.Flags().Bool("All", false, 
					`Get all mode of sale survey questions.` + "\nQuery:\n" + tq.JSONHighlight(`{"ModeOfSaleID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ModeOfSaleUserGroups_cmd) 
				Get_ModeOfSaleUserGroups_cmd.Flags().Bool("All", false, 
					`Get all mode of sale/user group mappings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ModesOfSale_cmd) 
				Get_ModesOfSale_cmd.Flags().Bool("All", false, 
					`Get all modes of sale.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_ModesOfSale_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all modes of sale.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_NScanAccessAreas_cmd) 
				Get_NScanAccessAreas_cmd.Flags().Bool("All", false, 
					`Get details of all NScan Access Areas. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_NScanAccessAreas_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all NScan Access Areas.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_NameStatuses_cmd) 
				Get_NameStatuses_cmd.Flags().Bool("All", false, 
					`Get all name statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_NameStatuses_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all name statuses.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ObjectPermissions_cmd) 
				Get_ObjectPermissions_cmd.Flags().Bool("All", false, 
					`Get all object permissions.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_ObjectPermissions_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all object permissions.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_OrderBilling_cmd) 
				Get_OrderBilling_cmd.Flags().Bool("Status", false, 
					`Get status of a processing automated billing run.` + "\nQuery:\n" + tq.JSONHighlight(`{"OrderBillingID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_OrderCategories_cmd) 
				Get_OrderCategories_cmd.Flags().Bool("All", false, 
					`Get all order categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_OrderCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all order categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Orders_cmd)
	
		Get_cmd.AddCommand(Get_Organizations_cmd) 
				Get_Organizations_cmd.Flags().Bool("All", false, 
					`Get all organizations. To get the resources in maintenance mode (ignoring control groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Organizations_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all organizations.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_OriginalSources_cmd) 
				Get_OriginalSources_cmd.Flags().Bool("All", false, 
					`Get all original sources. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_OriginalSources_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all original sources.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Origins_cmd) 
				Get_Origins_cmd.Flags().Bool("All", false, 
					`Get all origins. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Origins_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all origins.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_OutputSets_cmd) 
				Get_OutputSets_cmd.Flags().Bool("Summaries", false, 
					`Get a summary of all Output Sets.` + "\nQuery:\n" + tq.JSONHighlight(`{"MineOnly":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PackageHistory_cmd)
	
		Get_cmd.AddCommand(Get_PackagePriceTypes_cmd) 
				Get_PackagePriceTypes_cmd.Flags().Bool("All", false, 
					`Get all package price types.` + "\nQuery:\n" + tq.JSONHighlight(`{"PackageIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PackageTypes_cmd) 
				Get_PackageTypes_cmd.Flags().Bool("All", false, 
					`Get all package types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PackageTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all package types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PackageWebContents_cmd) 
				Get_PackageWebContents_cmd.Flags().Bool("All", false, 
					`Get full package web contents for passed packageIds or contentTypeIds.  At least on parameter value is required.  For production element web contents, use TXN/InventoryWebContents.  To filter based on useWebAPI flag on content type and other parameters, use Txn/WebContents. This is mainly used for PackageWebContent setup.` + "\nQuery:\n" + tq.JSONHighlight(`{"ContentTypeIds":"string", "PackageIds":"string"}`) + "\n") 
				Get_PackageWebContents_cmd.Flags().Bool("AllSummaries", false, 
					`Get summary package web contents for passed packageIds and contentTypeIds.  At least on parameter value is required.  For production element web contents, use TXN/InventoryWebContents.  To filter based on useWebAPI flag on content type and other parameters, use Txn/WebContents. This is mainly used for PackageWebContent setup.` + "\nQuery:\n" + tq.JSONHighlight(`{"ContentTypeIds":"string", "PackageIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Packages_cmd) 
				Get_Packages_cmd.Flags().Bool("All", false, 
					`Get all packages filtered by a selected season.` + "\nQuery:\n" + tq.JSONHighlight(`{"SeasonID":"string"}`) + "\n") 
				Get_Packages_cmd.Flags().Bool("PackageDetail", false, 
					`Gets detailed information about the package including sub packages and performance groups.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "ModeOfSaleID":"string", "PackageID":"string", "PriceTypeID":"string", "SourceID":"string"}`) + "\n") 
				Get_Packages_cmd.Flags().Bool("PerformanceGroupDetails", false, 
					`Get details of Performance Groups and their Performances for flex package selection.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "ModeOfSaleID":"string", "PackageID":"string", "PriceTypeID":"string", "SourceID":"string"}`) + "\n") 
				Get_Packages_cmd.Flags().Bool("Prices", false, 
					`Get the package and its pricing details.
Mode Of Sale and Price Type parameters can be used to filter the returned prices.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "ExpandPerformancePriceType":"string", "IncludeOnlyBasePrice":"string", "ModeOfSaleID":"string", "PackageID":"string", "PerformanceIds":"string", "PriceTypeID":"string", "SourceID":"string"}`) + "\n") 
				Get_Packages_cmd.Flags().Bool("SeatFees", false, 
					`Returns price, per seat fees, for each zone and price type for the specified package.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "ModeOfSaleID":"string", "PackageID":"string", "PriceTypeIds":"string"}`) + "\n") 
				Get_Packages_cmd.Flags().Bool("SeatSummaries", false, 
					`Returns summary for seats in a package.
Seat availability is summarized by screen, section and zone.
The seats returned can be filtered by screen, section, or price zone. Allocation is returned based on MOS and constituent.
Available seats can be filtered by price type availability, causing any seats that are not available for the specified price types to be listed with a status of 5, Not In Allocation.` + "\nQuery:\n" + tq.JSONHighlight(`{"CheckPriceTypeIds":"string", "ConstituentID":"string", "ModeOfSaleID":"string", "PackageID":"string", "ScreenIds":"string", "SectionIds":"string", "ZoneIds":"string"}`) + "\n") 
				Get_Packages_cmd.Flags().Bool("Seats", false, 
					`Returns details for seats in a fixed-seat package.
The seats returned can be filtered by screen, section, or price zone. Allocation is returned based on MOS and constituent.
Available seats can be filtered by price type availability, causing any seats that are not available for the specified price types to be listed with a status of 5, Not In Allocation.` + "\nQuery:\n" + tq.JSONHighlight(`{"CheckPriceTypeIds":"string", "ConstituentID":"string", "ModeOfSaleID":"string", "PackageID":"string", "ReturnNonSeats":"string", "ScreenIds":"string", "SectionIds":"string", "ZoneIds":"string"}`) + "\n") 
				Get_Packages_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all packages filtered by a selected season.` + "\nQuery:\n" + tq.JSONHighlight(`{"SeasonID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PaymentGatewayActivities_cmd) 
				Get_PaymentGatewayActivities_cmd.Flags().Bool("All", false, 
					`Retrieve all Payment Gateway Activity` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PaymentGatewayConfiguration_cmd)
	
		Get_cmd.AddCommand(Get_PaymentGatewayNotifications_cmd) 
				Get_PaymentGatewayNotifications_cmd.Flags().Bool("Check", false, 
					`` + "\nQuery:\n" + tq.JSONHighlight(`{"MerchantReference":"string", "SinceDateTime":"string"}`) + "\n") 
				Get_PaymentGatewayNotifications_cmd.Flags().Bool("Notification", false, 
					`Retrieve notification events from Tessitura Merchant Services for a given merchant (PSP) reference.` + "\nQuery:\n" + tq.JSONHighlight(`{"MerchantReference":"string"}`) + "\n") 
				Get_PaymentGatewayNotifications_cmd.Flags().Bool("NotificationEvent", false, 
					`Get notification event by Id.` + "\nQuery:\n" + tq.JSONHighlight(`{"NotificationEventID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PaymentGatewayTransactionTypes_cmd) 
				Get_PaymentGatewayTransactionTypes_cmd.Flags().Bool("All", false, 
					`Get details of all Payment Gateway Transaction Types. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PaymentGatewayTransactionTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Payment Gateway Transaction Types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PaymentHistory_cmd)
	
		Get_cmd.AddCommand(Get_PaymentMethodGroups_cmd) 
				Get_PaymentMethodGroups_cmd.Flags().Bool("All", false, 
					`Get all payment method groups. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PaymentMethodGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all payment method groups.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PaymentMethodUserGroups_cmd) 
				Get_PaymentMethodUserGroups_cmd.Flags().Bool("All", false, 
					`Get all payment method/user group mappings. Optional filter on UserGroup, Amount and MaintenanceMode (which overrides the filter on UserGroup)` + "\nQuery:\n" + tq.JSONHighlight(`{"Amount":"string", "MaintenanceMode":"string", "UserGroup":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PaymentMethods_cmd) 
				Get_PaymentMethods_cmd.Flags().Bool("All", false, 
					`Get all payment methods. This resource looks similar to referenceData resources, but is functionally different.  When maintenanceMode is false, control groups are considered when returning payment methods. The default for maintenanceMode is false. This endpoint should not generally be used for transaction based screens because it does not account for assigned payment methods based on user group security. For cart available payment methods, consider Security/PaymentMethods?amount={amount}.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string", "PaymentTypeIds":"string"}`) + "\n") 
				Get_PaymentMethods_cmd.Flags().Bool("Check", false, 
					`Check PaymentMethod setup for EMV or Hosted Payment charges.` + "\nQuery:\n" + tq.JSONHighlight(`{"CardReaderTypeID":"string"}`) + "\n") 
				Get_PaymentMethods_cmd.Flags().Bool("TranslateMnemonic", false, 
					`Translate a card mnemonic into the matching system PaymentMethod or the default fallback PaymentMethod for that CardReaderType` + "\nQuery:\n" + tq.JSONHighlight(`{"CardReaderTypeID":"string", "Mnemonic":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PaymentSignatures_cmd) 
				Get_PaymentSignatures_cmd.Flags().Bool("All", false, 
					`Get all payment signatures.` + "\nQuery:\n" + tq.JSONHighlight(`{"PaymentID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PaymentTypes_cmd) 
				Get_PaymentTypes_cmd.Flags().Bool("All", false, 
					`Get all payment types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PaymentTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all payment types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Payments_cmd) 
				Get_Payments_cmd.Flags().Bool("All", false, 
					`Get payments for a specified referenceId (order or contribution id).` + "\nQuery:\n" + tq.JSONHighlight(`{"ReferenceID":"string"}`) + "\n") 
				Get_Payments_cmd.Flags().Bool("AvailableForRefund", false, 
					`Retrieve cc payments available for refund by processor reference number` + "\nQuery:\n" + tq.JSONHighlight(`{"OrderIdsOrContributionIds":"string"}`) + "\n") 
				Get_Payments_cmd.Flags().Bool("OnAccountBalances", false, 
					`Gets a constituent's balance(s) for on-account payment methods` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "PaymentMethodID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PerformanceGroups_cmd) 
				Get_PerformanceGroups_cmd.Flags().Bool("All", false, 
					`Get all performance groups.` + "\nQuery:\n" + tq.JSONHighlight(`{"SeasonID":"string"}`) + "\n") 
				Get_PerformanceGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all performance groups.` + "\nQuery:\n" + tq.JSONHighlight(`{"SeasonID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PerformancePackageModeOfSales_cmd) 
				Get_PerformancePackageModeOfSales_cmd.Flags().Bool("All", false, 
					`Get all performance package mode of sales. This entity shows the Mode of Sale assignment to either a package or a performance.
Filter using at least one parameter.  All parameters work to filter the result set collectively, so passing packageIds and performanceIds in the same request will retrieve no rows.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "ModeOfSaleID":"string", "PackageIds":"string", "PerformanceIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PerformancePriceLayers_cmd) 
				Get_PerformancePriceLayers_cmd.Flags().Bool("Counts", false, 
					`Get count of performance price layers for a set of performances.` + "\nQuery:\n" + tq.JSONHighlight(`{"PerformanceIds":"string"}`) + "\n") 
				Get_PerformancePriceLayers_cmd.Flags().Bool("PriceCount", false, 
					`Gets the total count of price objects that will be collected when calling for the full price layer contract on these performanceIds.` + "\nQuery:\n" + tq.JSONHighlight(`{"PerformanceIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PerformancePriceTypes_cmd) 
				Get_PerformancePriceTypes_cmd.Flags().Bool("All", false, 
					`Get all performance price type for the list of performances. (Pass comma separated list of performance Ids as parameter)` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "PerformanceIds":"string", "PriceTypeIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PerformancePrices_cmd) 
				Get_PerformancePrices_cmd.Flags().Bool("All", false, 
					`Get all performance prices for a set of performance price types. Pass in asOfDateTime to get prices effective for that date/time.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "PerformancePriceTypeIds":"string"}`) + "\n") 
				Get_PerformancePrices_cmd.Flags().Bool("AllWithEvents", false, 
					`Get details of a set of performance prices along with events associated with those prices.` + "\nQuery:\n" + tq.JSONHighlight(`{"PerformancePriceIds":"string"}`) + "\n") 
				Get_PerformancePrices_cmd.Flags().Bool("Audit", false, 
					`Get the performance price audit entries for a set of performance prices.` + "\nQuery:\n" + tq.JSONHighlight(`{"PerformancePriceIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PerformanceStatuses_cmd) 
				Get_PerformanceStatuses_cmd.Flags().Bool("All", false, 
					`Get all performance statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PerformanceStatuses_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all performance statuses.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PerformanceTypes_cmd) 
				Get_PerformanceTypes_cmd.Flags().Bool("All", false, 
					`Get all performance types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PerformanceTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all performance types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Performances_cmd) 
				Get_Performances_cmd.Flags().Bool("All", false, 
					`Get performance detail information
For single production season, a comma separated list of performances, seasons, or a single production season.  At least one filter parameter is required.` + "\nQuery:\n" + tq.JSONHighlight(`{"PerformanceIds":"string", "ProductionSeasonID":"string", "SeasonIds":"string"}`) + "\n") 
				Get_Performances_cmd.Flags().Bool("AuditEntries", false, 
					`Audit log entries for changes to Performance properties such as descriptions, publish dates, and the production season. This does not include sub performance/event setup items like pricing or modes of sale.` + "\nQuery:\n" + tq.JSONHighlight(`{"Actions":"string", "Columns":"string", "EndDateTime":"string", "GreaterThanID":"string", "OrderByIDAsc":"string", "Page":"string", "PageSize":"string", "PerformanceIds":"string", "StartDateTime":"string", "Tables":"string"}`) + "\n") 
				Get_Performances_cmd.Flags().Bool("PerformanceZoneAvailabilities", false, 
					`Get performance zone availability for a set of performances.  If sectionIds are specified only zones with
matching sections will be returned and the SectionSummaries node will be populated.` + "\nQuery:\n" + tq.JSONHighlight(`{"PerformanceIds":"string", "SectionIds":"string"}`) + "\n") 
				Get_Performances_cmd.Flags().Bool("PerformanceZoneAvailabilityWithConstituent", false, 
					`Get performance zone availability for a set of performances. If ConstituentId and MOS are provided, will also return availability based on allocations and constituent rank.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "ModeOfSaleID":"string", "PerformanceIds":"string"}`) + "\n") 
				Get_Performances_cmd.Flags().Bool("Prices", false, 
					`Get pricing details for a set of performances.
Mode Of Sale and Price Type parameters can be used to filter the returned prices.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "ExpandPerformancePriceType":"string", "IncludeOnlyBasePrice":"string", "ModeOfSaleID":"string", "PerformanceIds":"string", "PriceTypeID":"string", "SourceID":"string"}`) + "\n") 
				Get_Performances_cmd.Flags().Bool("SeatFees", false, 
					`Returns price, per seat fees, for each zone and price type for a the specified performance` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "ModeOfSaleID":"string", "PerformanceID":"string", "PriceTypeIds":"string"}`) + "\n") 
				Get_Performances_cmd.Flags().Bool("SeatHoldDetails", false, 
					`Get seat holds for a performance` + "\nQuery:\n" + tq.JSONHighlight(`{"HoldCodeIds":"string", "IncludeAllHolds":"string", "PerformanceID":"string", "SeatIds":"string"}`) + "\n") 
				Get_Performances_cmd.Flags().Bool("SeatSummaries", false, 
					`Returns summary for seats in a performance
Seat availability is summarized by screen, section and zone.
The seats returned can be filtered by screen, section, or price zone. Allocation is returned based on MOS and constituent.
Available seats can be filtered by price type availability, causing any seats that are not available for the specified price types to be listed with a status of 5, Not In Allocation.` + "\nQuery:\n" + tq.JSONHighlight(`{"CheckPriceTypeIds":"string", "ConstituentID":"string", "ModeOfSaleID":"string", "PerformanceID":"string", "ScreenIds":"string", "SectionIds":"string", "ZoneIds":"string"}`) + "\n") 
				Get_Performances_cmd.Flags().Bool("Seats", false, 
					`Returns details for seats in a performance
The seats returned can be filtered by screen, section, or price zone. Allocation is returned based on MOS and constituent.
Available seats can be filtered by price type availability, causing any seats that are not available for the specified price types to be listed with a status of 5, Not In Allocation.` + "\nQuery:\n" + tq.JSONHighlight(`{"CheckPriceTypeIds":"string", "ConstituentID":"string", "ModeOfSaleID":"string", "PerformanceID":"string", "ReturnNonSeats":"string", "ScreenIds":"string", "SectionIds":"string", "ZoneIds":"string"}`) + "\n") 
				Get_Performances_cmd.Flags().Bool("Summaries", false, 
					`Get Summary performance information
For single production season, a comma separated list of performances, seasons, or a single production season. At least one filter parameter is required.` + "\nQuery:\n" + tq.JSONHighlight(`{"PerformanceIds":"string", "ProductionSeasonID":"string", "SeasonIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Philanthropy_cmd) 
				Get_Philanthropy_cmd.Flags().Bool("All", false, 
					`Get details of all the philanthropyEntries for the specified constituent id and all its visible affiliation's philanthropyEntries as well. To exclude philanthropyEntries of the visible affiliations pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PhilanthropyTypes_cmd) 
				Get_PhilanthropyTypes_cmd.Flags().Bool("All", false, 
					`Get all philosophy types. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PhilanthropyTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all philosophy types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PhoneIndicators_cmd) 
				Get_PhoneIndicators_cmd.Flags().Bool("All", false, 
					`Get all phone indicators. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PhoneIndicators_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all phone indicators.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PhoneTypes_cmd) 
				Get_PhoneTypes_cmd.Flags().Bool("All", false, 
					`Get all phone types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PhoneTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all phone types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Phones_cmd) 
				Get_Phones_cmd.Flags().Bool("All", false, 
					`Get details of all the phones for the specified constituent (constituentId) and all its visible affiliation's phones as well or address (addressId). To exclude phones of the visible affiliations pass includeAffiliations=false. If addressId is passed, constituentId or includeAffiliations parameters are ignored. To Get the phones attached to the primary address pass primary=true.` + "\nQuery:\n" + tq.JSONHighlight(`{"AddressID":"string", "ConstituentID":"string", "IncludeAffiliations":"string", "PrimaryOnly":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PlanPriorities_cmd) 
				Get_PlanPriorities_cmd.Flags().Bool("All", false, 
					`Get all plan priorities. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PlanPriorities_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all plan priorities.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PlanSources_cmd) 
				Get_PlanSources_cmd.Flags().Bool("All", false, 
					`Get all plan sources. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PlanSources_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all plan sources.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PlanStatuses_cmd) 
				Get_PlanStatuses_cmd.Flags().Bool("All", false, 
					`Get all plan statuses. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PlanStatuses_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all plan statuses.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PlanTypes_cmd) 
				Get_PlanTypes_cmd.Flags().Bool("All", false, 
					`Get all plan types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PlanTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all plan types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PlanWorkers_cmd) 
				Get_PlanWorkers_cmd.Flags().Bool("All", false, 
					`Get details of all the plan workers for the specified constituent.` + "\nQuery:\n" + tq.JSONHighlight(`{"PlanID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Plans_cmd) 
				Get_Plans_cmd.Flags().Bool("All", false, 
					`Get details of all the plans for the specified constituent, campaign, worker or fund.` + "\nQuery:\n" + tq.JSONHighlight(`{"CampaignID":"string", "ConstituentID":"string", "ContributionDesignationID":"string", "FundID":"string", "IncludeAffiliations":"string", "IncludeAssociates":"string", "ListID":"string", "OnlyNullFund":"string", "WorkerID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PledgeBilling_cmd)
	
		Get_cmd.AddCommand(Get_PortfolioCustomElements_cmd) 
				Get_PortfolioCustomElements_cmd.Flags().Bool("All", false, 
					`Get all portfolio custom elements. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PortfolioCustomElements_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all portfolio custom elements.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Portfolios_cmd) 
				Get_Portfolios_cmd.Flags().Bool("PortfolioEntry", false, 
					`Get details of a portfolio entry for a plan.` + "\nQuery:\n" + tq.JSONHighlight(`{"PlanID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Prefixes_cmd) 
				Get_Prefixes_cmd.Flags().Bool("All", false, 
					`Get all prefixes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Prefixes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all prefixes.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Premieres_cmd) 
				Get_Premieres_cmd.Flags().Bool("All", false, 
					`Get all premieres. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Premieres_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all premieres.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PriceCategories_cmd) 
				Get_PriceCategories_cmd.Flags().Bool("All", false, 
					`Get all price categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PriceCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all price categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PriceEvents_cmd) 
				Get_PriceEvents_cmd.Flags().Bool("All", false, 
					`Get all price events for a performance, performance price type or performance price detail. From and To Date parameters can be used to filter the events. If both are specified, then events between those dates would be returned. If only fromDate is specified then all events with a startDate greater than that date would be returned. If only toDate is specified then all events with a startDate less than that date would be returned.` + "\nQuery:\n" + tq.JSONHighlight(`{"FromDate":"string", "PerformanceIds":"string", "PerformancePriceIds":"string", "PerformancePriceLayerIds":"string", "PerformancePriceTypeIds":"string", "ToDate":"string"}`) + "\n") 
				Get_PriceEvents_cmd.Flags().Bool("Dates", false, 
					`Gets a distinct set of dates that contain events for the given list of performances.` + "\nQuery:\n" + tq.JSONHighlight(`{"PerformanceIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PriceLayerTypes_cmd) 
				Get_PriceLayerTypes_cmd.Flags().Bool("All", false, 
					`Get all price layer types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PriceLayerTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all price layer types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PriceTemplates_cmd) 
				Get_PriceTemplates_cmd.Flags().Bool("All", false, 
					`Get all price templates. Optionally filtered by zoneMap and/or facility.` + "\nQuery:\n" + tq.JSONHighlight(`{"FacilityID":"string", "ZoneMapID":"string"}`) + "\n") 
				Get_PriceTemplates_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all price templates. Optionally filtered by zoneMap and/or facility.` + "\nQuery:\n" + tq.JSONHighlight(`{"FacilityID":"string", "ZoneMapID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PriceTypeCategories_cmd) 
				Get_PriceTypeCategories_cmd.Flags().Bool("All", false, 
					`Get all price type categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PriceTypeCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all price type categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PriceTypeGroups_cmd) 
				Get_PriceTypeGroups_cmd.Flags().Bool("All", false, 
					`Get all price type groups. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PriceTypeGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all price type groups.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PriceTypeReasons_cmd) 
				Get_PriceTypeReasons_cmd.Flags().Bool("All", false, 
					`Get all price type reasons. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PriceTypeReasons_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all price type categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PriceTypeUserGroups_cmd) 
				Get_PriceTypeUserGroups_cmd.Flags().Bool("All", false, 
					`Get all price type/user group mappings.  Optional filter on UserGroup and PriceType.` + "\nQuery:\n" + tq.JSONHighlight(`{"PriceTypeID":"string", "UserGroup":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PriceTypes_cmd) 
				Get_PriceTypes_cmd.Flags().Bool("All", false, 
					`Get all price types.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PriceTypes_cmd.Flags().Bool("Reasons", false, 
					`Gets valid price type reasons for the specified price type` + "\nQuery:\n" + tq.JSONHighlight(`{"PriceTypeID":"string"}`) + "\n") 
				Get_PriceTypes_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all price types.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PriceTypes_cmd.Flags().Bool("ValidPriceTypes", false, 
					`Get all valid price types for a performance/package and a mode of sale. A comma separated list of performance ids can be specified for a flex package.` + "\nQuery:\n" + tq.JSONHighlight(`{"ModeOfSaleID":"string", "OrderDateTime":"string", "PackageID":"string", "PerformanceIds":"string", "SourceID":"string"}`) + "\n") 
				Get_PriceTypes_cmd.Flags().Bool("ValidZones", false, 
					`Get valid zones for a set of performances or packages.` + "\nQuery:\n" + tq.JSONHighlight(`{"OrderDateTime":"string", "PackageID":"string", "PerformanceID":"string", "PriceTypeID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_PricingRuleCategories_cmd) 
				Get_PricingRuleCategories_cmd.Flags().Bool("All", false, 
					`Get all pricing rule categories. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_PricingRuleCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all pricing rule categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PricingRuleMessageTypes_cmd) 
				Get_PricingRuleMessageTypes_cmd.Flags().Bool("All", false, 
					`Get all pricing rule message types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PricingRuleMessageTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all pricing rule message types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PricingRuleSets_cmd) 
				Get_PricingRuleSets_cmd.Flags().Bool("All", false, 
					`Get all pricing rule sets.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_PricingRuleSets_cmd.Flags().Bool("Summaries", false, 
					`Get a summary of all pricing rule sets.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PricingRuleTypes_cmd) 
				Get_PricingRuleTypes_cmd.Flags().Bool("All", false, 
					`Get all pricing rule types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_PricingRuleTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all pricing rule types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_PricingRules_cmd) 
				Get_PricingRules_cmd.Flags().Bool("All", false, 
					`Gets all pricing rules or filtered set` + "\nQuery:\n" + tq.JSONHighlight(`{"ModeOfSaleID":"string", "OrderDate":"string", "PackageIds":"string", "PerformanceIds":"string"}`) + "\n") 
				Get_PricingRules_cmd.Flags().Bool("AllSummary", false, 
					`Get a summary of all pricing rules.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Printers_cmd) 
				Get_Printers_cmd.Flags().Bool("All", false, 
					`Get all printers. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Printers_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all printers.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ProductKeywords_cmd)
	
		Get_cmd.AddCommand(Get_ProductionSeasonMembershipOrganizations_cmd) 
				Get_ProductionSeasonMembershipOrganizations_cmd.Flags().Bool("All", false, 
					`Get all production season membership organizations for a production season.` + "\nQuery:\n" + tq.JSONHighlight(`{"ProductionSeasonID":"string"}`) + "\n") 
				Get_ProductionSeasonMembershipOrganizations_cmd.Flags().Bool("Summaries", false, 
					`Get a summary of all production season membership organizations for a production season.` + "\nQuery:\n" + tq.JSONHighlight(`{"ProductionSeasonID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ProductionSeasons_cmd) 
				Get_ProductionSeasons_cmd.Flags().Bool("All", false, 
					`Get production season details.
Returns the full details for multiple production seasons (based on a string of production IDs or season IDs), including description and short description, season, first and last performance date, and the four ticket text lines.` + "\nQuery:\n" + tq.JSONHighlight(`{"Ids":"string", "ProductionIds":"string", "SeasonIds":"string"}`) + "\n") 
				Get_ProductionSeasons_cmd.Flags().Bool("Summaries", false, 
					`Get production season summaries.
Returns the production season summary (description, ID, and related production and season summaries) for all production seasons, all production seasons of a string of specific productions, or all production seasons in a string of specified seasons.` + "\nQuery:\n" + tq.JSONHighlight(`{"Ids":"string", "ProductionIds":"string", "SeasonIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Productions_cmd) 
				Get_Productions_cmd.Flags().Bool("All", false, 
					`Get all productions, Optionally filtered by one or more titles.` + "\nQuery:\n" + tq.JSONHighlight(`{"TitleIds":"string"}`) + "\n") 
				Get_Productions_cmd.Flags().Bool("Summaries", false, 
					`Get all production summaries, Optionally filtered by one or more titles.` + "\nQuery:\n" + tq.JSONHighlight(`{"TitleIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ProgramListings_cmd) 
				Get_ProgramListings_cmd.Flags().Bool("All", false, 
					`Get details of all the program listings for the specified constituent id and all its visible affiliation's program listings as well. To exclude program listings of the visible affiliations pass includeAffiliations=false. To Get The primary program listings alone, pass primaryOnly=true.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Programs_cmd) 
				Get_Programs_cmd.Flags().Bool("All", false, 
					`Get all programs. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_Programs_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all programs.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Pronouns_cmd) 
				Get_Pronouns_cmd.Flags().Bool("All", false, 
					`` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Pronouns_cmd.Flags().Bool("Summaries", false, 
					`` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_QualificationCategories_cmd) 
				Get_QualificationCategories_cmd.Flags().Bool("All", false, 
					`Get the details of all Qualification Categories. To get the resources only if the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_QualificationCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Qualification Categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Qualifications_cmd) 
				Get_Qualifications_cmd.Flags().Bool("All", false, 
					`Get all Qualifications. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).S` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_Qualifications_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Qualifications.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_QueryElementFilters_cmd) 
				Get_QueryElementFilters_cmd.Flags().Bool("All", false, 
					`Get available query element filters for one or more query element groups.` + "\nQuery:\n" + tq.JSONHighlight(`{"GroupIds":"string"}`) + "\n") 
				Get_QueryElementFilters_cmd.Flags().Bool("DataFor", false, 
					`Get values for a query element filter.` + "\nQuery:\n" + tq.JSONHighlight(`{"QueryElementFilterID":"string"}`) + "\n") 
				Get_QueryElementFilters_cmd.Flags().Bool("Summaries", false, 
					`Get summary of query element filters for one or more query element groups.` + "\nQuery:\n" + tq.JSONHighlight(`{"GroupIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_QueryElementGroups_cmd) 
				Get_QueryElementGroups_cmd.Flags().Bool("All", false, 
					`Get all query element groups.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_QueryElements_cmd) 
				Get_QueryElements_cmd.Flags().Bool("All", false, 
					`Get a list of query elements optionally filtered by one or more GroupIds or if they're active only.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveOnly":"string", "GroupIds":"string"}`) + "\n") 
				Get_QueryElements_cmd.Flags().Bool("Summaries", false, 
					`Get a list of query elements in summary optionally filtered by one or more GroupIds or if they're active only.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveOnly":"string", "GroupIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_RankTypes_cmd) 
				Get_RankTypes_cmd.Flags().Bool("All", false, 
					`Get all rank types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_RankTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all rank types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Rankings_cmd) 
				Get_Rankings_cmd.Flags().Bool("All", false, 
					`Get details of all the rankings for the specified constituent id and all its visible affiliation's rankings as well. To exclude rankings of the visible affiliations pass includeAffiliations=false. To Get The primary rankings alone, pass primaryOnly=true.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ReceiptSettings_cmd) 
				Get_ReceiptSettings_cmd.Flags().Bool("All", false, 
					`Get all Receipt Settings. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ReceiptSettings_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Receipt Settings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ReferenceColumns_cmd) 
				Get_ReferenceColumns_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all reference columns.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ReferenceTableUserGroups_cmd) 
				Get_ReferenceTableUserGroups_cmd.Flags().Bool("All", false, 
					`Get all the reference table/user group mappings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_ReferenceTableUserGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all reference table/user group mappings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ReferenceTables_cmd) 
				Get_ReferenceTables_cmd.Flags().Bool("All", false, 
					`Get all reference tables. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ReferenceTables_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all reference tables.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_RelationshipCategories_cmd) 
				Get_RelationshipCategories_cmd.Flags().Bool("All", false, 
					`Get all relationship categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_RelationshipCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all relationship categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Relationships_cmd)
	
		Get_cmd.AddCommand(Get_ReportRequests_cmd) 
				Get_ReportRequests_cmd.Flags().Bool("All", false, 
					`Get all requests, optionally filtered by active requests only.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveOnly":"string"}`) + "\n") 
				Get_ReportRequests_cmd.Flags().Bool("AllExpired", false, 
					`Get a list of all the expired requests of the specified report types as of the provided date time.` + "\nQuery:\n" + tq.JSONHighlight(`{"AsOfDateTime":"string", "ReportTypes":"string"}`) + "\n") 
				Get_ReportRequests_cmd.Flags().Bool("Queued", false, 
					`Get a list of all the requests queued to be run as of the current date/time.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ReportSchedules_cmd) 
				Get_ReportSchedules_cmd.Flags().Bool("All", false, 
					`Get all report schedules, optionally filtered by active only.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveOnly":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ReportUserGroups_cmd) 
				Get_ReportUserGroups_cmd.Flags().Bool("All", false, 
					`Get all report/user group mappings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_ReportUserGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all report/user group mappings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Reports_cmd) 
				Get_Reports_cmd.Flags().Bool("All", false, 
					`Get all reports, Optionally filtered by type.` + "\nQuery:\n" + tq.JSONHighlight(`{"Type":"string"}`) + "\n") 
				Get_Reports_cmd.Flags().Bool("CustomData", false, 
					`Get custom data for a report parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"ParameterID":"string", "ReportID":"string"}`) + "\n") 
				Get_Reports_cmd.Flags().Bool("ReportCategories", false, 
					`Get all report categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_Reports_cmd.Flags().Bool("ReportDefaults", false, 
					`Get report defaults for the specified user group.` + "\nQuery:\n" + tq.JSONHighlight(`{"UserGroup":"string"}`) + "\n") 
				Get_Reports_cmd.Flags().Bool("ReportParameters", false, 
					`Get report parameters.` + "\nQuery:\n" + tq.JSONHighlight(`{"ReportID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Research_cmd) 
				Get_Research_cmd.Flags().Bool("All", false, 
					`Get details of all the research for the specified constituent id and all its visible affiliation's researches as well. To exclude researches of the visible affiliations pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ResearchTypes_cmd) 
				Get_ResearchTypes_cmd.Flags().Bool("All", false, 
					`Get all research types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_ResearchTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all research types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ResourceCategories_cmd) 
				Get_ResourceCategories_cmd.Flags().Bool("All", false, 
					`Get details of all Resource Categories. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ResourceCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Resource Categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ResourceSchedules_cmd) 
				Get_ResourceSchedules_cmd.Flags().Bool("All", false, 
					`Get a list of resource schedules for resources or workers. One of 'resourceIds' or 'constituentIds' parameters must be provided.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentIds":"string", "EndDate":"string", "ResourceIds":"string", "StartDate":"string", "TypeIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ResourceTypes_cmd) 
				Get_ResourceTypes_cmd.Flags().Bool("All", false, 
					`Get all resource types.` + "\nQuery:\n" + tq.JSONHighlight(`{"CategoryIds":"string"}`) + "\n") 
				Get_ResourceTypes_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all resource types.` + "\nQuery:\n" + tq.JSONHighlight(`{"CategoryIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Resources_cmd) 
				Get_Resources_cmd.Flags().Bool("All", false, 
					`Get all resources optionally filtered by Resource Type, Category, or ConstituentId (for Worker type only). IncludeAffiliations parameter only accepted when ConstituentId provided.` + "\nQuery:\n" + tq.JSONHighlight(`{"CategoryIds":"string", "ConstituentID":"string", "IncludeAffiliations":"string", "ResourceTypeIds":"string"}`) + "\n") 
				Get_Resources_cmd.Flags().Bool("Details", false, 
					`Get schedules and qualifications that apply to a set of resources and/or constituents during certain period of time.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentIds":"string", "EndDateTime":"string", "ExpandWorkerAssignments":"string", "ResourceIds":"string", "StartDateTime":"string"}`) + "\n") 
				Get_Resources_cmd.Flags().Bool("HasUsages", false, 
					`Get the resource usage information.` + "\nQuery:\n" + tq.JSONHighlight(`{"ID":"string"}`) + "\n") 
				Get_Resources_cmd.Flags().Bool("Summaries", false, 
					`Get all resources in summary optionally filtered by Resource Type, Category, or Constituent (for Worker Type only). IncludeAffiliations parameter only accepted when ConstituentId provided.` + "\nQuery:\n" + tq.JSONHighlight(`{"CategoryIds":"string", "ConstituentID":"string", "IncludeAffiliations":"string", "ResourceTypeIds":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_SalesChannels_cmd) 
				Get_SalesChannels_cmd.Flags().Bool("All", false, 
					`Get all sales channels. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_SalesChannels_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all sales channels.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SalesLayoutButtonTypes_cmd) 
				Get_SalesLayoutButtonTypes_cmd.Flags().Bool("All", false, 
					`Get all sales layout button types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_SalesLayoutButtonTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all sales layout button types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SalesLayouts_cmd) 
				Get_SalesLayouts_cmd.Flags().Bool("ForSale", false, 
					`Get details of a sales layout for use in orders.` + "\nQuery:\n" + tq.JSONHighlight(`{"ModeOfSaleID":"string", "OrderDateTime":"string", "SalesLayoutID":"string"}`) + "\n") 
				Get_SalesLayouts_cmd.Flags().Bool("Summaries", false, 
					`Get all sales layouts setup.` + "\nQuery:\n" + tq.JSONHighlight(`{"PrimaryOnly":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_SalutationTypes_cmd) 
				Get_SalutationTypes_cmd.Flags().Bool("All", false, 
					`Get all salutation types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_SalutationTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all salutation types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Salutations_cmd) 
				Get_Salutations_cmd.Flags().Bool("All", false, 
					`Get details of all the salutations for the specified constituent id and all its visible affiliation's salutations as well. To exclude salutations of the visible affiliations pass includeAffiliations=false.To fetch default salutations alone pass defaultOnly=true.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "DefaultOnly":"string", "IncludeAffiliations":"string", "IncludeFromAffiliations":"string"}`) + "\n") 
				Get_Salutations_cmd.Flags().Bool("Generate", false, 
					`Generates values for the fields required for the salutation, last name and sort name using the values passed as query parameters. If you pass in value for 'constituentId' there is no need to pass values for any other parameters. Even if it is passed they are ignored. If value for constituentId is not passed, values for other parameters should be passed. In this case values for either 'constituentTypeId' or 'formulaId' should be passed.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "ConstituentTypeID":"string", "Fname1":"string", "Fname2":"string", "FormulaID":"string", "Gender1":"string", "Gender2":"string", "Lname1":"string", "Lname2":"string", "LnameGroup":"string", "MaxLength":"string", "Mname1":"string", "Mname2":"string", "Prefix1":"string", "Prefix2":"string", "Status1":"string", "Status2":"string", "Suffix1":"string", "Suffix2":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_SchedulePatternTypes_cmd) 
				Get_SchedulePatternTypes_cmd.Flags().Bool("All", false, 
					`Get details of all Schedule Patterns. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_SchedulePatternTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Schedule Patterns.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ScheduleTypes_cmd) 
				Get_ScheduleTypes_cmd.Flags().Bool("All", false, 
					`Get details of all Schedule Types. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ScheduleTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Schedule Types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SeasonTypes_cmd) 
				Get_SeasonTypes_cmd.Flags().Bool("All", false, 
					`Get all season types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_SeasonTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all season types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Seasons_cmd) 
				Get_Seasons_cmd.Flags().Bool("All", false, 
					`Get all seasons. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_Seasons_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all seasons.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SeatCodes_cmd) 
				Get_SeatCodes_cmd.Flags().Bool("All", false, 
					`Get all seat codes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_SeatCodes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all seat codes.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SeatStatuses_cmd) 
				Get_SeatStatuses_cmd.Flags().Bool("All", false, 
					`Get all seat statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_SeatStatuses_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all seat statuses.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Sections_cmd) 
				Get_Sections_cmd.Flags().Bool("All", false, 
					`Get all sections. To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string", "SeatMapID":"string"}`) + "\n") 
				Get_Sections_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all sections.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SecurityBatchTypes_cmd)
	
		Get_cmd.AddCommand(Get_SecurityControlGroups_cmd)
	
		Get_cmd.AddCommand(Get_SecurityHoldCodes_cmd)
	
		Get_cmd.AddCommand(Get_SecurityModesOfSale_cmd)
	
		Get_cmd.AddCommand(Get_SecurityObjectPermissions_cmd)
	
		Get_cmd.AddCommand(Get_SecurityPaymentMethods_cmd)
	
		Get_cmd.AddCommand(Get_SecurityPriceTypes_cmd)
	
		Get_cmd.AddCommand(Get_SecurityReferenceTables_cmd)
	
		Get_cmd.AddCommand(Get_SecurityReports_cmd)
	
		Get_cmd.AddCommand(Get_SecurityServiceResources_cmd)
	
		Get_cmd.AddCommand(Get_SecurityUserGroups_cmd) 
				Get_SecurityUserGroups_cmd.Flags().Bool("DefaultUserGroup", false, 
					`Get the default security user group.` + "\nQuery:\n" + tq.JSONHighlight(`{"UserName":"string"}`) + "\n") 
				Get_SecurityUserGroups_cmd.Flags().Bool("ManagedGroups", false, 
					`Get all managed security user groups.` + "\nQuery:\n" + tq.JSONHighlight(`{"UserName":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ServiceResourceUserGroups_cmd) 
				Get_ServiceResourceUserGroups_cmd.Flags().Bool("All", false, 
					`Get all service resource/user group mappings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_ServiceResourceUserGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all service resource/user group mappings.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ServiceResources_cmd) 
				Get_ServiceResources_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all service resources.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Session_cmd) 
				Get_Session_cmd.Flags().Bool("Default", false, 
					`Returns summary information for the specified default, including value` + "\nQuery:\n" + tq.JSONHighlight(`{"FieldName":"string", "SessionKey":"string"}`) + "\n") 
				Get_Session_cmd.Flags().Bool("DeliveryMethods", false, 
					`Returns the available delivery methods for the session
Delivery method availability is based on the mode of sale. NOTE:  The Hold at Box Office delivery method(ID -1) is always returned. Web code must be used to filter out this delivery method as needed.` + "\nQuery:\n" + tq.JSONHighlight(`{"SessionKey":"string"}`) + "\n") 
				Get_Session_cmd.Flags().Bool("Expiration", false, 
					`Returns the deadline after which a session's reserved seats will be released
When called on a session without an established Seat Server session, one will be created for it.  Once the session is created, the deadline will apply regardless of whether or not any tickets have been added to the cart.` + "\nQuery:\n" + tq.JSONHighlight(`{"SessionKey":"string"}`) + "\n") 
				Get_Session_cmd.Flags().Bool("OnAccountBalances", false, 
					`Returns the balance of on account money held by the constituent associated to the provided session key.
Results can be filtered by specific on-account payment methods. The Amount used in current session is also indicated.` + "\nQuery:\n" + tq.JSONHighlight(`{"PaymentMethodIds":"string", "SessionKey":"string"}`) + "\n") 
				Get_Session_cmd.Flags().Bool("OrderSearch", false, 
					`Returns summary details for all orders belonging to the session's authenticated constituent. 
Returned orders can be filtered by print status, performance date, season, mode of sale, delivery method, and whether or not an order was created by a rollover.` + "\nQuery:\n" + tq.JSONHighlight(`{"DeliveryMethodID":"string", "IncludeAffiliations":"string", "IncludeUnfulfilledRollovers":"string", "ModeOfSaleID":"string", "PerfEndDate":"string", "PerfStartDate":"string", "RenewalsOnly":"string", "SeasonID":"string", "SessionKey":"string", "UnprintedOnly":"string"}`) + "\n") 
				Get_Session_cmd.Flags().Bool("Variable", false, 
					`Returns the value of the specified session variable.` + "\nQuery:\n" + tq.JSONHighlight(`{"SessionKey":"string", "VariableName":"string"}`) + "\n") 
				Get_Session_cmd.Flags().Bool("Variables", false, 
					`Returns a list of all name/value pair variables for the specified session.` + "\nQuery:\n" + tq.JSONHighlight(`{"SessionKey":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_SourceGroups_cmd) 
				Get_SourceGroups_cmd.Flags().Bool("All", false, 
					`Get all source groups. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_SourceGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all source groups.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Sources_cmd) 
				Get_Sources_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all Sources.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveOnly":"string", "AppealIds":"string"}`) + "\n") 
				Get_Sources_cmd.Flags().Bool("WebExpiring", false, 
					`Gets the source codes configured as the web default that are expiring in 15 days without an overlapping source code.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SpecialActivities_cmd) 
				Get_SpecialActivities_cmd.Flags().Bool("All", false, 
					`Get details of all the activity records for the specified constituent id and all its visible affiliations' activity records as well. To exclude activity records of the visible affiliations, pass includeAffiliations=false.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_SpecialActivityStatuses_cmd) 
				Get_SpecialActivityStatuses_cmd.Flags().Bool("All", false, 
					`Get details of all Special Activity Statuses. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_SpecialActivityStatuses_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Special Activity Statuses.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SpecialActivityTypes_cmd) 
				Get_SpecialActivityTypes_cmd.Flags().Bool("All", false, 
					`Get all Special Activity Types. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_SpecialActivityTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Special Activity Types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_States_cmd) 
				Get_States_cmd.Flags().Bool("All", false, 
					`Get all states. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_States_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all states.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_StepTypes_cmd) 
				Get_StepTypes_cmd.Flags().Bool("All", false, 
					`Get all step types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_StepTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all step types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Steps_cmd) 
				Get_Steps_cmd.Flags().Bool("All", false, 
					`Get details of all the steps for the specified plan, constituent or associate.` + "\nQuery:\n" + tq.JSONHighlight(`{"AssociateID":"string", "ConstituentID":"string", "IncludeAffiliations":"string", "IncludeAssociates":"string", "PlanID":"string"}`) + "\n") 
				Get_Steps_cmd.Flags().Bool("AllDocumentSummaries", false, 
					`Get summary of all the documents associated with the step. (Excluding the file contents)` + "\nQuery:\n" + tq.JSONHighlight(`{"StepID":"string"}`) + "\n") 
				Get_Steps_cmd.Flags().Bool("AllDocuments", false, 
					`Get all the documents associated with the step (Including the file contents).` + "\nQuery:\n" + tq.JSONHighlight(`{"StepID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_SubLineItemStatuses_cmd) 
				Get_SubLineItemStatuses_cmd.Flags().Bool("All", false, 
					`Get all sub line item statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_SubLineItemStatuses_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all sub line item statuses.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SubLineItems_cmd)
	
		Get_cmd.AddCommand(Get_Suffixes_cmd) 
				Get_Suffixes_cmd.Flags().Bool("All", false, 
					`Get all suffixes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Suffixes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all suffixes.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SurveyQuestions_cmd) 
				Get_SurveyQuestions_cmd.Flags().Bool("All", false, 
					`Get details of all survey questions. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). Optionally provide a mode of sale id.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string", "ModeOfSaleID":"string"}`) + "\n") 
				Get_SurveyQuestions_cmd.Flags().Bool("DataFor", false, 
					`Get answer data for a survey question if it refers to another reference table.` + "\nQuery:\n" + tq.JSONHighlight(`{"QuestionID":"string"}`) + "\n") 
				Get_SurveyQuestions_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all survey questions.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_SurveyResponses_cmd) 
				Get_SurveyResponses_cmd.Flags().Bool("All", false, 
					`Get all survey responses.` + "\nQuery:\n" + tq.JSONHighlight(`{"OrderID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_SystemDefaults_cmd) 
				Get_SystemDefaults_cmd.Flags().Bool("Default", false, 
					`Get default summaries for specified keys, delimited by comma ("?keys=COMPANY_NAME,REQUIRE_ADDRESS").  This resource resolves organizational and global defaults to ensure that only one is returned per key (field name).  No default will be returned if one does not exist.` + "\nQuery:\n" + tq.JSONHighlight(`{"Keys":"string"}`) + "\n") 
				Get_SystemDefaults_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all system defaults.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_TemplateCategories_cmd) 
				Get_TemplateCategories_cmd.Flags().Bool("All", false, 
					`Get all template categories. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_TemplateCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all template categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_TemplatePriceTypes_cmd) 
				Get_TemplatePriceTypes_cmd.Flags().Bool("All", false, 
					`Get all template price type.` + "\nQuery:\n" + tq.JSONHighlight(`{"TemplateID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_TemplatePrices_cmd) 
				Get_TemplatePrices_cmd.Flags().Bool("All", false, 
					`Get all template prices.` + "\nQuery:\n" + tq.JSONHighlight(`{"TemplateID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_TemplateTypes_cmd) 
				Get_TemplateTypes_cmd.Flags().Bool("All", false, 
					`Get all template types. To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_TemplateTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all template types` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Templates_cmd) 
				Get_Templates_cmd.Flags().Bool("All", false, 
					`Get all templates` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_Templates_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all templates` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Theaters_cmd) 
				Get_Theaters_cmd.Flags().Bool("All", false, 
					`Get all theaters. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_Theaters_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all theaters.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_TicketHistory_cmd)
	
		Get_cmd.AddCommand(Get_TimeSlots_cmd) 
				Get_TimeSlots_cmd.Flags().Bool("All", false, 
					`Get all time slots. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_TimeSlots_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all time slots.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Titles_cmd) 
				Get_Titles_cmd.Flags().Bool("All", false, 
					`Get all titles` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n") 
				Get_Titles_cmd.Flags().Bool("Summaries", false, 
					`Get all title summaries` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_TransactionHistory_cmd)
	
		Get_cmd.AddCommand(Get_TriPOSCloudConfigurations_cmd) 
				Get_TriPOSCloudConfigurations_cmd.Flags().Bool("All", false, 
					`Get all TriPOS Cloud configurations.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_TriPOSCloudConfigurations_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all TriPOS Cloud configurations.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_UpgradeCategories_cmd) 
				Get_UpgradeCategories_cmd.Flags().Bool("All", false, 
					`Get details of all Upgrade Categories. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_UpgradeCategories_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all Upgrade Categories.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_UpgradeLogs_cmd) 
				Get_UpgradeLogs_cmd.Flags().Bool("All", false, 
					`Returns a list of UpgradeLog objects.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_UserGroups_cmd) 
				Get_UserGroups_cmd.Flags().Bool("All", false, 
					`Get all User Groups. To get only the resources for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_UserGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all user groups.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_UserPreferences_cmd) 
				Get_UserPreferences_cmd.Flags().Bool("All", false, 
					`Get all user preferences valid for the context username and user group.` + "\nQuery:\n" + tq.JSONHighlight(`{"Keys":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Users_cmd) 
				Get_Users_cmd.Flags().Bool("ActiveDirectoryUser", false, 
					`Get details of a user for the specified activeDirectoryUsername.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveDirectoryUsername":"string"}`) + "\n") 
				Get_Users_cmd.Flags().Bool("UserInformationForActiveDirectoryUser", false, 
					`Gets user information for the specified activeDirectoryUsername.` + "\nQuery:\n" + tq.JSONHighlight(`{"ActiveDirectoryUsername":"string"}`) + "\n") 
				Get_Users_cmd.Flags().Bool("UsersForUserGroup", false, 
					`Get list of users in summary for the current user's group.` + "\nQuery:\n" + tq.JSONHighlight(`{"UserGroupID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_WebContentTypes_cmd) 
				Get_WebContentTypes_cmd.Flags().Bool("All", false, 
					`Get all web content types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_WebContentTypes_cmd.Flags().Bool("DataFor", false, 
					`Gets potential values for a referenced WebContentType as a collection of WebContentTypeDataItem.` + "\nQuery:\n" + tq.JSONHighlight(`{"ID":"string"}`) + "\n") 
				Get_WebContentTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all web content types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_WebContents_cmd)
	
		Get_cmd.AddCommand(Get_WebLogins_cmd) 
				Get_WebLogins_cmd.Flags().Bool("All", false, 
					`Get details of all the weblogins for the specified constituent id and all its visible affiliation's weblogins as well. To exclude weblogins of the visible affiliations pass includeAffiliations=false. To fetch primary web logins alone pass primaryOnly=true.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string", "PrimaryOnly":"string"}`) + "\n") 
				Get_WebLogins_cmd.Flags().Bool("LoginCredentials", false, 
					`Returns web login credential information` + "\nQuery:\n" + tq.JSONHighlight(`{"LoginID":"string"}`) + "\n") 
				Get_WebLogins_cmd.Flags().Bool("Search", false, 
					`Get weblogins by email address and login type` + "\nQuery:\n" + tq.JSONHighlight(`{"EmailAddress":"string", "LoginTypeID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_WorkerQualifications_cmd) 
				Get_WorkerQualifications_cmd.Flags().Bool("All", false, 
					`Get all Worker Qualifications for a comma separated list of constituents, optionally including qualifications from affiliated constituents.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentIds":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_WorkerRoles_cmd) 
				Get_WorkerRoles_cmd.Flags().Bool("All", false, 
					`Get all worker roles. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_WorkerRoles_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all worker roles.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_WorkerTypes_cmd) 
				Get_WorkerTypes_cmd.Flags().Bool("All", false, 
					`Get all worker types. To get only the resoures for which the user has write/edit access, pass filter="writeonly". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode="true". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"Filter":"string", "MaintenanceMode":"string"}`) + "\n") 
				Get_WorkerTypes_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all worker types.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_Workers_cmd) 
				Get_Workers_cmd.Flags().Bool("All", false, 
					`Get details of all the workers for the specified constituent.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n") 
				Get_Workers_cmd.Flags().Bool("Summaries", false, 
					`Get summary of all the workers for the specified constituent.` + "\nQuery:\n" + tq.JSONHighlight(`{"ConstituentID":"string", "IncludeAffiliations":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_ZoneGroups_cmd) 
				Get_ZoneGroups_cmd.Flags().Bool("All", false, 
					`Get all zone groups. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.` + "\nQuery:\n" + tq.JSONHighlight(`{"MaintenanceMode":"string"}`) + "\n") 
				Get_ZoneGroups_cmd.Flags().Bool("Summaries", false, 
					`Get a summary representation of all zone groups.` + "\nQuery:\n" + tq.JSONHighlight(``) + "\n")
	
		Get_cmd.AddCommand(Get_ZoneMaps_cmd) 
				Get_ZoneMaps_cmd.Flags().Bool("All", false, 
					`Get all zone maps, optionally filtered by facility and/or seat map.` + "\nQuery:\n" + tq.JSONHighlight(`{"FacilityID":"string", "SeatMapID":"string"}`) + "\n") 
				Get_ZoneMaps_cmd.Flags().Bool("Summaries", false, 
					`Get a summary of all zone maps, optionally filtered by facility and/or seat map.` + "\nQuery:\n" + tq.JSONHighlight(`{"FacilityID":"string", "SeatMapID":"string"}`) + "\n")
	
		Get_cmd.AddCommand(Get_Zones_cmd) 
				Get_Zones_cmd.Flags().Bool("All", false, 
					`Get all zones, optionally filtered by a set of zone maps.` + "\nQuery:\n" + tq.JSONHighlight(`{"ZoneMapIds":"string"}`) + "\n") 
				Get_Zones_cmd.Flags().Bool("Summaries", false, 
					`Get a summary of all zones, optionally filtered by a set of zone maps.` + "\nQuery:\n" + tq.JSONHighlight(`{"ZoneMapIds":"string"}`) + "\n")
	
}


