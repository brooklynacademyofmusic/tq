// Code generated by tq/generator; DO NOT EDIT.

package cmd

import (
	"testing"
    "regexp"
    "strings"

	"github.com/stretchr/testify/assert"
    "github.com/skysyzygy/tq/tq"
    "github.com/spf13/viper"
)


func Test_Put_AccountTypes__cmd(t *testing.T) {
        command := Put_AccountTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Accounts_CardNumberAccount_cmd(t *testing.T) {
        command := Put_Accounts_cmd
        use := command.Use

        flag := command.Flag("CardNumberAccount")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Accounts_DirectDebitAccount_cmd(t *testing.T) {
        command := Put_Accounts_cmd
        use := command.Use

        flag := command.Flag("DirectDebitAccount")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Accounts_SepaAccount_cmd(t *testing.T) {
        command := Put_Accounts_cmd
        use := command.Use

        flag := command.Flag("SepaAccount")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ActionTypes__cmd(t *testing.T) {
        command := Put_ActionTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Actions__cmd(t *testing.T) {
        command := Put_Actions_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ActivityCategories__cmd(t *testing.T) {
        command := Put_ActivityCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ActivityTypes__cmd(t *testing.T) {
        command := Put_ActivityTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_AddressTypes__cmd(t *testing.T) {
        command := Put_AddressTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Addresses__cmd(t *testing.T) {
        command := Put_Addresses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_AffiliationTypes__cmd(t *testing.T) {
        command := Put_AffiliationTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Affiliations__cmd(t *testing.T) {
        command := Put_Affiliations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_AliasTypes__cmd(t *testing.T) {
        command := Put_AliasTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Aliases__cmd(t *testing.T) {
        command := Put_Aliases_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_AnalyticsReports__cmd(t *testing.T) {
        command := Put_AnalyticsReports_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_AppScreenTexts_Or_cmd(t *testing.T) {
        command := Put_AppScreenTexts_cmd
        use := command.Use

        flag := command.Flag("Or")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_AppealCategories__cmd(t *testing.T) {
        command := Put_AppealCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Artists__cmd(t *testing.T) {
        command := Put_Artists_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_AssetTypes__cmd(t *testing.T) {
        command := Put_AssetTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Assets__cmd(t *testing.T) {
        command := Put_Assets_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_AssociationTypes__cmd(t *testing.T) {
        command := Put_AssociationTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Associations__cmd(t *testing.T) {
        command := Put_Associations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Attributes__cmd(t *testing.T) {
        command := Put_Attributes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Authorization_ExpirePayByLink_cmd(t *testing.T) {
        command := Put_Authorization_cmd
        use := command.Use

        flag := command.Flag("ExpirePayByLink")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_BatchTypeGroups__cmd(t *testing.T) {
        command := Put_BatchTypeGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_BatchTypes__cmd(t *testing.T) {
        command := Put_BatchTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_BillingSchedules__cmd(t *testing.T) {
        command := Put_BillingSchedules_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_BillingTypes__cmd(t *testing.T) {
        command := Put_BillingTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_BookingCategories__cmd(t *testing.T) {
        command := Put_BookingCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_BookingTemplates__cmd(t *testing.T) {
        command := Put_BookingTemplates_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Bookings__cmd(t *testing.T) {
        command := Put_Bookings_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_BulkCopySets__cmd(t *testing.T) {
        command := Put_BulkCopySets_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_BulkDailyCopyExclusions__cmd(t *testing.T) {
        command := Put_BulkDailyCopyExclusions_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_BusinessUnits__cmd(t *testing.T) {
        command := Put_BusinessUnits_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_CampaignDesignations__cmd(t *testing.T) {
        command := Put_CampaignDesignations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_CampaignFunds__cmd(t *testing.T) {
        command := Put_CampaignFunds_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_CardReaderTypes__cmd(t *testing.T) {
        command := Put_CardReaderTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_ApplyLineItemDiscount_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("ApplyLineItemDiscount")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_ApplySubLineItemDiscount_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("ApplySubLineItemDiscount")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_CartFlags_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("CartFlags")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_CartProperties_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("CartProperties")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_CartPropertiesCustomData_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("CartPropertiesCustomData")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_ContributionCustomData_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("ContributionCustomData")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_LineItemPrice_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("LineItemPrice")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_LineItemPriceType_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("LineItemPriceType")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_LineItemSource_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("LineItemSource")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_LineItemSpecialRequest_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("LineItemSpecialRequest")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_PaymentPlan_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("PaymentPlan")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_SubLineItemPrice_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("SubLineItemPrice")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_SubLineItemPriceType_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("SubLineItemPriceType")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Cart_SubLineItemRecipient_cmd(t *testing.T) {
        command := Put_Cart_cmd
        use := command.Use

        flag := command.Flag("SubLineItemRecipient")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Colors__cmd(t *testing.T) {
        command := Put_Colors_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Composers__cmd(t *testing.T) {
        command := Put_Composers_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Constituencies__cmd(t *testing.T) {
        command := Put_Constituencies_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ConstituencyTypes__cmd(t *testing.T) {
        command := Put_ConstituencyTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ConstituentDocuments__cmd(t *testing.T) {
        command := Put_ConstituentDocuments_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ConstituentGroups__cmd(t *testing.T) {
        command := Put_ConstituentGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ConstituentInactives__cmd(t *testing.T) {
        command := Put_ConstituentInactives_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ConstituentProtectionTypes__cmd(t *testing.T) {
        command := Put_ConstituentProtectionTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ConstituentTypeAffiliates__cmd(t *testing.T) {
        command := Put_ConstituentTypeAffiliates_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ConstituentTypes__cmd(t *testing.T) {
        command := Put_ConstituentTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Constituents__cmd(t *testing.T) {
        command := Put_Constituents_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContactPermissionCategories__cmd(t *testing.T) {
        command := Put_ContactPermissionCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContactPermissionTypes__cmd(t *testing.T) {
        command := Put_ContactPermissionTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContactPermissions__cmd(t *testing.T) {
        command := Put_ContactPermissions_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContactPointCategories__cmd(t *testing.T) {
        command := Put_ContactPointCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContactPointCategoryPurposes__cmd(t *testing.T) {
        command := Put_ContactPointCategoryPurposes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContactPointPurposeCategories__cmd(t *testing.T) {
        command := Put_ContactPointPurposeCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContactPointPurposeMaps__cmd(t *testing.T) {
        command := Put_ContactPointPurposeMaps_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContactPointPurposes__cmd(t *testing.T) {
        command := Put_ContactPointPurposes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContactTypes__cmd(t *testing.T) {
        command := Put_ContactTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContributionDesignations__cmd(t *testing.T) {
        command := Put_ContributionDesignations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ContributionImportSets__cmd(t *testing.T) {
        command := Put_ContributionImportSets_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Contributions__cmd(t *testing.T) {
        command := Put_Contributions_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ControlGroupUserGroups__cmd(t *testing.T) {
        command := Put_ControlGroupUserGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ControlGroups__cmd(t *testing.T) {
        command := Put_ControlGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Countries__cmd(t *testing.T) {
        command := Put_Countries_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_CrediteeTypes__cmd(t *testing.T) {
        command := Put_CrediteeTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_CurrencyTypes__cmd(t *testing.T) {
        command := Put_CurrencyTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Custom__cmd(t *testing.T) {
        command := Put_Custom_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_CustomDefaultCategories__cmd(t *testing.T) {
        command := Put_CustomDefaultCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_CustomDefaults__cmd(t *testing.T) {
        command := Put_CustomDefaults_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_DeliveryMethods__cmd(t *testing.T) {
        command := Put_DeliveryMethods_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_DesignationCodes__cmd(t *testing.T) {
        command := Put_DesignationCodes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Diagnostics_Put_cmd(t *testing.T) {
        command := Put_Diagnostics_cmd
        use := command.Use

        flag := command.Flag("Put")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_DirectDebitAccountTypes__cmd(t *testing.T) {
        command := Put_DirectDebitAccountTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_DiscountTypes__cmd(t *testing.T) {
        command := Put_DiscountTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_DocumentCategories__cmd(t *testing.T) {
        command := Put_DocumentCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_DonationLevels__cmd(t *testing.T) {
        command := Put_DonationLevels_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_EMV_SetIdleMessage_cmd(t *testing.T) {
        command := Put_EMV_cmd
        use := command.Use

        flag := command.Flag("SetIdleMessage")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ElectronicAddressTypes__cmd(t *testing.T) {
        command := Put_ElectronicAddressTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ElectronicAddresses__cmd(t *testing.T) {
        command := Put_ElectronicAddresses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_EmailProfiles__cmd(t *testing.T) {
        command := Put_EmailProfiles_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_EmarketIndicators__cmd(t *testing.T) {
        command := Put_EmarketIndicators_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Eras__cmd(t *testing.T) {
        command := Put_Eras_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Facilities__cmd(t *testing.T) {
        command := Put_Facilities_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Genders__cmd(t *testing.T) {
        command := Put_Genders_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_GiftAidContactMethods__cmd(t *testing.T) {
        command := Put_GiftAidContactMethods_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_GiftAidDeclarations__cmd(t *testing.T) {
        command := Put_GiftAidDeclarations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_GiftAidDocumentStatuses__cmd(t *testing.T) {
        command := Put_GiftAidDocumentStatuses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_GiftAidIneligibleReasons__cmd(t *testing.T) {
        command := Put_GiftAidIneligibleReasons_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_GiftAidRates__cmd(t *testing.T) {
        command := Put_GiftAidRates_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_GiftAidStatuses__cmd(t *testing.T) {
        command := Put_GiftAidStatuses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_GiftAidTypes__cmd(t *testing.T) {
        command := Put_GiftAidTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_HoldCodeCategories__cmd(t *testing.T) {
        command := Put_HoldCodeCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_HoldCodeUserGroups__cmd(t *testing.T) {
        command := Put_HoldCodeUserGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_HoldCodes__cmd(t *testing.T) {
        command := Put_HoldCodes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_InactiveReasons__cmd(t *testing.T) {
        command := Put_InactiveReasons_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_IntegrationDefaults__cmd(t *testing.T) {
        command := Put_IntegrationDefaults_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Integrations__cmd(t *testing.T) {
        command := Put_Integrations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_InterestCategories__cmd(t *testing.T) {
        command := Put_InterestCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_InterestTypes__cmd(t *testing.T) {
        command := Put_InterestTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Interests__cmd(t *testing.T) {
        command := Put_Interests_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Internal__cmd(t *testing.T) {
        command := Put_Internal_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_InventoryContactPermissionTypes__cmd(t *testing.T) {
        command := Put_InventoryContactPermissionTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_InventoryWebContents__cmd(t *testing.T) {
        command := Put_InventoryWebContents_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Issues__cmd(t *testing.T) {
        command := Put_Issues_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_KeywordCategories__cmd(t *testing.T) {
        command := Put_KeywordCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Keywords__cmd(t *testing.T) {
        command := Put_Keywords_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Languages__cmd(t *testing.T) {
        command := Put_Languages_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ListCategories__cmd(t *testing.T) {
        command := Put_ListCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Lists__cmd(t *testing.T) {
        command := Put_Lists_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Lists_Contents_cmd(t *testing.T) {
        command := Put_Lists_cmd
        use := command.Use

        flag := command.Flag("Contents")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_LoginTypes__cmd(t *testing.T) {
        command := Put_LoginTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_MachineSettings__cmd(t *testing.T) {
        command := Put_MachineSettings_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_MailIndicators__cmd(t *testing.T) {
        command := Put_MailIndicators_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_MediaTypes__cmd(t *testing.T) {
        command := Put_MediaTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_MembershipLevelCategories__cmd(t *testing.T) {
        command := Put_MembershipLevelCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ModeOfSaleCategories__cmd(t *testing.T) {
        command := Put_ModeOfSaleCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ModeOfSaleOffers__cmd(t *testing.T) {
        command := Put_ModeOfSaleOffers_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ModeOfSalePriceTypes__cmd(t *testing.T) {
        command := Put_ModeOfSalePriceTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ModeOfSaleSurveyQuestions__cmd(t *testing.T) {
        command := Put_ModeOfSaleSurveyQuestions_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ModeOfSaleUserGroups__cmd(t *testing.T) {
        command := Put_ModeOfSaleUserGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ModesOfSale__cmd(t *testing.T) {
        command := Put_ModesOfSale_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_NScanAccessAreas__cmd(t *testing.T) {
        command := Put_NScanAccessAreas_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_NameStatuses__cmd(t *testing.T) {
        command := Put_NameStatuses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ObjectPermissions__cmd(t *testing.T) {
        command := Put_ObjectPermissions_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_OrderCategories__cmd(t *testing.T) {
        command := Put_OrderCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Orders__cmd(t *testing.T) {
        command := Put_Orders_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Organizations__cmd(t *testing.T) {
        command := Put_Organizations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_OriginalSources__cmd(t *testing.T) {
        command := Put_OriginalSources_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Origins__cmd(t *testing.T) {
        command := Put_Origins_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_OutputSets__cmd(t *testing.T) {
        command := Put_OutputSets_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PackagePriceTypes__cmd(t *testing.T) {
        command := Put_PackagePriceTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PackageTypes__cmd(t *testing.T) {
        command := Put_PackageTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PackageWebContents__cmd(t *testing.T) {
        command := Put_PackageWebContents_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PaymentGatewayActivities__cmd(t *testing.T) {
        command := Put_PaymentGatewayActivities_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PaymentGatewayNotifications__cmd(t *testing.T) {
        command := Put_PaymentGatewayNotifications_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PaymentGatewayTransactionTypes__cmd(t *testing.T) {
        command := Put_PaymentGatewayTransactionTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PaymentMethodGroups__cmd(t *testing.T) {
        command := Put_PaymentMethodGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PaymentMethodUserGroups__cmd(t *testing.T) {
        command := Put_PaymentMethodUserGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PaymentMethods__cmd(t *testing.T) {
        command := Put_PaymentMethods_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PaymentSignatures__cmd(t *testing.T) {
        command := Put_PaymentSignatures_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PaymentTypes__cmd(t *testing.T) {
        command := Put_PaymentTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformanceGroups__cmd(t *testing.T) {
        command := Put_PerformanceGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformancePackageModeOfSales__cmd(t *testing.T) {
        command := Put_PerformancePackageModeOfSales_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformancePriceLayers__cmd(t *testing.T) {
        command := Put_PerformancePriceLayers_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformancePriceLayers_Prices_cmd(t *testing.T) {
        command := Put_PerformancePriceLayers_cmd
        use := command.Use

        flag := command.Flag("Prices")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformancePriceTypes__cmd(t *testing.T) {
        command := Put_PerformancePriceTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformancePriceTypes_Base_cmd(t *testing.T) {
        command := Put_PerformancePriceTypes_cmd
        use := command.Use

        flag := command.Flag("Base")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformancePriceTypes_Bulk_cmd(t *testing.T) {
        command := Put_PerformancePriceTypes_cmd
        use := command.Use

        flag := command.Flag("Bulk")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformancePrices__cmd(t *testing.T) {
        command := Put_PerformancePrices_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformanceStatuses__cmd(t *testing.T) {
        command := Put_PerformanceStatuses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PerformanceTypes__cmd(t *testing.T) {
        command := Put_PerformanceTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Performances_ExpireSeatHolds_cmd(t *testing.T) {
        command := Put_Performances_cmd
        use := command.Use

        flag := command.Flag("ExpireSeatHolds")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Philanthropy__cmd(t *testing.T) {
        command := Put_Philanthropy_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PhilanthropyTypes__cmd(t *testing.T) {
        command := Put_PhilanthropyTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PhoneIndicators__cmd(t *testing.T) {
        command := Put_PhoneIndicators_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PhoneTypes__cmd(t *testing.T) {
        command := Put_PhoneTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Phones__cmd(t *testing.T) {
        command := Put_Phones_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PlanPriorities__cmd(t *testing.T) {
        command := Put_PlanPriorities_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PlanSources__cmd(t *testing.T) {
        command := Put_PlanSources_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PlanStatuses__cmd(t *testing.T) {
        command := Put_PlanStatuses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PlanTypes__cmd(t *testing.T) {
        command := Put_PlanTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PlanWorkers__cmd(t *testing.T) {
        command := Put_PlanWorkers_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Plans__cmd(t *testing.T) {
        command := Put_Plans_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PortfolioCustomElements__cmd(t *testing.T) {
        command := Put_PortfolioCustomElements_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Prefixes__cmd(t *testing.T) {
        command := Put_Prefixes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Premieres__cmd(t *testing.T) {
        command := Put_Premieres_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PriceCategories__cmd(t *testing.T) {
        command := Put_PriceCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PriceEvents_MoveTo_cmd(t *testing.T) {
        command := Put_PriceEvents_cmd
        use := command.Use

        flag := command.Flag("MoveTo")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PriceLayerTypes__cmd(t *testing.T) {
        command := Put_PriceLayerTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PriceTemplates__cmd(t *testing.T) {
        command := Put_PriceTemplates_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PriceTypeCategories__cmd(t *testing.T) {
        command := Put_PriceTypeCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PriceTypeGroups__cmd(t *testing.T) {
        command := Put_PriceTypeGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PriceTypeReasons__cmd(t *testing.T) {
        command := Put_PriceTypeReasons_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PriceTypeUserGroups__cmd(t *testing.T) {
        command := Put_PriceTypeUserGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PriceTypes__cmd(t *testing.T) {
        command := Put_PriceTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PricingRuleCategories__cmd(t *testing.T) {
        command := Put_PricingRuleCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PricingRuleMessageTypes__cmd(t *testing.T) {
        command := Put_PricingRuleMessageTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PricingRuleSets__cmd(t *testing.T) {
        command := Put_PricingRuleSets_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_PricingRules__cmd(t *testing.T) {
        command := Put_PricingRules_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Printers__cmd(t *testing.T) {
        command := Put_Printers_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ProductionSeasonMembershipOrganizations__cmd(t *testing.T) {
        command := Put_ProductionSeasonMembershipOrganizations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ProgramListings__cmd(t *testing.T) {
        command := Put_ProgramListings_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Programs__cmd(t *testing.T) {
        command := Put_Programs_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Pronouns__cmd(t *testing.T) {
        command := Put_Pronouns_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_QualificationCategories__cmd(t *testing.T) {
        command := Put_QualificationCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Qualifications__cmd(t *testing.T) {
        command := Put_Qualifications_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_QueryElementFilters__cmd(t *testing.T) {
        command := Put_QueryElementFilters_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_QueryElementGroups__cmd(t *testing.T) {
        command := Put_QueryElementGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_QueryElements__cmd(t *testing.T) {
        command := Put_QueryElements_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_RankTypes__cmd(t *testing.T) {
        command := Put_RankTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Rankings__cmd(t *testing.T) {
        command := Put_Rankings_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ReceiptSettings__cmd(t *testing.T) {
        command := Put_ReceiptSettings_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ReferenceTableUserGroups__cmd(t *testing.T) {
        command := Put_ReferenceTableUserGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_RelationshipCategories__cmd(t *testing.T) {
        command := Put_RelationshipCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ReportRequests__cmd(t *testing.T) {
        command := Put_ReportRequests_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ReportRequests_FlushIncomplete_cmd(t *testing.T) {
        command := Put_ReportRequests_cmd
        use := command.Use

        flag := command.Flag("FlushIncomplete")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ReportSchedules__cmd(t *testing.T) {
        command := Put_ReportSchedules_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ReportUserGroups__cmd(t *testing.T) {
        command := Put_ReportUserGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Research__cmd(t *testing.T) {
        command := Put_Research_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ResearchTypes__cmd(t *testing.T) {
        command := Put_ResearchTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ResourceCategories__cmd(t *testing.T) {
        command := Put_ResourceCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ResourceSchedules__cmd(t *testing.T) {
        command := Put_ResourceSchedules_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ResourceTypes__cmd(t *testing.T) {
        command := Put_ResourceTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Resources__cmd(t *testing.T) {
        command := Put_Resources_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SalesChannels__cmd(t *testing.T) {
        command := Put_SalesChannels_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SalesLayoutButtonTypes__cmd(t *testing.T) {
        command := Put_SalesLayoutButtonTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SalesLayouts__cmd(t *testing.T) {
        command := Put_SalesLayouts_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SalutationTypes__cmd(t *testing.T) {
        command := Put_SalutationTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Salutations__cmd(t *testing.T) {
        command := Put_Salutations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SchedulePatternTypes__cmd(t *testing.T) {
        command := Put_SchedulePatternTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ScheduleTypes__cmd(t *testing.T) {
        command := Put_ScheduleTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SeasonTypes__cmd(t *testing.T) {
        command := Put_SeasonTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Seasons__cmd(t *testing.T) {
        command := Put_Seasons_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SeatCodes__cmd(t *testing.T) {
        command := Put_SeatCodes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SeatStatuses__cmd(t *testing.T) {
        command := Put_SeatStatuses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Sections__cmd(t *testing.T) {
        command := Put_Sections_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ServiceResourceUserGroups__cmd(t *testing.T) {
        command := Put_ServiceResourceUserGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Session_SetConstituent_cmd(t *testing.T) {
        command := Put_Session_cmd
        use := command.Use

        flag := command.Flag("SetConstituent")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Session_SetExpiration_cmd(t *testing.T) {
        command := Put_Session_cmd
        use := command.Use

        flag := command.Flag("SetExpiration")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Session_Variable_cmd(t *testing.T) {
        command := Put_Session_cmd
        use := command.Use

        flag := command.Flag("Variable")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Session_WebLogin_cmd(t *testing.T) {
        command := Put_Session_cmd
        use := command.Use

        flag := command.Flag("WebLogin")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SourceGroups__cmd(t *testing.T) {
        command := Put_SourceGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SpecialActivities__cmd(t *testing.T) {
        command := Put_SpecialActivities_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SpecialActivityStatuses__cmd(t *testing.T) {
        command := Put_SpecialActivityStatuses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SpecialActivityTypes__cmd(t *testing.T) {
        command := Put_SpecialActivityTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_States__cmd(t *testing.T) {
        command := Put_States_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_StepTypes__cmd(t *testing.T) {
        command := Put_StepTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Steps__cmd(t *testing.T) {
        command := Put_Steps_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Steps_Document_cmd(t *testing.T) {
        command := Put_Steps_cmd
        use := command.Use

        flag := command.Flag("Document")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SubLineItemStatuses__cmd(t *testing.T) {
        command := Put_SubLineItemStatuses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Suffixes__cmd(t *testing.T) {
        command := Put_Suffixes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SurveyQuestions__cmd(t *testing.T) {
        command := Put_SurveyQuestions_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_SurveyResponses__cmd(t *testing.T) {
        command := Put_SurveyResponses_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_TemplateCategories__cmd(t *testing.T) {
        command := Put_TemplateCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_TemplatePriceTypes__cmd(t *testing.T) {
        command := Put_TemplatePriceTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_TemplatePrices__cmd(t *testing.T) {
        command := Put_TemplatePrices_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Templates__cmd(t *testing.T) {
        command := Put_Templates_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Theaters__cmd(t *testing.T) {
        command := Put_Theaters_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_TimeSlots__cmd(t *testing.T) {
        command := Put_TimeSlots_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_TriPOSCloudConfigurations__cmd(t *testing.T) {
        command := Put_TriPOSCloudConfigurations_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_UpgradeCategories__cmd(t *testing.T) {
        command := Put_UpgradeCategories_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_UpgradeLogs__cmd(t *testing.T) {
        command := Put_UpgradeLogs_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_UserPreferences__cmd(t *testing.T) {
        command := Put_UserPreferences_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_WebContentTypes__cmd(t *testing.T) {
        command := Put_WebContentTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_WebLogins__cmd(t *testing.T) {
        command := Put_WebLogins_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_WorkerQualifications__cmd(t *testing.T) {
        command := Put_WorkerQualifications_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_WorkerRoles__cmd(t *testing.T) {
        command := Put_WorkerRoles_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_WorkerTypes__cmd(t *testing.T) {
        command := Put_WorkerTypes_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Workers__cmd(t *testing.T) {
        command := Put_Workers_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ZoneGroups__cmd(t *testing.T) {
        command := Put_ZoneGroups_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_ZoneMaps__cmd(t *testing.T) {
        command := Put_ZoneMaps_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}

func Test_Put_Zones__cmd(t *testing.T) {
        command := Put_Zones_cmd
        use := command.Use

        input := strings.ReplaceAll(regexp.MustCompile(`\{.+\}$`).FindString(use),
                    ",...","")
        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            command.PreRun(command, nil)
            //Use: {{ print $key " " $command.Usage }},
            command.Run(command, []string{input})
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}
