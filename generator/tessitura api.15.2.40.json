{
    "swagger": "2.0",
    "info": {
        "version": "15.2.40",
        "title": "Tessitura.Service.Web"
    },
    "host": "t-gw-test-b-ex-rest.bam.org",
    "basePath": "/TessituraService",
    "schemes": [
        "https"
    ],
    "paths": {
        "/ReferenceData/ContactPointPurposeCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a contact point purpose category by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ContactPointPurposeCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PurposeCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing contact point purpose category.",
                "operationId": "ContactPointPurposeCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PurposeCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PurposeCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing contact point purpose category.",
                "operationId": "ContactPointPurposeCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/ElectronicAddresses/{electronicAddressId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an electronic address.",
                "operationId": "ElectronicAddresses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "electronicAddressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddress"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an electronic address.",
                "operationId": "ElectronicAddresses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "electronicAddressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "electronicAddress",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddress"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an electronic address.",
                "operationId": "ElectronicAddresses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "electronicAddressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/ModeOfSalePriceTypes/{modeOfSalePriceTypeId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a mode of sale price type.",
                "operationId": "ModeOfSalePriceTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSalePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSalePriceType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing mode of sale price type.",
                "operationId": "ModeOfSalePriceTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSalePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSalePriceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSalePriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSalePriceType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing mode of sale price type.",
                "operationId": "ModeOfSalePriceTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "modeOfSalePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ReferenceTableUserGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a reference table/user group mapping by id.",
                "operationId": "ReferenceTableUserGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReferenceTableUserGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing reference table/user group mapping.",
                "operationId": "ReferenceTableUserGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReferenceTableUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReferenceTableUserGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing reference table/user group mapping.",
                "operationId": "ReferenceTableUserGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PricingRuleCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a pricing rule category by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PricingRuleCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing pricing rule category.",
                "operationId": "PricingRuleCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PricingRuleCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing pricing rule category.",
                "operationId": "PricingRuleCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SpecialActivityStatuses/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Special Activity Status by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "SpecialActivityStatuses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an Special Activity Status.",
                "operationId": "SpecialActivityStatuses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Special Activity Status.",
                "operationId": "SpecialActivityStatuses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/ZoneMaps/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific zone map.",
                "operationId": "ZoneMaps_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneMap"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing zone map.",
                "operationId": "ZoneMaps_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "zoneMap",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ZoneMap"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneMap"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing zone map.",
                "operationId": "ZoneMaps_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/NScanAccessAreas/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an NScan Access Area by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\".. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "NScanAccessAreas_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NScanAccessArea"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing NScan Access Area.",
                "operationId": "NScanAccessAreas_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NScanAccessArea"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NScanAccessArea"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing NScan Access Area.",
                "operationId": "NScanAccessAreas_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/NameStatuses/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a name status by id.",
                "operationId": "NameStatuses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NameStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing name status.",
                "operationId": "NameStatuses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NameStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NameStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing name status.",
                "operationId": "NameStatuses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/CardReaderTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Card Reader Type by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "CardReaderTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CardReaderType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Card Reader Type.",
                "operationId": "CardReaderTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CardReaderType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CardReaderType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Card Reader Type.",
                "operationId": "CardReaderTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/AssetTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an asset type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "AssetTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AssetType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing asset type.",
                "operationId": "AssetTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssetType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AssetType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing asset type.",
                "operationId": "AssetTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Txn/InventoryWebContents/{inventoryWebContentId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an inventoryWebContent.",
                "operationId": "InventoryWebContents_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "inventoryWebContentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InventoryWebContent"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing inventoryWebContent.",
                "operationId": "InventoryWebContents_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "inventoryWebContentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "inventoryWebContent",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InventoryWebContent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InventoryWebContent"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing inventoryWebContent.",
                "operationId": "InventoryWebContents_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "inventoryWebContentId",
                        "in": "path",
                        "description": "Id of InventoryWebContent.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PriceTypeUserGroups/{priceTypeUserGroupId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a price type/user group mapping by id.",
                "operationId": "PriceTypeUserGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceTypeUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeUserGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing price type/user group mapping.",
                "operationId": "PriceTypeUserGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceTypeUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeUserGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTypeUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeUserGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing price type/user group mapping.",
                "operationId": "PriceTypeUserGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "priceTypeUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PaymentMethodUserGroups/{paymentMethodUserGroupId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a payment method/user group mapping by id.",
                "operationId": "PaymentMethodUserGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentMethodUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodUserGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing payment method/user group mapping.",
                "operationId": "PaymentMethodUserGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentMethodUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentMethodUserGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodUserGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing payment method/user group mapping.",
                "operationId": "PaymentMethodUserGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "paymentMethodUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PhoneIndicators/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a phone indicator by id.",
                "operationId": "PhoneIndicators_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhoneIndicator"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing phone indicator.",
                "operationId": "PhoneIndicators_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhoneIndicator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhoneIndicator"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing phone indicator.",
                "operationId": "PhoneIndicators_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/EventsManagement/Bookings/{bookingId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a Booking by id",
                "operationId": "Bookings_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Booking",
                "operationId": "Bookings_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "booking",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a Booking by id",
                "operationId": "Bookings_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/EventsManagement/Bookings/{bookingId}/Documents/{documentId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the document associated with the documentId (Including the file contents).",
                "operationId": "Bookings_GetDocument",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a document attached to the booking.",
                "operationId": "Bookings_DeleteDocument",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ResourceCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Resource Category by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ResourceCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Resource Category.",
                "operationId": "ResourceCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Resource Category.",
                "operationId": "ResourceCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/ProgramListings/{programListingId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a program listing.",
                "operationId": "ProgramListings_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "programListingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProgramListing"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a program listing.",
                "operationId": "ProgramListings_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "programListingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "programListing",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramListing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProgramListing"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a program listing.",
                "operationId": "ProgramListings_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "programListingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/AssociationTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an association type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "AssociationTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AssociationType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing association type.",
                "operationId": "AssociationTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssociationType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AssociationType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing association type.",
                "operationId": "AssociationTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PriceTypes/{priceTypeId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a price type.",
                "operationId": "PriceTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing price type.",
                "operationId": "PriceTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "priceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing price type.",
                "operationId": "PriceTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "priceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/LoginTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a login type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "LoginTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LoginType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing login type.",
                "operationId": "LoginTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LoginType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing login type.",
                "operationId": "LoginTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PaymentGatewayTransactionTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Payment Gateway Transaction Type by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PaymentGatewayTransactionTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayTransactionType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Payment Gateway Transaction Type.",
                "operationId": "PaymentGatewayTransactionTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayTransactionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayTransactionType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Payment Gateway Transaction Type.",
                "operationId": "PaymentGatewayTransactionTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SalutationTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a salutation type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "SalutationTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalutationType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing salutation type.",
                "operationId": "SalutationTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalutationType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalutationType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing salutation type.",
                "operationId": "SalutationTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/StepTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a step type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "StepTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StepType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing step type.",
                "operationId": "StepTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StepType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StepType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing step type.",
                "operationId": "StepTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/RelationshipCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a relationship category by id.",
                "operationId": "RelationshipCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RelationshipCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing relationship category.",
                "operationId": "RelationshipCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelationshipCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RelationshipCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing relationship category.",
                "operationId": "RelationshipCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Suffixes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a suffix by id.",
                "operationId": "Suffixes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Suffix"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing suffix.",
                "operationId": "Suffixes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Suffix"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Suffix"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing suffix.",
                "operationId": "Suffixes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/ProductionSeasonMembershipOrganizations/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific production season membership organization.",
                "operationId": "ProductionSeasonMembershipOrganizations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProductionSeasonMembershipOrganization"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing production season membership organization.",
                "operationId": "ProductionSeasonMembershipOrganizations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "productionSeasonMembershipOrganization",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProductionSeasonMembershipOrganization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProductionSeasonMembershipOrganization"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing production season membership organization.",
                "operationId": "ProductionSeasonMembershipOrganizations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Issues/{issueId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a customer issue.",
                "operationId": "Issues_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "issueId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Issue"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an issue for a Constituent",
                "operationId": "Issues_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "issueId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "issue",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Issue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Issue"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an issue by id.",
                "operationId": "Issues_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "issueId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/BillingTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Billing Type by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "BillingTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BillingType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Billing Type.",
                "operationId": "BillingTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BillingType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BillingType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Billing Type.",
                "operationId": "BillingTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/AppealCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an appeal category by id.",
                "operationId": "AppealCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppealCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing appeal category.",
                "operationId": "AppealCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AppealCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppealCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing appeal category.",
                "operationId": "AppealCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Security/Authenticate/Token": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Deletes all expired tokens created for the given parameters.",
                "operationId": "Authenticate_DeleteToken",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userGroup",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "machineName",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/AddressTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an address type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "AddressTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddressType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing address type.",
                "operationId": "AddressTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddressType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddressType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing address type.",
                "operationId": "AddressTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/RankTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a rank type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "RankTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RankType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing rank type.",
                "operationId": "RankTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RankType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RankType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing rank type.",
                "operationId": "RankTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Seasons/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a season by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "Seasons_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Season"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing season.",
                "operationId": "Seasons_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Season"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Season"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing season.",
                "operationId": "Seasons_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/CrediteeTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a crediteeType by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "CrediteeTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CrediteeType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing crediteeType.",
                "operationId": "CrediteeTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CrediteeType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CrediteeType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing crediteeType.",
                "operationId": "CrediteeTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PriceCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a price category by id.",
                "operationId": "PriceCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing price category.",
                "operationId": "PriceCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing price category.",
                "operationId": "PriceCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/DeliveryMethods/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a delivery method by id.",
                "operationId": "DeliveryMethods_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DeliveryMethod"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing delivery method.",
                "operationId": "DeliveryMethods_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeliveryMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DeliveryMethod"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing delivery method.",
                "operationId": "DeliveryMethods_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/DonationLevels/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a donation level by id.",
                "operationId": "DonationLevels_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DonationLevel"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing donation level.",
                "operationId": "DonationLevels_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DonationLevel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DonationLevel"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing donation level.",
                "operationId": "DonationLevels_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PaymentMethods/{paymentMethodId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a payment method.",
                "operationId": "PaymentMethods_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentMethodId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethod"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing payment method.",
                "operationId": "PaymentMethods_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentMethodId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentMethod",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethod"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing payment method.",
                "operationId": "PaymentMethods_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "paymentMethodId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PriceEvents/{priceEventId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a price event.",
                "operationId": "PriceEvents_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceEventId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceEvent"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing price event.",
                "operationId": "PriceEvents_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "priceEventId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/GiftAidIneligibleReasons/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a gift aid ineligible reason by id.",
                "operationId": "GiftAidIneligibleReasons_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidIneligibleReason"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing gift aid ineligible reason.",
                "operationId": "GiftAidIneligibleReasons_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidIneligibleReason"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidIneligibleReason"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing gift aid ineligible reason.",
                "operationId": "GiftAidIneligibleReasons_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/InactiveReasons/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an inactive reason by id.",
                "operationId": "InactiveReasons_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InactiveReason"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing inactive reason.",
                "operationId": "InactiveReasons_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InactiveReason"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InactiveReason"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing inactive reason.",
                "operationId": "InactiveReasons_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/ModeOfSaleOffers/{modeOfSaleOfferId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a mode of sale offer.",
                "operationId": "ModeOfSaleOffers_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleOfferId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleOffer"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing mode of sale offer.",
                "operationId": "ModeOfSaleOffers_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleOfferId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleOffer",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleOffer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleOffer"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing mode of sale offer.",
                "operationId": "ModeOfSaleOffers_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "modeOfSaleOfferId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/GiftAidTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a gift aid type by id.",
                "operationId": "GiftAidTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing gift aid type.",
                "operationId": "GiftAidTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing gift aid type.",
                "operationId": "GiftAidTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SpecialActivityTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Special Activity Type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "SpecialActivityTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Special Activity Type.",
                "operationId": "SpecialActivityTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Special Activity Type.",
                "operationId": "SpecialActivityTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Reporting/QueryElementGroups/{queryElementGroupId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a query element group by id.",
                "operationId": "QueryElementGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "queryElementGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QueryElementGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing query element group.",
                "operationId": "QueryElementGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "queryElementGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "queryElementGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QueryElementGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QueryElementGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a query element group.",
                "operationId": "QueryElementGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "queryElementGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PriceLayerTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a price layer type by id.",
                "operationId": "PriceLayerTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceLayerType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing price layer type.",
                "operationId": "PriceLayerTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceLayerType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceLayerType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing price layer type.",
                "operationId": "PriceLayerTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Finance/Workers/{workerId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a worker.",
                "operationId": "Workers_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "workerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Worker"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing worker.",
                "operationId": "Workers_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "workerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "worker",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Worker"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Worker"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a worker.",
                "operationId": "Workers_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "workerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ElectronicAddressTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an electronic address type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ElectronicAddressTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddressType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing electronic address type.",
                "operationId": "ElectronicAddressTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddressType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddressType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing electronic address type.",
                "operationId": "ElectronicAddressTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Colors/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a color by id.",
                "operationId": "Colors_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Color"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing color.",
                "operationId": "Colors_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Color"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Color"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing color.",
                "operationId": "Colors_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Qualifications/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Qualification by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "Qualifications_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Qualification"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Qualification.",
                "operationId": "Qualifications_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Qualification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Qualification"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Qualification.",
                "operationId": "Qualifications_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/OriginalSources/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an original source by id.",
                "operationId": "OriginalSources_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OriginalSource"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing original source.",
                "operationId": "OriginalSources_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OriginalSource"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OriginalSource"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing original source.",
                "operationId": "OriginalSources_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PriceTypeCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a price type category by id.",
                "operationId": "PriceTypeCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing price type category.",
                "operationId": "PriceTypeCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTypeCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing price type category.",
                "operationId": "PriceTypeCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ZoneGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a zone group by id.",
                "operationId": "ZoneGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing zone group.",
                "operationId": "ZoneGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ZoneGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing zone group.",
                "operationId": "ZoneGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/AliasTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an alias type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "AliasTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AliasType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing alias type.",
                "operationId": "AliasTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AliasType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AliasType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing alias type.",
                "operationId": "AliasTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/GiftAidDocumentStatuses/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a gift aid document status by id.",
                "operationId": "GiftAidDocumentStatuses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidDocumentStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing gift aid document status.",
                "operationId": "GiftAidDocumentStatuses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidDocumentStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidDocumentStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing gift aid document status.",
                "operationId": "GiftAidDocumentStatuses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/CustomDefaults/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a custom default by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "CustomDefaults_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomDefault"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing custom default.",
                "operationId": "CustomDefaults_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomDefault"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomDefault"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing custom default.",
                "operationId": "CustomDefaults_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/GiftAidContactMethods/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a gift aid contact method by id.",
                "operationId": "GiftAidContactMethods_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidContactMethod"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing gift aid contact method.",
                "operationId": "GiftAidContactMethods_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidContactMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidContactMethod"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing gift aid contact method.",
                "operationId": "GiftAidContactMethods_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ScheduleTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Schedule Type by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ScheduleTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ScheduleType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Schedule Type.",
                "operationId": "ScheduleTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScheduleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ScheduleType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Schedule Type.",
                "operationId": "ScheduleTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/SalesLayouts/Setup/{salesLayoutId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a sales layout setup.",
                "operationId": "SalesLayouts_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "salesLayoutId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesLayout"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing sales layout setup.",
                "operationId": "SalesLayouts_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "salesLayoutId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "salesLayout",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalesLayout"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesLayout"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing sales layout setup.",
                "operationId": "SalesLayouts_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "salesLayoutId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Printers/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a printer by id.",
                "operationId": "Printers_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Printer"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing printer.",
                "operationId": "Printers_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Printer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Printer"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing printer.",
                "operationId": "Printers_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ContributionImportSets/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a contributionImportSet by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ContributionImportSets_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContributionImportSet"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing contributionImportSet.",
                "operationId": "ContributionImportSets_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContributionImportSet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContributionImportSet"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing contributionImportSet.",
                "operationId": "ContributionImportSets_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/AffiliationTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an affiliation type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "AffiliationTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AffiliationType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing affiliation type.",
                "operationId": "AffiliationTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AffiliationType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AffiliationType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing affiliation type.",
                "operationId": "AffiliationTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SeasonTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a season type by id.",
                "operationId": "SeasonTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeasonType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing season type.",
                "operationId": "SeasonTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SeasonType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeasonType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing season type.",
                "operationId": "SeasonTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ConstituencyTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a constituency type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ConstituencyTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituencyType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing constituency type.",
                "operationId": "ConstituencyTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituencyType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituencyType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing constituency type.",
                "operationId": "ConstituencyTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Programs/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a program by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "Programs_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Program"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing program.",
                "operationId": "Programs_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Program"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Program"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing program.",
                "operationId": "Programs_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PricingRuleMessageTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a pricing rule message type by id.",
                "operationId": "PricingRuleMessageTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleMessageType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing pricing rule message type.",
                "operationId": "PricingRuleMessageTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PricingRuleMessageType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleMessageType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing pricing rule message type.",
                "operationId": "PricingRuleMessageTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/MachineSettings/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Machine Setting by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "MachineSettings_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MachineSetting"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Machine Setting.",
                "operationId": "MachineSettings_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MachineSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MachineSetting"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Machine Setting.",
                "operationId": "MachineSettings_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ActivityTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an activity type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ActivityTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActivityType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing activity type.",
                "operationId": "ActivityTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ActivityType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActivityType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing activity type.",
                "operationId": "ActivityTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Sections/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a section by id.",
                "operationId": "Sections_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Section"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing section.",
                "operationId": "Sections_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Section"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Section"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing section.",
                "operationId": "Sections_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/WebLogins/{loginId}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a weblogin.",
                "operationId": "WebLogins_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "loginId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "login",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WebLogin"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a weblogin.",
                "operationId": "WebLogins_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "loginId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ConstituentTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a constituent type by id.",
                "operationId": "ConstituentTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing constituent type.",
                "operationId": "ConstituentTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing constituent type.",
                "operationId": "ConstituentTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PerformanceGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a Performance Group.",
                "operationId": "PerformanceGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a Performance Group.",
                "operationId": "PerformanceGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performanceGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a specific performance group.",
                "operationId": "PerformanceGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PriceTypeGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a price type group by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PriceTypeGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing price type group.",
                "operationId": "PriceTypeGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTypeGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing price type group.",
                "operationId": "PriceTypeGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/TemplatePriceTypes/{templatePriceTypeId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a template price type.",
                "operationId": "TemplatePriceTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templatePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplatePriceType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing template price type.",
                "operationId": "TemplatePriceTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templatePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "templatePriceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TemplatePriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplatePriceType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing template price type.",
                "operationId": "TemplatePriceTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "templatePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SurveyQuestions/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a survey question by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "SurveyQuestions_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SurveyQuestion"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing survey question.",
                "operationId": "SurveyQuestions_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SurveyQuestion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SurveyQuestion"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing survey question.",
                "operationId": "SurveyQuestions_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/WorkerTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a worker type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "WorkerTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkerType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing worker type.",
                "operationId": "WorkerTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WorkerType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkerType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing worker type.",
                "operationId": "WorkerTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/EventsManagement/BookingTemplates/{bookingTemplateId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a Booking Template by ID",
                "operationId": "BookingTemplates_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingTemplateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingTemplate"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Booking Template",
                "operationId": "BookingTemplates_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingTemplateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bookingTemplate",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BookingTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingTemplate"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a Booking Template by ID",
                "operationId": "BookingTemplates_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "bookingTemplateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ConstituentInactives/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a constituent inactive by id.",
                "operationId": "ConstituentInactives_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentInactive"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing constituent inactive.",
                "operationId": "ConstituentInactives_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentInactive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentInactive"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing constituent inactive.",
                "operationId": "ConstituentInactives_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Origins/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an origin by id.",
                "operationId": "Origins_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Origin"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing origin.",
                "operationId": "Origins_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Origin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Origin"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing origin.",
                "operationId": "Origins_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/Performances/{performanceId}/Seats/{seatId}/SingleHold/{holdCodeId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a single hold on a performance seat.",
                "operationId": "Performances_DeleteSingleHold",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "The performance id.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "seatId",
                        "in": "path",
                        "description": "The seat id.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "holdCodeId",
                        "in": "path",
                        "description": "The hold code id.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/BulkCopySets/{bulkCopySetId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a bulk copy set by Id.",
                "operationId": "BulkCopySets_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkCopySetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BulkCopySet"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates an existing bulk copy set.",
                "operationId": "BulkCopySets_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkCopySetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bulkCopySet",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkCopySet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BulkCopySet"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Deletes an existing bulk copy set.",
                "operationId": "BulkCopySets_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "bulkCopySetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/BulkCopySets/{bulkCopySetId}/DeleteExclusions": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Deletes all exclusions from a bulk copy set.",
                "operationId": "BulkCopySets_DeleteExclusions",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "bulkCopySetId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Variables/{variableName}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns the value of the specified session variable.",
                "operationId": "Session_GetVariable",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SessionVariable"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing session variable.",
                "operationId": "Session_DeleteVariable",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/DirectDebitAccountTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a direct debit account type by id.",
                "operationId": "DirectDebitAccountTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DirectDebitAccountType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing direct debit account type.",
                "operationId": "DirectDebitAccountTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DirectDebitAccountType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DirectDebitAccountType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing direct debit account type.",
                "operationId": "DirectDebitAccountTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/MembershipLevelCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a membership level category by id.",
                "operationId": "MembershipLevelCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MembershipLevelCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing membership level category.",
                "operationId": "MembershipLevelCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MembershipLevelCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MembershipLevelCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing membership level category.",
                "operationId": "MembershipLevelCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/BulkDailyCopyExclusions/{bulkDailyCopyExclusionId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a bulk daily copy exclusion by id.",
                "operationId": "BulkDailyCopyExclusions_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkDailyCopyExclusionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BulkDailyCopyExclusion"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates an existing bulk daily copy exclusion.",
                "operationId": "BulkDailyCopyExclusions_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkDailyCopyExclusionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bulkDailyCopyExclusion",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkDailyCopyExclusion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BulkDailyCopyExclusion"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Deletes an existing bulk daily copy exclusion.",
                "operationId": "BulkDailyCopyExclusions_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "bulkDailyCopyExclusionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/SpecialActivities/{specialActivityId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an activity record.",
                "operationId": "SpecialActivities_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "specialActivityId",
                        "in": "path",
                        "description": "The id of the resource to be retrieved",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SpecialActivity"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an activity record.",
                "operationId": "SpecialActivities_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "specialActivityId",
                        "in": "path",
                        "description": "The ID of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "specialActivity",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpecialActivity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SpecialActivity"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an activity record.",
                "operationId": "SpecialActivities_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "specialActivityId",
                        "in": "path",
                        "description": "The ID of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets the cart details",
                "operationId": "Cart_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "messageTypes",
                        "in": "query",
                        "description": "A comma delimited list of valid message type ids (/ReferenceData/PricingRuleMessageTypes)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "savedCart",
                        "in": "query",
                        "description": "Pass True if Checkout has already been called for the cart.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Cart"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Cancels and clears the cart\r\n\r\nReleases any performance and package tickets that have been added to the cart and reverses unsaved payment authorizations if applicable.",
                "operationId": "Cart_ClearCart",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Tickets/{performanceId}/{lineItemId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes tickets from the cart",
                "operationId": "Cart_RemoveTickets",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "A performance Id from the cart",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "The lineitem of the performance to release",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Bookings": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Attach an existing booking to the cart.",
                "operationId": "Cart_AddBooking",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bookingRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddBookingRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Remove the booking attached to the cart.",
                "operationId": "Cart_RemoveBooking",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Contributions/{lineItemId}/CustomData/{customId}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates a custom data value for a contribution in the cart\r\nNote: Only the Index and Value properties in the request object should be used.",
                "operationId": "Cart_UpdateContributionCustomData",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "The Reference Number of the contribution to update the custom data value for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "customId",
                        "in": "path",
                        "description": "The Index of the custom data value to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "customDataItem",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomDataItem"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a custom data value for a contribution in the cart",
                "operationId": "Cart_RemoveContributionCustomData",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "The Reference Number of the contribution to remove the custom data value for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "customId",
                        "in": "path",
                        "description": "The Index of custom data value to remove",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Contributions/{lineItemId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a contribution from the cart",
                "operationId": "Cart_RemoveContribution",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "The reference number of the contribution to remove.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Packages/Fixed/{packageId}/{lineItemId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a fixed seat package item from the cart\r\nAll seats are released for the specified package lineitem.",
                "operationId": "Cart_RemovePackageItem",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "packageId",
                        "in": "path",
                        "description": "Id of the packge to remove",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "Lineitem ID for the package line to remove",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Packages/Fixed/{fixedPackageLineItemId}/{performanceLineItemId}/{performanceId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a performance item from a fixed seat package in the cart\r\nSeats are released for the specified performance in the package.",
                "operationId": "Cart_RemovePackagePerformanceItem",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fixedPackageLineItemId",
                        "in": "path",
                        "description": "Lineitem ID of the package to remove the performance from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performanceLineItemId",
                        "in": "path",
                        "description": "Lineitem ID of the performance line in the package to remove",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "PerformanceId ID of the performance to remove",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Packages/Super/{superPackageId}/{superPackageLineItemId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a super package item from the cart\r\nAll seats are released for the specified package lineitem.",
                "operationId": "Cart_RemoveSuperPackageItem",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "superPackageId",
                        "in": "path",
                        "description": "Id of the package to remove",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "superPackageLineItemId",
                        "in": "path",
                        "description": "Lineitem ID of the package line to remove",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Packages/Super/{superPackageLineItemId}/{subPackageId}/{performanceLineItemId}/{performanceId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a performance item from a super package in the cart\r\nSeats are released for the specified performance in the package.",
                "operationId": "Cart_RemoveSuperPackagePerformanceItem",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "superPackageLineItemId",
                        "in": "path",
                        "description": "Lineitem ID of the super package to remove the performance from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subPackageId",
                        "in": "path",
                        "description": "ID of the sub package to remove the performance from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performanceLineItemId",
                        "in": "path",
                        "description": "Lineitem ID of the performance line in the package to remove",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "PerformanceId ID of the performance to remove",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Packages/Nfs/{nfsPackageLineItemId}/{performanceLineItemId}/{performanceId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes an NFS performance item from the cart\r\nSeats are released for the specified performance in the package.",
                "operationId": "Cart_RemoveNFSPackagePerformanceItem",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "nfsPackageLineItemId",
                        "in": "path",
                        "description": "Lineitem ID of the package to remove the performance from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performanceLineItemId",
                        "in": "path",
                        "description": "Lineitem ID of the performance line in the package to remove",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "PerformanceId ID of the performance to remove",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Packages/Nfs/{nfsPackageLineItemId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes an entire NFS package item from the cart\r\nAll seats are released for the specified package lineitem.",
                "operationId": "Cart_RemoveNFSPackage",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "nfsPackageLineItemId",
                        "in": "path",
                        "description": "The lineitem of the packge to remove",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Fees/{itemFeeId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a fee from the cart\r\nOnly user-defined fees can be removed.",
                "operationId": "Cart_RemoveFee",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "itemFeeId",
                        "in": "path",
                        "description": "The Fee ID of the fee to remove",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/CustomData/{customId}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates a custom data value in the cart properties\r\nNote: Only the Index and Value properties in the request should be used.",
                "operationId": "Cart_UpdateCartPropertiesCustomData",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "customId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "customDataItem",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomDataItem"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a custom data value from the cart properties",
                "operationId": "Cart_RemoveCartPropertiesCustomData",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "customId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/{paymentId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a payment from the cart\r\nAll payment types, except gift certificates, can be removed with this method.\r\nThis method will also reverse or void the associated web EMV authorization, if the cart has not been saved.",
                "operationId": "Cart_RemovePayment",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/Plan": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Allows the billing and credit card information to be updated on an existing payment plan for the cart.",
                "operationId": "Cart_UpdatePaymentPlan",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdatePaymentPlanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentPlan"
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes the payment plan associated with the cart",
                "operationId": "Cart_RemovePaymentPlans",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/GiftCertificates/{giftCertificateNumber}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a gift certificate product from the cart",
                "operationId": "Cart_RemoveGiftCertificate",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "giftCertificateNumber",
                        "in": "path",
                        "description": "Must be the number of a gift certificate sold in the current cart.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/OnAccount/{paymentId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes On Account balance from the cart",
                "operationId": "Cart_RemoveOnAccount",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/GiftCertificate/{giftCertificateNumber}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a gift certificate payment from the cart.",
                "operationId": "Cart_UnapplyGiftCertificate",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "giftCertificateNumber",
                        "in": "path",
                        "description": "Must be a valid gift certificate that has value applied to the cart as a payment.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/SubLineItems/{subLineItemId}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes a sub line item.\r\nNot allowed for packages.",
                "operationId": "Cart_RemoveSubLineItem",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "The Id of the line item parent of the sub line item.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subLineItemId",
                        "in": "path",
                        "description": "The Id of the sub line item to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/ContactPointPurposeMaps/{contactPointPurposeMapId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a contact point purpose.",
                "operationId": "ContactPointPurposeMaps_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contactPointPurposeMapId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurposeMap"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a contact point purpose.",
                "operationId": "ContactPointPurposeMaps_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contactPointPurposeMapId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contactPointPurposeMap",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurposeMap"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurposeMap"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a contact point purpose.",
                "operationId": "ContactPointPurposeMaps_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "contactPointPurposeMapId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/EventsManagement/Resources/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a specific Resource.",
                "operationId": "Resources_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Resource.",
                "operationId": "Resources_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resource",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Resource.",
                "operationId": "Resources_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "removeUsages",
                        "in": "query",
                        "description": "When true, any associated schedules, assignments, or availability periods will be removed.  When false, a bad request will be returned if any schedules, assignments, or availability periods are associated with the resource. Default is false is not passed.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/ContactPermissions/{contactPermissionId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a contact permission",
                "operationId": "ContactPermissions_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contactPermissionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPermission"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a contact permission",
                "operationId": "ContactPermissions_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contactPermissionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contactPermission",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPermission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPermission"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a contact permission",
                "operationId": "ContactPermissions_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "contactPermissionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ConstituentTypeAffiliates/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a constituent type affiliate by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ConstituentTypeAffiliates_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentTypeAffiliate"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing constituent type affiliate.",
                "operationId": "ConstituentTypeAffiliates_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentTypeAffiliate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentTypeAffiliate"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing constituent type affiliate.",
                "operationId": "ConstituentTypeAffiliates_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/WorkerQualifications/{workerQualificationId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single WorkerQualification by Id.",
                "operationId": "WorkerQualifications_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "workerQualificationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkerQualification"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing WorkerQualification.",
                "operationId": "WorkerQualifications_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "workerQualificationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "workerQualification",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WorkerQualification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkerQualification"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing WorkerQualification.",
                "operationId": "WorkerQualifications_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "workerQualificationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Countries/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a country by id.",
                "operationId": "Countries_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing country.",
                "operationId": "Countries_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing country.",
                "operationId": "Countries_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/TimeSlots/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a time slot by id.",
                "operationId": "TimeSlots_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TimeSlot"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing time slot.",
                "operationId": "TimeSlots_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TimeSlot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TimeSlot"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing time slot.",
                "operationId": "TimeSlots_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ListCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a list category by id.",
                "operationId": "ListCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ListCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing list category.",
                "operationId": "ListCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ListCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ListCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing list category.",
                "operationId": "ListCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Genders/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a gender by id.",
                "operationId": "Genders_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Gender"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing gender.",
                "operationId": "Genders_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Gender"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Gender"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing gender.",
                "operationId": "Genders_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/CurrencyTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a currency type by id.",
                "operationId": "CurrencyTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CurrencyType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing currency type.",
                "operationId": "CurrencyTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CurrencyType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CurrencyType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing currency type.",
                "operationId": "CurrencyTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/AccountTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an account type by id.",
                "operationId": "AccountTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing account type.",
                "operationId": "AccountTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccountType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing account type.",
                "operationId": "AccountTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/GiftAidRates/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a gift aid rate by id.",
                "operationId": "GiftAidRates_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidRate"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing gift aid rate.",
                "operationId": "GiftAidRates_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidRate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidRate"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing gift aid rate.",
                "operationId": "GiftAidRates_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/Facilities/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a Facility.",
                "operationId": "Facilities_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Facility"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a Facility.",
                "operationId": "Facilities_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "facility",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Facility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Facility"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a Facility.",
                "operationId": "Facilities_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ContactTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a contact type by id.",
                "operationId": "ContactTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing contact type.",
                "operationId": "ContactTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing contact type.",
                "operationId": "ContactTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PricingRules/{pricingRuleId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a pricing rule.",
                "operationId": "PricingRules_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "pricingRuleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRule"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing pricing rule.",
                "operationId": "PricingRules_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "pricingRuleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "pricingRule",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PricingRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRule"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing pricing rule.",
                "operationId": "PricingRules_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "pricingRuleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SalesLayoutButtonTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a sales layout button type by id.",
                "operationId": "SalesLayoutButtonTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesLayoutButtonType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing sales layout button type.",
                "operationId": "SalesLayoutButtonTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalesLayoutButtonType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesLayoutButtonType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing sales layout button type.",
                "operationId": "SalesLayoutButtonTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Txn/PackageWebContents/{packageWebContentId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a packageWebContent.",
                "operationId": "PackageWebContents_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageWebContentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageWebContent"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing packageWebContent.",
                "operationId": "PackageWebContents_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageWebContentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "packageWebContent",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PackageWebContent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageWebContent"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing packageWebContent.",
                "operationId": "PackageWebContents_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "packageWebContentId",
                        "in": "path",
                        "description": "Id of existing packageWebContent.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/HoldCodes/{holdCodeId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a Hold Code.",
                "operationId": "HoldCodes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "holdCodeId",
                        "in": "path",
                        "description": "The id of the resource to be retrieved",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCode"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Hold Code.",
                "operationId": "HoldCodes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "holdCodeId",
                        "in": "path",
                        "description": "The ID of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "holdCode",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HoldCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCode"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Hold Code.",
                "operationId": "HoldCodes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "holdCodeId",
                        "in": "path",
                        "description": "The ID of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/PaymentGateway/PaymentGatewayActivities/{paymentGatewayActivityId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single Payment Gateway Activity",
                "operationId": "PaymentGatewayActivities_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentGatewayActivityId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayActivity"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Payment Gateway Activity",
                "operationId": "PaymentGatewayActivities_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentGatewayActivityId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentGatewayActivity",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayActivity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayActivity"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a Payment Gateway Activity",
                "operationId": "PaymentGatewayActivities_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "paymentGatewayActivityId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PriceTypeReasons/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a price type reason by id.",
                "operationId": "PriceTypeReasons_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeReason"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing price type reason.",
                "operationId": "PriceTypeReasons_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTypeReason"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeReason"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing price type reason.",
                "operationId": "PriceTypeReasons_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/States/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a state by id.",
                "operationId": "States_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/State"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing state.",
                "operationId": "States_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/State"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/State"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing state.",
                "operationId": "States_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Pronouns/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "operationId": "Pronouns_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pronoun"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "operationId": "Pronouns_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pronoun"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pronoun"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "operationId": "Pronouns_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ServiceResourceUserGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a service resource/user group mapping by id.",
                "operationId": "ServiceResourceUserGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceResourceUserGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing service resource/user group mapping.",
                "operationId": "ServiceResourceUserGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceResourceUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceResourceUserGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing service resource/user group mapping.",
                "operationId": "ServiceResourceUserGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/DesignationCodes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a designation code by id.",
                "operationId": "DesignationCodes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DesignationCode"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing designation code.",
                "operationId": "DesignationCodes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DesignationCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DesignationCode"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing designation code.",
                "operationId": "DesignationCodes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SalesChannels/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a sales channel by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "SalesChannels_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesChannel"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing sales channel.",
                "operationId": "SalesChannels_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalesChannel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesChannel"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing sales channel.",
                "operationId": "SalesChannels_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/UpgradeCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an Upgrade Category by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "UpgradeCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Upgrade Category.",
                "operationId": "UpgradeCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpgradeCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Upgrade Category.",
                "operationId": "UpgradeCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Reporting/OutputSets/{outputSetId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single Output Set.",
                "operationId": "OutputSets_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "outputSetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OutputSet"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Output Set.",
                "operationId": "OutputSets_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "outputSetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "outputSet",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OutputSet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OutputSet"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Output Set.",
                "operationId": "OutputSets_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "outputSetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Prefixes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a prefix by id.",
                "operationId": "Prefixes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Prefix"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing prefix.",
                "operationId": "Prefixes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Prefix"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Prefix"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing prefix.",
                "operationId": "Prefixes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/ModeOfSaleUserGroups/{modeOfSaleUserGroupId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a mode of sale/user group mapping by id.",
                "operationId": "ModeOfSaleUserGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleUserGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing mode of sale/user group mapping.",
                "operationId": "ModeOfSaleUserGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleUserGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleUserGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing mode of sale/user group mapping.",
                "operationId": "ModeOfSaleUserGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "modeOfSaleUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PackagePriceTypes/{packagePriceTypeId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific package price type.",
                "operationId": "PackagePriceTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packagePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackagePriceType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing package price type.",
                "operationId": "PackagePriceTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packagePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "packagePriceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PackagePriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackagePriceType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing package price type.",
                "operationId": "PackagePriceTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "packagePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Keywords/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a keyword by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "Keywords_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Keyword"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing keyword.",
                "operationId": "Keywords_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Keyword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Keyword"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing keyword.",
                "operationId": "Keywords_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/ModeOfSaleSurveyQuestions/{modeOfSaleSurveyQuestionId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a mode of sale survey question.",
                "operationId": "ModeOfSaleSurveyQuestions_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleSurveyQuestionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleSurveyQuestion"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing mode of sale survey question.",
                "operationId": "ModeOfSaleSurveyQuestions_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleSurveyQuestionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleSurveyQuestion",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleSurveyQuestion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleSurveyQuestion"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing mode of sale survey question.",
                "operationId": "ModeOfSaleSurveyQuestions_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "modeOfSaleSurveyQuestionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/DiscountTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a discount type by id.",
                "operationId": "DiscountTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DiscountType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing discount type.",
                "operationId": "DiscountTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscountType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DiscountType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing discount type.",
                "operationId": "DiscountTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/InterestCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an interest category by id.",
                "operationId": "InterestCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InterestCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing interest category.",
                "operationId": "InterestCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InterestCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InterestCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing interest category.",
                "operationId": "InterestCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Accounts/{accountId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific credit card account",
                "operationId": "Accounts_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "T_ACCOUNT_DATA.id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Removes an account.",
                "operationId": "Accounts_DeleteAccount",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transactionOrigin",
                        "in": "query",
                        "description": "Text indicating the origin of the transaction. The text will be written to T_PAYMENT_GATEWAY_ACTIVITY.origin if payment card tokenization is enabled. Max of 20 characters, will be truncated if longer.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "overrideDeleteProtection",
                        "in": "query",
                        "description": "If payment card tokenization is enabled and multiple constituents are using the same token, the token cannot be deleted at the processor. Set to true to override this behavior and delete the token anyway.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ActivityCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an activity category by id.",
                "operationId": "ActivityCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActivityCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing activity category.",
                "operationId": "ActivityCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ActivityCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActivityCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing activity category.",
                "operationId": "ActivityCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Diagnostics/{diagnosticId}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Dummy end point to check availability of HTTP PUT.",
                "operationId": "Diagnostics_Put",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "diagnosticId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "diagnostic",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Diagnostic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Diagnostic"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Dummy end point to check availability of HTTP DELETE.",
                "operationId": "Diagnostics_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "diagnosticId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/EmailProfiles/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an email profile by id",
                "operationId": "EmailProfiles_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmailProfile"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing email profile",
                "operationId": "EmailProfiles_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmailProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmailProfile"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing email profile",
                "operationId": "EmailProfiles_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Finance/PlanWorkers/{planWorkerId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a plan worker.",
                "operationId": "PlanWorkers_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "planWorkerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanWorker"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing plan worker.",
                "operationId": "PlanWorkers_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "planWorkerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "planWorker",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanWorker"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanWorker"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a plan worker.",
                "operationId": "PlanWorkers_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "planWorkerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SchedulePatternTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Schedule Pattern by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "SchedulePatternTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SchedulePatternType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Schedule Pattern.",
                "operationId": "SchedulePatternTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SchedulePatternType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SchedulePatternType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Schedule Pattern.",
                "operationId": "SchedulePatternTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Reporting/QueryElementFilters/{queryElementFilterId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a specific query element filter.",
                "operationId": "QueryElementFilters_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "queryElementFilterId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QueryElementFilter"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing query element filter.",
                "operationId": "QueryElementFilters_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "queryElementFilterId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "queryElementFilter",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QueryElementFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QueryElementFilter"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a query element filter.",
                "operationId": "QueryElementFilters_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "queryElementFilterId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/BillingSchedules/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Billing Schedule. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "BillingSchedules_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BillingSchedule"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Billing Schedule.",
                "operationId": "BillingSchedules_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BillingSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BillingSchedule"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Billing Schedule.",
                "operationId": "BillingSchedules_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/Artists/{artistId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an existing artist.",
                "operationId": "Artists_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "artistId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Artist"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing artist.",
                "operationId": "Artists_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "artistId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "artist",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Artist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Artist"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing artist.",
                "operationId": "Artists_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "artistId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/HoldCodeCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Hold Code Category by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "HoldCodeCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCodeCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Hold Code Category.",
                "operationId": "HoldCodeCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HoldCodeCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCodeCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Hold Code Category.",
                "operationId": "HoldCodeCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ControlGroupUserGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a control group/user group mapping by id.",
                "operationId": "ControlGroupUserGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ControlGroupUserGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing control group/user group mapping.",
                "operationId": "ControlGroupUserGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ControlGroupUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ControlGroupUserGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing control group/user group mapping.",
                "operationId": "ControlGroupUserGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SourceGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a source group by id.",
                "operationId": "SourceGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SourceGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing source group.",
                "operationId": "SourceGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SourceGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SourceGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing source group.",
                "operationId": "SourceGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Templates/{templateId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a template by id",
                "operationId": "Templates_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Template"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing template",
                "operationId": "Templates_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "template",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Template"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a template",
                "operationId": "Templates_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/WebContentTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a specific web content type.",
                "operationId": "WebContentTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WebContentType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Web Content Type.",
                "operationId": "WebContentTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebContentType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WebContentType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing web content type with the provided id.",
                "operationId": "WebContentTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/TemplateCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a template category by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "TemplateCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing template category",
                "operationId": "TemplateCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "templateCategory",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TemplateCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a template category",
                "operationId": "TemplateCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PlanStatuses/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a plan status by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PlanStatuses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing plan status.",
                "operationId": "PlanStatuses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing plan status.",
                "operationId": "PlanStatuses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Custom/{resourceName}/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an entry in the table for the resource as defined by {resourceName} in TR_DATASERVICE_TABLES with the given id {Id}.",
                "operationId": "Custom_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update the details of an entry in the table for the resource as defined by {resourceName} in TR_DATASERVICE_TABLES with the given id {Id}.",
                "operationId": "Custom_Update",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an entry from the table for the resource as defined by {resourceName} in TR_DATASERVICE_TABLES with the given id {Id}.",
                "operationId": "Custom_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "resourceName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PerformanceTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a performance type by id.",
                "operationId": "PerformanceTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing performance type.",
                "operationId": "PerformanceTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing performance type.",
                "operationId": "PerformanceTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/IntegrationDefaults/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an Integration Default by id.",
                "operationId": "IntegrationDefaults_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IntegrationDefault"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Integration Default.",
                "operationId": "IntegrationDefaults_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IntegrationDefault"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IntegrationDefault"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Integration Default.",
                "operationId": "IntegrationDefaults_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Associations/{associationId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an association.",
                "operationId": "Associations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Association"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a association.",
                "operationId": "Associations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "association",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Association"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Association"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a association.",
                "operationId": "Associations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Reporting/Lists/{listId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single List without contents.",
                "operationId": "Lists_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/List"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing List.",
                "operationId": "Lists_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "list",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/List"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/List"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing List.",
                "operationId": "Lists_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ContributionDesignations/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a contribution designation by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ContributionDesignations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContributionDesignation"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing contribution designation.",
                "operationId": "ContributionDesignations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContributionDesignation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContributionDesignation"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing contribution designation.",
                "operationId": "ContributionDesignations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/GiftAidDeclarations/{giftAidDeclarationId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets a single Gift Aid Declaration.",
                "operationId": "GiftAidDeclarations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "giftAidDeclarationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidDeclaration"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a Gift Aid Declaration.",
                "operationId": "GiftAidDeclarations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "giftAidDeclarationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "giftAidDeclaration",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidDeclaration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidDeclaration"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a Gift Aid Declaration.",
                "operationId": "GiftAidDeclarations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "giftAidDeclarationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/BatchTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a batch type by id.",
                "operationId": "BatchTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BatchType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing batch type.",
                "operationId": "BatchTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BatchType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BatchType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing batch type.",
                "operationId": "BatchTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/BookingCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Booking Category by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "BookingCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Booking Category.",
                "operationId": "BookingCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BookingCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Booking Category.",
                "operationId": "BookingCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Constituencies/{constituencyId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of constituency.",
                "operationId": "Constituencies_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituencyId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Constituency"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a constituency.",
                "operationId": "Constituencies_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituencyId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "constituency",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Constituency"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Constituency"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a constituency.",
                "operationId": "Constituencies_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "constituencyId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Finance/CampaignFunds/{campaignFundId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single Fund associated to a Campaign.",
                "operationId": "CampaignFunds_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "campaignFundId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CampaignFund"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a Fund association to a Campaign.",
                "operationId": "CampaignFunds_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "campaignFundId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "campaignFund",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignFund"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CampaignFund"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a fund association from a Campaign.",
                "operationId": "CampaignFunds_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "campaignFundId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SubLineItemStatuses/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a sub line item status by id.",
                "operationId": "SubLineItemStatuses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SubLineItemStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing sub line item status.",
                "operationId": "SubLineItemStatuses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SubLineItemStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SubLineItemStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing sub line item status.",
                "operationId": "SubLineItemStatuses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/TriPOSCloudConfigurations/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a TriPOS Cloud configuration by id.",
                "operationId": "TriPOSCloudConfigurations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TriPOSCloudConfiguration"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing TriPOS Cloud configuration.",
                "operationId": "TriPOSCloudConfigurations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TriPOSCloudConfiguration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TriPOSCloudConfiguration"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing TriPOS Cloud configuration.",
                "operationId": "TriPOSCloudConfigurations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/MailIndicators/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a mail indicator by id.",
                "operationId": "MailIndicators_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MailIndicator"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing mail indicator.",
                "operationId": "MailIndicators_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MailIndicator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MailIndicator"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing mail indicator.",
                "operationId": "MailIndicators_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Organizations/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an organization by ID. To get the resource in maintenance mode (ignoring control groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "Organizations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing organization.",
                "operationId": "Organizations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing organization.",
                "operationId": "Organizations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Finance/Steps/{stepId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a step.",
                "operationId": "Steps_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "stepId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Step"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing step.",
                "operationId": "Steps_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "stepId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "step",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Step"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Step"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a step.",
                "operationId": "Steps_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "stepId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PlanPriorities/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a plan priority by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PlanPriorities_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanPriority"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing plan priority.",
                "operationId": "PlanPriorities_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanPriority"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanPriority"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing plan priority.",
                "operationId": "PlanPriorities_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PerformancePrices/{performancePriceId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a performance price.",
                "operationId": "PerformancePrices_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePrice"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing performance price.",
                "operationId": "PerformancePrices_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performancePrice",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePrice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePrice"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing performance price.",
                "operationId": "PerformancePrices_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "performancePriceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ContactPointCategoryPurposes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a contact point category purpose by id.",
                "operationId": "ContactPointCategoryPurposes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategoryPurpose"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing contact point category purpose.",
                "operationId": "ContactPointCategoryPurposes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategoryPurpose"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategoryPurpose"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing contact point category purpose.",
                "operationId": "ContactPointCategoryPurposes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/PaymentGateway/EMV/TriPosLanes/{laneId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Retrieve information for a specific lane",
                "operationId": "EMV_GetLane",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "laneId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "merchant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cert",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Lane"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a lane from the merchant, close the connection to triPOS and issue a new activation code on the device",
                "operationId": "EMV_DeleteLane",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "laneId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "merchant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cert",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/QualificationCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Qualification Category by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "QualificationCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QualificationCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Qualification Category.",
                "operationId": "QualificationCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QualificationCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QualificationCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Qualification Category.",
                "operationId": "QualificationCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ContactPermissionCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a contact permission category. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resource in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ContactPermissionCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing contact permission category.",
                "operationId": "ContactPermissionCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing contact permission category.",
                "operationId": "ContactPermissionCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Reporting/QueryElements/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a query element by id.",
                "operationId": "QueryElements_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QueryElement"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing query element.",
                "operationId": "QueryElements_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "queryElement",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QueryElement"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QueryElement"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a query element.",
                "operationId": "QueryElements_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ContactPermissionTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a contact permission type. To get the resource only if the user has write/edit access, pass filter=\"writeonly\".  To get the resource in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ContactPermissionTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing contact permission type.",
                "operationId": "ContactPermissionTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing contact permission type.",
                "operationId": "ContactPermissionTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Languages/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a language by id.",
                "operationId": "Languages_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing language.",
                "operationId": "Languages_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing language.",
                "operationId": "Languages_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ObjectPermissions/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an object permission by id.",
                "operationId": "ObjectPermissions_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ObjectPermission"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing object permission.",
                "operationId": "ObjectPermissions_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ObjectPermission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ObjectPermission"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing object permission.",
                "operationId": "ObjectPermissions_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/WorkerRoles/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a worker role by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "WorkerRoles_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkerRole"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing worker role.",
                "operationId": "WorkerRoles_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WorkerRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkerRole"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing worker role.",
                "operationId": "WorkerRoles_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/SurveyResponses/{surveyResponseId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a survey response.",
                "operationId": "SurveyResponses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "surveyResponseId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SurveyResponse"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing survey response.",
                "operationId": "SurveyResponses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "surveyResponseId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "surveyResponse",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SurveyResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SurveyResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing survey response.",
                "operationId": "SurveyResponses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "surveyResponseId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SeatStatuses/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a seat status by id.",
                "operationId": "SeatStatuses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeatStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing seat status.",
                "operationId": "SeatStatuses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SeatStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeatStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing seat status.",
                "operationId": "SeatStatuses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/CustomDefaultCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a custom default category by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "CustomDefaultCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomDefaultCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing custom default category.",
                "operationId": "CustomDefaultCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomDefaultCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomDefaultCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing custom default category.",
                "operationId": "CustomDefaultCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Eras/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an era by id.",
                "operationId": "Eras_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Era"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing era.",
                "operationId": "Eras_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Era"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Era"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing era.",
                "operationId": "Eras_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PackageTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a package type by id.",
                "operationId": "PackageTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing package type.",
                "operationId": "PackageTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PackageType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing package type.",
                "operationId": "PackageTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/EventsManagement/ResourceTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all resource types.",
                "operationId": "ResourceTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing resource type.",
                "operationId": "ResourceTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing resource type.",
                "operationId": "ResourceTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Actions/{actionId}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an issue action for a Constituent",
                "operationId": "Actions_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "actionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "issueAction",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IssueAction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IssueAction"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an issue action.",
                "operationId": "Actions_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "actionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Reporting/ReportRequests/Expired": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a list of all the expired requests of the specified report types as of the provided date time.",
                "operationId": "ReportRequests_GetAllExpired",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "Defaults to now.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "reportTypes",
                        "in": "query",
                        "description": "Comma separated list of report types.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExpiredReportRequest"
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete all the expired requests as of the provided date time.",
                "operationId": "ReportRequests_DeleteAllExpired",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "Defaults to now.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/EmarketIndicators/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an emarket indicator by id.",
                "operationId": "EmarketIndicators_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmarketIndicator"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing emarket indicator.",
                "operationId": "EmarketIndicators_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmarketIndicator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmarketIndicator"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing emarket indicator.",
                "operationId": "EmarketIndicators_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PriceTemplates/{priceTemplateId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a price template.",
                "operationId": "PriceTemplates_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceTemplateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTemplate"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing price template.",
                "operationId": "PriceTemplates_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceTemplateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "priceTemplate",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTemplate"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing price template.",
                "operationId": "PriceTemplates_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "priceTemplateId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Research/{researchEntryId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a research entry.",
                "operationId": "Research_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "researchEntryId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResearchEntry"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updated an existing research entry for a constituent.",
                "operationId": "Research_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "researchEntryId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "researchEntry",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResearchEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResearchEntry"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing research entry.",
                "operationId": "Research_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "researchEntryId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Finance/Documents/{documentId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a document.",
                "operationId": "Documents_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a document.",
                "operationId": "Documents_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Interests/{interestId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an interest.",
                "operationId": "Interests_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "interestId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Interest"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an interest. If the interest is not selected and the weight is 0 or null, it will be deleted.\r\nFor bulk interest edits, consider the CRM/Interests/CreateOrUpdate batching resource which allows multiple interests to be created, updated, or removed in a single request.",
                "operationId": "Interests_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "interestId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "interest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Interest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Interest"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an interest.\r\nFor bulk interest edits, consider the CRM/Interests/CreateOrUpdate batching resource which allows multiple interests to be created, updated, or removed in a single request.",
                "operationId": "Interests_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "interestId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PerformancePriceTypes/{performancePriceTypeId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a performance price type.",
                "operationId": "PerformancePriceTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing performance price type.",
                "operationId": "PerformancePriceTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performancePriceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing performance price type.",
                "operationId": "PerformancePriceTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "performancePriceTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PerformancePriceTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all performance price type for the list of performances. (Pass comma separated list of performance Ids as parameter)",
                "operationId": "PerformancePriceTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformancePriceType"
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update the performance price types for a set of performances.",
                "operationId": "PerformancePriceTypes_BulkUpdate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "performancePriceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformancePriceTypeUpdateRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new performance price type.",
                "operationId": "PerformancePriceTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete all performance price types for a set of performance and price layer types and price types.",
                "operationId": "PerformancePriceTypes_DeleteAll",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "priceLayerTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Affiliations/{affiliationId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an affiliation.",
                "operationId": "Affiliations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "affiliationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Affiliation"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an affiliation.",
                "operationId": "Affiliations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "affiliationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "affiliation",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Affiliation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Affiliation"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an affiliation.",
                "operationId": "Affiliations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "affiliationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ContactPointCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a contact point category by id.",
                "operationId": "ContactPointCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing contact point category.",
                "operationId": "ContactPointCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing contact point category.",
                "operationId": "ContactPointCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Finance/CampaignDesignations/{campaignDesignationId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single Designation associated to a Campaign.",
                "operationId": "CampaignDesignations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "campaignDesignationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CampaignDesignation"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an association between a Designation and a Campaign.",
                "operationId": "CampaignDesignations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "campaignDesignationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "campaignDesignation",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignDesignation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CampaignDesignation"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an asssociation between a Designation and a Campaign.",
                "operationId": "CampaignDesignations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "campaignDesignationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/HoldCodeUserGroups/{holdCodeUserGroupId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a hold code/user group mapping by id.",
                "operationId": "HoldCodeUserGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "holdCodeUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCodeUserGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing hold code/user group mapping.",
                "operationId": "HoldCodeUserGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "holdCodeUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "holdCodeUserGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HoldCodeUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCodeUserGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing hold code/user group mapping.",
                "operationId": "HoldCodeUserGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "holdCodeUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Philanthropy/{philanthropyEntryId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an philanthropyEntry.",
                "operationId": "Philanthropy_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "philanthropyEntryId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyEntry"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updated an existing philanthropyEntry for a constituent.",
                "operationId": "Philanthropy_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "philanthropyEntryId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "philanthropyEntry",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyEntry"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing philanthropyEntry.",
                "operationId": "Philanthropy_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "philanthropyEntryId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PaymentTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a payment type by id.",
                "operationId": "PaymentTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing payment type.",
                "operationId": "PaymentTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing payment type.",
                "operationId": "PaymentTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ControlGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a control group by id.",
                "operationId": "ControlGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ControlGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing control group.",
                "operationId": "ControlGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ControlGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ControlGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing control group.",
                "operationId": "ControlGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ContactPointPurposes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a contact point purpose by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ContactPointPurposes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurpose"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing contact point purpose.",
                "operationId": "ContactPointPurposes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurpose"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurpose"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing contact point purpose.",
                "operationId": "ContactPointPurposes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PhoneTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a phone type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PhoneTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhoneType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing phone type.",
                "operationId": "PhoneTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhoneType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhoneType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing phone type.",
                "operationId": "PhoneTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PerformancePriceLayers": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new performance price layer.",
                "operationId": "PerformancePriceLayers_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceLayer",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceLayer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceLayer"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete performance price layers for a set of performances and layer type.",
                "operationId": "PerformancePriceLayers_DeleteLayers",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "priceLayerTypeId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PerformancePriceLayers/{performancePriceLayerId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a performance price layer.",
                "operationId": "PerformancePriceLayers_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceLayerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceLayer"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing performance price layer.",
                "operationId": "PerformancePriceLayers_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceLayerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performancePriceLayer",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceLayer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceLayer"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing performance price layer.",
                "operationId": "PerformancePriceLayers_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "performancePriceLayerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ResearchTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of research type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ResearchTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResearchType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing research type.",
                "operationId": "ResearchTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResearchType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResearchType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing research type.",
                "operationId": "ResearchTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Composers/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a composer by id.",
                "operationId": "Composers_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Composer"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing composer.",
                "operationId": "Composers_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Composer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Composer"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing composer.",
                "operationId": "Composers_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PortfolioCustomElements/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a portfolio custom element by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PortfolioCustomElements_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PortfolioCustomElement"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing portfolio custom element.",
                "operationId": "PortfolioCustomElements_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PortfolioCustomElement"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PortfolioCustomElement"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing portfolio custom element.",
                "operationId": "PortfolioCustomElements_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Aliases/{aliasId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an alias.",
                "operationId": "Aliases_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "aliasId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Alias"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an alias.",
                "operationId": "Aliases_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "aliasId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "alias",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alias"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Alias"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an alias.",
                "operationId": "Aliases_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "aliasId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Rankings/{rankingId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a ranking.",
                "operationId": "Rankings_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "rankingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Ranking"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a ranking.",
                "operationId": "Rankings_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "rankingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ranking",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Ranking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Ranking"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a ranking.",
                "operationId": "Rankings_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "rankingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PlanTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a plan type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PlanTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing plan type.",
                "operationId": "PlanTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing plan type.",
                "operationId": "PlanTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/MediaTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a media type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "MediaTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MediaType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing media type.",
                "operationId": "MediaTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MediaType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MediaType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing media type.",
                "operationId": "MediaTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/EventsManagement/ResourceSchedules/{resourceScheduleId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single resource schedule.",
                "operationId": "ResourceSchedules_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceScheduleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceSchedule"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a specific resource schedule.  Only Busy or Available types can be updated.",
                "operationId": "ResourceSchedules_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceScheduleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceSchedule",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceSchedule"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a busy or available resource schedule.  Booking Assignment Schedules must be deleted by updating their booking.",
                "operationId": "ResourceSchedules_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "resourceScheduleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "overrideConflicts",
                        "in": "query",
                        "description": "When passed as true and the user group has rights to Override Resource Assignments, any overlapping will be updated to Ignore Schedule Conflicts",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ConstituentProtectionTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a constituent protection type by id.",
                "operationId": "ConstituentProtectionTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentProtectionType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing constituent protection type.",
                "operationId": "ConstituentProtectionTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentProtectionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentProtectionType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing constituent protection type.",
                "operationId": "ConstituentProtectionTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PhilanthropyTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of philosophy type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PhilanthropyTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing philosophy type.",
                "operationId": "PhilanthropyTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing philosophy type.",
                "operationId": "PhilanthropyTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Salutations/{salutationId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a salutation.",
                "operationId": "Salutations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "salutationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Salutation"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a salutation.",
                "operationId": "Salutations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "salutationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "salutation",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Salutation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Salutation"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a salutation.",
                "operationId": "Salutations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "salutationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/GiftAidStatuses/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a gift aid status by id.",
                "operationId": "GiftAidStatuses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing gift aid status.",
                "operationId": "GiftAidStatuses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing gift aid status.",
                "operationId": "GiftAidStatuses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Assets/{assetId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an asset.",
                "operationId": "Assets_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "assetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing asset for a constituent.",
                "operationId": "Assets_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "assetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asset",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing asset.",
                "operationId": "Assets_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "assetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ReceiptSettings/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Receipt Setting by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ReceiptSettings_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReceiptSetting"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing Receipt Setting.",
                "operationId": "ReceiptSettings_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The updated resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReceiptSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReceiptSetting"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing Receipt Setting.",
                "operationId": "ReceiptSettings_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/KeywordCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a keyword category by id.",
                "operationId": "KeywordCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/KeywordCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing keyword category.",
                "operationId": "KeywordCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeywordCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/KeywordCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing keyword category.",
                "operationId": "KeywordCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Finance/Plans/{planId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a plan.",
                "operationId": "Plans_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "planId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Plan"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing plan.",
                "operationId": "Plans_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "planId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "plan",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Plan"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Plan"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a plan.",
                "operationId": "Plans_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "planId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PerformanceStatuses/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a performance status by id.",
                "operationId": "PerformanceStatuses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing performance status.",
                "operationId": "PerformanceStatuses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing performance status.",
                "operationId": "PerformanceStatuses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/AppScreenTexts/{name}": {
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing App Screen Text.",
                "operationId": "AppScreenTexts_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the App Screen Text to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/ModesOfSale/{modeOfSaleId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an existing mode of sale.",
                "operationId": "ModesOfSale_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSale"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing mode of sale.",
                "operationId": "ModesOfSale_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSale",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSale"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSale"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing mode of sale.",
                "operationId": "ModesOfSale_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "modeOfSaleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/Zones/{zoneMapId},{zoneId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific zone.",
                "operationId": "Zones_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "zoneMapId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "zoneId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing zone.",
                "operationId": "Zones_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "zoneMapId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "zoneId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "zone",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing zone.",
                "operationId": "Zones_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "zoneMapId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "zoneId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PricingRuleSets/{pricingRuleSetId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a pricing rule set.",
                "operationId": "PricingRuleSets_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "pricingRuleSetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleSet"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing pricing rule set.",
                "operationId": "PricingRuleSets_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "pricingRuleSetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "pricingRuleSet",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PricingRuleSet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleSet"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing pricing rule set.",
                "operationId": "PricingRuleSets_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "pricingRuleSetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/BusinessUnits/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a business unit by id.",
                "operationId": "BusinessUnits_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BusinessUnit"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing business unit.",
                "operationId": "BusinessUnits_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BusinessUnit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BusinessUnit"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing business unit.",
                "operationId": "BusinessUnits_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/DocumentCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a documentCategory by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "DocumentCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DocumentCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing documentCategory.",
                "operationId": "DocumentCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DocumentCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DocumentCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing documentCategory.",
                "operationId": "DocumentCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Reporting/AnalyticsReports/{analyticsReportId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single SSRS Report for display in Analytics.",
                "operationId": "AnalyticsReports_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "analyticsReportId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AnalyticsReport"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update SSRS Reports for display in Analytics.",
                "operationId": "AnalyticsReports_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "analyticsReportId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "analyticsReport",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AnalyticsReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AnalyticsReport"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete SSRS Reports for display in Analytics.",
                "operationId": "AnalyticsReports_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "analyticsReportId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Integrations/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an action type by id.",
                "operationId": "Integrations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Integration"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing action type.",
                "operationId": "Integrations_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Integration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Integration"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing action type.",
                "operationId": "Integrations_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/InterestTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an interest type by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "InterestTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InterestType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing interest type.",
                "operationId": "InterestTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InterestType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InterestType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing interest type.",
                "operationId": "InterestTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/SeatCodes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a seat code by id.",
                "operationId": "SeatCodes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeatCode"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing seat code.",
                "operationId": "SeatCodes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SeatCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeatCode"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing seat code.",
                "operationId": "SeatCodes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/PaymentGateway/Notifications/Events/{notificationEventId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get notification event by Id.",
                "operationId": "PaymentGatewayNotifications_GetNotificationEvent",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "notificationEventId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NotificationEvent"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a notification event.",
                "operationId": "PaymentGatewayNotifications_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "notificationEventId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "notificationEvent",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NotificationEvent"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a notification event.",
                "operationId": "PaymentGatewayNotifications_DeleteNotificationEvent",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "notificationEventId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Attributes/{attributeId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an attribute.",
                "operationId": "Attributes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "attributeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Attribute"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an attribute.",
                "operationId": "Attributes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "attributeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "attribute",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Attribute"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Attribute"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an attribute.",
                "operationId": "Attributes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "attributeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Theaters/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a theater by id.",
                "operationId": "Theaters_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Theater"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing theater.",
                "operationId": "Theaters_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Theater"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Theater"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing theater.",
                "operationId": "Theaters_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Documents/{documentId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a document for a constituent.",
                "operationId": "ConstituentDocuments_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing document for a constituent.",
                "operationId": "ConstituentDocuments_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "document",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a document for a constituent.",
                "operationId": "ConstituentDocuments_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PlanSources/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a plan source by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PlanSources_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanSource"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing plan source.",
                "operationId": "PlanSources_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanSource"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanSource"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing plan source.",
                "operationId": "PlanSources_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/OrderCategories/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an order category by id.",
                "operationId": "OrderCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrderCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing order category.",
                "operationId": "OrderCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrderCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrderCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing order category.",
                "operationId": "OrderCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/Payment/Signatures/{paymentSignatureId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a payment signature.",
                "operationId": "PaymentSignatures_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentSignatureId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentSignature"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing payment signature.",
                "operationId": "PaymentSignatures_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentSignatureId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentSignature",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentSignature"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentSignature"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing payment signature.",
                "operationId": "PaymentSignatures_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "paymentSignatureId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/InventoryContactPermissionTypes/{inventoryContactPermissionTypeId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an inventoryContactPermissionType.",
                "operationId": "InventoryContactPermissionTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "inventoryContactPermissionTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InventoryContactPermissionType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updated an existing inventoryContactPermissionType.",
                "operationId": "InventoryContactPermissionTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "inventoryContactPermissionTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "inventoryContactPermissionType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InventoryContactPermissionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InventoryContactPermissionType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing inventoryContactPermissionType",
                "operationId": "InventoryContactPermissionTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "inventoryContactPermissionTypeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PerformancePackageModeOfSales/{performancePackageModeOfSaleId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a performance package mode of sale.",
                "operationId": "PerformancePackageModeOfSales_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePackageModeOfSaleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePackageModeOfSale"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing performance package mode of sale.",
                "operationId": "PerformancePackageModeOfSales_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePackageModeOfSaleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "performancePackageModeOfSale",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePackageModeOfSale"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePackageModeOfSale"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing performance package mode of sale.",
                "operationId": "PerformancePackageModeOfSales_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "performancePackageModeOfSaleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/ModeOfSaleCategories/{modeOfSaleCategoryId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a mode of sale category.",
                "operationId": "ModeOfSaleCategories_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleCategoryId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleCategory"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing mode of sale category.",
                "operationId": "ModeOfSaleCategories_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleCategoryId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleCategory",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleCategory"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing mode of sale category.",
                "operationId": "ModeOfSaleCategories_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "modeOfSaleCategoryId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/BatchTypeGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a batch type group by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "BatchTypeGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BatchTypeGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing batch type group.",
                "operationId": "BatchTypeGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BatchTypeGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BatchTypeGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing batch type group.",
                "operationId": "BatchTypeGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ActionTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an action type by id.",
                "operationId": "ActionTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing action type.",
                "operationId": "ActionTypes_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing action type.",
                "operationId": "ActionTypes_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ConstituentGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a constituent group by id.",
                "operationId": "ConstituentGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing constituent group.",
                "operationId": "ConstituentGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing constituent group.",
                "operationId": "ConstituentGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PaymentMethodGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a payment method group by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PaymentMethodGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing payment method group.",
                "operationId": "PaymentMethodGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing payment method group.",
                "operationId": "PaymentMethodGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Addresses/{addressId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an address using addressId as a URL query parameter. Returns 404 Not Found if an address with the specified Id is not found.",
                "operationId": "Addresses_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "addressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Address"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an address for a Constituent by sending an XML or JSON representation of an existing Address object using HTTP PUT.",
                "operationId": "Addresses_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "addressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "address",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Address"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Address"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an address along with all the phones attached to the address. Primary address for a Constituent cannot be deleted.",
                "operationId": "Addresses_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "addressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/Premieres/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a premiere by id.",
                "operationId": "Premieres_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Premiere"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing premiere.",
                "operationId": "Premieres_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Premiere"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Premiere"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing premiere.",
                "operationId": "Premieres_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ReportUserGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a report/user group mapping by id.",
                "operationId": "ReportUserGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportUserGroup"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing report/user group mapping.",
                "operationId": "ReportUserGroups_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReportUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportUserGroup"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete an existing report/user group mapping.",
                "operationId": "ReportUserGroups_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Phones/{phoneId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a phone.",
                "operationId": "Phones_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "phoneId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Phone"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a phone.",
                "operationId": "Phones_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "phoneId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phone",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Phone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Phone"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DELETE"
                ],
                "summary": "Delete a phone.",
                "operationId": "Phones_Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "phoneId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/ContactPointPurposeCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contact point purpose categories. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ContactPointPurposeCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PurposeCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contact point purpose category.",
                "operationId": "ContactPointPurposeCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PurposeCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PurposeCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPointPurposeCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all contact point purpose categories.",
                "operationId": "ContactPointPurposeCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PurposeCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Credits": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns all credits for the requested production element, and all credits from above it in the production hierarchy.",
                "operationId": "Credits_GetCredits",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionElementIds",
                        "in": "query",
                        "description": "A comma separated list of IDs of production elements (i.e. performances, production-seasons, productions, titles)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreditResult"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/ElectronicAddresses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get electronic addresses for constituent(s) or query general public electronic addresses for a specific address.\r\n            \r\nEither constituentIds, useGeneralPublic, or address must be specified in request. For constituent electronic address, visible affiliation electronic addresses can be included with includeAffiliations=true. To exclude electronic addresses of the visible affiliations pass includeAffiliations=false. To retrieve only the primary electronic addresses, pass primaryOnly=true.",
                "operationId": "ElectronicAddresses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentIds",
                        "in": "query",
                        "description": "A comma separated list of constituent ids.  The parameter useGeneralPublic cannot be used with this parameter.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include electronic addresses for affiliated constituents.  Ignored when useGeneralPublic is true.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "primaryOnly",
                        "in": "query",
                        "description": "Only return primary electronic addresses.  Ignored when useGeneralPublic is true.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeFromAffiliations",
                        "in": "query",
                        "description": "Include electronic addresses assigned to affiliations of the constituents provided. Ignored when useGeneralPublic is true.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "useGeneralPublic",
                        "in": "query",
                        "description": "Default to false. If true, only general public will be searched.  When false, general public is not included in results. Address is required when set to true.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Exact match search on address.  Can be used by itself or with useGeneralPublic.  When searching for specific address, the request only searches existing constituents OR general public, but not both in the same request.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "electronicAddressTypeId",
                        "in": "query",
                        "description": "Filter results to only provided electronic address types.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ElectronicAddress"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new electronic address.",
                "operationId": "ElectronicAddresses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "electronicAddress",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddress"
                        }
                    }
                }
            }
        },
        "/CRM/ElectronicAddresses/{electronicAddressId}/IsAttachedToLogin": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Check if the specified electronic address is attached to a web login.",
                "operationId": "ElectronicAddresses_IsAttachedToLogin",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "electronicAddressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AttachedToLogin"
                        }
                    }
                }
            }
        },
        "/Finance/Campaigns/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Return a collection of all campaigns in summary, optionally excluding inactive campaigns.",
                "operationId": "Campaigns_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "description": "Return only active campaigns.  Default is to return all campaigns.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CampaignSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Campaigns/{campaignId}/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of a specific campaign.",
                "operationId": "Campaigns_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CampaignSummary"
                        }
                    }
                }
            }
        },
        "/TXN/ModeOfSalePriceTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all mode of sale price types.",
                "operationId": "ModeOfSalePriceTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModeOfSalePriceType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new mode of sale price type.",
                "operationId": "ModeOfSalePriceTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSalePriceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSalePriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSalePriceType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReferenceTableUserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the reference table/user group mappings.",
                "operationId": "ReferenceTableUserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReferenceTableUserGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new reference table/user group mapping.",
                "operationId": "ReferenceTableUserGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReferenceTableUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReferenceTableUserGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReferenceTableUserGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all reference table/user group mappings.",
                "operationId": "ReferenceTableUserGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReferenceTableUserGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/ProductionSeasons": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get production season details.\r\nReturns the full details for multiple production seasons (based on a string of production IDs or season IDs), including description and short description, season, first and last performance date, and the four ticket text lines.",
                "operationId": "ProductionSeasons_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "seasonIds",
                        "in": "query",
                        "description": "One or more season IDs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "productionIds",
                        "in": "query",
                        "description": "One or more production IDs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "One or more Production Season IDs",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductionSeason"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/ProductionSeasons/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get production season summaries.\r\nReturns the production season summary (description, ID, and related production and season summaries) for all production seasons, all production seasons of a string of specific productions, or all production seasons in a string of specified seasons.",
                "operationId": "ProductionSeasons_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "seasonIds",
                        "in": "query",
                        "description": "One or more season IDs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "productionIds",
                        "in": "query",
                        "description": "One or more production IDs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "One or more Production Season IDs",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductionSeasonSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/ProductionSeasons/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific production season.\r\nReturns the full details for a single production season, including description and short description, season, first and last performance date, and the four ticket text lines.",
                "operationId": "ProductionSeasons_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Production season ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProductionSeason"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PricingRuleCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all pricing rule categories. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PricingRuleCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRuleCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new pricing rule category.",
                "operationId": "PricingRuleCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PricingRuleCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PricingRuleCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all pricing rule categories.",
                "operationId": "PricingRuleCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRuleCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/OrderBilling/{orderBillingId}/Status": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get status of a processing automated billing run.",
                "operationId": "OrderBilling_Status",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderBillingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AutomatedBillingStatus"
                        }
                    }
                }
            }
        },
        "/TXN/OrderBilling/Reprint/{orderBillingId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Reprint Order billing",
                "operationId": "OrderBilling_Reprint",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderBillingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OrderBillingResponse"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/GLAccounts": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all gl accounts. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "GLAccounts_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GlAccount"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/GLAccounts/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all gl accounts.",
                "operationId": "GLAccounts_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GlAccountSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/GLAccounts/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a gl account by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "GLAccounts_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GlAccount"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SpecialActivityStatuses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Special Activity Statuses. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "SpecialActivityStatuses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SpecialActivityStatus"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Special Activity Status.",
                "operationId": "SpecialActivityStatuses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityStatus"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SpecialActivityStatuses/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Special Activity Statuses.",
                "operationId": "SpecialActivityStatuses_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SpecialActivityStatusSummary"
                            }
                        }
                    }
                }
            }
        },
        "/AccessControl/EventControl": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns a response containing a list of EventControl rows for the N-Scan event control table.",
                "operationId": "EventControl_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EventControlResponse"
                        }
                    }
                }
            }
        },
        "/TXN/ZoneMaps": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all zone maps, optionally filtered by facility and/or seat map.",
                "operationId": "ZoneMaps_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "facilityId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "seatMapId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ZoneMap"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new zone map.",
                "operationId": "ZoneMaps_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ZoneMap"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneMap"
                        }
                    }
                }
            }
        },
        "/TXN/ZoneMaps/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary of all zone maps, optionally filtered by facility and/or seat map.",
                "operationId": "ZoneMaps_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "facilityId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "seatMapId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ZoneMapSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/NScanAccessAreas": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all NScan Access Areas. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "NScanAccessAreas_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NScanAccessArea"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new NScan Access Area.",
                "operationId": "NScanAccessAreas_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NScanAccessArea"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NScanAccessArea"
                        }
                    }
                }
            }
        },
        "/ReferenceData/NScanAccessAreas/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all NScan Access Areas.",
                "operationId": "NScanAccessAreas_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NScanAccessAreaSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/NameStatuses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all name statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "NameStatuses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NameStatus"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new name status.",
                "operationId": "NameStatuses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NameStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NameStatus"
                        }
                    }
                }
            }
        },
        "/ReferenceData/NameStatuses/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all name statuses.",
                "operationId": "NameStatuses_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NameStatusSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/CardReaderTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Card Reader Types. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "CardReaderTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CardReaderType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Card Reader Type.",
                "operationId": "CardReaderTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CardReaderType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CardReaderType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/CardReaderTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Card Reader Types.",
                "operationId": "CardReaderTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CardReaderTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/AssetTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all asset types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "AssetTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssetType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new asset type.",
                "operationId": "AssetTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssetType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AssetType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AssetTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all asset types.",
                "operationId": "AssetTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssetTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Txn/InventoryWebContents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the inventoryWebContents.",
                "operationId": "InventoryWebContents_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionElementIds",
                        "in": "query",
                        "description": "A comma separated list of production element ids (Title, Production, Production Season, or Performance). Required if contentTypeIds is not used.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contentTypeIds",
                        "in": "query",
                        "description": "A comma separated list of content type ids.  Required if productionElementIds is not used.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InventoryWebContent"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create an inventoryWebContent.",
                "operationId": "InventoryWebContents_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "inventoryWebContent",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InventoryWebContent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InventoryWebContent"
                        }
                    }
                }
            }
        },
        "/Txn/InventoryWebContents/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the inventoryWebContents.",
                "operationId": "InventoryWebContents_GetAllSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionElementIds",
                        "in": "query",
                        "description": "A comma separated list of production element ids (Title, Production, Production Season, or Performance). Required if contentTypeIds is not used.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contentTypeIds",
                        "in": "query",
                        "description": "A comma separated list of content type ids. Required if productionElementIds is not used.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InventoryWebContentSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PriceTypeUserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price type/user group mappings.  Optional filter on UserGroup and PriceType.",
                "operationId": "PriceTypeUserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userGroup",
                        "in": "query",
                        "description": "Only return mappings for the specified UserGroup.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeId",
                        "in": "query",
                        "description": "Only return mappings for the specified PriceType.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeUserGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new price typ/user group mapping.",
                "operationId": "PriceTypeUserGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceTypeUserGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTypeUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeUserGroup"
                        }
                    }
                }
            }
        },
        "/TXN/PaymentMethodUserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all payment method/user group mappings. Optional filter on UserGroup, Amount and MaintenanceMode (which overrides the filter on UserGroup)",
                "operationId": "PaymentMethodUserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userGroup",
                        "in": "query",
                        "description": "Only return mappings for the specified UserGroup.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "amount",
                        "in": "query",
                        "description": "If a negative amount is specified, return mappings where the PaymentMethod allows refunds and has a MaxRefund &gt;= the absolute value of amount.  If a positive amount is specified, return mappings where the IncomeIndicator is true and the PaymentMethod is of type Income.  Amount is not allowed if maintenanceMode=\"true\"",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "If \"true\", all mappings will be returned.  Effectively the same as not specifying a UserGroup.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentMethodUserGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new payment method/user group mapping.",
                "operationId": "PaymentMethodUserGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentMethodUserGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodUserGroup"
                        }
                    }
                }
            }
        },
        "/Cache/init": {
            "get": {
                "tags": [
                    "GET"
                ],
                "operationId": "Cache_Init",
                "consumes": [],
                "produces": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/ReferenceData/PhoneIndicators": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all phone indicators. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PhoneIndicators_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PhoneIndicator"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new phone indicator.",
                "operationId": "PhoneIndicators_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhoneIndicator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhoneIndicator"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PhoneIndicators/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all phone indicators.",
                "operationId": "PhoneIndicators_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PhoneIndicatorSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/Detail": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get constituent details with addresses, electronicAddresses, salutations and phones. To exclude information about visible affiliations pass includeAffiliations=\"false\"",
                "operationId": "Constituents_GetConstituent",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentDetail"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/PrimaryHousehold": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get primary household constituent details for a provided constituentId.",
                "operationId": "Constituents_GetPrimaryHousehold",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentDetail"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/Header/Flex/{headerId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a flex header for a constituent",
                "operationId": "Constituents_GetFlexHeader",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "headerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FlexHeader"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/Header/{headerId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Return constituent header details, including configured flexible header names and values.",
                "operationId": "Constituents_GetHeader",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "headerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentHeader"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/Header/Default": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Return the default header for the constituent, including configured flexible header names and values.",
                "operationId": "Constituents_GetDefaultHeader",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentHeader"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/Search": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Search for constituents using one of four possible search modes.  Querystring parameters are valid based on the \"type\" parameter value.\r\nSingle Line (type=fluent)\r\nSample:  CRM/Constituents/Search?type=fluent&amp;q=Huff\r\nSingle Line search type (or fluent) is the default search if not provided in querystring.  Single line search works on string patterns in the passed search value (\"q\" param).  Patterns are as follows:\r\n\tValue contains only alpha characters - interpreted as a last name search.  To search with first name, pass comma then additional search value (\"last, first\").\r\n\tText enclosed in quotes is interpreted as a search for name (\"ACE 123 Corporation\").\r\n\tvalue containing an @ symbol is interpreted as an email address.\r\n\tValue starting with # is interpreted as a phone number search.\r\n\tValue containing alpha and numeric characters is interpreted as a postal code.  UK and other countries should omit spaces for postal code search values.\r\nBasic search type permits parameters constituentId, ln, fn, street, and post. Sample URL: CRM/Constituents/Search?type=basic&amp;ln=Huff&amp;fn=Frank&amp;post=20746\r\nAdvanced search type permits parameters atype, op, and value. Sample URL:  CRM/Constituents/Search?type=advanced&amp;atype=Email&amp;op=Like&amp;value=%25@gmail.com\r\nAttribute search type permits parameters key, op, value. Sample URL:  CRM/Constituents/Search?type=attribute&amp;key=Board+Affiliation&amp;op=Equals&amp;value=Association+Member",
                "operationId": "Constituents_Search",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Search type to be used in request.  Possible values are basic, advanced, attribute or fluent.  Search request defaults to fluent (single line) if not provided.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Use for search value in fluent mode.  When passed as only param, fluent search type is assumed.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentGroups",
                        "in": "query",
                        "description": "One of individuals,organizations,households or comma separated combination. Leave blank to include all.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "dup",
                        "in": "query",
                        "description": "Boolean whether to include affiliated constituents in the search results. Used in all search types.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliates",
                        "in": "query",
                        "description": "Boolean whether to include affiliated constituents in the search results. Used in all search types.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituencyIds",
                        "in": "query",
                        "description": "Search results filter to limit results to constituents belonging to passed constituencies. Pass as comma-delimited string (1,3,4, e.g.). Applies to all search modes.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "listId",
                        "in": "query",
                        "description": "Search results filter to limit results to constituents contained in the supplied list. Applies to all search modes.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ln",
                        "in": "query",
                        "description": "Last name search value used in Basic search type only.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fn",
                        "in": "query",
                        "description": "First name search value used in Basic search type only.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Direct constituent id search in Basic search type only.  Can also just use /Search?q=## as a substitute, which does a fluent search directly for a constituent.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "street",
                        "in": "query",
                        "description": "Street value search value in Basic search type only.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "post",
                        "in": "query",
                        "description": "Postal code filter value in Basic search type only.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "atype",
                        "in": "query",
                        "description": "Advanced type to clarify what type of search when \"type\" is set to Advanced.  Possible values are Customer Service No, Email, Gift Certificate No, Order No, Phone, Web Login. (Encode spaces in URI)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "op",
                        "in": "query",
                        "description": "Operator for filter expression.  Possible values are Equals, LessThan, GreaterThan, or Like. Used in combination with key and value params.  Only used for Attribute search types.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "in": "query",
                        "description": "Value for filter expression.  Used in combination with key and op params.  Only used for Advanced and Attribute search types.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "description": "Only used in Attribute search type.  Keyword for filter expression, passing description from T_KEYWORD (ReferenceData/Keywords).  Used in combination with op and value params.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "If passed results are paginated.  By default no pagination occurs. The param pageSize must be provided if page is provided.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "If passed results are paginated.  By default no pagination occurs. The param page must be provided if pageSize is provided.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSearchResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/Snapshot": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get constituent details along with primary address, primary salutation, primary electronic address, phones and affiliates information.",
                "operationId": "Constituents_GetConstituentSnapshot",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSnapshot"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/DevelopmentInfo": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get constituent information for fundraising.",
                "operationId": "Constituents_GetConstituentDevelopmentInfo",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentDevelopmentInfo"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get multiple Constituents given a set of constituentIds.",
                "operationId": "Constituents_GetConstituents",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentIds",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Constituent"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a Constituent using id.",
                "operationId": "Constituents_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Constituent"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a constituent. Only the information about constituent can be updated. If addresses, electronicAddresses, salutations or phones data are passed, they will be ignored.",
                "operationId": "Constituents_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "constituent",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Constituent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Constituent"
                        }
                    }
                }
            }
        },
        "/EventsManagement/Bookings/Summary/{bookingId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary for a single Booking.",
                "operationId": "Bookings_GetSummary",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSummary"
                        }
                    }
                }
            }
        },
        "/EventsManagement/Bookings/{bookingId}/Documents/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all the documents associated with the booking. (Excluding the file contents)",
                "operationId": "Bookings_GetAllDocumentSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentSummary"
                            }
                        }
                    }
                }
            }
        },
        "/EventsManagement/Bookings/{bookingId}/Documents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the documents associated with the booking (Including the file contents).",
                "operationId": "Bookings_GetAllDocuments",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Document"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Add a document to the booking.",
                "operationId": "Bookings_AddDocument",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "document",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DocumentSummary"
                        }
                    }
                }
            }
        },
        "/TXN/Productions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all productions, Optionally filtered by one or more titles.",
                "operationId": "Productions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "titleIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Production"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Productions/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all production summaries, Optionally filtered by one or more titles.",
                "operationId": "Productions_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "titleIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductionSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Productions/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific production.",
                "operationId": "Productions_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Production"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ResourceCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Resource Categories. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ResourceCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Resource Category.",
                "operationId": "ResourceCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ResourceCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Resource Categories.",
                "operationId": "ResourceCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/ProgramListings": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the program listings for the specified constituent id and all its visible affiliation's program listings as well. To exclude program listings of the visible affiliations pass includeAffiliations=false. To Get The primary program listings alone, pass primaryOnly=true.",
                "operationId": "ProgramListings_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProgramListing"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new program listing.",
                "operationId": "ProgramListings_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "programListing",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramListing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProgramListing"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AssociationTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all association types. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "AssociationTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssociationType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new association type.",
                "operationId": "AssociationTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssociationType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AssociationType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AssociationTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all association types.",
                "operationId": "AssociationTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssociationTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PriceTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price types.",
                "operationId": "PriceTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new price type.",
                "operationId": "PriceTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceType"
                        }
                    }
                }
            }
        },
        "/TXN/PriceTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all price types.",
                "operationId": "PriceTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PriceTypes/Details": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all valid price types for a performance/package and a mode of sale. A comma separated list of performance ids can be specified for a flex package.",
                "operationId": "PriceTypes_GetValidPriceTypes",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sourceId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeDetail"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PriceTypes/Zones": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get valid zones for a set of performances or packages.",
                "operationId": "PriceTypes_GetValidZones",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ZoneSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PriceTypes/Reasons": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets valid price type reasons for the specified price type",
                "operationId": "PriceTypes_GetReasons",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceTypeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeReasonMap"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/LoginTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all login types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "LoginTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LoginType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new login type.",
                "operationId": "LoginTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LoginType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/LoginTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all login types.",
                "operationId": "LoginTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LoginTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Payments/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single payment.",
                "operationId": "Payments_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        }
                    }
                }
            }
        },
        "/TXN/Payments": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get payments for a specified referenceId (order or contribution id).",
                "operationId": "Payments_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "referenceId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Payment"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Payments/AvailableForRefund": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Retrieve cc payments available for refund by processor reference number",
                "operationId": "Payments_AvailableForRefund",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderIdsOrContributionIds",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentAvailableForRefund"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Payments/OnAccount": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets a constituent's balance(s) for on-account payment methods",
                "operationId": "Payments_GetOnAccountBalances",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Required",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentMethodId",
                        "in": "query",
                        "description": "Optional. If this parameter is given, only the on-account balance for the payment method specified is returned.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentOnAccountBalance"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PaymentGatewayTransactionTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Payment Gateway Transaction Types. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "PaymentGatewayTransactionTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentGatewayTransactionType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Payment Gateway Transaction Type.",
                "operationId": "PaymentGatewayTransactionTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayTransactionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayTransactionType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PaymentGatewayTransactionTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Payment Gateway Transaction Types.",
                "operationId": "PaymentGatewayTransactionTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentGatewayTransactionTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Memberships/Details": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns membership details for a constituent.\r\nNOTE: As part of the upcoming changes to membership functionality, this resource will change significantly in an upcoming major Tessitura release and likely break code that references it. Please make a note that code that references it will need to be revisited as part of that upgrade process.",
                "operationId": "Memberships_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Id of constituent",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "If true, will also return details for affiliates of the constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "membershipOrgIds",
                        "in": "query",
                        "description": "Only return memberships for the specified organizations in the comma-delimited list.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "onlyShowCurrent",
                        "in": "query",
                        "description": "Specifies if only current memberships should be returned.  Cannot be true if onlyShowDefault is true.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "onlyShowDefault",
                        "in": "query",
                        "description": "Specifies if only the default membership should be returned.  Cannot be true if onlyShowCurrent is true.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MembershipDetail"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PricingRuleTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all pricing rule types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PricingRuleTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRuleType"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PricingRuleTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all pricing rule types.",
                "operationId": "PricingRuleTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRuleTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PricingRuleTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a pricing rule type by id.",
                "operationId": "PricingRuleTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AnalyticsCubes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all analytics cubes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "AnalyticsCubes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AnalyticsCube"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/AnalyticsCubes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an analytics cube.",
                "operationId": "AnalyticsCubes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AnalyticsCube"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SalutationTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all salutation types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "SalutationTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SalutationType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new salutation type.",
                "operationId": "SalutationTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalutationType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalutationType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SalutationTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all salutation types.",
                "operationId": "SalutationTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SalutationTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReferenceColumns": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all reference columns. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ReferenceColumns_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReferenceColumn"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReferenceColumns/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all reference columns.",
                "operationId": "ReferenceColumns_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReferenceColumnSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/StepTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all step types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "StepTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/StepType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new step type.",
                "operationId": "StepTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StepType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StepType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/StepTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all step types.",
                "operationId": "StepTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/StepTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/RelationshipCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all relationship categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "RelationshipCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelationshipCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new relationship category.",
                "operationId": "RelationshipCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelationshipCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RelationshipCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/RelationshipCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all relationship categories.",
                "operationId": "RelationshipCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelationshipCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Suffixes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all suffixes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Suffixes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Suffix"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new suffix.",
                "operationId": "Suffixes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Suffix"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Suffix"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Suffixes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all suffixes.",
                "operationId": "Suffixes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SuffixSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/ProductionSeasonMembershipOrganizations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all production season membership organizations for a production season.",
                "operationId": "ProductionSeasonMembershipOrganizations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionSeasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductionSeasonMembershipOrganization"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new production season membership organization.",
                "operationId": "ProductionSeasonMembershipOrganizations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionSeasonMembershipOrganization",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProductionSeasonMembershipOrganization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProductionSeasonMembershipOrganization"
                        }
                    }
                }
            }
        },
        "/TXN/ProductionSeasonMembershipOrganizations/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary of all production season membership organizations for a production season.",
                "operationId": "ProductionSeasonMembershipOrganizations_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionSeasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductionSeasonMembershipOrganizationSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Issues": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the details of all the issues for the specified constituent id. If you want to filter the issues based on date pass in the values for 'startDate' and 'endDate'. If you want to filter issues based on contact type, category, activity type, origin, performance number or package number pass in the corresponding values in comma separated values.",
                "operationId": "Issues_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include issues from affiliated constituents.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contactTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "categoryIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "activityTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "originIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resolved",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Issue"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create an issue for a Constituent",
                "operationId": "Issues_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "issue",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Issue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Issue"
                        }
                    }
                }
            }
        },
        "/ReferenceData/BillingTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Billing Types. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\".",
                "operationId": "BillingTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BillingType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Billing Type.",
                "operationId": "BillingTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BillingType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BillingType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/BillingTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Billing Types.",
                "operationId": "BillingTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BillingTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/AppealCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all appeal categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "AppealCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AppealCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new appeal category.",
                "operationId": "AppealCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AppealCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppealCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AppealCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all appeal categories.",
                "operationId": "AppealCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AppealCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/Security/Authenticate/Windows": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "This is a no-op operation for windows authentication diagnostics.",
                "operationId": "Authenticate_WindowsAuthentication",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Authenticate the provided credentials",
                "operationId": "Authenticate_AuthenticateWindows",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "authenticationRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WindowsAuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AddressTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all address types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "AddressTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AddressType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new address type.",
                "operationId": "AddressTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddressType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddressType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AddressTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all address types.",
                "operationId": "AddressTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AddressTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/RankTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all rank types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "RankTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RankType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new rank type.",
                "operationId": "RankTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RankType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RankType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/RankTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all rank types.",
                "operationId": "RankTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RankTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Seasons": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all seasons. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Seasons_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Season"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new season.",
                "operationId": "Seasons_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Season"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Season"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Seasons/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all seasons.",
                "operationId": "Seasons_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeasonSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/AuditLogs": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all audit logs. The audit log response is paginated with default pageIndex = 1 and pageSize = 100. To get the\r\naudit log between a specific time interval specify auditStartTime and auditEndTime. If only auditStartTime is\r\nspecified then all audit entries after that time would be returned. If only auditEndTime is specified then all\r\naudit entries before that time would be returned.",
                "operationId": "AuditLogs_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "table",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "entityIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeSubEntities",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "auditStartTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "auditEndTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuditLogResponse"
                        }
                    }
                }
            }
        },
        "/Reporting/AuditLogs/Details": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get audit log details.",
                "operationId": "AuditLogs_GetDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "table",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "entityIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeSubEntities",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "auditStartTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "auditEndTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AuditEntryDetail"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/AuditLogs/{auditLog}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a audit log.",
                "operationId": "AuditLogs_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "auditLog",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuditLog"
                        }
                    }
                }
            }
        },
        "/ReferenceData/CrediteeTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all crediteeTypes. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups if this is a secured resource), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "CrediteeTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CrediteeType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new crediteeType.",
                "operationId": "CrediteeTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CrediteeType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CrediteeType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/CrediteeTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all crediteeTypes.",
                "operationId": "CrediteeTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CrediteeTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Contributions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the contributions for the specified plan.",
                "operationId": "FinanceContributions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "planId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Contribution"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Contributions/{contributionId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a contribution.",
                "operationId": "FinanceContributions_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contributionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Contribution"
                        }
                    }
                }
            }
        },
        "/ReferenceData/CriterionOperators": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all criterion operators. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "CriterionOperators_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CriterionOperator"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/CriterionOperators/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all criterion operators.",
                "operationId": "CriterionOperators_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CriterionOperatorSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/CriterionOperators/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a criterion operator by id.",
                "operationId": "CriterionOperators_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CriterionOperator"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PriceCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new price category.",
                "operationId": "PriceCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all price categories.",
                "operationId": "PriceCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/DeliveryMethods": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all delivery methods. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "DeliveryMethods_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeliveryMethod"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new delivery method.",
                "operationId": "DeliveryMethods_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeliveryMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DeliveryMethod"
                        }
                    }
                }
            }
        },
        "/ReferenceData/DeliveryMethods/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all delivery methods.",
                "operationId": "DeliveryMethods_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeliveryMethodSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/InvoiceBilling/{id}/Status": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get status of a processing automated billing run.",
                "operationId": "InvoiceBilling_Status",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Billing run id for Invoice Billing.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AutomatedBillingStatus"
                        }
                    }
                }
            }
        },
        "/Finance/MembershipLevels/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a list of membership levels. MembershipOrgId is required.\r\nNOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.",
                "operationId": "MembershipLevels_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "membershipOrgId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MembershipLevelSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/MembershipLevels": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary list of all membership levels. MembershipOrgId is required.\r\nNOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.",
                "operationId": "MembershipLevels_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "membershipOrgId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MembershipLevel"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/MembershipLevels/{membershipLevelId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a specific membership level.\r\nNOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.",
                "operationId": "MembershipLevels_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "membershipLevelId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MembershipLevel"
                        }
                    }
                }
            }
        },
        "/ReferenceData/DonationLevels": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all donation levels. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "DonationLevels_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DonationLevel"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new donation level.",
                "operationId": "DonationLevels_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DonationLevel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DonationLevel"
                        }
                    }
                }
            }
        },
        "/ReferenceData/DonationLevels/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all donation levels.",
                "operationId": "DonationLevels_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DonationLevelSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PaymentMethods": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all payment methods. This resource looks similar to referenceData resources, but is functionally different.  When maintenanceMode is false, control groups are considered when returning payment methods. The default for maintenanceMode is false. This endpoint should not generally be used for transaction based screens because it does not account for assigned payment methods based on user group security. For cart available payment methods, consider Security/PaymentMethods?amount={amount}.",
                "operationId": "PaymentMethods_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentTypeIds",
                        "in": "query",
                        "description": "Optional comma delimited of payment type ids to filter the returned collection.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Defaults to false. When false, control group security is enforced. Maintenance mode assumes that the consumer is in an administrative use.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentMethod"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new payment method.",
                "operationId": "PaymentMethods_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentMethod",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethod"
                        }
                    }
                }
            }
        },
        "/TXN/PaymentMethods/Check": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Check PaymentMethod setup for EMV or Hosted Payment charges.",
                "operationId": "PaymentMethods_Check",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "cardReaderTypeId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CheckPaymentMethodResponse"
                        }
                    }
                }
            }
        },
        "/TXN/PaymentMethods/TranslateMnemonic": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Translate a card mnemonic into the matching system PaymentMethod or the default fallback PaymentMethod for that CardReaderType",
                "operationId": "PaymentMethods_TranslateMnemonic",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "cardReaderTypeId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "mnemonic",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethod"
                        }
                    }
                }
            }
        },
        "/TXN/PriceEvents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price events for a performance, performance price type or performance price detail. From and To Date parameters can be used to filter the events. If both are specified, then events between those dates would be returned. If only fromDate is specified then all events with a startDate greater than that date would be returned. If only toDate is specified then all events with a startDate less than that date would be returned.",
                "operationId": "PriceEvents_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performancePriceLayerIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performancePriceTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performancePriceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "toDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceEvent"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PriceEvents/Dates": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets a distinct set of dates that contain events for the given list of performances.",
                "operationId": "PriceEvents_GetDates",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "date-time",
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidIneligibleReasons": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all gift aid ineligible reasons. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "GiftAidIneligibleReasons_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidIneligibleReason"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new gift aid ineligible reason.",
                "operationId": "GiftAidIneligibleReasons_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidIneligibleReason"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidIneligibleReason"
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidIneligibleReasons/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all gift aid ineligible reasons.",
                "operationId": "GiftAidIneligibleReasons_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidIneligibleReasonSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/InactiveReasons": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all inactive reasons. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "InactiveReasons_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InactiveReason"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new inactive reason.",
                "operationId": "InactiveReasons_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InactiveReason"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InactiveReason"
                        }
                    }
                }
            }
        },
        "/ReferenceData/InactiveReasons/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all inactive reasons.",
                "operationId": "InactiveReasons_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InactiveReasonSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/ModeOfSaleOffers": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all mode of sale offers. The mode of sale id, performace ids, or package ids is required. Performance ids and package ids used together will return no results.",
                "operationId": "ModeOfSaleOffers_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "A mode of sale id.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "A comma-separated list of performance ids.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageIds",
                        "in": "query",
                        "description": "A comma-separated list of package ids.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "A date that falls between the start and end date-time.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModeOfSaleOffer"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new mode of sale offer.",
                "operationId": "ModeOfSaleOffers_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleOffer",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleOffer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleOffer"
                        }
                    }
                }
            }
        },
        "/Security/ObjectPermissions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the object permissions valid for the context usergroup. Optionally filter by constituency id and/or object id.",
                "operationId": "SecurityObjectPermissions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituencyId",
                        "in": "query",
                        "description": "Filter object permissions by the specified constituency.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectid",
                        "in": "query",
                        "description": "Get permissions for a specific object id.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectIds",
                        "in": "query",
                        "description": "Get permissions for the specified (Comma separated list of objectIds) objects.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ObjectPermission"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/AttendanceHistory": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Attendance History for a selected constituent optionally including primary affiliates.  Does not return history based on recipient for the selected constituent(s).",
                "operationId": "AttendanceHistory_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttendanceHistory"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all gift aid types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "GiftAidTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new gift aid type.",
                "operationId": "GiftAidTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all gift aid types.",
                "operationId": "GiftAidTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SpecialActivityTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Special Activity Types. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "SpecialActivityTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SpecialActivityType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Special Activity Type.",
                "operationId": "SpecialActivityTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SpecialActivityType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SpecialActivityTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Special Activity Types.",
                "operationId": "SpecialActivityTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SpecialActivityTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/QueryElementGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all query element groups.",
                "operationId": "QueryElementGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QueryElementGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new query element group.",
                "operationId": "QueryElementGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "queryElementGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QueryElementGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QueryElementGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceLayerTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price layer types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PriceLayerTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceLayerType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new price layer type.",
                "operationId": "PriceLayerTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceLayerType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceLayerType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceLayerTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all price layer types.",
                "operationId": "PriceLayerTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceLayerTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Workers": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the workers for the specified constituent.",
                "operationId": "Workers_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Worker"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new worker.",
                "operationId": "Workers_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "worker",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Worker"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Worker"
                        }
                    }
                }
            }
        },
        "/Finance/Workers/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all the workers for the specified constituent.",
                "operationId": "Workers_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WorkerSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ElectronicAddressTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all electronic address types. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ElectronicAddressTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ElectronicAddressType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new electronic address type.",
                "operationId": "ElectronicAddressTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddressType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddressType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ElectronicAddressTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all electronic address types.",
                "operationId": "ElectronicAddressTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ElectronicAddressTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Colors": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all colors. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Colors_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Color"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new color.",
                "operationId": "Colors_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Color"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Color"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Colors/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all colors.",
                "operationId": "Colors_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ColorSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Qualifications": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Qualifications. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).S",
                "operationId": "Qualifications_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Qualification"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Qualification.",
                "operationId": "Qualifications_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Qualification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Qualification"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Qualifications/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Qualifications.",
                "operationId": "Qualifications_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QualificationSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/OriginalSources": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all original sources. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "OriginalSources_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OriginalSource"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new original source.",
                "operationId": "OriginalSources_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OriginalSource"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OriginalSource"
                        }
                    }
                }
            }
        },
        "/ReferenceData/OriginalSources/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all original sources.",
                "operationId": "OriginalSources_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OriginalSourceSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceTypeCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price type categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PriceTypeCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new price type category.",
                "operationId": "PriceTypeCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTypeCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceTypeCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all price type categories.",
                "operationId": "PriceTypeCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ZoneGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all zone groups. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ZoneGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ZoneGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new zone group.",
                "operationId": "ZoneGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ZoneGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ZoneGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all zone groups.",
                "operationId": "ZoneGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ZoneGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/ProductKeywords": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns keywords for the requested production elements or packages.\r\n\r\nFor Production Elements: If the keyword is found, returns the keyword and the lowest level at which it was found in the production hierarchy (Title, Production, Production Season, Performance) for the requested element. Optionally, all matching keywords anywhere above the requested element in the production hierarchy can be returned with the ShowAll parameter.",
                "operationId": "ProductKeywords_GetKeywords",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionElementIds",
                        "in": "query",
                        "description": "Must be a list of valid perf, prod season, prod or title Ids (must be supplied if packageIds is not supplied)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageIds",
                        "in": "query",
                        "description": "Must be a list of valid package ids (must be supplied if productionElementIds is not supplied)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "keywordIds",
                        "in": "query",
                        "description": "Must be a comma delimited string of valid keyword ids.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "showAll",
                        "in": "query",
                        "description": "Indicates if keywords from ‘parent’ requested element(s) is desired. This parameter is ignored for packages.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/KeywordResult"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/WebContents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns web content for the requested production elements or packages.\r\nThe result can be filtered by content types.  At least one package id or production element id is required.\r\nIf the content type is found, returns the content value at the lowest level at which it was found in the production hierarchy (Title, Production, Production Season, Performance) for the requested element. Optionally, all matching content anywhere above the requested element in the production hierarchy can be returned with the ShowAll parameter.",
                "operationId": "WebContents_GetWebContents",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionElementIds",
                        "in": "query",
                        "description": "A comma separated list of IDs of production elements. (must be supplied if packageIds is not supplied)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageIds",
                        "in": "query",
                        "description": "A comma separated list of package IDs (must be supplied if productionElementIds is not supplied)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contentTypeIds",
                        "in": "query",
                        "description": "A comma separated list of content type IDs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "showAll",
                        "in": "query",
                        "description": "Whether to return web content of the same content type from all levels of the production hierarchy",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebContentResult"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/AliasTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all alias types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "AliasTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AliasType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new alias type.",
                "operationId": "AliasTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AliasType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AliasType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AliasTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all alias types.",
                "operationId": "AliasTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AliasTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidDocumentStatuses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all gift aid document statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "GiftAidDocumentStatuses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidDocumentStatus"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new gift aid document status.",
                "operationId": "GiftAidDocumentStatuses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidDocumentStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidDocumentStatus"
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidDocumentStatuses/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all gift aid document statuses.",
                "operationId": "GiftAidDocumentStatuses_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidDocumentStatusSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/CustomDefaults": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all custom defaults. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "CustomDefaults_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomDefault"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new custom default.",
                "operationId": "CustomDefaults_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomDefault"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomDefault"
                        }
                    }
                }
            }
        },
        "/ReferenceData/CustomDefaults/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all custom defaults.",
                "operationId": "CustomDefaults_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomDefaultSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidContactMethods": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all gift aid contact methods. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "GiftAidContactMethods_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidContactMethod"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new gift aid contact method.",
                "operationId": "GiftAidContactMethods_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidContactMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidContactMethod"
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidContactMethods/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all gift aid contact methods.",
                "operationId": "GiftAidContactMethods_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidContactMethodSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Portfolios": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get portfolio for a constituent.",
                "operationId": "Portfolios_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "primaryOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "statusIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "workerRoleIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "portfolioCustomColumns",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "planCustomColumns",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    }
                }
            }
        },
        "/Finance/Portfolios/Entries": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a portfolio entry for a plan.",
                "operationId": "Portfolios_GetPortfolioEntry",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "planId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PortfolioPlan"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ScheduleTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Schedule Types. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ScheduleTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ScheduleType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Schedule Type.",
                "operationId": "ScheduleTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScheduleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ScheduleType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ScheduleTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Schedule Types.",
                "operationId": "ScheduleTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ScheduleTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/SalesLayouts/Setup/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all sales layouts setup.",
                "operationId": "SalesLayouts_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "primaryOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SalesLayoutSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/SalesLayouts/{salesLayoutId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a sales layout for use in orders.",
                "operationId": "SalesLayouts_GetForSale",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "salesLayoutId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesLayout"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Printers": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all printers. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Printers_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Printer"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new printer.",
                "operationId": "Printers_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Printer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Printer"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Printers/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all printers.",
                "operationId": "Printers_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PrinterSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Security/Reports": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all report/user group mappings valid for the context usergroup.",
                "operationId": "SecurityReports_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContributionImportSets": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contributionImportSets. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups if this is a secured resource), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ContributionImportSets_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContributionImportSet"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contributionImportSet.",
                "operationId": "ContributionImportSets_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContributionImportSet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContributionImportSet"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContributionImportSets/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all contributionImportSets.",
                "operationId": "ContributionImportSets_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContributionImportSetSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/AffiliationTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "operationId": "AffiliationTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentTypeId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AffiliationType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new affiliation type.",
                "operationId": "AffiliationTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AffiliationType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AffiliationType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AffiliationTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all affiliation types.",
                "operationId": "AffiliationTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AffiliationTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SeasonTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all season types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "SeasonTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeasonType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new season type.",
                "operationId": "SeasonTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SeasonType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeasonType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SeasonTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all season types.",
                "operationId": "SeasonTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeasonTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituencyTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all constituency types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ConstituencyTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituencyType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new constituency type.",
                "operationId": "ConstituencyTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituencyType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituencyType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituencyTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all constituency types.",
                "operationId": "ConstituencyTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituencyTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Programs": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all programs. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Programs_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Program"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new program.",
                "operationId": "Programs_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Program"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Program"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Programs/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all programs.",
                "operationId": "Programs_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProgramSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Titles": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all titles",
                "operationId": "Titles_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Title"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Titles/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all title summaries",
                "operationId": "Titles_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TitleSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Titles/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific title.",
                "operationId": "Titles_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Title"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PricingRuleMessageTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all pricing rule message types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PricingRuleMessageTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRuleMessageType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new pricing rule message type.",
                "operationId": "PricingRuleMessageTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PricingRuleMessageType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleMessageType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PricingRuleMessageTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all pricing rule message types.",
                "operationId": "PricingRuleMessageTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRuleMessageTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/MachineSettings": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Machine Settings. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "MachineSettings_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MachineSetting"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Machine Setting.",
                "operationId": "MachineSettings_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MachineSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MachineSetting"
                        }
                    }
                }
            }
        },
        "/ReferenceData/MachineSettings/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Machine Settings.",
                "operationId": "MachineSettings_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MachineSettingSummary"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Configuration": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Retrieve Payment Gateway Configuration",
                "operationId": "PaymentGatewayConfiguration_GetConfiguration",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayConfiguration"
                        }
                    }
                }
            }
        },
        "/TXN/Packages": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all packages filtered by a selected season.",
                "operationId": "Packages_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "seasonId",
                        "in": "query",
                        "description": "A single season Id to filter the packages",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Package"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Packages/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all packages filtered by a selected season.",
                "operationId": "Packages_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "seasonId",
                        "in": "query",
                        "description": "A single season Id to filter the packages",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackageSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Packages/{packageId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a package.",
                "operationId": "Packages_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Package"
                        }
                    }
                }
            }
        },
        "/TXN/Packages/{packageId}/Prices": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the package and its pricing details.\r\nMode Of Sale and Price Type parameters can be used to filter the returned prices.",
                "operationId": "Packages_GetPrices",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "pass to get prices effective as of the date and time",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expandPerformancePriceType",
                        "in": "query",
                        "description": "When set to True, price details for each price layer on the performance are broken out",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeOnlyBasePrice",
                        "in": "query",
                        "description": "When set to True, only the price type marked as the base price for the performance is returned",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "A list of performance IDs for performances in a package to return pricing for",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sourceId",
                        "in": "query",
                        "description": "When a source code is passed, prices associated with offers tied to that source will be noted in the response with Offer=true",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Packages/{packageId}/Details": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets detailed information about the package including sub packages and performance groups.",
                "operationId": "Packages_GetPackageDetail",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "If not supplied and there isn't a package date, asOfDateTime will automatically be set to the current date. If not supplied and there is a package date, asOfDateTime will automatically be set to the package date.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sourceId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageDetail"
                        }
                    }
                }
            }
        },
        "/TXN/Packages/{packageId}/PerformanceGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of Performance Groups and their Performances for flex package selection.",
                "operationId": "Packages_GetPerformanceGroupDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "If not supplied and there isn't a package date, asOfDateTime will automatically be set to the current date. If not supplied and there is a package date, asOfDateTime will automatically be set to the package date.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sourceId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackagePerformanceGroupDetail"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Packages/{packageId}/Seats": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns details for seats in a fixed-seat package.\r\nThe seats returned can be filtered by screen, section, or price zone. Allocation is returned based on MOS and constituent.\r\nAvailable seats can be filtered by price type availability, causing any seats that are not available for the specified price types to be listed with a status of 5, Not In Allocation.",
                "operationId": "Packages_GetSeats",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageId",
                        "in": "path",
                        "description": "ID of the fixed seat package",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "Required parameter. Must be a valid MOS id",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Required parameter. Must be a valid constituent ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "zoneIds",
                        "in": "query",
                        "description": "zoneIds must be a comma separated list of valid zone ids",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sectionIds",
                        "in": "query",
                        "description": "sectionIds must be a comma separated list of valid section ids",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "screenIds",
                        "in": "query",
                        "description": "screenIds must be a comma separated list of valid screen ids for the specified performance",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "checkPriceTypeIds",
                        "in": "query",
                        "description": "checkPriceTypeIds must be either a list of valid price types or the token \"All\"",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "returnNonSeats",
                        "in": "query",
                        "description": "returnNonSeats indicates if locations on the seat map that are not seats should be included",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Seat"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Packages/{packageId}/Seats/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns summary for seats in a package.\r\nSeat availability is summarized by screen, section and zone.\r\nThe seats returned can be filtered by screen, section, or price zone. Allocation is returned based on MOS and constituent.\r\nAvailable seats can be filtered by price type availability, causing any seats that are not available for the specified price types to be listed with a status of 5, Not In Allocation.",
                "operationId": "Packages_GetSeatSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageId",
                        "in": "path",
                        "description": "ID of the fixed seat package",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "Required parameter. Must be a valid MOS id",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Required parameter. Must be a valid constituent ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "zoneIds",
                        "in": "query",
                        "description": "zoneIds must be a comma separated list of valid zone ids",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sectionIds",
                        "in": "query",
                        "description": "sectionIds must be a comma separated list of valid section ids",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "screenIds",
                        "in": "query",
                        "description": "screenIds must be a comma separated list of valid screen ids for the specified performance",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "checkPriceTypeIds",
                        "in": "query",
                        "description": "checkPriceTypeIds must be either a list of valid price types or the token \"All\"",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeatSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Packages/{packageId}/SeatFees": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns price, per seat fees, for each zone and price type for the specified package.",
                "operationId": "Packages_GetSeatFees",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "Required, Must be a valid id from TR_MOS",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeIds",
                        "in": "query",
                        "description": "A list of valid ids from TR_PRICE_TYPE. Filters the results",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "Date for pricing. Defaults to today",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductSeatFee"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ActivityTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all activity types. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ActivityTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActivityType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new activity type.",
                "operationId": "ActivityTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ActivityType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActivityType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ActivityTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all activity types.",
                "operationId": "ActivityTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActivityTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Sections": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all sections. To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "Sections_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "seatMapId",
                        "in": "query",
                        "description": "If seatMapId is supplied, only sections located within the specified seat map will be returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Section"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new section.",
                "operationId": "Sections_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Section"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Section"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Sections/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all sections.",
                "operationId": "Sections_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SectionSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/WebLogins": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the weblogins for the specified constituent id and all its visible affiliation's weblogins as well. To exclude weblogins of the visible affiliations pass includeAffiliations=false. To fetch primary web logins alone pass primaryOnly=true.",
                "operationId": "WebLogins_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "primaryOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebLogin"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new weblogin.",
                "operationId": "WebLogins_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "login",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WebLogin"
                        }
                    }
                }
            }
        },
        "/CRM/WebLogins/Search": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get weblogins by email address and login type",
                "operationId": "WebLogins_Search",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "emailAddress",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "loginTypeId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebLogin"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/WebLogins/{webLoginId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a weblogin.",
                "operationId": "WebLogins_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "webLoginId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WebLogin"
                        }
                    }
                }
            }
        },
        "/CRM/WebLogins/{loginId}/LoginCredentials": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns web login credential information",
                "operationId": "WebLogins_GetLoginCredentials",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "loginId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LoginCredentials"
                        }
                    }
                }
            }
        },
        "/Reporting/ReportSchedules/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a report schedule.",
                "operationId": "ReportSchedules_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportSchedule"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update the details of a report schedule.",
                "operationId": "ReportSchedules_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "reportSchedule",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReportSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportSchedule"
                        }
                    }
                }
            }
        },
        "/Reporting/ReportSchedules": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all report schedules, optionally filtered by active only.",
                "operationId": "ReportSchedules_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportSchedule"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a report schedule.",
                "operationId": "ReportSchedules_Save",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "reportSchedule",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReportSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportSchedule"
                        }
                    }
                }
            }
        },
        "/Security/PriceTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price type/user group mappings valid for the context usergroup.",
                "operationId": "SecurityPriceTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all constituent types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ConstituentTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new constituent type.",
                "operationId": "ConstituentTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all constituent types.",
                "operationId": "ConstituentTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Contributions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get contributions for a constituent.",
                "operationId": "ConstituentContributions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "campaignIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fundIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentContribution"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PerformanceGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all performance groups.",
                "operationId": "PerformanceGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "seasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Performance Group.",
                "operationId": "PerformanceGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceGroup"
                        }
                    }
                }
            }
        },
        "/TXN/PerformanceGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all performance groups.",
                "operationId": "PerformanceGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "seasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceTypeGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price type groups. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PriceTypeGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new price type group.",
                "operationId": "PriceTypeGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTypeGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceTypeGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all price type groups.",
                "operationId": "PriceTypeGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/TemplatePriceTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all template price type.",
                "operationId": "TemplatePriceTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "query",
                        "description": "Required.  Filter template price types to a specified price template.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplatePriceType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new template price type.",
                "operationId": "TemplatePriceTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templatePriceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TemplatePriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplatePriceType"
                        }
                    }
                }
            }
        },
        "/CRM/Internal/AddressDetails": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the addresses and the phones attached to them of the constituent id. To exclude addresses and the phones of the visible affiliations pass includeAffiliations=false.",
                "operationId": "Internal_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: false)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeFromAffiliations",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AddressDetail"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new address along with the phones and attach all the phones to the address. By default first phone is of phone type 1, second phone is of phone type 2 and third phone is of phone type 3.",
                "operationId": "Internal_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "addressDetail",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddressDetail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddressDetail"
                        }
                    }
                }
            }
        },
        "/CRM/Internal/AddressDetails/{addressId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an address and all the phones attached to it.",
                "operationId": "Internal_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "addressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddressDetail"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an address and phones. If the entire information about a phone is added newly then create a new phone. If the phone number of a phone is not given then delete that phone.",
                "operationId": "Internal_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "addressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "addressDetail",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddressDetail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddressDetail"
                        }
                    }
                }
            }
        },
        "/CRM/Internal/ConstituentMiniSnapshot/{constituentId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get constituent details along with primary address, primary salutation, primary electronic address, primary &amp; general phones.",
                "operationId": "Internal_GetConstituentMiniSnapshot",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentMiniSnapshot"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SurveyQuestions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all survey questions. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). Optionally provide a mode of sale id.",
                "operationId": "SurveyQuestions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "The id of the Mode of Sale",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SurveyQuestion"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new survey question.",
                "operationId": "SurveyQuestions_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SurveyQuestion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SurveyQuestion"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SurveyQuestions/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all survey questions.",
                "operationId": "SurveyQuestions_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SurveyQuestionSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SurveyQuestions/Data": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get answer data for a survey question if it refers to another reference table.",
                "operationId": "SurveyQuestions_GetDataFor",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "questionId",
                        "in": "query",
                        "description": "The id of the survey question",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SurveyQuestionDataItem"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/WorkerTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all worker types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "WorkerTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WorkerType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new worker type.",
                "operationId": "WorkerTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WorkerType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkerType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/WorkerTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all worker types.",
                "operationId": "WorkerTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WorkerTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/EventsManagement/BookingTemplates/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all Booking Templates, filtered optionally by category.",
                "operationId": "BookingTemplates_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BookingTemplateSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentInactives": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all constituent inactives. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ConstituentInactives_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentInactive"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new constituent inactive.",
                "operationId": "ConstituentInactives_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentInactive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentInactive"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentInactives/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all constituent inactives.",
                "operationId": "ConstituentInactives_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentInactiveSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Security/Users": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a user for the specified activeDirectoryUsername.",
                "operationId": "Users_GetActiveDirectoryUser",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "activeDirectoryUsername",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/Security/Users/ForGroup": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get list of users in summary for the current user's group.",
                "operationId": "Users_GetUsersForUserGroup",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userGroupId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                }
            }
        },
        "/Security/Users/Info": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets user information for the specified activeDirectoryUsername.",
                "operationId": "Users_GetUserInformationForActiveDirectoryUser",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "activeDirectoryUsername",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserInformation"
                        }
                    }
                }
            }
        },
        "/Security/Users/{userName}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a user for the specified username.",
                "operationId": "Users_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Origins": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all origins. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Origins_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Origin"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new origin.",
                "operationId": "Origins_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Origin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Origin"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Origins/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all origins.",
                "operationId": "Origins_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OriginSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Performances": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get performance detail information\r\nFor single production season, a comma separated list of performances, seasons, or a single production season.  At least one filter parameter is required.",
                "operationId": "Performances_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "One or more performance IDs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "seasonIds",
                        "in": "query",
                        "description": "One or more season IDs, optional",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "productionSeasonId",
                        "in": "query",
                        "description": "a single production season ID, optional",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Performance"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Performances/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get Summary performance information\r\nFor single production season, a comma separated list of performances, seasons, or a single production season. At least one filter parameter is required.",
                "operationId": "Performances_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "One or more performance IDs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "seasonIds",
                        "in": "query",
                        "description": "One or more season IDs, optional",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "productionSeasonId",
                        "in": "query",
                        "description": "a single production season ID, optional",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Performances/{performanceId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a performance.",
                "operationId": "Performances_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Performance"
                        }
                    }
                }
            }
        },
        "/TXN/Performances/Prices": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get pricing details for a set of performances.\r\nMode Of Sale and Price Type parameters can be used to filter the returned prices.",
                "operationId": "Performances_GetPrices",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "Comma separated list of performance Ids",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "Used to find pricing effective as of the date and time",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "Mode of Sale to filter pricing to applicable pricetypes associated to the mode of sale.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeId",
                        "in": "query",
                        "description": "Filter pricing details to specific price type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expandPerformancePriceType",
                        "in": "query",
                        "description": "When set to True, price details for each price layer on the performance are broken out. Defaults to false.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeOnlyBasePrice",
                        "in": "query",
                        "description": "When set to True, only the price type marked as the base price for the performance is returned. Defaults to false.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sourceId",
                        "in": "query",
                        "description": "When a source code is passed, prices associated with offers tied to that source will be noted in the response with Offer=true",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Performances/Audit": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Audit log entries for changes to Performance properties such as descriptions, publish dates, and the production season. This does not include sub performance/event setup items like pricing or modes of sale.",
                "operationId": "Performances_GetAuditEntries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "startDateTime",
                        "in": "query",
                        "description": "Required. Filter to audit entries on or after this date/time.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDateTime",
                        "in": "query",
                        "description": "Optional. Bound audit entries to on or before this date/time.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "Comma separated list of performance ids. Optional.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "actions",
                        "in": "query",
                        "description": "Comma separated list of actions to filter: I - insert, U - update, D - delete.  Passing actions=I,U,D is the same as omitting the parameter.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tables",
                        "in": "query",
                        "description": "Comma separated list of table names to filter entries. Available values are T_PERF or T_INVENTORY. Optional.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "columns",
                        "in": "query",
                        "description": "Comma separated list of column names to filter entries. Inclusive of table names if used. Optional.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "greaterThanId",
                        "in": "query",
                        "description": "Filters to entries having Ids higher than the value provided. Can be used for synchronization polling.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderByIdAsc",
                        "in": "query",
                        "description": "If true, sorts entries by audit Id ascending. Default is false, which sorts most current audit item first.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceAuditResponse"
                        }
                    }
                }
            }
        },
        "/TXN/Performances/Zones": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get performance zone availability for a set of performances.  If sectionIds are specified only zones with\r\nmatching sections will be returned and the SectionSummaries node will be populated.",
                "operationId": "Performances_GetPerformanceZoneAvailabilities",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sectionIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceZoneAvailability"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Performances/ZoneAvailabilities": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get performance zone availability for a set of performances. If ConstituentId and MOS are provided, will also return availability based on allocations and constituent rank.",
                "operationId": "Performances_GetPerformanceZoneAvailabilityWithConstituent",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "A list of valid performance Ids",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "Required if constituentId is provided",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "The constituent to use to calculate allocation availability based on the constituent rank and MOS.  Required if modeOfSale is specified",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceZoneAvailabilityWithConstituent"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Performances/{performanceId}/Seats/Holds": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get seat holds for a performance",
                "operationId": "Performances_GetSeatHoldDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "seatIds",
                        "in": "query",
                        "description": "List of seat Ids to return, optional",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "holdCodeIds",
                        "in": "query",
                        "description": "List of hold code Ids, optional",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAllHolds",
                        "in": "query",
                        "description": "Pass true to return all layered holds, including those with a priority other than 1",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeatHoldDetail"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Update seat holds for a performance\r\nCan be used to add or remove holds from seats for the specified performance. Specifying a hold code of -1 for a seat will remove all hold codes from that seat.",
                "operationId": "Performances_UpdateSeatHolds",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "updateSeatHoldRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateSeatHoldRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeatHold"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Performances/{performanceId}/Seats": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns details for seats in a performance\r\nThe seats returned can be filtered by screen, section, or price zone. Allocation is returned based on MOS and constituent.\r\nAvailable seats can be filtered by price type availability, causing any seats that are not available for the specified price types to be listed with a status of 5, Not In Allocation.",
                "operationId": "Performances_GetSeats",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "ID of the performance",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "Required parameter. Must be a valid MOS id",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Required parameter. Must be a valid constituent ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "zoneIds",
                        "in": "query",
                        "description": "zoneIds must be a comma separated list of valid zone ids",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sectionIds",
                        "in": "query",
                        "description": "sectionIds must be a comma separated list of valid section ids",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "screenIds",
                        "in": "query",
                        "description": "screenIds must be a comma separated list of valid screen ids for the specified performance",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "checkPriceTypeIds",
                        "in": "query",
                        "description": "checkPriceTypeIds must be either a list of valid price types or the token \"All\"",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "returnNonSeats",
                        "in": "query",
                        "description": "returnNonSeats indicates if locations on the seat map that are not seats should be included",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Seat"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Performances/{performanceId}/Seats/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns summary for seats in a performance\r\nSeat availability is summarized by screen, section and zone.\r\nThe seats returned can be filtered by screen, section, or price zone. Allocation is returned based on MOS and constituent.\r\nAvailable seats can be filtered by price type availability, causing any seats that are not available for the specified price types to be listed with a status of 5, Not In Allocation.",
                "operationId": "Performances_GetSeatSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "ID of the performance",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "Required parameter. Must be a valid MOS id",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Required parameter. Must be a valid constituent ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "zoneIds",
                        "in": "query",
                        "description": "zoneIds must be a comma separated list of valid zone ids",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sectionIds",
                        "in": "query",
                        "description": "sectionIds must be a comma separated list of valid section ids",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "screenIds",
                        "in": "query",
                        "description": "screenIds must be a comma separated list of valid screen ids for the specified performance",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "checkPriceTypeIds",
                        "in": "query",
                        "description": "checkPriceTypeIds must be either a list of valid price types or the token \"All\"",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeatSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Performances/{performanceId}/SeatFees": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns price, per seat fees, for each zone and price type for a the specified performance",
                "operationId": "Performances_GetSeatFees",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "Required, Must be a valid id from TR_MOS",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeIds",
                        "in": "query",
                        "description": "A list of valid ids from TR_PRICE_TYPE. Filters the results",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "Date for pricing. Defaults to today",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductSeatFee"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/BulkCopySets": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all bulk copy sets.",
                "operationId": "BulkCopySets_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BulkCopySet"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Creates a new bulk copy set.",
                "operationId": "BulkCopySets_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkCopySet",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkCopySet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BulkCopySet"
                        }
                    }
                }
            }
        },
        "/TXN/BulkCopySets/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary of all bulk copy sets.",
                "operationId": "BulkCopySets_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BulkCopySetSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/BulkCopySets/{bulkCopySetId}/GetDayForCopy": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns the packages and performances that will be copied for the daily bulk copy set",
                "operationId": "BulkCopySets_GetDayForCopy",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkCopySetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BulkCopyDayForCopy"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns details summarizing a web session's state.\r\nIncludes counts of cart products, the login status, MOS and Source",
                "operationId": "Session_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Expiration": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns the deadline after which a session's reserved seats will be released\r\nWhen called on a session without an established Seat Server session, one will be created for it.  Once the session is created, the deadline will apply regardless of whether or not any tickets have been added to the cart.",
                "operationId": "Session_GetExpiration",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SessionExpirationResponse"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Changes the deadline after which a session's reserved seats are released\r\nAll times are relative to the machine on which the Tessitura Seat Server runs, including the time zone. The method either takes an absolute deadline time or an offset in seconds which is used to shorten or lengthen the time until expiration. The deadline is not the exact moment at which the seats are released, but rather when they are marked as expired. The Tessitura Seat Server will terminate the session when the next cleanup cycle is run (every 60 seconds or so). The method will return the new expiration date/time of the session.  The expiration date/time takes precendence over the offset if both are provided in the request.",
                "operationId": "Session_SetExpiration",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SetSessionExpirationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SessionExpirationResponse"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/DeliveryMethods": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns the available delivery methods for the session\r\nDelivery method availability is based on the mode of sale. NOTE:  The Hold at Box Office delivery method(ID -1) is always returned. Web code must be used to filter out this delivery method as needed.",
                "operationId": "Session_GetDeliveryMethods",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebDeliveryMethod"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Default/{fieldName}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns summary information for the specified default, including value",
                "operationId": "Session_GetDefault",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fieldName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SystemDefaultSummary"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Variables": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns a list of all name/value pair variables for the specified session.",
                "operationId": "Session_GetVariables",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SessionVariable"
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update the value of an existing session variable.",
                "operationId": "Session_UpdateVariable",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sessionVariable",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionVariable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SessionVariable"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Add a new session variable to specified session.",
                "operationId": "Session_AddVariable",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sessionVariable",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionVariable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SessionVariable"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Constituent/OnAccount": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns the balance of on account money held by the constituent associated to the provided session key.\r\nResults can be filtered by specific on-account payment methods. The Amount used in current session is also indicated.",
                "operationId": "Session_GetOnAccountBalances",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentMethodIds",
                        "in": "query",
                        "description": "Comma separated list of ids from TR_PAYMENT_METHOD that are the on-account payment method type",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OnAccountBalance"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Orders/Search": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns summary details for all orders belonging to the session's authenticated constituent. \r\nReturned orders can be filtered by print status, performance date, season, mode of sale, delivery method, and whether or not an order was created by a rollover.",
                "operationId": "Session_OrderSearch",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "seasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "renewalsOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "perfStartDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "perfEndDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deliveryMethodId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "unprintedOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: false)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeUnfulfilledRollovers",
                        "in": "query",
                        "description": "Include unfulfilled rollovers in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebOrderSearchResponse"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/DirectDebitAccountTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all direct debit currency types.",
                "operationId": "DirectDebitAccountTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DirectDebitAccountType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new direct debit account type.",
                "operationId": "DirectDebitAccountTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DirectDebitAccountType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DirectDebitAccountType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/DirectDebitAccountTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all direct debit account types.",
                "operationId": "DirectDebitAccountTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DirectDebitAccountTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/MembershipLevelCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all membership level categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "MembershipLevelCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MembershipLevelCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new membership level category.",
                "operationId": "MembershipLevelCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MembershipLevelCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MembershipLevelCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/MembershipLevelCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all membership level categories.",
                "operationId": "MembershipLevelCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MembershipLevelCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/BulkDailyCopyExclusions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all bulk daily copy exclusions for a given bulk copy set.",
                "operationId": "BulkDailyCopyExclusions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkCopySetId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BulkDailyCopyExclusion"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Creates a bulk daily copy exclusion.",
                "operationId": "BulkDailyCopyExclusions_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkDailyCopyExclusion",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkDailyCopyExclusion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BulkDailyCopyExclusion"
                        }
                    }
                }
            }
        },
        "/CRM/TicketHistory": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets history information for tickets",
                "operationId": "TicketHistory_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "seasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "productionSeasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceStartDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceEndDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderStartDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderEndDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TicketHistory"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Sources/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all Sources.",
                "operationId": "Sources_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "appealIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SourceSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Sources/{sourceId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a Source.",
                "operationId": "Sources_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sourceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Source"
                        }
                    }
                }
            }
        },
        "/Finance/Sources/WebExpiring": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets the source codes configured as the web default that are expiring in 15 days without an overlapping source code.",
                "operationId": "Sources_GetWebExpiring",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WebExpiringResponse"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReferenceTables": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all reference tables. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ReferenceTables_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReferenceTable"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReferenceTables/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details for a reference table by Id.",
                "operationId": "ReferenceTables_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReferenceTable"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReferenceTables/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all reference tables.",
                "operationId": "ReferenceTables_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReferenceTableSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/SpecialActivities": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the activity records for the specified constituent id and all its visible affiliations' activity records as well. To exclude activity records of the visible affiliations, pass includeAffiliations=false.",
                "operationId": "SpecialActivities_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SpecialActivity"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new activity record.",
                "operationId": "SpecialActivities_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "specialActivity",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpecialActivity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SpecialActivity"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets the cart summary\r\nUsed by TRBO.  Returns the cart with product lines summarized by price type, zone and price.",
                "operationId": "Cart_GetSummary",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "messageTypes",
                        "in": "query",
                        "description": "A comma delimited list of valid message type ids (/ReferenceData/PricingRuleMessageTypes)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "savedCart",
                        "in": "query",
                        "description": "Pass True if Checkout has already been called for the cart.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CartSummary"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Messages": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets the pricing rule messages for the current cart.\r\nBoth Message Only and Rule messages are returned.",
                "operationId": "Cart_GetMessages",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "messageTypes",
                        "in": "query",
                        "description": "A comma delimited list of valid message type ids (/ReferenceData/PricingRuleMessageTypes)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "savedCart",
                        "in": "query",
                        "description": "Pass True if Checkout has already been called for the cart.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CartPricingRuleMessage"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Properties": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns cart properties",
                "operationId": "Cart_GetCartProperties",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CartProperties"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates cart properties\r\nSee the notes on the request for specific documentation on each item that can be set. <br /> \r\nBefore making a request to PUT cart properties, you should make a GET request to obtain all current property values. Make updates to any of the properties that need changing, and pass the entire cart properties object back into your put request. This ensures that all property values that are set, but should not change, persist and are not overwritten unintentioanlly.",
                "operationId": "Cart_UpdateCartProperties",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cartProperties",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CartProperties"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CartProperties"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/ReceiptString": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns a formatted receipt for a cart",
                "operationId": "Cart_GetReceiptString",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "receiptSettingsId",
                        "in": "query",
                        "description": "ID of the receipt settings to use (ReferenceData/ReceiptSettings)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "targetFormat",
                        "in": "query",
                        "description": "HTML for targetFormat 1 and CPCL for targetFormat 2",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReceiptStringResponse"
                        }
                    }
                }
            }
        },
        "/CRM/ContactPointPurposeMaps": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the contact point purposes for the specified constituent (constituentId) and all its visible affiliation's contact point purposes as well. To exclude contact point purposes of the visible affiliations pass includeAffiliations=false. To get contact point purposes for a contact point pass contactPointId.",
                "operationId": "ContactPointPurposeMaps_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contactPointId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contactPointCategoryId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "purposeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPointPurposeMap"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contact point purpose.",
                "operationId": "ContactPointPurposeMaps_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contactPointPurposeMap",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurposeMap"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurposeMap"
                        }
                    }
                }
            }
        },
        "/Finance/BatchMaintenance/{batchId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a single Batch",
                "operationId": "BatchMaintenance_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "batchId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Batch"
                        }
                    }
                }
            }
        },
        "/Finance/BatchMaintenance/Active": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns all open or held batches owned by the service user. Optionally filters out controlled batches",
                "operationId": "BatchMaintenance_Active",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "includeControlled",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Batch"
                            }
                        }
                    }
                }
            }
        },
        "/Security/CoreIdentity/Token": {
            "get": {
                "tags": [
                    "GET"
                ],
                "operationId": "CoreIdentity_Token",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CoreIdentityTokenResponse"
                        }
                    }
                }
            }
        },
        "/EventsManagement/Resources": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all resources optionally filtered by Resource Type, Category, or ConstituentId (for Worker type only). IncludeAffiliations parameter only accepted when ConstituentId provided.",
                "operationId": "Resources_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "categoryIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Resource"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a Resource.",
                "operationId": "Resources_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resource",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    }
                }
            }
        },
        "/EventsManagement/Resources/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all resources in summary optionally filtered by Resource Type, Category, or Constituent (for Worker Type only). IncludeAffiliations parameter only accepted when ConstituentId provided.",
                "operationId": "Resources_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "categoryIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceSummary"
                            }
                        }
                    }
                }
            }
        },
        "/EventsManagement/Resources/{id}/Usages": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the resource usage information.",
                "operationId": "Resources_HasUsages",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceUsage"
                        }
                    }
                }
            }
        },
        "/EventsManagement/Resources/Details": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get schedules and qualifications that apply to a set of resources and/or constituents during certain period of time.",
                "operationId": "Resources_GetDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceIds",
                        "in": "query",
                        "description": "A comma separated list of resource ids.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentIds",
                        "in": "query",
                        "description": "A comma separated list of constituent ids.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expandWorkerAssignments",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceDetail"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/ContactPermissions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the contact permissions for the specified constituent and its affiliations if requested",
                "operationId": "ContactPermissions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPermission"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contact permission",
                "operationId": "ContactPermissions_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contactPermission",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPermission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPermission"
                        }
                    }
                }
            }
        },
        "/Finance/MembershipOrganizations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a list of all membership organizations.\r\nNOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.",
                "operationId": "MembershipOrganizations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MembershipOrganization"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/MembershipOrganizations/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a list of all membership organizations in summary.\r\nNOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.",
                "operationId": "MembershipOrganizations_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MembershipOrganizationSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/MembershipOrganizations/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a specific membership organization.\r\nNOTE: As part of the upcoming changes to membership functionality, this resource will be removed in an upcoming major Tessitura release. Please make a note that code that references it will need to be revisited as part of that upgrade process.",
                "operationId": "MembershipOrganizations_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MembershipOrganization"
                        }
                    }
                }
            }
        },
        "/TXN/SubLineItems": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns sub line item summary data for a constituent",
                "operationId": "SubLineItems_GetSubLineItemSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "The constituent for whom to return sublineitems. Required.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "Optional parameter to limit the sublineitems to a single order.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "subLineItemStatusIds",
                        "in": "query",
                        "description": "Optional parameter to limit the status of the sublineitems returned. Comma separated list of Ids from /ReferenceData/SubLineItemStatuses.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderStartDate",
                        "in": "query",
                        "description": "Optional Start date of the order date range to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderEndDate",
                        "in": "query",
                        "description": "Optional End date of the order date range to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceStartDate",
                        "in": "query",
                        "description": "Optional Start date of the performance date range to search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceEndDate",
                        "in": "query",
                        "description": "Optional End date of the performance date range to search.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceTypeIds",
                        "in": "query",
                        "description": "A comma separated list of Ids from ReferenceData/PerformanceTypes",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includePackageBaseSubLineitems",
                        "in": "query",
                        "description": "Optional parameter to suppress base sublineitems for fixed seat packages (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SubLineItemSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentTypeAffiliates": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all constituent type affiliates. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ConstituentTypeAffiliates_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentTypeAffiliate"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new constituent type affiliate.",
                "operationId": "ConstituentTypeAffiliates_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentTypeAffiliate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentTypeAffiliate"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentTypeAffiliates/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all constituent type affiliates.",
                "operationId": "ConstituentTypeAffiliates_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentTypeAffiliateSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/WorkerQualifications": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Worker Qualifications for a comma separated list of constituents, optionally including qualifications from affiliated constituents.",
                "operationId": "WorkerQualifications_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentIds",
                        "in": "query",
                        "description": "A comma separated list of constituent IDs",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WorkerQualification"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a WorkerQualification.",
                "operationId": "WorkerQualifications_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "workerQualification",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WorkerQualification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkerQualification"
                        }
                    }
                }
            }
        },
        "/Security/UserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all security user groups.",
                "operationId": "SecurityUserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "application",
                        "in": "query",
                        "description": "Valid values are tessitura, tablet, onthego",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/Security/UserGroups/Default": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the default security user group.",
                "operationId": "SecurityUserGroups_GetDefaultUserGroup",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DefaultUserGroup"
                        }
                    }
                }
            }
        },
        "/Security/UserGroups/ManagedGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all managed security user groups.",
                "operationId": "SecurityUserGroups_GetManagedGroups",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Countries": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all countries. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Countries_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Country"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new country.",
                "operationId": "Countries_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Countries/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all countries.",
                "operationId": "Countries_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CountrySummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/TimeSlots": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all time slots. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "TimeSlots_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TimeSlot"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new time slot.",
                "operationId": "TimeSlots_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TimeSlot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TimeSlot"
                        }
                    }
                }
            }
        },
        "/ReferenceData/TimeSlots/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all time slots.",
                "operationId": "TimeSlots_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TimeSlotSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ListCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all list categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ListCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ListCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new list category.",
                "operationId": "ListCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ListCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ListCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ListCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all list categories.",
                "operationId": "ListCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ListCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Genders": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all available gender values. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Genders_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Gender"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new gender.",
                "operationId": "Genders_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Gender"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Gender"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Genders/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all gender values.",
                "operationId": "Genders_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GenderSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/CurrencyTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all currency types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "CurrencyTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CurrencyType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new currency type.",
                "operationId": "CurrencyTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CurrencyType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CurrencyType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/CurrencyTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all currency types.",
                "operationId": "CurrencyTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CurrencyTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/AccountTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all account types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "AccountTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AccountType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new account type.",
                "operationId": "AccountTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccountType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AccountTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all account types.",
                "operationId": "AccountTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AccountTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidRates": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all gift aid rates. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "GiftAidRates_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidRate"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new gift aid rate.",
                "operationId": "GiftAidRates_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidRate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidRate"
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidRates/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all gift aid rates.",
                "operationId": "GiftAidRates_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidRateSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Facilities": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the Facilities.",
                "operationId": "Facilities_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Facility"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Facility.",
                "operationId": "Facilities_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "facility",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Facility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Facility"
                        }
                    }
                }
            }
        },
        "/TXN/Facilities/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary representation of all Facilities.",
                "operationId": "Facilities_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FacilitySummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Facilities/{facilityId}/Screens": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns details of all screens and the HouseMap for the facility.  The screen details include which other screens are assigned to each screen navigation arrow button.",
                "operationId": "Facilities_GetScreens",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "facilityId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ScreenMap"
                        }
                    }
                }
            }
        },
        "/TXN/Fees": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all fees.",
                "operationId": "Fees_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "seasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "userDefined",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "feeCategoryIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Fee"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Fees/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary representation of all fees.",
                "operationId": "Fees_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "seasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "userDefined",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "feeCategoryIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FeeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Fees/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a fee.",
                "operationId": "Fees_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Fee"
                        }
                    }
                }
            }
        },
        "/Reporting/Reports/{reportId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a report.",
                "operationId": "Reports_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "reportId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Report"
                        }
                    }
                }
            }
        },
        "/Reporting/Reports/CustomData": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get custom data for a report parameter.",
                "operationId": "Reports_GetCustomData",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "reportId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "parameterId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportCustomData"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/Reports": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all reports, Optionally filtered by type.",
                "operationId": "Reports_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Report"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/Reports/Categories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all report categories.",
                "operationId": "Reports_GetReportCategories",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportCategory"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/Reports/Defaults/{userGroup}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get report defaults for the specified user group.",
                "operationId": "Reports_GetReportDefaults",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userGroup",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportDefaults"
                        }
                    }
                }
            }
        },
        "/Reporting/Reports/Parameters": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get report parameters.",
                "operationId": "Reports_GetReportParameters",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "reportId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportParameter"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contact types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ContactTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contact type.",
                "operationId": "ContactTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all contact types.",
                "operationId": "ContactTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PricingRules": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets all pricing rules or filtered set",
                "operationId": "PricingRules_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRule"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new pricing rule.",
                "operationId": "PricingRules_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "pricingRule",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PricingRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRule"
                        }
                    }
                }
            }
        },
        "/TXN/PricingRules/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary of all pricing rules.",
                "operationId": "PricingRules_GetAllSummary",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRuleSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SalesLayoutButtonTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all sales layout button types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "SalesLayoutButtonTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SalesLayoutButtonType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new sales layout button type.",
                "operationId": "SalesLayoutButtonTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalesLayoutButtonType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesLayoutButtonType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SalesLayoutButtonTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all sales layout button types.",
                "operationId": "SalesLayoutButtonTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SalesLayoutButtonTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Txn/PackageWebContents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get full package web contents for passed packageIds or contentTypeIds.  At least on parameter value is required.  For production element web contents, use TXN/InventoryWebContents.  To filter based on useWebAPI flag on content type and other parameters, use Txn/WebContents. This is mainly used for PackageWebContent setup.",
                "operationId": "PackageWebContents_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageIds",
                        "in": "query",
                        "description": "A comma separated list of package ids. Required if contentTypeIds is not used.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contentTypeIds",
                        "in": "query",
                        "description": "A comma separated list of web content type ids.  Required if packageIds is not used.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackageWebContent"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a packageWebContent.",
                "operationId": "PackageWebContents_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageWebContent",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PackageWebContent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageWebContent"
                        }
                    }
                }
            }
        },
        "/Txn/PackageWebContents/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary package web contents for passed packageIds and contentTypeIds.  At least on parameter value is required.  For production element web contents, use TXN/InventoryWebContents.  To filter based on useWebAPI flag on content type and other parameters, use Txn/WebContents. This is mainly used for PackageWebContent setup.",
                "operationId": "PackageWebContents_GetAllSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageIds",
                        "in": "query",
                        "description": "A comma separated list of package ids.  Required if contentTypeIds is not used.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contentTypeIds",
                        "in": "query",
                        "description": "A comma separated list of web content type ids. Required if packageIds is not used.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackageWebContentSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Security/PaymentMethods": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all payment method/user group mappings valid for the context usergroup.",
                "operationId": "SecurityPaymentMethods_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "amount",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentMethodUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/HoldCodes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Hold Codes.",
                "operationId": "HoldCodes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HoldCode"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a Hold Code.",
                "operationId": "HoldCodes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "holdCode",
                        "in": "body",
                        "description": "The resource to be saved",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HoldCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCode"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/PaymentGatewayActivities": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Retrieve all Payment Gateway Activity",
                "operationId": "PaymentGatewayActivities_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentGatewayActivity"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Payment Gateway Activity",
                "operationId": "PaymentGatewayActivities_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentGatewayActivity",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayActivity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayActivity"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceTypeReasons": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price type reasons. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PriceTypeReasons_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeReason"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new price type reason.",
                "operationId": "PriceTypeReasons_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTypeReason"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTypeReason"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PriceTypeReasons/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all price type categories.",
                "operationId": "PriceTypeReasons_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTypeReasonSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Security/ControlGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all control group/user group mappings valid for the context usergroup.",
                "operationId": "SecurityControlGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ControlGroupUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/Security/BatchTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all batch type/user group mappings valid for the context usergroup.",
                "operationId": "SecurityBatchTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BatchTypeUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/States": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all states. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "States_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/State"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new state.",
                "operationId": "States_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/State"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/State"
                        }
                    }
                }
            }
        },
        "/ReferenceData/States/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all states.",
                "operationId": "States_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/StateSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Pronouns": {
            "get": {
                "tags": [
                    "GET"
                ],
                "operationId": "Pronouns_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pronoun"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "operationId": "Pronouns_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pronoun"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pronoun"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Pronouns/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "operationId": "Pronouns_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PronounSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ServiceResourceUserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all service resource/user group mappings.",
                "operationId": "ServiceResourceUserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ServiceResourceUserGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new service resource/user group mapping.",
                "operationId": "ServiceResourceUserGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceResourceUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceResourceUserGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ServiceResourceUserGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all service resource/user group mappings.",
                "operationId": "ServiceResourceUserGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ServiceResourceUserGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/DesignationCodes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all designation codes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "DesignationCodes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DesignationCode"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new designation code.",
                "operationId": "DesignationCodes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DesignationCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DesignationCode"
                        }
                    }
                }
            }
        },
        "/ReferenceData/DesignationCodes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all designation codes.",
                "operationId": "DesignationCodes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DesignationCodeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SalesChannels": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all sales channels. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "SalesChannels_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SalesChannel"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new sales channel.",
                "operationId": "SalesChannels_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalesChannel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesChannel"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SalesChannels/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all sales channels.",
                "operationId": "SalesChannels_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SalesChannelSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/UpgradeCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Upgrade Categories. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "UpgradeCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpgradeCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Upgrade Category.",
                "operationId": "UpgradeCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpgradeCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/UpgradeCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Upgrade Categories.",
                "operationId": "UpgradeCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpgradeCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/PackageHistory": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets history information for packages",
                "operationId": "PackageHistory_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "seasonId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageTypeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderStartDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderEndDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackageHistory"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/OutputSets/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary of all Output Sets.",
                "operationId": "OutputSets_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "mineOnly",
                        "in": "query",
                        "description": "Only return output sets that are created by the current user.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OutputSetSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Security/ServiceResources": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all service resource/user group mappings valid for the context usergroup.",
                "operationId": "SecurityServiceResources_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ServiceResourceUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Prefixes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all prefixes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Prefixes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Prefix"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new prefix.",
                "operationId": "Prefixes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Prefix"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Prefix"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Prefixes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all prefixes.",
                "operationId": "Prefixes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PrefixSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/ModeOfSaleUserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all mode of sale/user group mappings.",
                "operationId": "ModeOfSaleUserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModeOfSaleUserGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new mode of sale/user group mapping.",
                "operationId": "ModeOfSaleUserGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleUserGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleUserGroup"
                        }
                    }
                }
            }
        },
        "/TXN/PackagePriceTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all package price types.",
                "operationId": "PackagePriceTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packageIds",
                        "in": "query",
                        "description": "Required to filter package pricetypes to one or more packages.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackagePriceType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new package price type.",
                "operationId": "PackagePriceTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "packagePriceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PackagePriceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackagePriceType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Keywords": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all keywords. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Keywords_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Keyword"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new keyword.",
                "operationId": "Keywords_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Keyword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Keyword"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Keywords/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all keywords.",
                "operationId": "Keywords_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/KeywordSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Keywords/Data": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets potential values for a Keyword as KeywordDataItems.",
                "operationId": "Keywords_GetDataFor",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "keywordId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/KeywordDataItem"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/ModeOfSaleSurveyQuestions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all mode of sale survey questions.",
                "operationId": "ModeOfSaleSurveyQuestions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModeOfSaleSurveyQuestion"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new mode of sale survey question.",
                "operationId": "ModeOfSaleSurveyQuestions_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleSurveyQuestion",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleSurveyQuestion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleSurveyQuestion"
                        }
                    }
                }
            }
        },
        "/ReferenceData/DiscountTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all discount types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "DiscountTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DiscountType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new discount type.",
                "operationId": "DiscountTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscountType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DiscountType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/DiscountTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all discount types.",
                "operationId": "DiscountTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DiscountTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/InterestCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all interest categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "InterestCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InterestCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new interest category.",
                "operationId": "InterestCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InterestCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InterestCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/InterestCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all interest categories.",
                "operationId": "InterestCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InterestCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Accounts": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the credit card, direct debit, and SEPA accounts for the specified constituent id and all its visible affiliates' accounts as well.\r\nTo exclude accounts of the visible affiliates pass includeAffiliations=false.",
                "operationId": "Accounts_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "accountTypeId",
                        "in": "query",
                        "description": "Filter by account type ID.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeInactive",
                        "in": "query",
                        "description": "Inactive accounts are included by default (true).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliates",
                        "in": "query",
                        "description": "Accounts for visible affiliates are shown by default (true).",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AccountResponse"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/CumulativeGivingReceipts": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get Cumulative Giving Receipts for the specified constituent id and affiliation Cumulative Giving Receipts as well. To exclude receipts of the visible affiliations pass includeAffiliations=false.",
                "operationId": "CumulativeGivingReceipts_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CumulativeGivingReceipt"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/CumulativeGivingReceipts/{cumulativeGivingReceiptId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an cumulativeGivingReceipt.",
                "operationId": "CumulativeGivingReceipts_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "cumulativeGivingReceiptId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CumulativeGivingReceipt"
                        }
                    }
                }
            }
        },
        "/CRM/CumulativeGivingReceipts/ForSession": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "To retrieve a specific receipt for a session, pass sessionId and constituentId.",
                "operationId": "CumulativeGivingReceipts_GetForSession",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sessionId",
                        "in": "query",
                        "description": "A unique session run in Update mode from the Cumulative Giving Summary Receipt Utility.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CumulativeGivingReceipt"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ActivityCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all activity categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ActivityCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActivityCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new activity category.",
                "operationId": "ActivityCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ActivityCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActivityCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ActivityCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all activity categories.",
                "operationId": "ActivityCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActivityCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/Diagnostics/EncryptionKey": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Validates Encryption Key Dates.",
                "operationId": "Diagnostics_EncryptionKeyCheck",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EncryptionKeyCheckResponse"
                        }
                    }
                }
            }
        },
        "/Diagnostics/Status": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns status of the application connection to database and service version information.",
                "operationId": "Diagnostics_GetStatus",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Status"
                        }
                    }
                }
            }
        },
        "/Diagnostics/SeatServerStatus": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns status of the seat server connection.",
                "operationId": "Diagnostics_GetSeatServerStatus",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeatServerStatus"
                        }
                    }
                }
            }
        },
        "/Diagnostics/Report": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns status of the application connection to database and service version information as an html page.",
                "operationId": "Diagnostics_GetStatusReport",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/Diagnostics/ApiPluginConfiguration": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns current API plugin configuration with listing of registered plugins, whether plugins are enabled, and whether plugins are reloaded with each request.",
                "operationId": "Diagnostics_GetApiPluginConfiguration",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiPluginConfiguration"
                        }
                    }
                }
            }
        },
        "/ReferenceData/EmailProfiles": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all email profiles",
                "operationId": "EmailProfiles_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EmailProfile"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new email profile",
                "operationId": "EmailProfiles_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmailProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmailProfile"
                        }
                    }
                }
            }
        },
        "/ReferenceData/EmailProfiles/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all email profiles",
                "operationId": "EmailProfiles_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EmailProfileSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/TransactionHistory": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all transaction histories for the specified constituent id and all its visible affiliations' transaction histories as well. To exclude transaction histories of the visible affiliations pass includeAffiliations=false. This resource is paged. Pass filters such as transaction reference id, payment id, or start and end date to limit the results. Results can also be sorted.",
                "operationId": "TransactionHistory_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all constituent affiliates in the result.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Default is 1.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Default is 100.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sortByField",
                        "in": "query",
                        "description": "Sort by date or by amount.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sortByDirection",
                        "in": "query",
                        "description": "Asc or desc.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "Return results dated after this date.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "Return results dated before this date.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "referenceId",
                        "in": "query",
                        "description": "Search by transaction reference ID number (T_TRANSACTION.ref_no).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "paymentId",
                        "in": "query",
                        "description": "Search transactions by payment ID number.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransactionHistoryResponse"
                        }
                    }
                }
            }
        },
        "/Finance/PlanWorkers": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the plan workers for the specified constituent.",
                "operationId": "PlanWorkers_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "planId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PlanWorker"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new plan worker.",
                "operationId": "PlanWorkers_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "planWorker",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanWorker"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanWorker"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SchedulePatternTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all Schedule Patterns. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "SchedulePatternTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SchedulePatternType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Schedule Pattern.",
                "operationId": "SchedulePatternTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SchedulePatternType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SchedulePatternType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SchedulePatternTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Schedule Patterns.",
                "operationId": "SchedulePatternTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SchedulePatternTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/QueryElementFilters": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get available query element filters for one or more query element groups.",
                "operationId": "QueryElementFilters_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "groupIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QueryElementFilter"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a query element filter.",
                "operationId": "QueryElementFilters_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "queryElementFilter",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QueryElementFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QueryElementFilter"
                        }
                    }
                }
            }
        },
        "/Reporting/QueryElementFilters/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of query element filters for one or more query element groups.",
                "operationId": "QueryElementFilters_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "groupIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QueryElementFilterSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/QueryElementFilters/Data": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get values for a query element filter.",
                "operationId": "QueryElementFilters_GetDataFor",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "queryElementFilterId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FilterDataItem"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/BillingSchedules": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Billing Schedules. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "BillingSchedules_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BillingSchedule"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Billing Schedule.",
                "operationId": "BillingSchedules_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BillingSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BillingSchedule"
                        }
                    }
                }
            }
        },
        "/ReferenceData/BillingSchedules/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Billing Schedules.",
                "operationId": "BillingSchedules_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BillingScheduleSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Artists": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all artists.",
                "operationId": "Artists_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Artist"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new artist.",
                "operationId": "Artists_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "artist",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Artist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Artist"
                        }
                    }
                }
            }
        },
        "/Finance/BatchTypeUserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all batch type/user group mappings.",
                "operationId": "BatchTypeUserGroup_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userGroup",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BatchTypeUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/TemplateTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all template types. To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "TemplateTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplateType"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/TemplateTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all template types",
                "operationId": "TemplateTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplateTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/TemplateTypes/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a template type by id. To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "TemplateTypes_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/HoldCodeCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Hold Code Categories. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "HoldCodeCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HoldCodeCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Hold Code Category.",
                "operationId": "HoldCodeCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HoldCodeCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCodeCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/HoldCodeCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Hold Code Categories.",
                "operationId": "HoldCodeCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HoldCodeCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ControlGroupUserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all control group/user group mappings.",
                "operationId": "ControlGroupUserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ControlGroupUserGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new control group/user group mapping.",
                "operationId": "ControlGroupUserGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ControlGroupUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ControlGroupUserGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ControlGroupUserGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all control group/user group mappings.",
                "operationId": "ControlGroupUserGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ControlGroupUserGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/PaymentHistory": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets history information for payments by constituent.",
                "operationId": "PaymentHistory_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliates",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sortByField",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sortByDirection",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "paymentTypeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "transactionId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentHistoryResponse"
                        }
                    }
                }
            }
        },
        "/CRM/ContactPoints": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the delivery points for the specified constituent (constituentId) and all its visible affiliation's delivery point purposes as well. To exclude delivery point purposes of the visible affiliations pass includeAffiliations=false.",
                "operationId": "ContactPoints_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPoint"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SourceGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all source groups. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "SourceGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SourceGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new source group.",
                "operationId": "SourceGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SourceGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SourceGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SourceGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all source groups.",
                "operationId": "SourceGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SourceGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Security/ModesOfSale": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all mode of sale/user group mappings valid for the context usergroup.",
                "operationId": "SecurityModesOfSale_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModeOfSaleUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/Templates": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all templates",
                "operationId": "Templates_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Template"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new template",
                "operationId": "Templates_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "template",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Template"
                        }
                    }
                }
            }
        },
        "/Templates/Summaries": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all templates",
                "operationId": "Templates_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplateSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/WebContentTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all web content types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "WebContentTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebContentType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a Web Content Type.",
                "operationId": "WebContentTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebContentType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WebContentType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/WebContentTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all web content types.",
                "operationId": "WebContentTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebContentTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/WebContentTypes/Data": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets potential values for a referenced WebContentType as a collection of WebContentTypeDataItem.",
                "operationId": "WebContentTypes_GetDataFor",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebContentTypeDataItem"
                            }
                        }
                    }
                }
            }
        },
        "/Security/HoldCodes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all hold code/user group mappings valid for the context usergroup.",
                "operationId": "SecurityHoldCodes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HoldCodeUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/TemplateCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all template categories. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "TemplateCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplateCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new template category",
                "operationId": "TemplateCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templateCategory",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TemplateCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/TemplateCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all template categories.",
                "operationId": "TemplateCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplateCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PlanStatuses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all plan statuses. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PlanStatuses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PlanStatus"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new plan status.",
                "operationId": "PlanStatuses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanStatus"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PlanStatuses/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all plan statuses.",
                "operationId": "PlanStatuses_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PlanStatusSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Custom/{resourceName}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all data for the resource configured in TR_DATASERVICE_TABLES. The {resourceName} in the URL should be replaced by the name of the resource as configured in TR_DATASERVICE_TABLES. The data can be filtered by using a set of query parameters. The format for the filter query parameters is ?column1=value1&amp;column2=value2, where column1 can either be the name of the column in the table or a formatted name for the column as defined in TR_DATASERVICE_COLUMNS.\r\nFor more information about Custom resources including setup and use, please look at the <a href=\"~/CustomData\">Custom Data</a> help page.",
                "operationId": "Custom_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create an entry with the given data for the table as defined by the {resourceName} in TR_DATASERVICE_TABLES.",
                "operationId": "Custom_Create",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/Custom/Metadata": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the metadata information of a custom table as defined by TR_DATASERVICE_TABLES and TR_DATASERVICE_COLUMNS.",
                "operationId": "Custom_GetMetadata",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TableMetadata"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/MembershipStandings": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Membership Standings.",
                "operationId": "MembershipStandings_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MembershipStanding"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/MembershipStandings/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all MembershipStandings.",
                "operationId": "MembershipStandings_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MembershipStandingSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/MembershipStandings/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a specific MembershipStanding by id.",
                "operationId": "MembershipStandings_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MembershipStanding"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PerformanceTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all performance types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PerformanceTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new performance type.",
                "operationId": "PerformanceTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PerformanceTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all performance types.",
                "operationId": "PerformanceTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/MerchantReference": {
            "get": {
                "tags": [
                    "GET"
                ],
                "operationId": "MerchantReferences_Reference",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "merchantAccount",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentId",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MerchantReference"
                        }
                    }
                }
            }
        },
        "/ReferenceData/IntegrationDefaults": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Integration Defaults. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "IntegrationDefaults_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntegrationDefault"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Integration Default.",
                "operationId": "IntegrationDefaults_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IntegrationDefault"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IntegrationDefault"
                        }
                    }
                }
            }
        },
        "/ReferenceData/IntegrationDefaults/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Integration Defaults.",
                "operationId": "IntegrationDefaults_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntegrationDefaultSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Associations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the association of the specified constituent id or get all the associations of the specified associated constituent id. If both constituent id and associated constituent id are specified get all the associations between them. To filter the associations that are active within certain date then pass values for start date and end date.",
                "operationId": "Associations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "associatedConstituentId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startActiveDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endActiveDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Association"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new association.",
                "operationId": "Associations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "association",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Association"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Association"
                        }
                    }
                }
            }
        },
        "/Reporting/Lists/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary of all Lists.",
                "operationId": "Lists_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listIds",
                        "in": "query",
                        "description": "An optional list of ids",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ListSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/Lists/{listId}/Contents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets Constituent ids for the contents of a List.",
                "operationId": "Lists_GetContents",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "Required, id of list for contents",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ListContent"
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Import constituent ids into an existing list.",
                "operationId": "Lists_UpdateContents",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "listImportRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ListImportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ListImportResponse"
                        }
                    }
                }
            }
        },
        "/Reporting/Lists/{listId}/Contents/Details": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets Constituent details for the contents of a List.",
                "operationId": "Lists_GetContentsDetail",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ListContentDetail"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/Lists/{listId}/Contents/{constituentId}/MatchReasons": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns list criteria match reasons for a constituent in a list.",
                "operationId": "Lists_GetListCriterionMatchReasons",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContributionDesignations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contribution designations. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ContributionDesignations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContributionDesignation"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contribution designation.",
                "operationId": "ContributionDesignations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContributionDesignation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContributionDesignation"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContributionDesignations/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all contribution designations.",
                "operationId": "ContributionDesignations_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContributionDesignationSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/GiftAidDeclarations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets all Gift Aid Declarations for a provided constituent including primary affiliates by default.",
                "operationId": "GiftAidDeclarations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidDeclaration"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Creates a Gift Aid Declaration.",
                "operationId": "GiftAidDeclarations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "giftAidDeclaration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidDeclaration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidDeclaration"
                        }
                    }
                }
            }
        },
        "/Security/ContextInformation": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a commonly used set of default values for the user and usergroup in the current security context.",
                "operationId": "ContextInformation_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContextInformation"
                        }
                    }
                }
            }
        },
        "/ReferenceData/BatchTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all batch types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "BatchTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BatchType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new batch type.",
                "operationId": "BatchTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BatchType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BatchType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/BatchTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all batch types.",
                "operationId": "BatchTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BatchTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/BookingCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Booking Categories. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "BookingCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BookingCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Booking Category.",
                "operationId": "BookingCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BookingCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/BookingCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Booking Categories.",
                "operationId": "BookingCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BookingCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Constituencies": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the constituencies for the specified constituent id and all its visible affiliation's constituencies as well. To exclude constituencies of the visible affiliations pass includeAffiliations=false.",
                "operationId": "Constituencies_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Constituency"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new constituency.",
                "operationId": "Constituencies_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituency",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Constituency"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Constituency"
                        }
                    }
                }
            }
        },
        "/Finance/CampaignFunds": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Funds associated to a Campaign.",
                "operationId": "CampaignFunds_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CampaignFund"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Fund association to a Campaign.",
                "operationId": "CampaignFunds_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "campaignFund",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignFund"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CampaignFund"
                        }
                    }
                }
            }
        },
        "/Admin/UpgradeLogs": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns a list of UpgradeLog objects.",
                "operationId": "UpgradeLogs_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpgradeLog"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Saves the given upgradeLog.",
                "operationId": "UpgradeLogs_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "upgradeLog",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpgradeLog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeLog"
                        }
                    }
                }
            }
        },
        "/Admin/UpgradeLogs/{upgradeLogId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Returns an upgradeLog for the given id.",
                "operationId": "UpgradeLogs_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "upgradeLogId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeLog"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates the given upgradeLog.",
                "operationId": "UpgradeLogs_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "upgradeLogId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "upgradeLog",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpgradeLog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeLog"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SubLineItemStatuses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all sub line item statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "SubLineItemStatuses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SubLineItemStatus"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new sub line item status.",
                "operationId": "SubLineItemStatuses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SubLineItemStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SubLineItemStatus"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SubLineItemStatuses/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all sub line item statuses.",
                "operationId": "SubLineItemStatuses_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SubLineItemStatusSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/TriPOSCloudConfigurations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all TriPOS Cloud configurations.",
                "operationId": "TriPOSCloudConfigurations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TriPOSCloudConfiguration"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new TriPOS Cloud configuration.",
                "operationId": "TriPOSCloudConfigurations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TriPOSCloudConfiguration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TriPOSCloudConfiguration"
                        }
                    }
                }
            }
        },
        "/ReferenceData/TriPOSCloudConfigurations/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all TriPOS Cloud configurations.",
                "operationId": "TriPOSCloudConfigurations_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TriPOSCloudConfigurationSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/MailIndicators": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all mail indicators. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "MailIndicators_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MailIndicator"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new mail indicator.",
                "operationId": "MailIndicators_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MailIndicator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MailIndicator"
                        }
                    }
                }
            }
        },
        "/ReferenceData/MailIndicators/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all mail indicators.",
                "operationId": "MailIndicators_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MailIndicatorSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Organizations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all organizations. To get the resources in maintenance mode (ignoring control groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Organizations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Organization"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new organization.",
                "operationId": "Organizations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Organizations/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all organizations.",
                "operationId": "Organizations_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OrganizationSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Designs": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all designs. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Designs_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Design"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Designs/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all designs.",
                "operationId": "Designs_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DesignSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Designs/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a design by id.",
                "operationId": "Designs_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Design"
                        }
                    }
                }
            }
        },
        "/Finance/Steps": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the steps for the specified plan, constituent or associate.",
                "operationId": "Steps_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "planId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "associateId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAssociates",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Step"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new step.",
                "operationId": "Steps_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "step",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Step"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Step"
                        }
                    }
                }
            }
        },
        "/Finance/Steps/{stepId}/Documents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the documents associated with the step (Including the file contents).",
                "operationId": "Steps_GetAllDocuments",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "stepId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Document"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Add a document to the step.",
                "operationId": "Steps_AddDocument",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "stepId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "document",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DocumentSummary"
                        }
                    }
                }
            }
        },
        "/Finance/Steps/{stepId}/Documents/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all the documents associated with the step. (Excluding the file contents)",
                "operationId": "Steps_GetAllDocumentSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "stepId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Funds/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all funds.",
                "operationId": "Funds_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "ticketingIndicator",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FundSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Funds/{fundId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific fund",
                "operationId": "Funds_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "fundId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Fund"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PlanPriorities": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all plan priorities. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PlanPriorities_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PlanPriority"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new plan priority.",
                "operationId": "PlanPriorities_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanPriority"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanPriority"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PlanPriorities/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all plan priorities.",
                "operationId": "PlanPriorities_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PlanPrioritySummary"
                            }
                        }
                    }
                }
            }
        },
        "/Security/Divisions/{divisionId}/ControlGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the control group/division mappings for the specified division.",
                "operationId": "Divisions_GetForDivision",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "divisionId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ControlGroupDivision"
                            }
                        }
                    }
                }
            }
        },
        "/Security/Divisions/ControlGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the control group/division mappings for the specified division.",
                "operationId": "Divisions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ControlGroupDivision"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/GiftCertificates/{giftCertificateNumber}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a specific gift certificate.\r\nThe original amount, amount used and balance are all returned.  Amounts applied to a current web session are included.",
                "operationId": "GiftCertificates_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "giftCertificateNumber",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftCertificateInfo"
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePrices": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all performance prices for a set of performance price types. Pass in asOfDateTime to get prices effective for that date/time.",
                "operationId": "PerformancePrices_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformancePrice"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new performance price.",
                "operationId": "PerformancePrices_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePrice",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePrice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePrice"
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePrices/Audit": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the performance price audit entries for a set of performance prices.",
                "operationId": "PerformancePrices_GetAudit",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformancePriceAuditEntry"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePrices/Details": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a set of performance prices along with events associated with those prices.",
                "operationId": "PerformancePrices_GetAllWithEvents",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePriceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformancePriceDetail"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPointCategoryPurposes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contact point category purposes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ContactPointCategoryPurposes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPointCategoryPurpose"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contact point category purpose.",
                "operationId": "ContactPointCategoryPurposes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategoryPurpose"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategoryPurpose"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPointCategoryPurposes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all contact point category purposes.",
                "operationId": "ContactPointCategoryPurposes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPointCategoryPurposeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/EMV/TriPosLanes/Lanes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Retrieve information on all lanes associated with merchant",
                "operationId": "EMV_GetAllLanes",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "merchant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cert",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Lane"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/EMV/TriPosLanes/{laneId}/ConnectionStatus": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get connection status for a lane",
                "operationId": "EMV_GetConnectionStatus",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "laneId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "merchant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cert",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConnectionStatus"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/EMV/TriPosLanes/{laneId}/ConnectionStatus/History": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get connection status history for a lane",
                "operationId": "EMV_GetConnectionStatusHistory",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "laneId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "merchant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cert",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConnectionStatus"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/EMV/TriPosLanes/{laneId}/Profiles/Idle": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Retrieve idle message for a specific lane",
                "operationId": "EMV_GetIdleMessage",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "laneId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "merchant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cert",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Profile"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Set idle message for a specific lane",
                "operationId": "EMV_SetIdleMessage",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Profile"
                        }
                    },
                    {
                        "name": "laneId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "merchant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cert",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Profile"
                        }
                    }
                }
            }
        },
        "/ReferenceData/QualificationCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of all Qualification Categories. To get the resources only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "QualificationCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QualificationCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Qualification Category.",
                "operationId": "QualificationCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QualificationCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QualificationCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/QualificationCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Qualification Categories.",
                "operationId": "QualificationCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QualificationCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPermissionCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contact permission categories.  To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ContactPermissionCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPermissionCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contact permission category.",
                "operationId": "ContactPermissionCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPermissionCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all contact permission categories.",
                "operationId": "ContactPermissionCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPermissionCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/QueryElements": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a list of query elements optionally filtered by one or more GroupIds or if they're active only.",
                "operationId": "QueryElements_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "groupIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QueryElement"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new query element.",
                "operationId": "QueryElements_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "queryElement",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QueryElement"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QueryElement"
                        }
                    }
                }
            }
        },
        "/Reporting/QueryElements/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a list of query elements in summary optionally filtered by one or more GroupIds or if they're active only.",
                "operationId": "QueryElements_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "groupIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QueryElementSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPermissionTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contact permission types. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ContactPermissionTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPermissionType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contact permission type.",
                "operationId": "ContactPermissionTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPermissionTypes/ByProductionSeason": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contact permission types assigned to a set of production seasons.",
                "operationId": "ContactPermissionTypes_GetForProductionSeasons",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionSeasonIds",
                        "in": "query",
                        "description": "Comma delimited set of production season ids.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPermissionType"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPermissionTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all contact permission types.",
                "operationId": "ContactPermissionTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPermissionTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Languages": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all languages. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Languages_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Language"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new language.",
                "operationId": "Languages_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Languages/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all languages.",
                "operationId": "Languages_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LanguageSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/TemplatePrices": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all template prices.",
                "operationId": "TemplatePrices_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "query",
                        "description": "Required.  Filter templatePrices to a single price template.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplatePrice"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new template price.",
                "operationId": "TemplatePrices_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templatePrice",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TemplatePrice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplatePrice"
                        }
                    }
                }
            }
        },
        "/TXN/TemplatePrices/{templatePriceId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of a template price.",
                "operationId": "TemplatePrices_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templatePriceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplatePrice"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update an existing template price.",
                "operationId": "TemplatePrices_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templatePriceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "templatePrice",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TemplatePrice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplatePrice"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ObjectPermissions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all object permissions.",
                "operationId": "ObjectPermissions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ObjectPermission"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new object permission.",
                "operationId": "ObjectPermissions_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ObjectPermission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ObjectPermission"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ObjectPermissions/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all object permissions.",
                "operationId": "ObjectPermissions_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ObjectPermissionSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/WorkerRoles": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all worker roles. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "WorkerRoles_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WorkerRole"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new worker role.",
                "operationId": "WorkerRoles_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WorkerRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkerRole"
                        }
                    }
                }
            }
        },
        "/ReferenceData/WorkerRoles/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all worker roles.",
                "operationId": "WorkerRoles_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WorkerRoleSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/SurveyResponses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all survey responses.",
                "operationId": "SurveyResponses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SurveyResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new survey response.",
                "operationId": "SurveyResponses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "surveyResponse",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SurveyResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SurveyResponse"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SeatStatuses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all seat statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "SeatStatuses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeatStatus"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new seat status.",
                "operationId": "SeatStatuses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SeatStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeatStatus"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SeatStatuses/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all seat statuses.",
                "operationId": "SeatStatuses_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeatStatusSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/CustomDefaultCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all custom default categories. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "CustomDefaultCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomDefaultCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new custom default category.",
                "operationId": "CustomDefaultCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomDefaultCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomDefaultCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/CustomDefaultCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all custom default categories.",
                "operationId": "CustomDefaultCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomDefaultCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Eras": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all eras. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Eras_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Era"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new era.",
                "operationId": "Eras_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Era"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Era"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Eras/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all eras.",
                "operationId": "Eras_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EraSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PackageTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all package types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PackageTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackageType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new package type.",
                "operationId": "PackageTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PackageType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PackageTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all package types.",
                "operationId": "PackageTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackageTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/EventsManagement/ResourceTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all resource types.",
                "operationId": "ResourceTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "categoryIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new resource type.",
                "operationId": "ResourceTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceType"
                        }
                    }
                }
            }
        },
        "/EventsManagement/ResourceTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all resource types.",
                "operationId": "ResourceTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "categoryIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Actions": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the actions for the given constituent or issue.",
                "operationId": "Actions_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "issueId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IssueAction"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create an issue action for a Constituent",
                "operationId": "Actions_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "issueAction",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IssueAction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IssueAction"
                        }
                    }
                }
            }
        },
        "/CRM/Actions/{issueActionId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an issue action.",
                "operationId": "Actions_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "issueActionId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IssueAction"
                        }
                    }
                }
            }
        },
        "/Reporting/ReportRequests/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a report request.",
                "operationId": "ReportRequests_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportRequest"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update the details of a report request.",
                "operationId": "ReportRequests_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "reportRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportRequest"
                        }
                    }
                }
            }
        },
        "/Reporting/ReportRequests": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all requests, optionally filtered by active requests only.",
                "operationId": "ReportRequests_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportRequest"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Creates the report request.",
                "operationId": "ReportRequests_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "reportRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportRequest"
                        }
                    }
                }
            }
        },
        "/Reporting/ReportRequests/Queued": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a list of all the requests queued to be run as of the current date/time.",
                "operationId": "ReportRequests_GetQueued",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportRequest"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/EmarketIndicators": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all emarket indicators. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "EmarketIndicators_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EmarketIndicator"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new emarket indicator.",
                "operationId": "EmarketIndicators_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmarketIndicator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmarketIndicator"
                        }
                    }
                }
            }
        },
        "/ReferenceData/EmarketIndicators/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all emarket indicators.",
                "operationId": "EmarketIndicators_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EmarketIndicatorSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PriceTemplates": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all price templates. Optionally filtered by zoneMap and/or facility.",
                "operationId": "PriceTemplates_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "zoneMapId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "facilityId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTemplate"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new price template.",
                "operationId": "PriceTemplates_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "priceTemplate",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PriceTemplate"
                        }
                    }
                }
            }
        },
        "/TXN/PriceTemplates/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all price templates. Optionally filtered by zoneMap and/or facility.",
                "operationId": "PriceTemplates_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "zoneMapId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "facilityId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceTemplateSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Research": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the research for the specified constituent id and all its visible affiliation's researches as well. To exclude researches of the visible affiliations pass includeAffiliations=false.",
                "operationId": "Research_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResearchEntry"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a research entry for a constituent.",
                "operationId": "Research_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "researchEntry",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResearchEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResearchEntry"
                        }
                    }
                }
            }
        },
        "/Finance/Documents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the documents for a particular resource including file contents.  Only documents associated with steps may be returned at this time.",
                "operationId": "Documents_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "stepId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Document"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Documents/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all the documents for the step.  Only a summary of file information is returned.",
                "operationId": "Documents_GetAllSummary",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "stepId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Documents/Settings": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get configuration settings for uploading documents.",
                "operationId": "Documents_Settings",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DocumentSettings"
                        }
                    }
                }
            }
        },
        "/CRM/Interests": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the interests of the specified constituent id. To exclude attributes of the visible affiliations pass includeAffiliations=false. To filter the interests of specific categories pass comma separted values under categories.",
                "operationId": "Interests_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "categoryIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Interest"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new interest associating an interest type to a constituent.\r\nFor bulk interest edits, consider the CRM/Interests/CreateOrUpdate batching resource which allows multiple interests to be created, updated, or removed in a single request.",
                "operationId": "Interests_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "interest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Interest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Interest"
                        }
                    }
                }
            }
        },
        "/CRM/Affiliations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the affiliation of the specified individual constituent id or get all the affiliations of the specified group constituent id. If both individual constituent id and group constituent id are specified get all the affiliations between them. To filter the affiliations that are active within certain date then pass values for start date and end date.To fetch primary affiliations alone pass primaryOnly=true. To limit the associations returned to those that are primary or that are marked as showWithGroup, pass showWithGroup=true.",
                "operationId": "Affiliations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "individualConstituentId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "groupConstituentId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startActiveDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endActiveDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "primaryOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "showWithGroup",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Affiliation"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new affiliation.",
                "operationId": "Affiliations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "affiliation",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Affiliation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Affiliation"
                        }
                    }
                }
            }
        },
        "/Finance/Appeals/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all Appeals.",
                "operationId": "Appeals_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AppealSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Appeals/{appealId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of an Appeal.",
                "operationId": "Appeals_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "appealId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Appeal"
                        }
                    }
                }
            }
        },
        "/Security/ReferenceTables": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the reference table/user group mappings valid for the context usergroup.",
                "operationId": "SecurityReferenceTables_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReferenceTableUserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPointCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contact point categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ContactPointCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPointCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contact point category.",
                "operationId": "ContactPointCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPointCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all contact point categories.",
                "operationId": "ContactPointCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPointCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/CampaignDesignations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Designations associated to a Campaign.",
                "operationId": "CampaignDesignations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CampaignDesignation"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new association between a Designation and a Campaign.",
                "operationId": "CampaignDesignations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "campaignDesignation",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignDesignation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CampaignDesignation"
                        }
                    }
                }
            }
        },
        "/Security/UserPreferences/{key}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a specific user preference by key.",
                "operationId": "UserPreferences_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserPreference"
                        }
                    }
                }
            }
        },
        "/Security/UserPreferences": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all user preferences valid for the context username and user group.",
                "operationId": "UserPreferences_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "keys",
                        "in": "query",
                        "description": "A comma separated list.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserPreference"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new user preference.",
                "operationId": "UserPreferences_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userPreference",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPreference"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserPreference"
                        }
                    }
                }
            }
        },
        "/TXN/HoldCodeUserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all hold code/user group mappings.  Optional filter for a UserGroup or HoldCode.",
                "operationId": "HoldCodeUserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userGroup",
                        "in": "query",
                        "description": "Only return mappings for the specified UserGroup.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "holdCode",
                        "in": "query",
                        "description": "Only return mappings for the specified HoldCode.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HoldCodeUserGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new hold code/user group mapping.",
                "operationId": "HoldCodeUserGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "holdCodeUserGroup",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HoldCodeUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCodeUserGroup"
                        }
                    }
                }
            }
        },
        "/TXN/HoldCodeUserGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all hold code/user group mappings.  Optional filter for a UserGroup or HoldCode.",
                "operationId": "HoldCodeUserGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userGroup",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "holdCode",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HoldCodeUserGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/HoldCodeUserGroups/Summary/{holdCodeUserGroupId}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary representation of a hold code/user group mapping by id.",
                "operationId": "HoldCodeUserGroups_GetSummary",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "holdCodeUserGroupId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HoldCodeUserGroupSummary"
                        }
                    }
                }
            }
        },
        "/CRM/Philanthropy": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the philanthropyEntries for the specified constituent id and all its visible affiliation's philanthropyEntries as well. To exclude philanthropyEntries of the visible affiliations pass includeAffiliations=false.",
                "operationId": "Philanthropy_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PhilanthropyEntry"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create an philanthropyEntry for a constituent.",
                "operationId": "Philanthropy_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "philanthropyEntry",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyEntry"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PaymentTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all payment types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PaymentTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new payment type.",
                "operationId": "PaymentTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PaymentTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all payment types.",
                "operationId": "PaymentTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ControlGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all control groups. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ControlGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ControlGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new control group.",
                "operationId": "ControlGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ControlGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ControlGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ControlGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all control groups.",
                "operationId": "ControlGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ControlGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPointPurposes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all contact point purposes. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ContactPointPurposes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPointPurpose"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new contact point purpose.",
                "operationId": "ContactPointPurposes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurpose"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ContactPointPurpose"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ContactPointPurposes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all contact point purposes.",
                "operationId": "ContactPointPurposes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPointPurposeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ServiceResources": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all service resources. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ServiceResources_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ServiceResource"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ServiceResources/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all service resources.",
                "operationId": "ServiceResources_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ServiceResourceSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PhoneTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all phone types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PhoneTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PhoneType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new phone type.",
                "operationId": "PhoneTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhoneType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhoneType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PhoneTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all phone types.",
                "operationId": "PhoneTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PhoneTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePriceLayers/Count": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get count of performance price layers for a set of performances.",
                "operationId": "PerformancePriceLayers_GetCounts",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformancePriceLayerCount"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePriceLayers/PriceCount": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Gets the total count of price objects that will be collected when calling for the full price layer contract on these performanceIds.",
                "operationId": "PerformancePriceLayers_GetPriceCount",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceCount"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ResearchTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all research types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ResearchTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResearchType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new research type.",
                "operationId": "ResearchTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResearchType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResearchType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ResearchTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all research types.",
                "operationId": "ResearchTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResearchTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Relationships": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all affiliations and associations of the specified constituent id or get all affiliations and associations of the specified associated constituent id. If both are specified get all the associations and affiliations between them.",
                "operationId": "Relationships_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "associatedConstituentId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startActiveDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endActiveDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "activeOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Relationship"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Composers": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all composers. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Composers_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Composer"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new composer.",
                "operationId": "Composers_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Composer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Composer"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Composers/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all composers.",
                "operationId": "Composers_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ComposerSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PledgeBilling/{id}/Status": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get status of a pledge billing run. Job is finished processing when IsCompleted is true.  Only billing runs using automated billing will be running after the response from a POST to Txn/PledgeBilling.",
                "operationId": "PledgeBilling_GetStatus",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AutomatedBillingStatus"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PortfolioCustomElements": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all portfolio custom elements. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PortfolioCustomElements_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PortfolioCustomElement"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new portfolio custom element.",
                "operationId": "PortfolioCustomElements_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PortfolioCustomElement"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PortfolioCustomElement"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PortfolioCustomElements/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all portfolio custom elements.",
                "operationId": "PortfolioCustomElements_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PortfolioCustomElementSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Aliases": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the aliases for the specified constituent id and all its visible affiliation's aliases as well. To exclude aliases of the visible affiliations pass includeAffiliations=false.",
                "operationId": "Aliases_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alias"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new alias.",
                "operationId": "Aliases_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "alias",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alias"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Alias"
                        }
                    }
                }
            }
        },
        "/TXN/Orders/{orderId}/ProductsView": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an existing Order as the contract OrderProductsView, which mirrors the structure of the Cart response entity from GET Web/{sessionKey}/Cart. This resource can be used to fetch any saved order in this view. Order HTML templates use this response contract (OrdersProductsView) as the model within the template. Orders actively in a session/cart will not be available here until after checkout.",
                "operationId": "Orders_GetProductsView",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrderProductView"
                        }
                    }
                }
            }
        },
        "/CRM/Rankings": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the rankings for the specified constituent id and all its visible affiliation's rankings as well. To exclude rankings of the visible affiliations pass includeAffiliations=false. To Get The primary rankings alone, pass primaryOnly=true.",
                "operationId": "Rankings_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Ranking"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new ranking.",
                "operationId": "Rankings_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "ranking",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Ranking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Ranking"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PlanTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all plan types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PlanTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PlanType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new plan type.",
                "operationId": "PlanTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PlanTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all plan types.",
                "operationId": "PlanTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PlanTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/MediaTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all media types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "MediaTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MediaType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new media type.",
                "operationId": "MediaTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MediaType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MediaType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/MediaTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all media types.",
                "operationId": "MediaTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MediaTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/EventsManagement/ResourceSchedules": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a list of resource schedules for resources or workers. One of 'resourceIds' or 'constituentIds' parameters must be provided.",
                "operationId": "ResourceSchedules_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceIds",
                        "in": "query",
                        "description": "A comma separated list of resource ids.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentIds",
                        "in": "query",
                        "description": "A comma separated list of constituent ids.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "typeIds",
                        "in": "query",
                        "description": "A comma separated list of type ids (from TR_SCHEDULE_TYPE). If not provided all types would be returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceSchedule"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a Busy or Available resource schedule.  Booking Assignment Schedules must be created in a booking.",
                "operationId": "ResourceSchedules_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceSchedule",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceSchedule"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentProtectionTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all constituent protection types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ConstituentProtectionTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentProtectionType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new constituent protection type.",
                "operationId": "ConstituentProtectionTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentProtectionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentProtectionType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentProtectionTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all constituent protection types.",
                "operationId": "ConstituentProtectionTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentProtectionTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Merchants": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Retrieve Merchant List",
                "operationId": "Merchants_GetMerchants",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Merchant"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PhilanthropyTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all philosophy types. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PhilanthropyTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PhilanthropyType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new philosophy type.",
                "operationId": "PhilanthropyTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PhilanthropyType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PhilanthropyTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all philosophy types.",
                "operationId": "PhilanthropyTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PhilanthropyTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Salutations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the salutations for the specified constituent id and all its visible affiliation's salutations as well. To exclude salutations of the visible affiliations pass includeAffiliations=false.To fetch default salutations alone pass defaultOnly=true.",
                "operationId": "Salutations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "defaultOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeFromAffiliations",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Salutation"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new salutation.",
                "operationId": "Salutations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "salutation",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Salutation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Salutation"
                        }
                    }
                }
            }
        },
        "/CRM/Salutations/Generate": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Generates values for the fields required for the salutation, last name and sort name using the values passed as query parameters. If you pass in value for 'constituentId' there is no need to pass values for any other parameters. Even if it is passed they are ignored. If value for constituentId is not passed, values for other parameters should be passed. In this case values for either 'constituentTypeId' or 'formulaId' should be passed.",
                "operationId": "Salutations_Generate",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Id of constituent. Not required if constituentTypeId or formulaId is provided.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "constituentTypeId",
                        "in": "query",
                        "description": "Id from ReferenceData/ConstituentTypes (TR_CUST_TYPE).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "formulaId",
                        "in": "query",
                        "description": "Id of format for salutation from ReferenceData/SalutationFormats (TR_SALUTATION_FORMAT)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maxLength",
                        "in": "query",
                        "description": "Maximum length of generated salutation fields.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fname1",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "mname1",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "lname1",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "prefix1",
                        "in": "query",
                        "description": "Optional id value from ReferenceData/Prefixes (TR_PREFIX).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "suffix1",
                        "in": "query",
                        "description": "Optional id value from ReferenceData/Suffixes (TR_SUFFIX).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status1",
                        "in": "query",
                        "description": "Optional id value from ReferenceData/NameStatuses (TR_NAME_STATUS).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "gender1",
                        "in": "query",
                        "description": "Optional id value from ReferenceData/Genders (TR_GENDER).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fname2",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "mname2",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "lname2",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "prefix2",
                        "in": "query",
                        "description": "Optional id value from ReferenceData/Prefixes (TR_PREFIX).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "suffix2",
                        "in": "query",
                        "description": "Optional id value from ReferenceData/Suffixes (TR_SUFFIX).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status2",
                        "in": "query",
                        "description": "Optional id value from ReferenceData/NameStatuses (TR_NAME_STATUS).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "gender2",
                        "in": "query",
                        "description": "Optional id value from ReferenceData/Genders (TR_GENDER).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "lnameGroup",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalutationResponse"
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidStatuses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all gift aid statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "GiftAidStatuses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidStatus"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new gift aid status.",
                "operationId": "GiftAidStatuses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftAidStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftAidStatus"
                        }
                    }
                }
            }
        },
        "/ReferenceData/GiftAidStatuses/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all gift aid statuses.",
                "operationId": "GiftAidStatuses_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftAidStatusSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Assets": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the assets for the specified constituent id and all its visible affiliations' assets as well. To exclude assets of the visible affiliations pass includeAffiliations=false.",
                "operationId": "Assets_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Asset"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create an asset for a constituent.",
                "operationId": "Assets_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "asset",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    }
                }
            }
        },
        "/Security/ApplicationObjects": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all application objects valid for the context usergroup.",
                "operationId": "ApplicationObjects_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ApplicationObject"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReceiptSettings": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all Receipt Settings. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "ReceiptSettings_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReceiptSetting"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Receipt Setting.",
                "operationId": "ReceiptSettings_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "The resource to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReceiptSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReceiptSetting"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReceiptSettings/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all Receipt Settings.",
                "operationId": "ReceiptSettings_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReceiptSettingSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/KeywordCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all keyword categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "KeywordCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/KeywordCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new keyword category.",
                "operationId": "KeywordCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeywordCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/KeywordCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/KeywordCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all keyword categories.",
                "operationId": "KeywordCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/KeywordCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/Finance/Plans": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the plans for the specified constituent, campaign, worker or fund.",
                "operationId": "Plans_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Constituent Id",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "campaignId",
                        "in": "query",
                        "description": "Campaign of the Plan(s).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fundId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "onlyNullFund",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contributionDesignationId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "workerId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAssociates",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "listId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Plan"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new plan.",
                "operationId": "Plans_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "plan",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Plan"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Plan"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PerformanceStatuses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all performance statuses. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PerformanceStatuses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceStatus"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new performance status.",
                "operationId": "PerformanceStatuses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceStatus"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PerformanceStatuses/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all performance statuses.",
                "operationId": "PerformanceStatuses_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceStatusSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/AppScreenTexts": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all App Screen Texts. To get them in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "AppScreenTexts_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AppScreenText"
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Create or update a new App Screen Text.",
                "operationId": "AppScreenTexts_CreateOrUpdate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "appScreenText",
                        "in": "body",
                        "description": "The new resource to be updated/created.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AppScreenText"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppScreenText"
                        }
                    }
                }
            }
        },
        "/ReferenceData/AppScreenTexts/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all App Screen Texts.",
                "operationId": "AppScreenTexts_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AppScreenTextSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/AppScreenTexts/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of an App Screen Text by id. To get the resource in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "AppScreenTexts_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppScreenText"
                        }
                    }
                }
            }
        },
        "/TXN/ModesOfSale": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all modes of sale.",
                "operationId": "ModesOfSale_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModeOfSale"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new mode of sale.",
                "operationId": "ModesOfSale_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSale",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSale"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSale"
                        }
                    }
                }
            }
        },
        "/TXN/ModesOfSale/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all modes of sale.",
                "operationId": "ModesOfSale_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModeOfSaleSummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Zones": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all zones, optionally filtered by a set of zone maps.",
                "operationId": "Zones_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "zoneMapIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Zone"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new zone.",
                "operationId": "Zones_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    }
                }
            }
        },
        "/TXN/Zones/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary of all zones, optionally filtered by a set of zone maps.",
                "operationId": "Zones_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "zoneMapIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ZoneSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Formats": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all formats. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Formats_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Format"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Formats/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all formats.",
                "operationId": "Formats_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FormatSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/Formats/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a format by id.",
                "operationId": "Formats_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Format"
                        }
                    }
                }
            }
        },
        "/TXN/PricingRuleSets": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all pricing rule sets.",
                "operationId": "PricingRuleSets_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRuleSet"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new pricing rule set.",
                "operationId": "PricingRuleSets_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "pricingRuleSet",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PricingRuleSet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PricingRuleSet"
                        }
                    }
                }
            }
        },
        "/TXN/PricingRuleSets/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary of all pricing rule sets.",
                "operationId": "PricingRuleSets_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PricingRuleSetSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SystemDefaults": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all system defaults. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "SystemDefaults_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SystemDefault"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SystemDefaults/Defaults": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get default summaries for specified keys, delimited by comma (\"?keys=COMPANY_NAME,REQUIRE_ADDRESS\").  This resource resolves organizational and global defaults to ensure that only one is returned per key (field name).  No default will be returned if one does not exist.",
                "operationId": "SystemDefaults_GetDefault",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "keys",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SystemDefaultSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SystemDefaults/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all system defaults.",
                "operationId": "SystemDefaults_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SystemDefaultSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/BusinessUnits": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all business units. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "BusinessUnits_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BusinessUnit"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new business unit.",
                "operationId": "BusinessUnits_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BusinessUnit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BusinessUnit"
                        }
                    }
                }
            }
        },
        "/ReferenceData/BusinessUnits/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all business units.",
                "operationId": "BusinessUnits_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BusinessUnitSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/DocumentCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all documentCategories. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "DocumentCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new documentCategory.",
                "operationId": "DocumentCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DocumentCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DocumentCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/DocumentCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all documentCategories.",
                "operationId": "DocumentCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/AnalyticsReports": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all SSRS Reports for display in Analytics.",
                "operationId": "AnalyticsReports_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AnalyticsReport"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create SSRS Reports for display in Analytics.",
                "operationId": "AnalyticsReports_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "analyticsReport",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AnalyticsReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AnalyticsReport"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Integrations": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all action types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Integrations_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Integration"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new action type.",
                "operationId": "Integrations_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Integration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Integration"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Integrations/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all action types.",
                "operationId": "Integrations_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IntegrationSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/InterestTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all interest types. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "InterestTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InterestType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new interest type.",
                "operationId": "InterestTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InterestType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InterestType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/InterestTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all interest types.",
                "operationId": "InterestTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InterestTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/SeatCodes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all seat codes. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "SeatCodes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeatCode"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new seat code.",
                "operationId": "SeatCodes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SeatCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SeatCode"
                        }
                    }
                }
            }
        },
        "/ReferenceData/SeatCodes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all seat codes.",
                "operationId": "SeatCodes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeatCodeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Notifications": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Retrieve notification events from Tessitura Merchant Services for a given merchant (PSP) reference.",
                "operationId": "PaymentGatewayNotifications_GetNotification",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "merchantReference",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TessituraPaymentsNotification"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Notifications/Events": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all notification events by reference.",
                "operationId": "PaymentGatewayNotifications_GetAllNotificationEvents",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "reference",
                        "in": "query",
                        "description": "Reference for the notification event. For Tessitura Merchant Services, this is the merchant reference.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "notificationType",
                        "in": "query",
                        "description": "Optional filter for the notification type.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NotificationEvent"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new notification event.",
                "operationId": "PaymentGatewayNotifications_CreateNotificationEvent",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "notificationEvent",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NotificationEvent"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Notifications/Check": {
            "get": {
                "tags": [
                    "GET"
                ],
                "operationId": "PaymentGatewayNotifications_Check",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "merchantReference",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sinceDateTime",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TessituraPaymentsNotification"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Attributes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the attributes for the specified constituent id and all its visible affiliation's attributes as well. To exclude attributes of the visible affiliations pass includeAffiliations=false.",
                "operationId": "Attributes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Attribute"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new attribute.",
                "operationId": "Attributes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "attribute",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Attribute"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Attribute"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Theaters": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all theaters. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Theaters_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Theater"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new theater.",
                "operationId": "Theaters_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Theater"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Theater"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Theaters/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all theaters.",
                "operationId": "Theaters_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TheaterSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Documents": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all the documents for a particular constituent including file contents.",
                "operationId": "ConstituentDocuments_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Document"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create document for a constituent.",
                "operationId": "ConstituentDocuments_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "document",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                }
            }
        },
        "/CRM/Documents/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get summary of all the documents for the constituent. Only a summary of file information is returned.",
                "operationId": "ConstituentDocuments_GetAllSummary",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DocumentSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PlanSources": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all plan sources. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PlanSources_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PlanSource"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new plan source.",
                "operationId": "PlanSources_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlanSource"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PlanSource"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PlanSources/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all plan sources.",
                "operationId": "PlanSources_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PlanSourceSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/OrderCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all order categories. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "OrderCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OrderCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new order category.",
                "operationId": "OrderCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrderCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrderCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/OrderCategories/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all order categories.",
                "operationId": "OrderCategories_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OrderCategorySummary"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Payment/Signatures": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all payment signatures.",
                "operationId": "PaymentSignatures_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentSignature"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new payment signature.",
                "operationId": "PaymentSignatures_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentSignature",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentSignature"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentSignature"
                        }
                    }
                }
            }
        },
        "/ReferenceData/UserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all User Groups. To get only the resources for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "UserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserGroup"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/UserGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all user groups.",
                "operationId": "UserGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/UserGroups/{id}": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get the details of a user group by id. To get the resource only if the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode (which ignores Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP).",
                "operationId": "UserGroups_Get",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the resource",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserGroup"
                        }
                    }
                }
            }
        },
        "/TXN/InventoryContactPermissionTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the Contact Permission Types associated to Production Seasons.  Inventory Contact Permission Type is a mapping of a Contact Permission Type to a Production Season.",
                "operationId": "InventoryContactPermissionTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "productionSeasonIds",
                        "in": "query",
                        "description": "Comma separated list of production season ids. Required.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InventoryContactPermissionType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create an inventoryContactPermissionType.",
                "operationId": "InventoryContactPermissionTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "inventoryContactPermissionType",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InventoryContactPermissionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InventoryContactPermissionType"
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePackageModeOfSales": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all performance package mode of sales. This entity shows the Mode of Sale assignment to either a package or a performance.\r\nFilter using at least one parameter.  All parameters work to filter the result set collectively, so passing packageIds and performanceIds in the same request will retrieve no rows.",
                "operationId": "PerformancePackageModeOfSales_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "asOfDateTime",
                        "in": "query",
                        "description": "A date/time to determine active mode of sale assignments.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "modeOfSaleId",
                        "in": "query",
                        "description": "A single mode of sale to filter results.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "packageIds",
                        "in": "query",
                        "description": "A comma separated list of package ids.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "A comma separated list of performance ids.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformancePackageModeOfSale"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new performance package mode of sale.",
                "operationId": "PerformancePackageModeOfSales_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performancePackageModeOfSale",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePackageModeOfSale"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePackageModeOfSale"
                        }
                    }
                }
            }
        },
        "/TXN/ModeOfSaleCategories": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all mode of sale categories.",
                "operationId": "ModeOfSaleCategories_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModeOfSaleCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new mode of sale category.",
                "operationId": "ModeOfSaleCategories_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "modeOfSaleCategory",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModeOfSaleCategory"
                        }
                    }
                }
            }
        },
        "/ReferenceData/BatchTypeGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all batch type groups. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "BatchTypeGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BatchTypeGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new batch type group.",
                "operationId": "BatchTypeGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BatchTypeGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BatchTypeGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/BatchTypeGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all batch type groups.",
                "operationId": "BatchTypeGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BatchTypeGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ActionTypes": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all action types. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ActionTypes_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActionType"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new action type.",
                "operationId": "ActionTypes_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ActionTypes/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all action types.",
                "operationId": "ActionTypes_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActionTypeSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all constituent groups. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "ConstituentGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new constituent group.",
                "operationId": "ConstituentGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ConstituentGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all constituent groups.",
                "operationId": "ConstituentGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConstituentGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/PaymentMethodGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all payment method groups. To get only the resoures for which the user has write/edit access, pass filter=\"writeonly\". To get the resources in maintenance mode(ignore Control Groups), pass maintenanceMode=\"true\". Maintenance mode requires users to have access to the reference tables. (Specified in TX_REFTABLE_USERGROUP). For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "PaymentMethodGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by user access (default: readwrite)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentMethodGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new payment method group.",
                "operationId": "PaymentMethodGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/PaymentMethodGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all payment method groups.",
                "operationId": "PaymentMethodGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentMethodGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Addresses": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the addresses for the specified constituent id and all its visible affiliation's addresses as well. To exclude addresses of the visible affiliations pass includeAffiliations=false. To get only the primary addresses, pass primaryOnly=true.",
                "operationId": "Addresses_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "primaryOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeFromAffiliations",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Address"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new address for a Constituent by sending an XML or JSON representation of an Address object using HTTP POST.",
                "operationId": "Addresses_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "address",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Address"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Address"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Premieres": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all premieres. For filtering on specific property value, pass the property name with value as query parameter. If the property is another non primitive object, pass PropertyName.Id and its value as query parameter.",
                "operationId": "Premieres_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "maintenanceMode",
                        "in": "query",
                        "description": "Ignore control grouping (default: false)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Premiere"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new premiere.",
                "operationId": "Premieres_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Premiere"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Premiere"
                        }
                    }
                }
            }
        },
        "/ReferenceData/Premieres/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all premieres.",
                "operationId": "Premieres_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PremiereSummary"
                            }
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReportUserGroups": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get all report/user group mappings.",
                "operationId": "ReportUserGroups_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportUserGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new report/user group mapping.",
                "operationId": "ReportUserGroups_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReportUserGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportUserGroup"
                        }
                    }
                }
            }
        },
        "/ReferenceData/ReportUserGroups/Summary": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get a summary representation of all report/user group mappings.",
                "operationId": "ReportUserGroups_GetSummaries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReportUserGroupSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/Phones": {
            "get": {
                "tags": [
                    "GET"
                ],
                "summary": "Get details of all the phones for the specified constituent (constituentId) and all its visible affiliation's phones as well or address (addressId). To exclude phones of the visible affiliations pass includeAffiliations=false. If addressId is passed, constituentId or includeAffiliations parameters are ignored. To Get the phones attached to the primary address pass primary=true.",
                "operationId": "Phones_GetAll",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "query",
                        "description": "Limit results by constituent",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeAffiliations",
                        "in": "query",
                        "description": "Include all of the constituent's affiliates in the results (default: true)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "addressId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "primaryOnly",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Phone"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new phone.",
                "operationId": "Phones_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "phone",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Phone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Phone"
                        }
                    }
                }
            }
        },
        "/Diagnostics/Ping": {
            "head": {
                "tags": [
                    "HEAD"
                ],
                "summary": "Supports Http Head to enable ping check.",
                "operationId": "Diagnostics_Ping",
                "consumes": [],
                "produces": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/ElectronicAddresses/{electronicAddressId}/MoveTo/{constituentId}": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Change the ownership of the electronic address to a new constituent.",
                "operationId": "ElectronicAddresses_Move",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "electronicAddressId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ElectronicAddress"
                        }
                    }
                }
            }
        },
        "/TXN/EmailResponses": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Updates an appeal with customer data in response to an email event. EventName should be one of open, click, hard-bounce, soft-bounce or opt-out.",
                "operationId": "EmailResponses_UpdateAppeal",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmailPromotionUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Batch": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Post multiple requests with method type along with the payload (for the put and post) and get the responses for all the specified request in one call.",
                "operationId": "Batch_Post",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "requestMessage",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/Batch/Sample": {
            "post": {
                "tags": [
                    "POST"
                ],
                "operationId": "Batch_Sample",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BatchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BatchResponse"
                        }
                    }
                }
            }
        },
        "/TXN/ProductionSeasons/Search": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Search for production seasons\r\nReturns production seasons matching the specified search criteria.",
                "operationId": "ProductionSeasons_Search",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProductionSeasonSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductionSeasonSearchResponse"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/OrderBilling": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Order billing",
                "operationId": "OrderBilling_BillOrders",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderBillingRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrderBillingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AutomatedBillingRunResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/Detail": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new constituent with addresses, electronicAddresses, salutations and phones.",
                "operationId": "Constituents_CreateConstituent",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituent",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentDetail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentDetail"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/Search/ByCardNumber": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Search for constituents by card number.",
                "operationId": "Constituents_SearchByCardNumber",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "searchRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSearchResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/Snapshot/SwapA1A2": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Swaps A1/A2 names on a household account and regenerates its salutation.",
                "operationId": "Constituents_SwapConstituentA1A2",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSnapshot"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/Snapshot": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a constituent optionally with primary address, primary salutation, primary electronic address, primary &amp; general phones and affiliates information.",
                "operationId": "Constituents_CreateConstituentUsingSnapshot",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentSnapshot",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConstituentSnapshot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSnapshot"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/ConvertToIndividual": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Convert existing household to an individual.",
                "operationId": "Constituents_ConvertGroupToIndividual",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupToIndividualRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSnapshot"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/ConvertToOrganization": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Convert existing individual constituent to an organization.",
                "operationId": "Constituents_ConvertIndividualToOrganization",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IndividualToOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSnapshot"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/ConvertToHousehold": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Convert existing individual constituent to a household.",
                "operationId": "Constituents_ConvertIndividualToHousehold",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IndividualToHouseholdRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSnapshot"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/Purge/Schedule": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Schedule a constituent to be purged.  This only marks a constituent for purge, but does not actually purge the constituent.  If constituent has open transactions or an order for a future performance, a bad request will be returned indicating open transactions.  Pass IgnoreWarnings = true in request to bypass and schedule.",
                "operationId": "Constituents_SchedulePurge",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "The id of the constituent to be scheduled for purge.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "schedulePurgeRequest",
                        "in": "body",
                        "description": "Request the provides options to purge schedule request such as ignoring warnings, which return a bad request by default.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SchedulePurgeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSnapshot"
                        }
                    }
                }
            }
        },
        "/CRM/Constituents/{constituentId}/Purge/Unschedule": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Unschedule a constituent that has been previously set to be purged.  If a purge has been completed, an error will be returned.",
                "operationId": "Constituents_UnschedulePurge",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "&gt;The id of the constituent to be unscheduled from purging.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConstituentSnapshot"
                        }
                    }
                }
            }
        },
        "/EventsManagement/Bookings": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Booking",
                "operationId": "Bookings_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "booking",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    }
                }
            }
        },
        "/EventsManagement/Bookings/CreateFromTemplate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Booking using the details and Resource Type assignments from a Booking Template.",
                "operationId": "Bookings_CreateFromTemplate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BookingFromTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    }
                }
            }
        },
        "/TXN/Payments/ReserveIds": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Reserves a payment id generated per the request's required \"increment\" parameter. Increment number must be greater than 0.",
                "operationId": "Payments_ReserveIds",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentReserveIdRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentReserveIdResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Memberships/Calculate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "This returns a result of calculated changes to a constituent membership.  This resource makes no actual changes and only returns calculated membership data for information purposes.\r\nNOTE: As part of the upcoming changes to membership functionality, this resource will change significantly in an upcoming major Tessitura release and likely break code that references it. Please make a note that code that references it will need to be revisited as part of that upgrade process.",
                "operationId": "Memberships_Calculate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "calculateMembershipRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CalculateMembershipRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CalculateMembershipResponse"
                        }
                    }
                }
            }
        },
        "/Security/Authenticate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Authenticate the provided credentials",
                "operationId": "Authenticate_Authenticate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "authenticationRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/Security/Authenticate/Token/Validate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Validates an authentication token and returns the standard AuthenticationResponse",
                "operationId": "Authenticate_ValidateToken",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/Security/Authenticate/Token/Generate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Authenticate the provided credentials and return a timed token that can be used to proxy this result.",
                "operationId": "Authenticate_GenerateToken",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "authenticationRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationTokenResponse"
                        }
                    }
                }
            }
        },
        "/Security/Authenticate/Token/Generate/Windows": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Authenticate the provided credentials and return a timed token that can be used to proxy this result.",
                "operationId": "Authenticate_GenerateTokenWindows",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "authenticationRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WindowsAuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationTokenResponse"
                        }
                    }
                }
            }
        },
        "/TXN/InvoiceBilling": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Invoice billing",
                "operationId": "InvoiceBilling_BillInvoices",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "invoiceBillingRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InvoiceBillingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AutomatedBillingRunResponse"
                        }
                    }
                }
            }
        },
        "/TXN/SalesLayouts/Setup": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new sales layout setup.",
                "operationId": "SalesLayouts_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "salesLayout",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalesLayout"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SalesLayout"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Authorization/Authorize": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Authorize a payment using a manually keyed, swiped or encrypted card data, including payments made using the Tessitura Merchant Services Payment Component.",
                "operationId": "Authorization_Authorize",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthorizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthorizationResponse"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Authorization/{referenceNumber}/Confirm": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Confirm an authorization using its reference number. For all gateways, this results in a confirm transaction being written to T_PAYMENT_GATEWAY_ACTIVITY. For EPay gateway, the confirm endpoint also sends a capture transaction.",
                "operationId": "Authorization_Confirm",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "referenceNumber",
                        "in": "path",
                        "description": "Obtained from ReferenceNumber in the Authorization endpoint",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "confirmAuthorizationRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConfirmAuthorizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConfirmAuthorizationResponse"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Authorization/{referenceNumber}/Reverse": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Reverse a payment authorization using its reference number.",
                "operationId": "Authorization_Reverse",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "referenceNumber",
                        "in": "path",
                        "description": "Obtained from ReferenceNumber in the Authorization endpoint",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "reversalRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReversalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReversalResponse"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Authorization/Finalize": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Finalize an authorization.  For use with Tessitura Merchant Services only. Finalizes a payment authorization derived from the Authorize request.",
                "operationId": "Authorization_Finalize",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "finalizeRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FinalizeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthorizationResponse"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Authorization/Link": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "NOTE: THIS IS FOR TESSITURA USE ONLY. Custom implementations of this endpoint are not supported.\r\nCreate a payment link to a hosted payment form where shoppers can pay.  For Tessitura Merchant Services only.",
                "operationId": "Authorization_Link",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "payByLinkRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PayByLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PayByLinkResponse"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Authorization/Link/{paymentId}/Confirm": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "NOTE: THIS IS FOR TESSITURA USE ONLY. Custom implementations of this endpoint are not supported.\r\nCheck to see if a Pay by Link has been authorized.  For Tessitura Merchant Services only.",
                "operationId": "Authorization_ConfirmPayByLink",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "payByLinkAuthorizationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PayByLinkAuthorizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PayByLinkAuthorizationResponse"
                        }
                    }
                }
            }
        },
        "/TXN/Packages/Search": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Search for packages",
                "operationId": "Packages_Search",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PackageSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackageSearchResponse"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/ReportSchedules/CalculateNextRun": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Verify the next run for a schedule's recurrence pattern by passing the pattern.  Returns its calculated next run date/time.",
                "operationId": "ReportSchedules_CalculateNextRun",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "reportScheduleNextRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReportScheduleNextRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReportScheduleNextRun"
                        }
                    }
                }
            }
        },
        "/TXN/TemplatePriceTypes/Batch": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create or update a set of template price types.",
                "operationId": "TemplatePriceTypes_BatchCreate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templatePriceTypes",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplatePriceType"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplatePriceType"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Credentials": {
            "post": {
                "tags": [
                    "POST"
                ],
                "operationId": "PaymentGatewayCredentials_GetCredential",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayCredentialRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentGatewayCredential"
                        }
                    }
                }
            }
        },
        "/EventsManagement/BookingTemplates": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Booking Template",
                "operationId": "BookingTemplates_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bookingTemplate",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BookingTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingTemplate"
                        }
                    }
                }
            }
        },
        "/Security/Users/{userName}/Password": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Allows for changing of a user's password",
                "operationId": "Users_ChangePassword",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passwordChangeRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/TXN/Performances/Copy": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Copy existing performance to a new performance with options.",
                "operationId": "Performances_Copy",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "performanceCopyRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceCopyRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/Performances/Reschedule": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Reschedules an existing performance according to the provided options",
                "operationId": "Performances_Reschedule",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "performanceRescheduleRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceRescheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/Performances/{performanceId}/Seats/{seatId}/SingleHold": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Apply a single hold on a performance seat.",
                "operationId": "Performances_ApplySingleHold",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "The performance id.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "seatId",
                        "in": "path",
                        "description": "The seat id.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplySingleHoldRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApplySingleHoldResponse"
                        }
                    }
                }
            }
        },
        "/TXN/Performances/Search": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Search for performances, based on provided criteria.",
                "operationId": "Performances_Search",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceSearchResponse"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/BulkCopySets/{bulkCopySetId}/ReplaceExclusions": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Replaces bulk copy exclusions for a given set by deleting them and inserting the new collection.",
                "operationId": "BulkCopySets_ReplaceExclusions",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkCopySetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bulkDailyCopyExclusions",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BulkDailyCopyExclusion"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BulkDailyCopyExclusion"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/BulkCopySets/{bulkCopySetId}/CopyDay": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Copies the packages, performances groups and performances from a day defined in the bulk copy set to the day specified in the request.",
                "operationId": "BulkCopySets_CopyDay",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "bulkCopySetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bulkCopyDayRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkCopyDayRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/BulkCopySets/{bulkCopySetId}/CopyEvent": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Copies the performance specified in the bulk copy set to the date and time specified in the request.",
                "operationId": "BulkCopySets_CopyEvent",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "bulkCopySetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bulkCopyEventRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkCopyEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformanceSummary"
                        }
                    }
                }
            }
        },
        "/Web/Session": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Creates a new session and returns a unique session key.",
                "operationId": "Session_CreateSession",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SessionResponse"
                        }
                    }
                }
            }
        },
        "/Web/Session/BusinessFacing": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Creates a new business-facing session and returns a unique session key.\r\nA source number and mode of sale must be supplied. An optional valid batch id may be included.",
                "operationId": "Session_CreateBusinessFacingSession",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BusinessFacingSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SessionResponse"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Login": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Login a constituent using Username and Password.\r\nA constituent record must have an existing login in order for successful authentication.  \r\nA login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.\r\nThis method sets four session variables:\r\n- UID -- The constituent ID for the session\r\n- LoginType -- The login type used for the session\r\n- UserName -- The username for the session\r\n- Status -- The status of the login (P = permanent, T = temporary)\r\nA constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.",
                "operationId": "Session_Login",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/LoginAsGuest": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Login for guest checkout.\r\nAllows anonymous checkout under constituent 0, attaching the supplied email address to the cart.  The session will be marked as a guest login.\r\nIf the email address exists attached to a login of the specified login type, that login's constituent ID will be used on the cart.",
                "operationId": "Session_LoginAsGuest",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginAsGuestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Login/Email": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Login a constituent using Email and Password\r\nA constituent record must have an existing login in order for successful authentication.  \r\nA login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.\r\nThis method sets four session variables:\r\n- UID -- The constituent ID for the session\r\n- LoginType -- The login type used for the session\r\n- UserName -- The username for the session\r\n- Status -- The status of the login (P = permanent, T = temporary)\r\nA constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.",
                "operationId": "Session_LoginUsingEmail",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Login/ConstituentInfo": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Login a constituent using Constituent ID, Phone Number and Postal Code.  Email can also be passed for additional validation but is optional.\r\nA constituent record must have an existing login in order for successful authentication.  \r\nA login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.\r\nThis method sets four session variables:\r\n- UID -- The constituent ID for the session\r\n- LoginType -- The login type used for the session\r\n- UserName -- The username for the session\r\n- Status -- The status of the login (P = permanent, T = temporary)\r\nA constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.",
                "operationId": "Session_LoginUsingConstituentInfo",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginConstituentInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Login/Token": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Login a constituent using Login Token and Email\r\nA constituent record must have an existing login in order for successful authentication.  \r\nA login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.\r\nThis method sets four session variables:\r\n- UID -- The constituent ID for the session\r\n- LoginType -- The login type used for the session\r\n- UserName -- The username for the session\r\n- Status -- The status of the login (P = permanent, T = temporary)\r\nA constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.",
                "operationId": "Session_LoginUsingToken",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Login/External": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Login a constituent using External Authentication \r\nA constituent record must have an existing login in order for successful authentication.  \r\nA login type parameter is used to determine which login is evaluated for authentication when a constituent record has more than one.  This is generally used to differentiate each organization's logins in a consortium environment.\r\nThis method sets four session variables:\r\n- UID -- The constituent ID for the session\r\n- LoginType -- The login type used for the session\r\n- UserName -- The username for the session\r\n- Status -- The status of the login (P = permanent, T = temporary)\r\nA constituent can be locked out of logging in after a certain number of failed log in attempts.  The number of failed attempts before lockout and the length of lockout are set in the T_DEFAULTS table.  Should a constituent exceed the allowed number of failed log in attempts, the method returns data on the number of failed login attempts per login along with a timestamp of the time at which the user was locked out of the login process.",
                "operationId": "Session_LoginUsingExternal",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginExternalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Logout": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Logout a constituent\r\nSeats locked by the session are automatically released during logout. This behavior can be disabled by setting the DISCONNECT_ON_LOGOUT entry in T_DEFAULTS or the web.config file to False.",
                "operationId": "Session_Logout",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/WebLogins": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates the login information for a user and logs back into the session using new credentials.\r\n\r\nCurrent and new values must be submitted for login username, password, and email.  To retain any of the current values pass the same value for both the current and the new parameter.  After successfully updating the user account, the user is automatically logged in with the new login information.\r\n\r\nWhen updating a login where the password has been forgotten, submit the request with a null password.",
                "operationId": "Session_UpdateWebLogin",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebLoginUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Creates a webLogin for a user and logs back into the session using new credentials.",
                "operationId": "Session_CreateWebLogin",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sessionWebLogin",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionWebLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Login/SendCredentials": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Sends an email with a temporary login token to a specific email address and login type.\r\nThe service searches for the email address in logins of the specified type. If it is found, a password token will be generated and the login credentials template that is configured in T_FORMAT_INFO will be sent.",
                "operationId": "Session_SendLoginCredentials",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SendCredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SessionWebLogin"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Transfer": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": " Transfers the authentication for the specified session to another session. \r\nThis method is typically called after completing checkout, so the constituent is automatically transferred to a new session.  This avoids having to log in again. NOTE:  The new session must be generated using the /Web/Session (POST) method.\r\n You can choose to have the web API automatically disconnect the constituent's session from the Seat Server once transfer session has completed by setting the configuration value of DISCONNECT_SEAT_SERVER_SESSION_WHEN_TRANSFERING_SESSION to True in the Web API config file.",
                "operationId": "Session_TransferSession",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TransferSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/PromoCode": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Returns promotion information for a session by number or description\r\nA primary use of this method is to translate promo codes (text) into source codes (integers). This method also returns the 6 fields of text that can be recorded for each web source, which can be used to display specific messaging when a promo code is entered by a constituent.",
                "operationId": "Session_GetPromoCode",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebPromoCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebPromoCode"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/LoadOrder/{orderId}": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Load an existing order into the cart and return the cart details\r\n\r\nOnce an order is loaded, changes can be made to the order. When loaded, the session mode of sale changes to the mode of sale of the loaded order. The method raises an exception if called with existing items in the cart.\r\nThis method loads all products and payments. Generally, these reloaded products and payments cannot be manipulated by the API. New products and payments can be added, then saved with Checkout.\r\nLocked orders cannot be loaded by this method. If the method is called for a locked order, a determination of whether or not the order is locked by an abandoned web session will be made based on the last access time of the session and the Order Lock Timeout value specified in T_DEFAULTS.  (Order Lock Timeout is the number of minutes after which to consider an idle session abandoned.)  If the session is determined to be abandoned, the order will be unlocked and loaded.\r\nNOTE:  All orders loaded by this procedure get a mir_lock value of -1.",
                "operationId": "Session_LoadOrder",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Must be a valid order Id owned by the currently session constituent.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Cart"
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Reprint": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "This method causes a Print at Home reprint request to be written for the specified order.\r\nNote that the order will only be reprinted by the Tessitura Print at Home Ticketing service if the service is configured to recognize the delivery method used by the order.\r\nThe mode of sale for the order must also be set in the TR_PAHT_CONFIGURATION table to allow TPAHT reprints.\r\nSee the Tessitura Print at Home Ticketing Service document for more details.",
                "operationId": "Session_Reprint",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReprintRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Tickets/Return": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Return a ticket by ticket number.\r\nThis method is used to return tickets (generally for exchanges).  The method can also be used to donate a ticket for resale.\r\nReturning a ticket will generate a credit on the ticket order.The credit must be applied to another line item(performance, package, etc.), fee, contribution, or on account payment method.\r\nDonating a ticket uses the standard Tessitura Donate for Resale function, which releases the seat without generating a credit.",
                "operationId": "Cart_ReturnTicket",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReturnTicketWithNumberRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Tickets/ReturnWithSeat": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Return a ticket by seat number.\r\nThis method is used to return tickets (generally for exchanges).  The method can also be used to donate a ticket for resale.\r\nReturning a ticket will generate a credit on the ticket order.The credit must be applied to another line item(performance, package, etc.), fee, contribution, or on account payment method.\r\nDonating a ticket uses the standard Tessitura Donate for Resale function, which releases the seat without generating a credit.",
                "operationId": "Cart_ReturnTicketWithSeat",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReturnTicketWithSeatRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Tickets": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Reserves tickets in cart\r\nAdds a seated or unseated performance line item to the cart and reserves seats using either the best seat function or reserves specific seats.\r\nThis method will allow the reservation of held seats.To enable this functionality, add the key ''Reserve Held Seats' to T_DEFAULTS with a value of 'Yes' under the \"Tessitura Web\" parent table (or organization name if operating in a consortium environment).",
                "operationId": "Cart_ReserveTickets",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReserveTicketsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReserveTicketsResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/Tickets": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Reserves tickets in cart for an existing line item\r\nPerformanceId specified must be valid for the line item",
                "operationId": "Cart_ReserveTicketsForLineItem",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReserveTicketsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ReserveTicketsResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Contributions": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Adds a contribution to the cart\r\nThe donation must be applied directly to a fund.  This method also allows a specific membership level ID to be specified.",
                "operationId": "Cart_AddContribution",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddContributionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddContributionResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Packages/Super": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Adds a new sub package item to the cart\r\nThis method is used to add a seated or unseated super package line item to the cart for the specified session by adding the component sub packages.  When the package is seated, the best seating function can be used or specific seat numbers can be passed for use with SYOS functionality.  The method must be called once for each sub package.\r\nA super package line item is created when the first sub package is added to the cart.The ID number from the super package line item is required when the remaining component sub packages are added.It is returned as SuperPackageLineItemId in the response.\r\nSuper package line items can be added as alternate/upgrade line items to another super package line item in the cart.  To add an alternate/upgrade line item, the parent line item ID must be passed as the ParentSuperPackageLineItemId parameter value for this method.The parent line item ID can be retrieved using the /Web/Cart (GET) method.",
                "operationId": "Cart_AddSubPackageItem",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddSubPackageItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddSubPackageItemResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Packages/Nfs": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Adds a new nfs package item to the cart\r\nThis method adds a seated or unseated non fixed seat (NFS) or flex package to the cart by adding the component performances.  When the package is seated, the best seating function can be used or specific seat numbers can be passed for use with SYOS functionality.  \r\nA NFS or flex package line item is created when the first component performance is added to the cart.The ID number from the package line item is required when the remaining component performances are added.  It is returned as NFSPackageLineItemId in the method's response.\r\n/Web/Cart/Validation can be called at any time, setting the ValidateNFSPackages boolean to true, to determine whether all of the rules for the package have been met with items in the shopping cart.\r\nThis method will allow the reservation of held seats.  To enable this functionality, add the key ''Reserve Held Seats' to T_DEFAULTS with a value of 'Yes' under the \"Tessitura Web\" parent table (or organization name if operating in a consortium environment).",
                "operationId": "Cart_AddNFSPackagePerformanceItem",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddNFSPackagePerformanceItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddNFSPackagePerformanceItemResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Packages/Fixed": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Adds a new fixed seat package item to the cart\r\nAdds a seated or unseated fixed seat package line item to the cart and reserves seats using either the best seat function or reserves specific seats.\r\nPackageId line items can be added as alternate/upgrade line items to another line item in the cart.  To add an alternate/upgrade line item, the parent line item ID must be retrieved using /Web/Cart (GET) and then passed as the ParentPackageLineItemId parameter value for this method.\r\nThis method will allow the reservation of held seats.To enable this functionality, add the key ''Reserve Held Seats' to T_DEFAULTS with a value of 'Yes' under the \"Tessitura Web\" parent table (or organization name if operating in a consortium environment).",
                "operationId": "Cart_AddPackageItem",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddPackageItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddPackageItemResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Fees": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Adds or Updates a fee\r\nOnly user-defined fees can be added.  Seat-based fees can be overridden to zero only, while order-based or user-defined fees can be overridden to any amount, as allowed by the rules in fee setup.  To add and edit a user-defined fee call this method twice, once to add the fee, and once to override the amount.",
                "operationId": "Cart_AddUpdateFee",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddUpdateFeeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddUpdateFeeResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/CheckoutWithCard": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Processes checkout for the cart, using card swipe information for payment. Used by TRBO.\r\n When the method is run the status of the order is checked to ensure checkout has not started. The procedure will set the status in T_WEB_CHECKOUT to one of the following values: (S)ave in progress, (C)ompleted save, (E)rror when saving.\r\nThe response includes a status and message details about the status.Possible status results are: SaveInProgress, SaveComplete, Error.\r\nIn order to facilitate the use of the interceptor capability, the checkout method now makes a POST call to Txn / Orders.By default this call does nothing unless a developer has added interceptor plug -in code to the exposure.",
                "operationId": "Cart_CheckoutWithCard",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CheckoutWithCardRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CheckoutResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Checkout": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Validates, processes payment for, and saves an order for a specified session.  \r\nPayment information can be provided as follows:\r\n-\tThe full card details can be provided in the request\r\n-\tThe request includes parameters for use with the 3D Secure protocol used by credit card verification services such as Verified by Visa and MasterCard SecureCode.\r\n-\tThe method also allows the credit card authorization process to be skipped, which allows the use of third party authorizations.  \r\n-\tThe AccountID property in the request can be used in place of specifying credit card information.  When a valid id value from CRM/Accounts is provided and the stored card data belongs to either the session owner or the session initiator, then that card data is passed through for authorization.If the account is invalid or does not belong to the session owner or initiator, then an error is returned.\r\n-\tAdditionally, this method has two additional Address Verification parameters, allowing a calling application to optionally specify the street address and zip code that represents the billing address for the credit card.\r\n\r\nWhen the method is run the status of the order is checked to ensure checkout has not started. The procedure will set the status in T_WEB_CHECKOUT to one of the following values: (S)ave in progress, (C)ompleted save, (E)rror when saving.\r\nThe response includes a status and message details about the status.Possible status results are: SaveInProgress, SaveComplete, Error.\r\nIn order to facilitate the use of the interceptor capability, the checkout method now makes a POST call to Txn / Orders.By default this call does nothing unless a developer has added interceptor plug -in code to the exposure.",
                "operationId": "Cart_Checkout",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CheckoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CheckoutResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Price": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Price the current web cart associated with the specified sessionKey.",
                "operationId": "Cart_Price",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Print/TicketElements": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Prints tickets for specified order, lineitems, or sublineitems and returns all ticket elements.\r\nThe method returns ticket data for unprinted fully-paid orders or reprints printed tickets specified via order number, one or more line item numbers, or one or more sub line item numbers.  In the case of partially-paid orders, only line items or sub line items which have been fully-paid will be eligible for printing. Only tickets belonging to the customer associated via the current web session can be returned. Ticket information can be returned in the default design specified for the ticket price type, or you may specify a ticket design to utilize via the request parameters. After the ticket data has been returned via the API, seats will be flagged as Ticketed in Tessitura.\r\nWhen reprinting tickets, one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number.",
                "operationId": "Cart_PrintTicketElements",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PrintOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TicketElement"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Print/PrintStrings": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Prints tickets for specified order, lineitems, or sublineitems and returns a collection of formatted strings based on printer type.\r\nThe returned strings can then be sent to the appropriate printer. NOTE:  Currently only Zebra printer types are supported by this method. (PrinterType = \"Z\")\r\nThe method returns tickets for unprinted fully-paid orders or reprints printed tickets specified via order number, one or more line item numbers, or one or more sub line item numbers.  In the case of partially-paid orders, only line items or sub line items which have been fully-paid will be eligible for printing. Only tickets belonging to the customer associated via the current web session can be returned. Ticket information can be returned in the default design specified for the ticket price type, or you may specify a ticket design to utilize via the request parameters. After the tickets have been returned via the API, seats will be flagged as Ticketed in Tessitura.\r\nWhen reprinting tickets, one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number.",
                "operationId": "Cart_PrintPrintStrings",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PrintOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PrintOrderResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Print/Email": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Prints tickets for specified order, lineitems, or sublineitems and returns a formatted html body and attachments\r\nThe method returns tickets for unprinted fully-paid orders or reprints printed tickets specified via order number, one or more line item numbers, or one or more sub line item numbers.  In the case of partially-paid orders, only line items or sub line items which have been fully-paid will be eligible for printing. Only tickets belonging to the customer associated via the current web session can be returned. Ticket information can be returned in the default design specified for the ticket price type, or you may specify a ticket design to utilize via the request parameters. After the tickets have been returned via the API, seats will be flagged as Ticketed in Tessitura.\r\nWhen reprinting tickets, one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number.\r\nIf PrinterType = \"B\", ticket designs with images are not supported",
                "operationId": "Cart_PrintEmail",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "receiptSettingsId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PrintOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EmailTicketsResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Validate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Validates various aspects of the cart\r\nPayment Plans, Fixed Seat Packages, Non-Fixed Seat (flex) packages and Super Packages can be validated by setting the appropriate boolean in the request.",
                "operationId": "Cart_Validate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CartValidationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CartValidationResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/Plan/NumberOfPayments": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Sets a payment plan on the cart using a start date, end date and a specific number of payments to be spread across the date range.\r\nThe due date for the first payment is set to the entered beginning date, and the due date for subsequent payments is calculated by adding an equal number of days to each previous payment, based on the amount of time between the beginning and ending dates.",
                "operationId": "Cart_AddPaymentPlan",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentPlanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentPlan"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/Plan/Schedule/Preview": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Returns the payment schedule that would be applied to the current cart for the selected billing schedule without applying it to the cart.\r\nThe number of payments, payment amounts, and payment due dates are calculated based on the selected billing schedule.  For details on setting up billing schedules see the TR_BILLING_SCHEDULE section of the System Tables document.",
                "operationId": "Cart_PreviewPaymentPlanBasedOnBillingSchedule",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentPlanSchedulePreviewRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentPlanPreview"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/Plan/Schedule": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Sets a payment plan on the cart using a start date, end date and a pre-defined billing schedule.\r\nThe number of payments, payment amounts, and payment due dates are calculated based on the selected billing schedule.  For details on setting up billing schedules see the TR_BILLING_SCHEDULE section of the System Tables document.",
                "operationId": "Cart_AddPaymentPlanBasedOnBillingSchedule",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentPlanScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentPlan"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/Plan/Installments": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Sets a payment plan on the cart using a start date, end date and a list of installments with amount and due date.\r\nThe total of the installment amounts must add up to the cart total. /Web/Cart/Validation can be used to validate that the payment plan is correct by passing True for ValidatePaymentPlan in that method.",
                "operationId": "Cart_AddPaymentPlanInstallments",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentPlanInstallmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentPlan"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/Other": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Applies an other payment to the cart",
                "operationId": "Cart_ApplyOtherPayment",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplyOtherPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApplyPaymentResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/Invoice": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Applies an invoice payment to the cart\r\nCheckout will not be allowed for a general public order if an Invoice payment is applied",
                "operationId": "Cart_ApplyInvoicePayment",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplyInvoicePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApplyPaymentResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/Cash": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Applies a cash payment to the cart",
                "operationId": "Cart_ApplyCashPayment",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplyCashPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApplyPaymentResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/Check": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Applies a check payment to the cart",
                "operationId": "Cart_ApplyCheckPayment",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplyCheckPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApplyPaymentResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/OnAccount": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Applies an On Account payment to the cart.\r\nNot valid for a general public cart.",
                "operationId": "Cart_ApplyOnAccountPayment",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplyOnAccountPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApplyPaymentResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/OnAccount": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Adds an On Account balance to the cart\r\nCheckout will not be allowed for a general public order if On Account balance is added.",
                "operationId": "Cart_AddOnAccount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddOnAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AddOnAccountResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/EMV/Authorize": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Authorize payment using a card reader in a web based transaction.",
                "operationId": "Cart_Authorize",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebEmvAuthorizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WebEmvAuthorizationResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/GiftCertificates": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Adds a gift certificate for the specified amount to the cart\r\nThe resulting gift certificate number can be found with /Web/Cart (GET).",
                "operationId": "Cart_AddGiftCertificate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddGiftCertificateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CartProductResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/Payments/GiftCertificate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Applies a gift certificate as payment for a cart",
                "operationId": "Cart_ApplyGiftCertificate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplyGiftCertificatePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApplyPaymentResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/ValidateLimits": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Validates ticket limits\r\nOffer Limits are evaluated for the specified price type and seat count using the cart source code.  Requires either a performance ID or a package ID.\r\nTo enable ticket limit validation, add the Field Name \"ENFORCE_SEAT_LIMIT_FOR_ORDERS\" under the \"Impresario\" parent table with a value of \"Yes.\" This setting applies to both the Web API and the Tessitura Client Application.",
                "operationId": "Cart_ValidateLimits",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ValidateLimitsRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Finance/BatchMaintenance": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new Batch",
                "operationId": "BatchMaintenance_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "batch",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Batch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Batch"
                        }
                    }
                }
            }
        },
        "/Security/CoreIdentity/Sign": {
            "post": {
                "tags": [
                    "POST"
                ],
                "operationId": "CoreIdentity_Sign",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "coreIdentitySignRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CoreIdentitySignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CoreIdentitySignResponse"
                        }
                    }
                }
            }
        },
        "/EventsManagement/Resources/ScheduleOccurrences": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get schedule occurrences for set of resources and/or constituents during certain period of time.",
                "operationId": "Resources_GetScheduleOccurrences",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScheduleOccurrencesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ScheduleOccurrence"
                            }
                        }
                    }
                }
            }
        },
        "/EventsManagement/Resources/FindAvailable": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get a set of resources available at the requested time/count/qualifications.",
                "operationId": "Resources_FindAvailableResources",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FindAvailableResourcesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceSearchSummary"
                            }
                        }
                    }
                }
            }
        },
        "/CRM/ContactPermissions/ForTransaction": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Request a set of contact permissions relevant to an order or contribution context.  Send request with ReturnRequiredOnly to true to only send back permissions that require constituent ask.",
                "operationId": "ContactPermissions_ForTransaction",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contactPermissionsTransactionRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPermissionsTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactPermission"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/Reports/ParameterValues": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get parameter values for a report parameter.",
                "operationId": "Reports_GetParameterValues",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ParameterValuesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ParameterOption"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/PaymentComponent": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "This request is used to configure a transaction and retrieve the JavaScript location for implementing the Tessitura Merchant Services Payment Component. \r\nFor complete documentation on how to implement the Payment Component, please visit https://bitbucket.org/TN_WebShare/tessituramerchantservicesintegrationsample",
                "operationId": "PaymentComponent_GetPaymentComponent",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentComponentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentComponentResponse"
                        }
                    }
                }
            }
        },
        "/Reporting/OutputSets": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create an Output Set.",
                "operationId": "OutputSets_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "outputSet",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OutputSet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OutputSet"
                        }
                    }
                }
            }
        },
        "/CRM/AffiliationInfo": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create affiliation between a group constituent and its related constituent. If the related constituent does not exist then create the related constituent as well before creating the affiliation.",
                "operationId": "AffiliationInfo_PostAffiliation",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "affiliationInfo",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AffiliationInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AffiliationInfo"
                        }
                    }
                }
            }
        },
        "/Emails/Send": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Sends an email via SMTP",
                "operationId": "Emails_Send",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmailSendRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Emails/OrderConfirmation/{orderId}/Send": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Queues an Order Confirmation email",
                "operationId": "Emails_SendOrderConfirmation",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Id of the order",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SendTemplateEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Emails/LoginCredentials/{loginId}/Send": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Queues a Login Credentials email.\r\nThis endpoint will not generate a password token and should be used for testing a login credentials template.\r\nUse the SendCredentials endpoint in Web/Session to send a login credentials email with a generated password token.",
                "operationId": "Emails_SendLoginCredentials",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "loginId",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SendTemplateEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Emails/ConstituentInfo/{constituentId}/Send": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Queues a Constituents Info email",
                "operationId": "Emails_SendConstituentInfo",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "Id of the constituent",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SendTemplateEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Emails/Orders/{orderId}/Tickets/Send": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Queues a ticket email",
                "operationId": "Emails_SendTickets",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "The order id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SendTicketTemplateEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Accounts/CardNumber": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a credit card account, storing the card number. Will create and store a token if tokenization is enabled.",
                "operationId": "Accounts_CreateCardNumberAccount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateCardNumberAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Accounts/VantivEncryptedCard": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a credit card account from a Vantiv Encrypted Reader using tokenization.",
                "operationId": "Accounts_CreateVantivEncryptedCardAccount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateVantivEncryptedCardAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Accounts/DirectDebit": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Store a direct debit account.",
                "operationId": "Accounts_CreateDirectDebitAccount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateDirectDebitAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Accounts/SEPA": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Store a SEPA Direct Debit account.",
                "operationId": "Accounts_CreateSepaAccount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateSepaAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountResponse"
                        }
                    }
                }
            }
        },
        "/Diagnostics/Check": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Check connection information.",
                "operationId": "Diagnostics_Check",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DatabaseCheckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DatabaseCheckResponse"
                        }
                    }
                }
            }
        },
        "/Templates/{templateId}/Order/{orderId}/Confirmation": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get a formatted html body for an order confirmation",
                "operationId": "Templates_GetOrderConfirmation",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "path",
                        "description": "Id of the template used to format the html",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Id of the order to retrieve information from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "A list of name/value pairs to be used in the template",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NameValue"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateBody"
                        }
                    }
                }
            }
        },
        "/Templates/Render/Order/{orderId}/Confirmation": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Return the rendered order confirmation template for the provided order Id",
                "operationId": "Templates_RenderOrderConfirmation",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Id of the order to retrieve information from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "Template body used to render the template",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RenderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    }
                }
            }
        },
        "/Templates/{templateId}/Login/{loginId}/Credentials": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get a formatted html body for login credentials.\r\nThis endpoint will not generate a password token and should be used for testing a login credentials template.\r\nUse the SendCredentials endpoint in Web/Session to send a login credentials email with a generated password token.",
                "operationId": "Templates_GetLoginCredentials",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "path",
                        "description": "Id of the template used to format the html",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "loginId",
                        "in": "path",
                        "description": "Login id of the user to retrieve information from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "A list of name/value pairs to be used in the template",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NameValue"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateBody"
                        }
                    }
                }
            }
        },
        "/Templates/Render/Login/{loginId}/Credentials": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Return the rendered login credentials template for the provided web login id\r\nThis endpoint will not generate a password token and should be used for testing a login credentials template.\r\nUse the SendCredentials endpoint in Web/Session to send a login credentials email with a generated password token.",
                "operationId": "Templates_RenderLoginCredentials",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "loginId",
                        "in": "path",
                        "description": "Login id of the order to retrieve information from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "Template body used to render the template",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RenderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    }
                }
            }
        },
        "/Templates/{templateId}/Constituent/{constituentId}/Info": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get a formatted html body for constituent info",
                "operationId": "Templates_GetConstituentInfo",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "path",
                        "description": "Id of the template used to format the html",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "Id of the constituent to retrieve information from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "A list of name/value pairs to be used in the template",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NameValue"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateBody"
                        }
                    }
                }
            }
        },
        "/Templates/Render/Constituent/{constituentId}/Info": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Return the rendered constituent info template for the provided constituent Id",
                "operationId": "Templates_RenderConstituentInfo",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "constituentId",
                        "in": "path",
                        "description": "Id of the constituent to retrieve information from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "Template body used to render the template",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RenderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    }
                }
            }
        },
        "/Templates/{templateId}/Order/{orderId}/Tickets": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get a formatted html body for tickets\r\nComposite tickets are not currently supported, so a request to print one will instead return ticket elements for each performance, as if no composite ticket design had been selected for the package.",
                "operationId": "Templates_GetTickets",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "path",
                        "description": "Id of the template used to format the html",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Id of the order used in the model",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "The print order tickets request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PrintOrderTicketsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateBody"
                        }
                    }
                }
            }
        },
        "/Templates/Render/Order/{orderId}/Tickets": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Return the rendered tickets for the provided order Id\r\nComposite tickets are not currently supported, so a request to print one will instead return ticket elements for each performance, as if no composite ticket design had been selected for the package.",
                "operationId": "Templates_RenderTickets",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Id of the order used to format the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "The print order tickets request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TicketsRenderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    }
                }
            }
        },
        "/Custom/Execute": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Executes a local procedure defined in TR_LOCAL_PROCEDURE. This will only return a collection of the first result set in a registered procedure.  For the result set, null values in each data row are not returned as properties.",
                "operationId": "Custom_ExecuteLocalProcedure",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "localProcedureRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LocalProcedureRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/Custom/Execute/MultipleResultSets": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Executes a local procedure defined in TR_LOCAL_PROCEDURE.  This resource supports multiple result sets in a registered procedure. The response object is different from Custom/Execute. For each result set, null values are not returned as properties.",
                "operationId": "Custom_ExecuteLocalProcedureWithMultipleResultSets",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "localProcedureRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LocalProcedureRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/Reporting/Lists/{listId}/Generate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Generate a List.",
                "operationId": "Lists_Generate",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/List"
                        }
                    }
                }
            }
        },
        "/Reporting/Lists": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a List.",
                "operationId": "Lists_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "list",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/List"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/List"
                        }
                    }
                }
            }
        },
        "/Reporting/Lists/{listId}/Results": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get results for List and OutputSet combination. If no outputSetId is passed in the request, a default output set must be set for the list. \r\nResponse returns custom HTTP headers: X-Page, X-Page-Size, and X-Total-Count. Default page is 1 and default page size is 100.",
                "operationId": "Lists_Results",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "outputResultRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OutputResultRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/Reporting/Lists/Search": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Search for List. Response returns custom HTTP headers: X-Page, X-Page-Size, and X-Total-Count. Default page is 1 and default page size is 50.",
                "operationId": "Lists_Search",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "listSearchRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ListSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ListSummary"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Registration/{sessionKey}/Register": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "This is a combined resource for registering a new constituent with logging into the current session. This resource combines a workflow of multiple API actions into a single request. This is primarily designed for creating a constituent with a primary electronic address, a primary login, and logging into the session using the provide login.\r\nCreates a new constituent and login. Affiliates can be specified for the constituent to create a household account.\r\nThe login must be unique for the login type. The electronic address for this constituent must be primary. The primary indicator on ElectronicAddress is unused in this request. The session will be logged in with the new login after successful registration.",
                "operationId": "Registration_Register",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "constituent",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegisterConstituent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Accounts/Token": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Store an externally generated payment card token in Tessitura. Note that for this call to function, the card_mnemonic column in TR_ACCOUNT_TYPE must be filled in appropriately for your credit card processor. Look for the TR_ACCOUNT_TYPE topic in the Tessitura help documentation for more information on the card mnemonic column.",
                "operationId": "PaymentGatewayAccounts_StoreToken",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccountTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentAccountResponse"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/Accounts/ReferenceNumber": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Generate a payment card token from a ReferenceNumber obtained from a previous Authorization request (Vantiv only)",
                "operationId": "PaymentGatewayAccounts_CreateAccount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccountReferenceNumberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentAccountResponse"
                        }
                    }
                }
            }
        },
        "/Finance/GiftCertificates/{giftCertificateNumber}/Unlock": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Removes lock for gift certificate from any batch.",
                "operationId": "GiftCertificates_Unlock",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "giftCertificateNumber",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GiftCertificateInfo"
                        }
                    }
                }
            }
        },
        "/Finance/GiftCertificates/TransactionDetailsForRedemption": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get transaction details for a gift certificate and lock it for redemption in a specific batch.",
                "operationId": "GiftCertificates_TransactionDetailsForRedemption",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "giftCertificateRedemptionRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GiftCertificateRedemptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GiftCertificateTransaction"
                            }
                        }
                    }
                }
            }
        },
        "/PaymentGateway/EMV/Authorization": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Authorize a payment via a Payment Express HIT, TriPOSCloud, or Adyen device.",
                "operationId": "EMV_Authorization",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EMVAuthorizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EMVAuthorizationResponse"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/EMV/Signature": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Accepts the signature for a Payment Express HIT authorization.",
                "operationId": "EMV_Signature",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EMVSignatureRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EMVAuthorizationResponse"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/EMV/TokenCreate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Creates a token on the specified constituent via a Payment Express HIT, TriPOSCloud, or Adyen device without authorizing a transaction.",
                "operationId": "EMV_TokenCreate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EMVTokenCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EMVAuthorizationResponse"
                        }
                    }
                }
            }
        },
        "/PaymentGateway/EMV/TriPosLanes": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Add a new lane to merchant",
                "operationId": "EMV_CreateLane",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "lane",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LaneCreate"
                        }
                    },
                    {
                        "name": "merchant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cert",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Lane"
                        }
                    }
                }
            }
        },
        "/TXN/TemplatePrices/Batch": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create or update a set of template prices.",
                "operationId": "TemplatePrices_BatchCreate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "templatePrices",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplatePrice"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplatePrice"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Products/Search": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Search for products based on a set of criteria.",
                "operationId": "Products_Search",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProductSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductSearchResponse"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Products/Describe": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get product descriptions",
                "operationId": "Products_Describe",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProductDescribeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProductDescribeResponse"
                            }
                        }
                    }
                }
            }
        },
        "/Reporting/ReportRequests/GenerateScheduled": {
            "post": {
                "tags": [
                    "POST"
                ],
                "operationId": "ReportRequests_GenerateScheduled",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "generateScheduledRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GenerateScheduledRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GenerateScheduledResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Interests/CreateOrUpdate": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Creates, updates, or deletes interests passed as a collection. We recommend that this resource be used for making multiple edits to Constituent Interests in a single API request. Interests that exist will be updated with provided Weight and Selected values. If an existing interest is provided with a Weight of 0 or NULL and a Selected: false, the interest will be deleted. New Interests should be created with an Id of -999 (or NULL).",
                "operationId": "Interests_CreateOrUpdate",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "interests",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Interest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Interest"
                            }
                        }
                    }
                }
            }
        },
        "/Security/UserPreferences/Batch": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Save a batch of user preferences.",
                "operationId": "UserPreferences_SaveBatch",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "userPreferences",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserPreference"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserPreference"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePriceLayers/Search": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get all performance price layers for the list of performances. Only one of AsOfDateTime or AsOfRelativeDate can be specified to get prices effective for that date time.",
                "operationId": "PerformancePriceLayers_Search",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceLayerSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformancePriceLayer"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePriceLayers/Summaries/Search": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get all performance price layers for the list of performances. Only one of AsOfDateTime or AsOfRelativeDate can be specified to get prices effective for that date time.",
                "operationId": "PerformancePriceLayers_SearchSummaries",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceLayerSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PerformancePriceResponse"
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePriceLayers/Summaries": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create/Update the prices for a set of performances.",
                "operationId": "PerformancePriceLayers_PostSummaries",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "layers",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformancePriceLayerSummary"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PledgeBilling": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "This is not intended for use outside of the Tessitura application.  There is no standard way to return billing details for a run. For a given campaign, funds, bill types etc., It raises bills for all those scheduled payments that have due date between given start and end dates. It also checks to see that a bill was not raised after a given 'cut off date'.",
                "operationId": "PledgeBilling_BillPledges",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "pledgeBillingRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PledgeBillingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AutomatedBillingRunResponse"
                        }
                    }
                }
            }
        },
        "/TXN/Orders": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "This resource is currently only for interceptor plugin use. This is called any time a new order is saved via the API or from the client application. Only OrderId is provided in the request content.\r\n            \r\nThis resource will be invoked from a cart checkout.",
                "operationId": "Orders_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "order",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                }
            }
        },
        "/TXN/Orders/Price": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Prices an order(including pricing rules). Should have at least one line item, with each line item having at least one sub line item.\r\nIndividual sub line items can be ignored for pricing by passing ApplyPricing = false, on those sub line items.",
                "operationId": "Orders_Price",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "order",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                }
            }
        },
        "/TXN/Orders/ForDelivery": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Get all the orders for delivery.",
                "operationId": "Orders_GetOrdersForDelivery",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrdersForDeliveryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OrdersForDeliveryResponse"
                            }
                        }
                    }
                }
            }
        },
        "/TXN/Orders/{orderId}/PrintTicketElements": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Returns ticket elements by header, receipts, and tickets; created primarily for use for building HTML ticket templates\r\nThe method returns ticket data for unprinted fully-paid orders or reprints printed tickets specified via order number, one or more line item numbers, or one or more sub line item numbers.  In the case of partially-paid orders, only line items or sub line items which have been fully-paid will be eligible for printing. Ticket information can be returned in the default design specified for the ticket price type, or you may specify a ticket design to utilize via the request parameters. After the ticket data has been returned via the API, seats will be flagged as Ticketed in Tessitura.\r\nWhen reprinting tickets, one of the request parameters provides you with the option to regenerate the ticket number or reuse the current ticket number.\r\nComposite tickets are not currently supported, so a request to print one will instead return ticket elements for each performance, as if no composite ticket design had been selected for the package.",
                "operationId": "Orders_PrintTicketElements",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "The order id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PrintOrderTicketsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PrintOrderTicketsResponse"
                        }
                    }
                }
            }
        },
        "/TXN/Orders/{orderId}/PrintHtmlTickets": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Returns a collection of tickets in HTML format for the order.  Tickets are built using an HTML ticket template.  Ticket number (Id) and Seat information are also included.\r\nComposite tickets are not currently supported, so a request to print one will instead return ticket elements for each performance, as if no composite ticket design had been selected for the package.",
                "operationId": "Orders_PrintHtmlTickets",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "The order id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PrintOrderHtmlTicketsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PrintOrderHtmlTicketsResponse"
                        }
                    }
                }
            }
        },
        "/TXN/Zones/Search": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Search for products based on a set of criteria.",
                "operationId": "Zones_Search",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ZoneSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ZoneSearchResponse"
                            }
                        }
                    }
                }
            }
        },
        "/AccessControl/RecordAttendance/Ticket": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Records attendance for a given ticket number.",
                "operationId": "RecordAttendance_RecordTicket",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RecordAttendanceTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RecordAttendanceResponse"
                        }
                    }
                }
            }
        },
        "/TXN/Contributions": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "This resource is currently strictly for interceptor plugin use. This is called any time a new contribution is saved from the contribution editor in the client application. Only Id (ref_no) is provided in the request content.",
                "operationId": "Contributions_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contribution",
                        "in": "body",
                        "description": "The contribution entity. Only the Id property is provided at this point.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Contribution"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Contribution"
                        }
                    }
                }
            }
        },
        "/TXN/Payment/Signatures/Order/{orderId}": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Create a new payment signature.",
                "operationId": "PaymentSignatures_PostForOrder",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentSignature",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentSignature"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PaymentSignature"
                        }
                    }
                }
            }
        },
        "/Security/ValidateWebLogin": {
            "post": {
                "tags": [
                    "POST"
                ],
                "summary": "Validate a web login.",
                "operationId": "ValidateWebLogin_Create",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "validationRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebLoginValidationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WebLoginValidationResponse"
                        }
                    }
                }
            }
        },
        "/TXN/PriceEvents/MoveTo": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Move a set of price events to a new date.",
                "operationId": "PriceEvents_MoveTo",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PriceEventMoveRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/PaymentGateway/Authorization/Link/{paymentId}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "NOTE: THIS IS FOR TESSITURA USE ONLY. Custom implementations of this endpoint are not supported.\r\nExpire a payment link which has yet to be authorized or already expired.  For Tessitura Merchant Services only.",
                "operationId": "Authorization_ExpirePayByLink",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ExpirePayByLinkResponse"
                        }
                    }
                }
            }
        },
        "/TXN/Performances/{performanceId}/Seats/Holds/{holdCodeId}/Expire": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Expires seat holds for a performance and hold code",
                "operationId": "Performances_ExpireSeatHolds",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "performanceId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "holdCodeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "expireSeatHoldRequest",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExpireSeatHoldRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SeatHold"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Session/{sessionKey}/Constituents": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Sets the current constituent on the cart for a business facing session\r\nIf the Constituent is a primary affiliate of a household, the method obeys the \"TRANSACT_AS_HOUSEHOLD_ORDER\" entry in T_DEFAULTS to determine if the household constituent should be set. \r\nIf the default is set to \"Prompt\", both the household and individual are returned, to allow the user to be queried. To set the constituent to the users choice pass in the selected constituent id and set OverridePrompt to true.",
                "operationId": "Session_SetConstituent",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SetConstituentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebConstituentDisplaySummary"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/CartFlags": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates flags on the cart",
                "operationId": "Cart_UpdateCartFlags",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CartFlags"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CartFlags"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/Source": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates the source on a line item\r\nAllows the source of an individual line to be updated.  When a line is created, by reserving a tickets for a performance or package, the line source is copied from the session source. This method allows the line source to be updated.\r\nOffers and Pricing Rules consider line source, not the session source.",
                "operationId": "Cart_UpdateLineItemSource",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SourceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SourceResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/PriceTypeId": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates the price type on all sub line items for a given lineitem\r\nCan be filtered by those have a current price type as specified by OriginalPriceType",
                "operationId": "Cart_UpdateLineItemPriceType",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "The Id of the lineitem to apply the price type to. Must be a valid lineitem in the cart.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdatePriceTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/SubLineItems/{subLineItemId}/PriceTypeId": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates the price type on a sub line item",
                "operationId": "Cart_UpdateSubLineItemPriceType",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subLineItemId",
                        "in": "path",
                        "description": "The Id of the sub lineitem to apply the price type to. Must be a valid sub lineitem in the cart.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdatePriceTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/Price": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates the price on all sub line items for the line item\r\nA price can only be edited if the price type has been marked as editable, zones on the price map have been designated as editable, and the seat is in one of the editable zones.\r\nThe status field in the response will return as S if the price can be applied or E with a description of the error if the price cannot be applied.",
                "operationId": "Cart_UpdateLineItemPrice",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "The Id of the lineitem to apply the price to. Must be a valid lineitem in the cart.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdatePriceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpdatePriceResponse"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/SubLineItems/{subLineItemId}/Price": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates the price on a sub line item.\r\nA price can only be edited if the price type has been marked as editable, zones on the price map have been designated as editable, and the seat is in one of the editable zones.\r\nThe status field in the response will return as S if the price can be applied or E with a description of the error if the price cannot be applied.",
                "operationId": "Cart_UpdateSubLineItemPrice",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subLineItemId",
                        "in": "path",
                        "description": "The Id of the sub lineitem to apply the price to. Must be a valid sub lineitem in the cart.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdatePriceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpdatePriceResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/Discount": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Applies a discounted price to all sub line items for a line item\r\nFor packages, the discount can only be applied to package line items.\r\nThe status field in the response will return as S if the discount can be used or E with a description of the error if the discount cannot be used.",
                "operationId": "Cart_ApplyLineItemDiscount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "The Id of the Lineitem to apply the discount to. Must be a valid lineitem in the cart.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplyDiscountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpdatePriceResponse"
                            }
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/SubLineItems/{subLineItemId}/Discount": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Applies a discounted price to a sub line item\r\n\r\nThe status field in the response will return as S if the discount can be used or E with a description of the error if the discount cannot be used.",
                "operationId": "Cart_ApplySubLineItemDiscount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subLineItemId",
                        "in": "path",
                        "description": "The Id of the sub lineitem to apply the discount to. Must be a valid sub lineitem in the cart.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplyDiscountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpdatePriceResponse"
                        }
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/SubLineItems/{subLineItemId}/Recipient": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates the recipient on a sub line item",
                "operationId": "Cart_UpdateSubLineItemRecipient",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subLineItemId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateRecipientRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Web/Cart/{sessionKey}/LineItems/{lineItemId}/SpecialRequest": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates Special Request info on a line item",
                "operationId": "Cart_UpdateLineItemSpecialRequest",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "sessionKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "lineItemId",
                        "in": "path",
                        "description": "The lineitem ID to update the special request info for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpecialRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/CRM/Accounts/{accountId}/CardNumber": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update expiration date or name on a credit card account or token. Will also tokenize the credit card if tokenization is enabled.\r\nPaymentMethodGroupId is ignored if the account already has a PaymentMethodGroupId assigned.  This value cannot be updated.\r\nIf tokenizing a non-tokenized card, PaymentMethodGroupId is required if one has not already been assigned to the account.",
                "operationId": "Accounts_UpdateCardNumberAccount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateCardNumberAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Accounts/{accountId}/DirectDebit": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates expiration date or name on a direct debit account.",
                "operationId": "Accounts_UpdateDirectDebitAccount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateDirectDebitAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountResponse"
                        }
                    }
                }
            }
        },
        "/CRM/Accounts/{accountId}/SEPA": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Updates information on a SEPA Direct Debit Account.",
                "operationId": "Accounts_UpdateSepaAccount",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateSepaAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AccountResponse"
                        }
                    }
                }
            }
        },
        "/Finance/Steps/{stepId}/Documents/{documentId}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a document attached to a step.",
                "operationId": "Steps_UpdateDocument",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "stepId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "document",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DocumentSummary"
                        }
                    }
                }
            }
        },
        "/Reporting/ReportRequests/FlushIncomplete": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update the status of all the running requests to error.",
                "operationId": "ReportRequests_FlushIncomplete",
                "consumes": [],
                "produces": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/PerformancePriceTypes/Base": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update base indicator on performance price types for a set of performances and price type.",
                "operationId": "PerformancePriceTypes_UpdateBase",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "performanceIds",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "priceTypeId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "priceLayerTypeIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/Security/UserPreferences/{id}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a user preference by id.",
                "operationId": "UserPreferences_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userPreference",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPreference"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserPreference"
                        }
                    }
                }
            }
        },
        "/TXN/PerformancePriceLayers/Prices": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "Update a set of prices across one or more performances.",
                "operationId": "PerformancePriceLayers_UpdatePrices",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "priceUpdateRequests",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PriceUpdateRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/TXN/Orders/{orderId}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "This resource is currently strictly for interceptor plugin use. This is called any time an order is saved via the API or from the client application. Only OrderId is provided in the request content.\r\n            \r\nThis resource will be invoked from a cart checkout.",
                "operationId": "Orders_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "order",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                }
            }
        },
        "/TXN/Contributions/{contributionId}": {
            "put": {
                "tags": [
                    "PUT"
                ],
                "summary": "This resource is currently strictly for interceptor plugin use. This is called any time an existing contribution is updated from contribution editor in the client application. Only Id (ref_no) is provided in the request content.",
                "operationId": "Contributions_Update",
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "contributionId",
                        "in": "path",
                        "description": "Id of the contribution (ref_no)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contribution",
                        "in": "body",
                        "description": "The contribution entity. Only the Id property is provided at this point.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Contribution"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Contribution"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "PurposeCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "ControlGroupSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ElectronicAddress": {
            "type": "object",
            "properties": {
                "Address": {
                    "type": "string"
                },
                "AffiliatedConstituent": {
                    "$ref": "#/definitions/Entity"
                },
                "AltSalutationType": {
                    "$ref": "#/definitions/SalutationTypeSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddressType": {
                    "$ref": "#/definitions/ElectronicAddressTypeSummary"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "AllowHtmlFormat": {
                    "type": "boolean"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "AllowMarketing": {
                    "type": "boolean"
                },
                "Months": {
                    "type": "string"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "IsFromAffiliation": {
                    "type": "boolean"
                },
                "IsEmail": {
                    "type": "boolean"
                }
            }
        },
        "Entity": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SalutationTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ElectronicAddressTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "IsEmail": {
                    "type": "boolean"
                }
            }
        },
        "ModeOfSalePriceType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/ModeOfSaleSummary"
                },
                "PriceType": {
                    "$ref": "#/definitions/PriceTypeSummary"
                }
            }
        },
        "ModeOfSaleSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Category": {
                    "$ref": "#/definitions/ModeOfSaleCategorySummary"
                }
            }
        },
        "PriceTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "AliasDescription": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultTicketDesign": {
                    "$ref": "#/definitions/Entity"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ShortDescription": {
                    "type": "string"
                }
            }
        },
        "ModeOfSaleCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Sequence": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ReferenceTableUserGroup": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReferenceTable": {
                    "$ref": "#/definitions/ReferenceTable"
                },
                "UserGroupId": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CanEdit": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ReferenceTable": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "HelpText": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "TableName": {
                    "type": "string"
                }
            }
        },
        "PricingRuleCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "SpecialActivityStatus": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ZoneMap": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "SeatMap": {
                    "$ref": "#/definitions/SeatMapSummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SeatMapSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "NScanAccessArea": {
            "type": "object",
            "properties": {
                "AreaCode": {
                    "type": "string"
                },
                "ConstituencyIds": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "KeywordId": {
                    "format": "int32",
                    "type": "integer"
                },
                "KeywordValue": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ListId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxEntries": {
                    "format": "int32",
                    "type": "integer"
                },
                "MembershipLevelIds": {
                    "type": "string"
                },
                "PerformanceIds": {
                    "type": "string"
                },
                "PriceTypeIds": {
                    "type": "string"
                },
                "PriceZoneIds": {
                    "type": "string"
                },
                "PromptQuantity": {
                    "type": "boolean"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "NameStatus": {
            "type": "object",
            "properties": {
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "CardReaderType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "AssetType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "InventoryWebContent": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Value": {
                    "type": "string"
                },
                "ContentType": {
                    "$ref": "#/definitions/WebContentTypeSummary"
                },
                "ProductionElementId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "WebContentTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PriceTypeUserGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PriceType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "EntitySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PaymentMethodUserGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "IncomeIndicator": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MaxRefund": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethod": {
                    "$ref": "#/definitions/PaymentMethodSummary"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "PaymentMethodSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "PaymentType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "PhoneIndicator": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Booking": {
            "type": "object",
            "properties": {
                "Assignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BookingAssignment"
                    }
                },
                "BookingSource": {
                    "format": "int32",
                    "type": "integer"
                },
                "Category": {
                    "$ref": "#/definitions/BookingCategorySummary"
                },
                "ConfirmationText": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "DefaultDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "DefaultDuration": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Context": {
                    "$ref": "#/definitions/BookingContext"
                }
            }
        },
        "BookingAssignment": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Qualifications": {
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "Resource": {
                    "$ref": "#/definitions/ResourceSummary"
                },
                "ResourceType": {
                    "$ref": "#/definitions/ResourceTypeSummary"
                },
                "Schedule": {
                    "$ref": "#/definitions/ResourceSchedule"
                },
                "BookingId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConfirmationText": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "IgnoreScheduleConflicts": {
                    "type": "boolean"
                },
                "OverriddenBy": {
                    "type": "string"
                },
                "OverrideDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "ViewIndicator": {
                    "type": "boolean"
                }
            }
        },
        "BookingCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "BookingContext": {
            "type": "object",
            "properties": {
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Parent": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "ResourceSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Capacity": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ResourceType": {
                    "$ref": "#/definitions/ResourceTypeSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                }
            }
        },
        "ResourceTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/ResourceCategorySummary"
                },
                "RequireAvailability": {
                    "type": "boolean"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CanBeShared": {
                    "type": "boolean"
                },
                "HasCapacity": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ResourceSchedule": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "RecurrenceEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "RecurrencePattern": {
                    "format": "int32",
                    "type": "integer"
                },
                "RecurrenceInterval": {
                    "format": "int32",
                    "type": "integer"
                },
                "RecurrenceOrdinal": {
                    "format": "int32",
                    "type": "integer"
                },
                "RecurrenceDayOfWeek": {
                    "type": "string"
                },
                "ResourceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "BookingAssignmentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Type": {
                    "$ref": "#/definitions/ScheduleTypeSummary"
                },
                "Count": {
                    "format": "int32",
                    "type": "integer"
                },
                "OverrideConflicts": {
                    "type": "boolean"
                }
            }
        },
        "ConstituentDisplaySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SortName": {
                    "type": "string"
                },
                "DisplayName": {
                    "type": "string"
                }
            }
        },
        "ResourceCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ScheduleTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "Document": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Contents": {
                    "format": "byte",
                    "type": "string"
                },
                "FileName": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/DocumentCategorySummary"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "DocumentCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ParentTableName": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ResourceCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ProgramListing": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "DonationLevel": {
                    "$ref": "#/definitions/DonationLevelSummary"
                },
                "ProgramType": {
                    "$ref": "#/definitions/ProgramType"
                },
                "ProgramName": {
                    "type": "string"
                },
                "SortName": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "DonationLevelSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ProgramType": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AssociationType": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UseBirthDate": {
                    "type": "boolean"
                },
                "UseGender": {
                    "type": "boolean"
                },
                "IsIncludedInSearchResultsDefault": {
                    "type": "boolean"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "RelationshipCategory": {
                    "$ref": "#/definitions/RelationshipCategorySummary"
                },
                "ReciprocalType": {
                    "$ref": "#/definitions/Entity"
                }
            }
        },
        "RelationshipCategorySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PriceType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "AliasDescription": {
                    "type": "string"
                },
                "EditableIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PriceTypeGroup": {
                    "$ref": "#/definitions/PriceTypeGroupSummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "ReasonIndicator": {
                    "type": "boolean"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "DefaultTicketDesign": {
                    "$ref": "#/definitions/TicketDesign"
                },
                "PriceTypeCategory": {
                    "$ref": "#/definitions/PriceTypeCategorySummary"
                }
            }
        },
        "PriceTypeGroupSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "TicketDesign": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PriceTypeCategorySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "LoginType": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PaymentGatewayTransactionType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "SalutationType": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "StepType": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UseAssociate": {
                    "type": "string"
                },
                "AllowAttachments": {
                    "type": "string"
                },
                "UseCompletedOnDateTime": {
                    "type": "string"
                },
                "UseDueDateTime": {
                    "type": "string"
                },
                "UseNote": {
                    "type": "string"
                },
                "UseWarningDays": {
                    "type": "string"
                },
                "UseWorker": {
                    "type": "string"
                }
            }
        },
        "RelationshipCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Suffix": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ProductionSeasonMembershipOrganization": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AllowMultipleEntry": {
                    "type": "boolean"
                },
                "ProductionSeason": {
                    "$ref": "#/definitions/ProductionSeasonSummary"
                },
                "MembershipOrganization": {
                    "$ref": "#/definitions/MembershipOrganizationSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ProductionSeasonSummary": {
            "type": "object",
            "properties": {
                "Production": {
                    "$ref": "#/definitions/ProductionSummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                }
            }
        },
        "MembershipOrganizationSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ProductionSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "SeasonSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "FYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Issue": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ActivityType": {
                    "$ref": "#/definitions/ActivityTypeSummary"
                },
                "ContactType": {
                    "$ref": "#/definitions/ContactTypeSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "IssueDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "Origin": {
                    "$ref": "#/definitions/OriginSummary"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UrgentIndicator": {
                    "type": "boolean"
                },
                "ResolvedIndicator": {
                    "type": "boolean"
                },
                "HasReminder": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ActivityTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Category": {
                    "$ref": "#/definitions/ActivityCategorySummary"
                }
            }
        },
        "ContactTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "OriginSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ActivityCategorySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "BillingType": {
            "type": "object",
            "properties": {
                "AutoBillingIndicator": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "AppealCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "AddressType": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "RankType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "Season": {
            "type": "object",
            "properties": {
                "ConfirmationNoticeFormat": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "Description": {
                    "type": "string"
                },
                "DisplayInSeasonOverview": {
                    "type": "boolean"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "RenewalNoticeFormat": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "SubscriptionFund1": {
                    "format": "int32",
                    "type": "integer"
                },
                "SubscriptionFund2": {
                    "format": "int32",
                    "type": "integer"
                },
                "Type": {
                    "$ref": "#/definitions/SeasonTypeSummary"
                },
                "YearlySeason": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "SeasonTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "CrediteeType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreditMembershipIndicator": {
                    "type": "boolean"
                },
                "Description": {
                    "type": "string"
                },
                "GiftAidIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PriceCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "DeliveryMethod": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PrintAtHome": {
                    "type": "boolean"
                },
                "RequireAddress": {
                    "type": "boolean"
                }
            }
        },
        "DonationLevel": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ProgramType": {
                    "$ref": "#/definitions/ProgramType"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PaymentMethod": {
            "type": "object",
            "properties": {
                "AccountType": {
                    "$ref": "#/definitions/AccountTypeSummary"
                },
                "AuthIndicator": {
                    "type": "boolean"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RequireCheckIndicator": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CurrencyTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "Description": {
                    "type": "string"
                },
                "GiftAidIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Income": {
                    "type": "boolean"
                },
                "CanRefund": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "NoCopiesOnAuth": {
                    "format": "int32",
                    "type": "integer"
                },
                "NoCopiesOnSave": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentMethodGroup": {
                    "$ref": "#/definitions/PaymentMethodGroupSummary"
                },
                "PaymentType": {
                    "$ref": "#/definitions/PaymentTypeSummary"
                },
                "ReceiptFormatId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RequirePostalCode": {
                    "type": "string"
                },
                "ShortDesc": {
                    "type": "string"
                },
                "StoreTenderedAmount": {
                    "type": "boolean"
                },
                "OpenCashDrawer": {
                    "type": "boolean"
                },
                "RequireCvv": {
                    "type": "boolean"
                },
                "UseWithCardReader": {
                    "type": "boolean"
                },
                "GlAccountId": {
                    "type": "string"
                },
                "MerchantId": {
                    "type": "string"
                },
                "MerchantIdForSwipe": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "AccountTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "CardPrefix": {
                    "type": "string"
                },
                "CardtypeIndicator": {
                    "type": "string"
                },
                "EditMask": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PaymentMethodGroupSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "MerchantId": {
                    "type": "string"
                }
            }
        },
        "PaymentTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PriceEvent": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ChangeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformancePriceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Price": {
                    "format": "double",
                    "type": "number"
                },
                "MinPrice": {
                    "format": "double",
                    "type": "number"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "GiftAidIneligibleReason": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "InactiveReason": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ModeOfSaleOffer": {
            "type": "object",
            "properties": {
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "OverrideDefaultPriceTypeIndicator": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Terms": {
                    "type": "string"
                },
                "AppealId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SourceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "GiftAidType": {
            "type": "object",
            "properties": {
                "CharityClaimsRef": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "SpecialActivityType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "QueryElementGroup": {
            "type": "object",
            "properties": {
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DataFrom": {
                    "type": "string"
                },
                "DataWhere": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsVirtual": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "NumberOfParameters": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PriceLayerType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ExcludeFromRules": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceCategory": {
                    "$ref": "#/definitions/PriceCategorySummary"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PriceCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Worker": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "WorkerType": {
                    "$ref": "#/definitions/WorkerTypeSummary"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SortName": {
                    "type": "string"
                },
                "ShortDisplayName": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "Prefix": {
                    "$ref": "#/definitions/PrefixSummary"
                },
                "Suffix": {
                    "$ref": "#/definitions/SuffixSummary"
                },
                "ConstituentInactive": {
                    "$ref": "#/definitions/ConstituentInactiveSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "WorkerTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PrefixSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "SuffixSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ConstituentInactiveSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ElectronicAddressType": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "IsEmail": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Color": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ColorValue": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Qualification": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/QualificationCategorySummary"
                }
            }
        },
        "QualificationCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "OriginalSource": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PriceTypeCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                }
            }
        },
        "ZoneGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "AliasDescription": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "AliasType": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "GiftAidDocumentStatus": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "CustomDefault": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DefaultValue": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "FieldName": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "CustomDefaultCategory": {
                    "$ref": "#/definitions/CustomDefaultCategorySummary"
                }
            }
        },
        "CustomDefaultCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "GiftAidContactMethod": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ScheduleType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "SalesLayout": {
            "type": "object",
            "properties": {
                "Columns": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "SalesLayoutButtons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SalesLayoutButton"
                    }
                },
                "PaymentMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SalesLayoutPaymentMethod"
                    }
                },
                "PriceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SalesLayoutPriceType"
                    }
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "Rows": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "SalesLayoutButton": {
            "type": "object",
            "properties": {
                "Caption1": {
                    "type": "string"
                },
                "Caption2": {
                    "type": "string"
                },
                "Caption3": {
                    "type": "string"
                },
                "Caption4": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ItemAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ItemBusinessUnit": {
                    "format": "int32",
                    "type": "integer"
                },
                "ItemDescription": {
                    "type": "string"
                },
                "ItemParentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ItemOtherId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ItemSubId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Xpos": {
                    "format": "int32",
                    "type": "integer"
                },
                "Ypos": {
                    "format": "int32",
                    "type": "integer"
                },
                "ButtonType": {
                    "$ref": "#/definitions/SalesLayoutButtonTypeSummary"
                },
                "BackgroundColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "ForegroundColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductStartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ProductStartMode": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductStartDayAdd": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductSequence": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductEndMode": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductEndDayAdd": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductEndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ZoneMode": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneSequence": {
                    "format": "int32",
                    "type": "integer"
                },
                "ItemEditIndicator": {
                    "type": "string"
                }
            }
        },
        "SalesLayoutPaymentMethod": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Xpos": {
                    "format": "int32",
                    "type": "integer"
                },
                "Ypos": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentMethod": {
                    "$ref": "#/definitions/PaymentMethodSummary"
                },
                "BackgroundColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "ForegroundColor": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SalesLayoutPriceType": {
            "type": "object",
            "properties": {
                "Xpos": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Ypos": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceType": {
                    "$ref": "#/definitions/PriceTypeSummary"
                },
                "BackgroundColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "ForegroundColor": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SalesLayoutButtonTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "Printer": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "MaxCol": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxRow": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxX2val": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxY2val": {
                    "format": "int32",
                    "type": "integer"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Type": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ContributionImportSet": {
            "type": "object",
            "properties": {
                "AccountMatchKeyword": {
                    "$ref": "#/definitions/KeywordSummary"
                },
                "AcknowledgmentLetterMode": {
                    "format": "int32",
                    "type": "integer"
                },
                "BatchType": {
                    "$ref": "#/definitions/BatchTypeSummary"
                },
                "BillingSchedule": {
                    "$ref": "#/definitions/BillingScheduleSummary"
                },
                "BillingType": {
                    "$ref": "#/definitions/BillingTypeSummary"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "SalesChannel": {
                    "$ref": "#/definitions/SalesChannelSummary"
                },
                "ContributionDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ContributionPayMode": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatePotentialDuplicate": {
                    "type": "boolean"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CrediteeMode": {
                    "format": "int32",
                    "type": "integer"
                },
                "CrediteeType": {
                    "$ref": "#/definitions/CrediteeTypeSummary"
                },
                "DefaultCountryCode": {
                    "type": "string"
                },
                "DefaultConstituentType": {
                    "$ref": "#/definitions/ConstituentTypeSummary"
                },
                "DefaultHouseholdConstituentType": {
                    "$ref": "#/definitions/ConstituentTypeSummary"
                },
                "DefaultOriginalSource": {
                    "$ref": "#/definitions/OriginalSourceSummary"
                },
                "Description": {
                    "type": "string"
                },
                "Designation": {
                    "$ref": "#/definitions/ContributionDesignationSummary"
                },
                "FilePath": {
                    "type": "string"
                },
                "FormatFile": {
                    "type": "string"
                },
                "Fund": {
                    "$ref": "#/definitions/FundSummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ImportRefNoLocation": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PaymentMethod": {
                    "$ref": "#/definitions/PaymentMethodSummary"
                },
                "Source": {
                    "$ref": "#/definitions/SourceSummary"
                },
                "StripPhoneFormatting": {
                    "type": "boolean"
                },
                "TransactAsHousehold": {
                    "type": "boolean"
                },
                "TransactAsHouseholdCreditee": {
                    "type": "boolean"
                },
                "Worker": {
                    "$ref": "#/definitions/Entity"
                }
            }
        },
        "KeywordSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditMask": {
                    "type": "string"
                },
                "DataType": {
                    "type": "string"
                },
                "MultipleValue": {
                    "type": "boolean"
                },
                "ReferenceTable": {
                    "type": "string"
                },
                "DetailTable": {
                    "type": "string"
                },
                "PrimaryGroupDefault": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/KeywordCategorySummary"
                },
                "HelpText": {
                    "type": "string"
                },
                "ExtendedDescription": {
                    "type": "string"
                },
                "DetailColumn": {
                    "type": "string"
                },
                "ParentTable": {
                    "type": "string"
                },
                "CustomId": {
                    "format": "int32",
                    "type": "integer"
                },
                "KeywordUse": {
                    "type": "string"
                }
            }
        },
        "BatchTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CntlIndicator": {
                    "type": "boolean"
                },
                "Category": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "BillingScheduleSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "BillingTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "CampaignSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "FYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "MembershipOrganization": {
                    "$ref": "#/definitions/MembershipOrganizationSummary"
                }
            }
        },
        "SalesChannelSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "CrediteeTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "ConstituentTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ConstituentGroup": {
                    "$ref": "#/definitions/ConstituentGroupSummary"
                }
            }
        },
        "OriginalSourceSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ContributionDesignationSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "FundSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "TicketingIndicator": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "ConstituencyId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SourceSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Appeal": {
                    "$ref": "#/definitions/AppealSummary"
                }
            }
        },
        "KeywordCategorySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ConstituentGroupSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "AppealSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "AffiliationType": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UseSalary": {
                    "type": "boolean"
                },
                "UseTitle": {
                    "type": "boolean"
                },
                "IsAllowedToTransactDefault": {
                    "type": "boolean"
                },
                "IsIncludedInSearchResultsDefault": {
                    "type": "boolean"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "RelationshipCategory": {
                    "$ref": "#/definitions/RelationshipCategorySummary"
                }
            }
        },
        "SeasonType": {
            "type": "object",
            "properties": {
                "BusinessUnit": {
                    "$ref": "#/definitions/BusinessUnitSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "BusinessUnitSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ConstituencyType": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Program": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "PricingRuleMessageType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "MachineSetting": {
            "type": "object",
            "properties": {
                "CardReaderHost": {
                    "type": "string"
                },
                "CardReaderPort": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "TnspaySoftwareTerminal": {
                    "type": "boolean"
                },
                "TriposLane": {
                    "format": "int32",
                    "type": "integer"
                },
                "WorkstationName": {
                    "type": "string"
                },
                "CardReaderType": {
                    "$ref": "#/definitions/CardReaderTypeSummary"
                },
                "PXStation": {
                    "type": "string"
                },
                "MerchantId": {
                    "type": "string"
                },
                "PXUserName": {
                    "type": "string"
                },
                "PXUserKey": {
                    "type": "string"
                },
                "TriPOSCloudConfiguration": {
                    "$ref": "#/definitions/TriPOSCloudConfiguration"
                },
                "TessituraPaymentsPosDevice": {
                    "type": "string"
                },
                "TessituraPaymentsPosDeviceModel": {
                    "type": "string"
                }
            }
        },
        "CardReaderTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "TriPOSCloudConfiguration": {
            "type": "object",
            "properties": {
                "ConfigSetting": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ActivityType": {
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/ActivityCategorySummary"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PerfIndicator": {
                    "type": "string"
                }
            }
        },
        "Section": {
            "type": "object",
            "properties": {
                "AdditionalText": {
                    "type": "string"
                },
                "AdditionalText2": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PrintDesc": {
                    "type": "string"
                },
                "PrintSequence": {
                    "format": "int32",
                    "type": "integer"
                },
                "SectionLegend": {
                    "type": "string"
                },
                "ShortDesc": {
                    "type": "string"
                }
            }
        },
        "WebLogin": {
            "type": "object",
            "properties": {
                "ConstituentUpdateDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "Email": {
                    "$ref": "#/definitions/Entity"
                },
                "FailedAttempts": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "LastLoginDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LockedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Login": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LoginType": {
                    "$ref": "#/definitions/LoginTypeSummary"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "TemporaryIndicator": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "LoginTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ConstituentType": {
            "type": "object",
            "properties": {
                "AddressTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ConstituentGroup": {
                    "$ref": "#/definitions/ConstituentGroupSummary"
                },
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "DefaultSalutationId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultAffiliatedConstituentTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultAffiliationTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ElectronicAddressTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "GiftAidIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PerformanceGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "DisplayByZone": {
                    "type": "boolean"
                },
                "Facility": {
                    "$ref": "#/definitions/FacilitySummary"
                },
                "FixedSeatIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/ZoneMapSummary"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "FacilitySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatMap": {
                    "$ref": "#/definitions/SeatMapSummary"
                }
            }
        },
        "ZoneMapSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "SeatMap": {
                    "$ref": "#/definitions/SeatMapSummary"
                }
            }
        },
        "PriceTypeGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "TemplatePriceType": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DesignationCode": {
                    "$ref": "#/definitions/DesignationCodeSummary"
                },
                "ResaleAccount": {
                    "$ref": "#/definitions/GlAccountSummary"
                },
                "GlAccount": {
                    "$ref": "#/definitions/GlAccountSummary"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PriceType": {
                    "$ref": "#/definitions/PriceTypeSummary"
                },
                "PriceTemplate": {
                    "$ref": "#/definitions/PriceTemplateSummary"
                },
                "TemplatePrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TemplatePrice"
                    }
                }
            }
        },
        "DesignationCodeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "GlAccountSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "AccountNumber": {
                    "type": "string"
                }
            }
        },
        "PriceTemplateSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/ZoneMapSummary"
                },
                "PriceCategory": {
                    "$ref": "#/definitions/PriceCategorySummary"
                }
            }
        },
        "TemplatePrice": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MinPrice": {
                    "format": "double",
                    "type": "number"
                },
                "Price": {
                    "format": "double",
                    "type": "number"
                },
                "Zone": {
                    "$ref": "#/definitions/ZoneSummary"
                },
                "TemplatePriceType": {
                    "$ref": "#/definitions/TemplatePriceTypeSummary"
                }
            }
        },
        "ZoneSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneMapId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneTime": {
                    "type": "string"
                },
                "Abbreviation": {
                    "type": "string"
                },
                "ZoneLegend": {
                    "type": "string"
                },
                "ZoneGroup": {
                    "$ref": "#/definitions/ZoneGroupSummary"
                }
            }
        },
        "TemplatePriceTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ZoneGroupSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "AliasDescription": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SurveyQuestion": {
            "type": "object",
            "properties": {
                "AskType": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "DataType": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultValue": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Question": {
                    "type": "string"
                },
                "ReferenceTable": {
                    "type": "string"
                },
                "ReferenceTableDescriptionColumn": {
                    "type": "string"
                },
                "ReferenceTableIdColumn": {
                    "type": "string"
                },
                "ReferenceTableWhereClause": {
                    "type": "string"
                },
                "ReferenceTableSort": {
                    "type": "string"
                },
                "Required": {
                    "type": "boolean"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "WorkerType": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "BookingTemplate": {
            "type": "object",
            "properties": {
                "Assignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BookingTemplateAssignment"
                    }
                },
                "Category": {
                    "$ref": "#/definitions/BookingCategorySummary"
                },
                "ConfirmationText": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Notes": {
                    "type": "string"
                },
                "OverrideTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "BookingTemplateAssignment": {
            "type": "object",
            "properties": {
                "CreatedBy": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinutesDuration": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinutesOffset": {
                    "format": "int32",
                    "type": "integer"
                },
                "OverrideCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "Qualifications": {
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "ResourceType": {
                    "$ref": "#/definitions/ResourceTypeSummary"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ViewIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ConstituentInactive": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Origin": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ActivityType": {
                    "$ref": "#/definitions/Entity"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "BulkCopySet": {
            "type": "object",
            "properties": {
                "AvailableForSaleIndicator": {
                    "type": "boolean"
                },
                "CopyCredits": {
                    "type": "boolean"
                },
                "CopyNotes": {
                    "type": "boolean"
                },
                "CopyOffers": {
                    "type": "boolean"
                },
                "CopyPriceEvents": {
                    "type": "boolean"
                },
                "CopyPrices": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateFriday": {
                    "type": "boolean"
                },
                "CreateFromDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreateMonday": {
                    "type": "boolean"
                },
                "CreateMode": {
                    "type": "string"
                },
                "CreateSaturday": {
                    "type": "boolean"
                },
                "CreateSunday": {
                    "type": "boolean"
                },
                "CreateThursday": {
                    "type": "boolean"
                },
                "CreateToDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateTuesday": {
                    "type": "boolean"
                },
                "CreateWednesday": {
                    "type": "boolean"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DefaultRelativeDates": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "OverrideOnSale": {
                    "type": "boolean"
                },
                "PerformanceCode": {
                    "type": "string"
                },
                "PerformanceCodeSeed": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceDescription": {
                    "type": "string"
                },
                "PerformanceModeOfSaleRelativeDates": {
                    "type": "string"
                },
                "PerformanceStatus": {
                    "$ref": "#/definitions/PerformanceStatus"
                },
                "PerformanceTime": {
                    "type": "string"
                },
                "PerformanceType": {
                    "$ref": "#/definitions/PerformanceType"
                },
                "PackageCode": {
                    "type": "string"
                },
                "PackageCodeSeed": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageModeOfSaleRelativeDates": {
                    "type": "string"
                },
                "PriceEventRelativeDates": {
                    "type": "string"
                },
                "ProductionSeason": {
                    "$ref": "#/definitions/ProductionSeasonSummary"
                },
                "PriceTypeRelativeDates": {
                    "type": "string"
                },
                "PublishRelativeDates": {
                    "type": "string"
                },
                "ReferenceDay": {
                    "format": "date-time",
                    "type": "string"
                },
                "ReferencePerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReferenceSeasonString": {
                    "type": "string"
                },
                "SetDescription": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SetType": {
                    "format": "int32",
                    "type": "integer"
                },
                "ShortName": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                },
                "TimeSlot": {
                    "$ref": "#/definitions/TimeSlot"
                }
            }
        },
        "PerformanceStatus": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PerformanceType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "ValidCountryList": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ControlGroup": {
            "type": "object",
            "properties": {
                "CreatedBy": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Permission": {
                    "format": "int32",
                    "enum": [
                        0,
                        1
                    ],
                    "type": "integer"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "TimeSlot": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EndTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "StartTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "SessionVariable": {
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "DirectDebitAccountType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "MembershipLevelCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "BulkDailyCopyExclusion": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DoNotCopy": {
                    "type": "boolean"
                },
                "IncludeWithoutCopy": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SetId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SpecialActivity": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "NumberOfAttendees": {
                    "format": "int32",
                    "type": "integer"
                },
                "Performance": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SpecialActivityDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Status": {
                    "$ref": "#/definitions/SpecialActivityStatusSummary"
                },
                "Type": {
                    "$ref": "#/definitions/SpecialActivityTypeSummary"
                },
                "WorkerConstituentId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SpecialActivityStatusSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "SpecialActivityTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Cart": {
            "type": "object",
            "properties": {
                "SessionKey": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Solicitor": {
                    "type": "string"
                },
                "OrderCategory": {
                    "$ref": "#/definitions/OrderCategorySummary"
                },
                "DbStatus": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FirstSeatAddedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CartPrimaryAmount": {
                    "format": "double",
                    "type": "number"
                },
                "CartFirstChoiceAmount": {
                    "format": "double",
                    "type": "number"
                },
                "CartAmount": {
                    "format": "double",
                    "type": "number"
                },
                "AmountPaidPreviously": {
                    "format": "double",
                    "type": "number"
                },
                "AmountPaidNow": {
                    "format": "double",
                    "type": "number"
                },
                "BalanceToCharge": {
                    "format": "double",
                    "type": "number"
                },
                "SubTotal": {
                    "format": "double",
                    "type": "number"
                },
                "FeesAmount": {
                    "format": "double",
                    "type": "number"
                },
                "BookingId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CustomDataItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomDataItem"
                    }
                },
                "CartWasPriced": {
                    "type": "boolean"
                },
                "OrderNotes": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Initiator": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "DeliveryMethod": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Source": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Appeal": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PaymentPlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentPlan"
                    }
                },
                "OrderFees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartFeeDetail"
                    }
                },
                "Payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartPayment"
                    }
                },
                "Messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartPricingRuleMessage"
                    }
                },
                "Products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartProduct"
                    }
                },
                "DeliveryDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "OrderCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "CustomDataItem": {
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                },
                "Index": {
                    "format": "int32",
                    "type": "integer"
                },
                "KeywordId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsDropdown": {
                    "type": "boolean"
                },
                "Value": {
                    "type": "string"
                },
                "DataType": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "PaymentPlan": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AmountDue": {
                    "format": "double",
                    "type": "number"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DateDue": {
                    "format": "date-time",
                    "type": "string"
                },
                "BillingType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Card": {
                    "$ref": "#/definitions/PaymentPlanCard"
                }
            }
        },
        "CartFeeDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SubLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FeeSummary": {
                    "$ref": "#/definitions/CartFeeSummary"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "OverrideIndicator": {
                    "type": "string"
                },
                "OverrideAmount": {
                    "format": "double",
                    "type": "number"
                },
                "DbStatus": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CartPayment": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "TenderedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethod": {
                    "$ref": "#/definitions/CartPaymentMethod"
                },
                "LastFourCreditCardNumber": {
                    "type": "string"
                },
                "PayerName": {
                    "type": "string"
                },
                "CheckNumber": {
                    "type": "string"
                },
                "GiftCertificateNumber": {
                    "type": "string"
                },
                "Applied": {
                    "type": "boolean"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "CartPricingRuleMessage": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Message": {
                    "type": "string"
                },
                "IsMessageOnlyRule": {
                    "type": "boolean"
                },
                "NewRuleIndicator": {
                    "type": "string"
                },
                "MessageType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PricingRule": {
                    "$ref": "#/definitions/CartPricingRuleSummary"
                }
            }
        },
        "CartProduct": {
            "type": "object",
            "properties": {
                "ProductClass": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Performance": {
                    "$ref": "#/definitions/CartProductPerformance"
                },
                "Package": {
                    "$ref": "#/definitions/CartProductPackage"
                },
                "Contribution": {
                    "$ref": "#/definitions/CartContribution"
                },
                "Membership": {
                    "$ref": "#/definitions/CartMembership"
                },
                "GiftCertificate": {
                    "$ref": "#/definitions/CartGiftCertificate"
                },
                "UserDefinedFee": {
                    "$ref": "#/definitions/CartFeeDetail"
                },
                "ProductGrouping": {
                    "type": "string"
                }
            }
        },
        "PaymentPlanCard": {
            "type": "object",
            "properties": {
                "PaymentMethodGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "ExpiryMonth": {
                    "format": "int32",
                    "type": "integer"
                },
                "ExpiryYear": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CartFeeSummary": {
            "type": "object",
            "properties": {
                "FeeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "CartPaymentMethod": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "AccountType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PaymentType": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "CartPricingRuleSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "RuleAction": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CartProductPerformance": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItem": {
                    "$ref": "#/definitions/CartLineItem"
                }
            }
        },
        "CartProductPackage": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartLineItem"
                    }
                }
            }
        },
        "CartContribution": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DbStatus": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "Fund": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "CustomDataItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomDataItem"
                    }
                },
                "OnAccountPaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "CartMembership": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DbStatus": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "Fund": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "MembershipOrganization": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "MembershipLevel": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "CustomDataItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomDataItem"
                    }
                },
                "OnAccountPaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CartGiftCertificate": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "GiftCertificateNumber": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "Notes": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Applied": {
                    "type": "boolean"
                }
            }
        },
        "CartLineItem": {
            "type": "object",
            "properties": {
                "AlternateLineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlternateLineItem"
                    }
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SuperPackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AlternateUpgrade": {
                    "type": "string"
                },
                "Primary": {
                    "type": "boolean"
                },
                "DbStatus": {
                    "format": "int32",
                    "type": "integer"
                },
                "Source": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Package": {
                    "$ref": "#/definitions/CartPackage"
                },
                "Performance": {
                    "$ref": "#/definitions/CartPerformance"
                },
                "PerformanceGroup": {
                    "$ref": "#/definitions/CartPerformanceGroup"
                },
                "SubLineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartSubLineItem"
                    }
                },
                "SpecialRequest": {
                    "$ref": "#/definitions/SpecialRequest"
                },
                "TotalDue": {
                    "format": "double",
                    "type": "number"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "AlternateLineItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SuperPackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AlternateUpgrade": {
                    "type": "string"
                },
                "Primary": {
                    "type": "boolean"
                },
                "DbStatus": {
                    "format": "int32",
                    "type": "integer"
                },
                "Package": {
                    "$ref": "#/definitions/CartPackage"
                },
                "Performance": {
                    "$ref": "#/definitions/CartPerformance"
                },
                "SubLineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartSubLineItem"
                    }
                },
                "SpecialRequest": {
                    "$ref": "#/definitions/SpecialRequest"
                },
                "TotalDue": {
                    "format": "double",
                    "type": "number"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "CartPackage": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Season": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Type": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "FixedPackage": {
                    "type": "boolean"
                },
                "NFSPackage": {
                    "type": "boolean"
                },
                "SuperPackage": {
                    "type": "boolean"
                },
                "SubPackage": {
                    "type": "boolean"
                },
                "Date": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "CartPerformance": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Facility": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Duration": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductionSeason": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Season": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "TimeSlot": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Type": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/CartZoneMap"
                },
                "BestSeatMap": {
                    "$ref": "#/definitions/CartBestSeatMap"
                }
            }
        },
        "CartPerformanceGroup": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "CartSubLineItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ApplyPricing": {
                    "type": "boolean"
                },
                "DbStatus": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceType": {
                    "$ref": "#/definitions/CartPriceType"
                },
                "OriginalPriceType": {
                    "$ref": "#/definitions/CartPriceType"
                },
                "StatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SubLineItemDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartSubLineItemDetail"
                    }
                },
                "Zone": {
                    "$ref": "#/definitions/CartZone"
                },
                "Seat": {
                    "$ref": "#/definitions/CartSeat"
                },
                "Recipient": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaidAmount": {
                    "format": "double",
                    "type": "number"
                },
                "SubLineItemFees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartFeeDetail"
                    }
                },
                "NewRuleIndicator": {
                    "type": "string"
                },
                "RuleIndicator": {
                    "type": "string"
                },
                "PricingRule": {
                    "$ref": "#/definitions/CartPricingRuleSummary"
                }
            }
        },
        "SpecialRequest": {
            "type": "object",
            "properties": {
                "StartPrice": {
                    "format": "double",
                    "type": "number"
                },
                "EndPrice": {
                    "format": "double",
                    "type": "number"
                },
                "WheelchairSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "AisleSeat": {
                    "type": "string"
                },
                "ContiguousSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartingRow": {
                    "type": "string"
                },
                "EndingRow": {
                    "type": "string"
                },
                "StartingSeat": {
                    "type": "string"
                },
                "EndingSeat": {
                    "type": "string"
                },
                "HoldCode": {
                    "format": "int32",
                    "type": "integer"
                },
                "NoStairs": {
                    "type": "boolean"
                },
                "LeaveSingleSeats": {
                    "type": "boolean"
                },
                "Notes": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "CartZoneMap": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "SeatMap": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "CartBestSeatMap": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "IsGA": {
                    "type": "boolean"
                }
            }
        },
        "CartPriceType": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PriceTypeReason": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "AliasDescription": {
                    "type": "string"
                }
            }
        },
        "CartSubLineItemDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "BenevolentIndicator": {
                    "type": "boolean"
                },
                "CampaignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DiscountType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaidAmount": {
                    "format": "double",
                    "type": "number"
                },
                "OriginalPrice": {
                    "format": "double",
                    "type": "number"
                },
                "PerformancePriceTypeLayerId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CartZone": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ZoneGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Abbreviation": {
                    "type": "string"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneTime": {
                    "type": "string"
                }
            }
        },
        "CartSeat": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Row": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Section": {
                    "$ref": "#/definitions/CartSeatSection"
                }
            }
        },
        "CartSeatSection": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "PrintDescription": {
                    "type": "string"
                }
            }
        },
        "AddBookingRequest": {
            "type": "object",
            "properties": {
                "BookingId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "UpdatePaymentPlanRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Card": {
                    "$ref": "#/definitions/PaymentPlanCard"
                },
                "BillingTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ContactPointPurposeMap": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ContactPoint": {
                    "$ref": "#/definitions/ContactPoint"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ContactPointCategory": {
                    "$ref": "#/definitions/ContactPointCategorySummary"
                },
                "Purpose": {
                    "$ref": "#/definitions/ContactPointPurposeSummary"
                }
            }
        },
        "ContactPoint": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ContactPointCategoryId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Type": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Address": {
                    "$ref": "#/definitions/AddressContactPoint"
                },
                "Phone": {
                    "$ref": "#/definitions/PhoneContactPoint"
                },
                "ElectronicAddress": {
                    "$ref": "#/definitions/ElectronicAddressContactPoint"
                }
            }
        },
        "ContactPointCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "ContactPointPurposeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "PurposeCategory": {
                    "$ref": "#/definitions/PurposeCategorySummary"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "AddressContactPoint": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Street1": {
                    "type": "string"
                },
                "Street2": {
                    "type": "string"
                },
                "Street3": {
                    "type": "string"
                },
                "City": {
                    "type": "string"
                },
                "StateCode": {
                    "type": "string"
                },
                "PostalCode": {
                    "type": "string"
                },
                "CountryId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PhoneContactPoint": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PhoneNumber": {
                    "type": "string"
                }
            }
        },
        "ElectronicAddressContactPoint": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddress": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PurposeCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Resource": {
            "type": "object",
            "properties": {
                "Capacity": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DefaultConfirmationText": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "ResourceType": {
                    "$ref": "#/definitions/ResourceTypeSummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ContactPermission": {
            "type": "object",
            "properties": {
                "Answer": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LastAskedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ShouldAsk": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/definitions/ContactPermissionTypeSummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ContactPermissionTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Category": {
                    "$ref": "#/definitions/ContactPermissionCategorySummary"
                },
                "Presenter": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultValueForAdd": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ContactPermissionCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "AskFrequencyMonths": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ConstituentTypeAffiliate": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentType": {
                    "$ref": "#/definitions/ConstituentTypeSummary"
                },
                "AffiliationType": {
                    "$ref": "#/definitions/AffiliationTypeSummary"
                },
                "HouseholdPrimary": {
                    "type": "boolean"
                },
                "ShowWithGroup": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "AffiliationTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UseSalary": {
                    "type": "boolean"
                },
                "UseTitle": {
                    "type": "boolean"
                },
                "IsIncludedInSearchResultsDefault": {
                    "type": "boolean"
                },
                "RelationshipCategory": {
                    "$ref": "#/definitions/RelationshipCategorySummary"
                }
            }
        },
        "WorkerQualification": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Qualification": {
                    "$ref": "#/definitions/QualificationSummary"
                }
            }
        },
        "QualificationSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/QualificationCategorySummary"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Country": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DecimalSeparator": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "IsoAlpha3Code": {
                    "type": "string"
                },
                "IsoAlpha2Code": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PhoneCode": {
                    "type": "string"
                },
                "PhoneEditstring": {
                    "type": "string"
                },
                "PhoneMask": {
                    "type": "string"
                },
                "PhoneValidLengths": {
                    "type": "string"
                },
                "ReqCity": {
                    "type": "boolean"
                },
                "ReqPcode": {
                    "type": "boolean"
                },
                "ShortDesc": {
                    "type": "string"
                },
                "UseAvs": {
                    "type": "string"
                },
                "UseStateField": {
                    "type": "string"
                },
                "ZipEditstring": {
                    "type": "string"
                },
                "ZipMask": {
                    "type": "string"
                },
                "ZipValidLengths": {
                    "type": "string"
                }
            }
        },
        "ListCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Gender": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "DefaultPrefix": {
                    "$ref": "#/definitions/PrefixSummary"
                }
            }
        },
        "CurrencyType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Rate": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "AccountType": {
            "type": "object",
            "properties": {
                "CardLength": {
                    "type": "string"
                },
                "CardPrefix": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EditMask": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Mod10Indicator": {
                    "type": "string"
                },
                "CardtypeIndicator": {
                    "type": "string"
                }
            }
        },
        "GiftAidRate": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Rate": {
                    "format": "double",
                    "type": "number"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Facility": {
            "type": "object",
            "properties": {
                "DefaultBestSeatMapId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultZoneMapId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatMap": {
                    "$ref": "#/definitions/SeatMap"
                },
                "Theater": {
                    "$ref": "#/definitions/TheaterSummary"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "SeatMap": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "TheaterSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "ContactType": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PricingRule": {
            "type": "object",
            "properties": {
                "ResultSeasonPackageType": {
                    "type": "string"
                },
                "Appeals": {
                    "type": "string"
                },
                "Constituencies": {
                    "type": "string"
                },
                "ConstituentAttribute": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentAttributeValue1": {
                    "type": "string"
                },
                "ConstituentAttributeValue2": {
                    "type": "string"
                },
                "ConstituentListId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentExclusionListId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentRankType": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentRankingValue1": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentRankingValue2": {
                    "format": "int32",
                    "type": "integer"
                },
                "DiscountIsPercent": {
                    "type": "boolean"
                },
                "ApplyToLowestCommonNumberOfSeats": {
                    "type": "boolean"
                },
                "ExcludeGeneralPublic": {
                    "type": "boolean"
                },
                "PromotedAppeals": {
                    "type": "string"
                },
                "PromotedSources": {
                    "type": "string"
                },
                "QualifyingPackage": {
                    "type": "string"
                },
                "QualifyingPerformance": {
                    "type": "string"
                },
                "QualifyingPriceType1": {
                    "type": "string"
                },
                "QualifyingPriceType2": {
                    "type": "string"
                },
                "QualifyingProductionSeason": {
                    "type": "string"
                },
                "QualifyingSeasonPackageType": {
                    "type": "string"
                },
                "QualifyingSeatCount1Value1": {
                    "format": "int32",
                    "type": "integer"
                },
                "QualifyingSeatCount1Value2": {
                    "format": "int32",
                    "type": "integer"
                },
                "QualifyingSeatCount2Value1": {
                    "format": "int32",
                    "type": "integer"
                },
                "QualifyingSeatCount2Value2": {
                    "format": "int32",
                    "type": "integer"
                },
                "QualifyingZone": {
                    "type": "string"
                },
                "ResultPackage": {
                    "type": "string"
                },
                "ResultPerformance": {
                    "type": "string"
                },
                "ResultPriceType": {
                    "type": "string"
                },
                "ResultProductionSeason": {
                    "type": "string"
                },
                "ResultSeatCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "ResultMaximumSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "ResultMaximumSeats2": {
                    "format": "int32",
                    "type": "integer"
                },
                "ResultZone": {
                    "type": "string"
                },
                "Sources": {
                    "type": "string"
                },
                "ConstituentAttributeOperator": {
                    "$ref": "#/definitions/CriterionOperatorSummary"
                },
                "ConstituentRankingOperator": {
                    "$ref": "#/definitions/CriterionOperatorSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "DiscountAmount": {
                    "format": "double",
                    "type": "number"
                },
                "DiscountPercentRound": {
                    "format": "int32",
                    "type": "integer"
                },
                "DiscountPriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MaxSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "RespectMinimumPrice": {
                    "type": "boolean"
                },
                "ApplyOncePerOrder": {
                    "type": "boolean"
                },
                "RuleAction": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "OverTheLimitDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "RuleCategory": {
                    "$ref": "#/definitions/PricingRuleCategorySummary"
                },
                "RuleType": {
                    "$ref": "#/definitions/PricingRuleTypeSummary"
                },
                "Messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PricingRuleMessage"
                    }
                }
            }
        },
        "CriterionOperatorSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Symbol": {
                    "type": "string"
                }
            }
        },
        "PricingRuleCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PricingRuleTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PricingRuleMessage": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "MessageType": {
                    "$ref": "#/definitions/PricingRuleMessageTypeSummary"
                },
                "PricingRule": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "IsFromMessageOnlyRule": {
                    "type": "boolean"
                }
            }
        },
        "PricingRuleMessageTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "SalesLayoutButtonType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PackageWebContent": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Value": {
                    "type": "string"
                },
                "ContentType": {
                    "$ref": "#/definitions/WebContentTypeSummary"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "HoldCode": {
            "type": "object",
            "properties": {
                "BlackoutIndicator": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Legend": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/definitions/HoldCodeCategorySummary"
                }
            }
        },
        "HoldCodeCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PaymentGatewayActivity": {
            "type": "object",
            "properties": {
                "AccountNumber": {
                    "type": "string"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "AuthCode": {
                    "type": "string"
                },
                "AvsAddress": {
                    "type": "string"
                },
                "AvsPostalcode": {
                    "type": "string"
                },
                "AvsResultCode": {
                    "type": "string"
                },
                "BalanceAmount": {
                    "format": "double",
                    "type": "number"
                },
                "BalanceCurrencyCode": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CvvResultCode": {
                    "type": "string"
                },
                "EcommerceIndicator": {
                    "type": "string"
                },
                "EmvApplicationName": {
                    "type": "string"
                },
                "EmvApplicationIdentifier": {
                    "type": "string"
                },
                "EmvPinVerified": {
                    "type": "string"
                },
                "EmvHostResponseCode": {
                    "type": "string"
                },
                "EmvHostResponseMessage": {
                    "type": "string"
                },
                "EmvCryptogram": {
                    "type": "string"
                },
                "EntryMethod": {
                    "type": "string"
                },
                "ExpirationDate": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MerchantId": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Origin": {
                    "type": "string"
                },
                "PaymentGatewayTransactionType": {
                    "$ref": "#/definitions/PaymentGatewayTransactionType"
                },
                "PaymentMethodGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProviderCommunicationDurationMs": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProviderTransactionDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ReferenceNumber": {
                    "type": "string"
                },
                "ResponseCode": {
                    "type": "string"
                },
                "ResponseMessage": {
                    "type": "string"
                },
                "Success": {
                    "type": "string"
                },
                "TerminalIdentifier": {
                    "type": "string"
                },
                "TotalDurationMs": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserData": {
                    "type": "string"
                },
                "NetworkTransactionId": {
                    "type": "string"
                },
                "ActivityData": {
                    "type": "string"
                }
            }
        },
        "PriceTypeReason": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "TicketText": {
                    "type": "string"
                }
            }
        },
        "State": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "StateCode": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Country": {
                    "$ref": "#/definitions/CountrySummary"
                }
            }
        },
        "CountrySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Pronoun": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ServiceResourceUserGroup": {
            "type": "object",
            "properties": {
                "CanCreate": {
                    "type": "boolean"
                },
                "CanDelete": {
                    "type": "boolean"
                },
                "CanRead": {
                    "type": "boolean"
                },
                "CanUpdate": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ServiceResource": {
                    "$ref": "#/definitions/ServiceResource"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "ServiceResource": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "DesignationCode": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "SalesChannel": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "UpgradeCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "OutputSet": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LastUsedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "TMSIndicator": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "ElementGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutputSetElementGroup"
                    }
                }
            }
        },
        "OutputSetElementGroup": {
            "type": "object",
            "properties": {
                "Group": {
                    "$ref": "#/definitions/QueryElementGroupSummary"
                },
                "IsSingleRow": {
                    "type": "boolean"
                },
                "KeywordId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IncludePrimaryAffiliation": {
                    "type": "boolean"
                },
                "Elements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutputSetElement"
                    }
                },
                "Filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutputSetFilter"
                    }
                }
            }
        },
        "QueryElementGroupSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsVirtual": {
                    "type": "boolean"
                },
                "NumberOfParameters": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "OutputSetElement": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "QueryElement": {
                    "$ref": "#/definitions/QueryElementSummary"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "DescriptionRenamed": {
                    "type": "string"
                }
            }
        },
        "OutputSetFilter": {
            "type": "object",
            "properties": {
                "Filter": {
                    "$ref": "#/definitions/QueryElementFilterSummary"
                },
                "Items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterDataItem"
                    }
                },
                "Value1": {
                    "type": "string"
                },
                "Value2": {
                    "type": "string"
                },
                "Operator": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "QueryElementSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "IsSingleRow": {
                    "type": "boolean"
                },
                "Group": {
                    "$ref": "#/definitions/QueryElementGroupSummary"
                }
            }
        },
        "QueryElementFilterSummary": {
            "type": "object",
            "properties": {
                "DataType": {
                    "format": "int32",
                    "enum": [
                        0,
                        10,
                        20,
                        40,
                        50
                    ],
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "EndOfDay": {
                    "type": "boolean"
                },
                "FilterElement": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "HasReferenceData": {
                    "type": "boolean"
                },
                "Group": {
                    "$ref": "#/definitions/QueryElementGroupSummary"
                }
            }
        },
        "FilterDataItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Prefix": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ModeOfSaleUserGroup": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/ModeOfSale"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "ModeOfSale": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Category": {
                    "$ref": "#/definitions/ModeOfSaleCategorySummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "GeneralPublicInd": {
                    "type": "boolean"
                },
                "SliAutoDeleteInd": {
                    "type": "boolean"
                },
                "MustBePaidInd": {
                    "type": "boolean"
                },
                "MustBeSeatedInd": {
                    "type": "boolean"
                },
                "MustBeTicketedInd": {
                    "type": "boolean"
                },
                "HoldUntilMethod": {
                    "type": "string"
                },
                "HoldUntilDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "HoldUntilDays": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultHeaderFormatId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ClearSourceNoInd": {
                    "type": "boolean"
                },
                "ConfirmationMode": {
                    "type": "boolean"
                },
                "HaboDays": {
                    "format": "int32",
                    "type": "integer"
                },
                "HaboForeign": {
                    "type": "boolean"
                },
                "EditDate": {
                    "type": "boolean"
                },
                "StartPkgOrPerf": {
                    "type": "string"
                },
                "ClearSourceOnReload": {
                    "type": "boolean"
                },
                "EditSourceOnReload": {
                    "type": "boolean"
                },
                "CategoryRequired": {
                    "type": "boolean"
                },
                "SubsSummaryRequired": {
                    "type": "boolean"
                },
                "DefaultAckFormatId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultDeliveryMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AllowUnseatedPaidInd": {
                    "type": "boolean"
                },
                "ConstLinkRequired": {
                    "type": "boolean"
                },
                "DefaultChannelId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SampleForGeneralPublic": {
                    "format": "int32",
                    "type": "integer"
                },
                "SampleForKnownConstituent": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultSalesLayoutId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PricingRuleSetId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PackagePriceType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Keyword": {
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/KeywordCategorySummary"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "ConstituentType": {
                    "format": "int32",
                    "type": "integer"
                },
                "CustomDefaultValue": {
                    "type": "string"
                },
                "CustomId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CustomLimit": {
                    "format": "int32",
                    "type": "integer"
                },
                "CustomRequired": {
                    "type": "boolean"
                },
                "DataType": {
                    "type": "string"
                },
                "DetailColumn": {
                    "type": "string"
                },
                "DetailTable": {
                    "type": "string"
                },
                "EditMask": {
                    "type": "string"
                },
                "FrequentUpdateDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "UseForSearch": {
                    "type": "boolean"
                },
                "ExtendedDescription": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MultipleValue": {
                    "type": "boolean"
                },
                "ReferenceDescriptionColumn": {
                    "type": "string"
                },
                "ReferenceIdColumn": {
                    "type": "string"
                },
                "ReferenceSort": {
                    "type": "string"
                },
                "ReferenceTable": {
                    "type": "string"
                },
                "ReferenceWhere": {
                    "type": "string"
                },
                "SortOrder": {
                    "format": "int32",
                    "type": "integer"
                },
                "KeywordUse": {
                    "type": "string"
                },
                "ValuesCodedIndicator": {
                    "type": "boolean"
                },
                "PrimaryGroupDefault": {
                    "type": "string"
                },
                "ParentTable": {
                    "type": "string"
                },
                "ParentKeyColumn": {
                    "type": "string"
                },
                "KeyColumn": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "HelpText": {
                    "type": "string"
                }
            }
        },
        "ModeOfSaleSurveyQuestion": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/ModeOfSaleSummary"
                },
                "Question": {
                    "$ref": "#/definitions/SurveyQuestion"
                }
            }
        },
        "DiscountType": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "PercentIndicator": {
                    "type": "boolean"
                },
                "RespectMinimumPrice": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                }
            }
        },
        "InterestCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "AccountResponse": {
            "type": "object",
            "properties": {
                "AccountNumber": {
                    "type": "string"
                },
                "AccountType": {
                    "$ref": "#/definitions/AccountTypeSummary"
                },
                "BankIdentifierCode": {
                    "type": "string"
                },
                "CardExpiryMonth": {
                    "format": "int32",
                    "type": "integer"
                },
                "CardExpiryYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "DirectDebitAccountType": {
                    "$ref": "#/definitions/DirectDebitAccountTypeSummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "MandateNumber": {
                    "type": "string"
                },
                "MandateType": {
                    "format": "int32",
                    "type": "integer"
                },
                "MerchantId": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "NumberFirstSix": {
                    "type": "string"
                },
                "NumberLastFour": {
                    "type": "string"
                },
                "PaymentMethodGroup": {
                    "$ref": "#/definitions/PaymentMethodGroupSummary"
                },
                "SignatureDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Token": {
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ShopperReference": {
                    "type": "string"
                }
            }
        },
        "DirectDebitAccountTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ActivityCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "AutoClose": {
                    "type": "boolean"
                }
            }
        },
        "Diagnostic": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                }
            }
        },
        "EmailProfile": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EmailBcc": {
                    "type": "string"
                },
                "EmailCc": {
                    "type": "string"
                },
                "EmailDefaultSubject": {
                    "type": "string"
                },
                "EmailFrom": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "SMTPPassword": {
                    "type": "string"
                },
                "SMTPPort": {
                    "format": "int32",
                    "type": "integer"
                },
                "SMTPServer": {
                    "type": "string"
                },
                "SMTPUserName": {
                    "type": "string"
                },
                "UseSsl": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "PlanWorker": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Worker": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "ShowInPortfolio": {
                    "type": "boolean"
                },
                "Role": {
                    "$ref": "#/definitions/WorkerRoleSummary"
                },
                "Plan": {
                    "$ref": "#/definitions/Entity"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "WorkerRoleSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ShowInPortfolioDefault": {
                    "type": "boolean"
                }
            }
        },
        "SchedulePatternType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "QueryElementFilter": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DataType": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "EndOfDay": {
                    "type": "boolean"
                },
                "FilterElement": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ReferenceDescriptionColumn": {
                    "type": "string"
                },
                "ReferenceIdColumn": {
                    "type": "string"
                },
                "ReferenceSort": {
                    "type": "string"
                },
                "ReferenceTable": {
                    "type": "string"
                },
                "ReferenceWhere": {
                    "type": "string"
                },
                "Group": {
                    "$ref": "#/definitions/QueryElementGroupSummary"
                }
            }
        },
        "BillingSchedule": {
            "type": "object",
            "properties": {
                "BillAmounts": {
                    "type": "string"
                },
                "BillDates": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LongDescription": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "Artist": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "MiddleName": {
                    "type": "string"
                },
                "VoiceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Bio": {
                    "type": "string"
                }
            }
        },
        "HoldCodeCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "ControlGroupUserGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "SourceGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Template": {
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/TemplateCategorySummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "TemplateSubject": {
                    "type": "string"
                },
                "TemplateBody": {
                    "type": "string"
                },
                "IsHtmlBody": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "TemplateCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Type": {
                    "$ref": "#/definitions/TemplateTypeSummary"
                }
            }
        },
        "TemplateTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "WebContentType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EditMask": {
                    "type": "string"
                },
                "FullTextSearchIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "LastContentUseUpdateDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Limit": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReferenceDescriptionColumn": {
                    "type": "string"
                },
                "ReferenceIdColumn": {
                    "type": "string"
                },
                "ReferenceSort": {
                    "type": "string"
                },
                "ReferenceTable": {
                    "type": "string"
                },
                "ReferenceWhere": {
                    "type": "string"
                },
                "UseWebApi": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "TemplateCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                },
                "Type": {
                    "$ref": "#/definitions/TemplateTypeSummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "PlanStatus": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "IntegrationDefault": {
            "type": "object",
            "properties": {
                "AccessId": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DefaultValue": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "FieldName": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Organization": {
                    "$ref": "#/definitions/OrganizationSummary"
                },
                "Integration": {
                    "$ref": "#/definitions/IntegrationSummary"
                }
            }
        },
        "OrganizationSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "LicenseeAccountCode": {
                    "type": "string"
                }
            }
        },
        "IntegrationSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "Association": {
            "type": "object",
            "properties": {
                "AssociatedConstituent": {
                    "$ref": "#/definitions/Entity"
                },
                "AssociatedName": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AssociationType": {
                    "$ref": "#/definitions/AssociationTypeSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "IsIncludedInSearchResults": {
                    "type": "boolean"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Note": {
                    "type": "string"
                },
                "BirthDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Gender": {
                    "$ref": "#/definitions/GenderSummary"
                },
                "ReciprocalAssociation": {
                    "$ref": "#/definitions/Entity"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "AssociationTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ReciprocalType": {
                    "$ref": "#/definitions/Entity"
                },
                "RelationshipCategory": {
                    "$ref": "#/definitions/RelationshipCategorySummary"
                }
            }
        },
        "GenderSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "List": {
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/ListCategorySummary"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "ConstituentCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Criteria": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListCriteria"
                    }
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "IsDynamic": {
                    "type": "boolean"
                },
                "EditMode": {
                    "type": "string"
                },
                "LastUsedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "RelationshipOptions": {
                    "$ref": "#/definitions/ListRelationshipOptions"
                },
                "TMSIndicator": {
                    "type": "boolean"
                },
                "AnalyticsIndicator": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "ListSql": {
                    "type": "string"
                },
                "OutputSet": {
                    "$ref": "#/definitions/OutputSetSummary"
                },
                "Households": {
                    "format": "int32",
                    "type": "integer"
                },
                "AffiliatedIndividuals": {
                    "format": "int32",
                    "type": "integer"
                },
                "Individuals": {
                    "format": "int32",
                    "type": "integer"
                },
                "Organizations": {
                    "format": "int32",
                    "type": "integer"
                },
                "Generate": {
                    "type": "boolean"
                }
            }
        },
        "ListCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ListCriteria": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "KeywordId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Keyword": {
                    "$ref": "#/definitions/KeywordSummary"
                },
                "Items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeywordDataItem"
                    }
                },
                "Operator": {
                    "type": "string"
                },
                "Value1": {
                    "type": "string"
                },
                "Value2": {
                    "type": "string"
                },
                "IsTop": {
                    "type": "string"
                },
                "Condition": {
                    "type": "string"
                },
                "ExtractionFlag": {
                    "type": "string"
                },
                "IncludePrimaryAffiliation": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ListRelationshipOptions": {
            "type": "object",
            "properties": {
                "AssociatedTypes": {
                    "type": "string"
                },
                "AssociatedInactive": {
                    "type": "boolean"
                },
                "AssociatedUseDates": {
                    "type": "boolean"
                },
                "AssociatedList": {
                    "$ref": "#/definitions/ListSummary"
                },
                "AffiliatedGroupTypes": {
                    "type": "string"
                },
                "AffiliatedGroupInactive": {
                    "type": "boolean"
                },
                "AffiliatedGroupUseDates": {
                    "type": "boolean"
                },
                "AffiliatedGroupList": {
                    "$ref": "#/definitions/ListSummary"
                },
                "AffiliatedIndividualTypes": {
                    "type": "string"
                },
                "AffiliatedIndividualInactive": {
                    "type": "boolean"
                },
                "AffiliatedIndividualUseDates": {
                    "type": "boolean"
                },
                "AffiliatedIndividualList": {
                    "$ref": "#/definitions/ListSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "KeepOrReplaceOriginal": {
                    "type": "string"
                },
                "ReplaceIndividuals": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "OutputSetSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "TMSIndicator": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastUsedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "KeywordDataItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ListSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Category": {
                    "$ref": "#/definitions/ListCategorySummary"
                },
                "ConstituentCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "LastUsedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "IsDynamic": {
                    "type": "boolean"
                },
                "EditMode": {
                    "type": "string"
                }
            }
        },
        "ContributionDesignation": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LetterText": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "GiftAidDeclaration": {
            "type": "object",
            "properties": {
                "ConfirmDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "EligibleIndicator": {
                    "type": "boolean"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "ReceivedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ContactMethod": {
                    "$ref": "#/definitions/GiftAidContactMethodSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "DocumentStatus": {
                    "$ref": "#/definitions/GiftAidDocumentStatusSummary"
                },
                "GiftAidType": {
                    "$ref": "#/definitions/GiftAidTypeSummary"
                },
                "IneligibleReason": {
                    "$ref": "#/definitions/GiftAidIneligibleReasonSummary"
                }
            }
        },
        "GiftAidContactMethodSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "GiftAidDocumentStatusSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "GiftAidTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "GiftAidIneligibleReasonSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "BatchType": {
            "type": "object",
            "properties": {
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "CntlIndicator": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "BatchTypeGroup": {
                    "$ref": "#/definitions/BatchTypeGroupSummary"
                },
                "BusinessUnit": {
                    "$ref": "#/definitions/BusinessUnitSummary"
                }
            }
        },
        "BatchTypeGroupSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "BookingCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "Constituency": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituencyType": {
                    "$ref": "#/definitions/ConstituencyTypeSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ConstituencyTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CampaignFund": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "Fund": {
                    "$ref": "#/definitions/FundSummary"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "GoalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "SubLineItemStatus": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Priority": {
                    "format": "int32",
                    "type": "integer"
                },
                "StatusCode": {
                    "type": "string"
                }
            }
        },
        "MailIndicator": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Organization": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LicenseeAccountCode": {
                    "type": "string"
                }
            }
        },
        "Step": {
            "type": "object",
            "properties": {
                "Associate": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CompletedOnDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DueDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "NewValue": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "OldValue": {
                    "type": "string"
                },
                "Plan": {
                    "$ref": "#/definitions/PlanSummary"
                },
                "Type": {
                    "$ref": "#/definitions/StepTypeSummary"
                },
                "Priority": {
                    "format": "int32",
                    "type": "integer"
                },
                "StepDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "WarningDays": {
                    "format": "int32",
                    "type": "integer"
                },
                "Worker": {
                    "$ref": "#/definitions/ConstituentShortDisplayNameSummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "PlanSummary": {
            "type": "object",
            "properties": {
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "ContributionDesignation": {
                    "$ref": "#/definitions/ContributionDesignationSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Fund": {
                    "$ref": "#/definitions/FundSummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "StepTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "AllowAttachments": {
                    "type": "string"
                },
                "UseCompletedOnDateTime": {
                    "type": "string"
                },
                "UseDueDateTime": {
                    "type": "string"
                }
            }
        },
        "ConstituentShortDisplayNameSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SortName": {
                    "type": "string"
                },
                "ShortDisplayName": {
                    "type": "string"
                }
            }
        },
        "PlanPriority": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Ranking": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "PerformancePrice": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EffectiveDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "MinPrice": {
                    "format": "double",
                    "type": "number"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformancePriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Price": {
                    "format": "double",
                    "type": "number"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "HasEvents": {
                    "type": "boolean"
                },
                "IsPriceBasedOnCurrentEvent": {
                    "type": "boolean"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ContactPointCategoryPurpose": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ContactPointCategory": {
                    "$ref": "#/definitions/ContactPointCategorySummary"
                },
                "Purpose": {
                    "$ref": "#/definitions/ContactPointPurposeSummary"
                }
            }
        },
        "Lane": {
            "type": "object",
            "properties": {
                "LaneId": {
                    "type": "string"
                },
                "TerminalId": {
                    "type": "string"
                },
                "SerialNumber": {
                    "type": "string"
                },
                "ModelNumber": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "ApplicationVersion1": {
                    "type": "string"
                },
                "ApplicationVersion2": {
                    "type": "string"
                },
                "OperatingSystemVersion": {
                    "type": "string"
                },
                "SecurityVersion": {
                    "type": "string"
                },
                "EmvKernelVersion": {
                    "type": "string"
                },
                "RawDeviceInformation": {
                    "type": "string"
                },
                "Profile": {
                    "$ref": "#/definitions/Profile"
                },
                "Links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApiLink"
                    }
                },
                "ConnectionStatus": {
                    "$ref": "#/definitions/ConnectionStatus"
                }
            }
        },
        "Profile": {
            "type": "object",
            "properties": {
                "IdleMessage": {
                    "type": "string"
                }
            }
        },
        "ApiLink": {
            "type": "object",
            "properties": {
                "Href": {
                    "type": "string"
                },
                "Method": {
                    "type": "string"
                },
                "Relation": {
                    "type": "string"
                }
            }
        },
        "ConnectionStatus": {
            "type": "object",
            "properties": {
                "TimeStamp": {
                    "format": "date-time",
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                }
            }
        },
        "QualificationCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                }
            }
        },
        "ContactPermissionCategory": {
            "type": "object",
            "properties": {
                "AskFrequencyMonths": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                }
            }
        },
        "QueryElement": {
            "type": "object",
            "properties": {
                "Group": {
                    "$ref": "#/definitions/QueryElementGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DataSelect": {
                    "type": "string"
                },
                "KeywordId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PrimaryGroupDefault": {
                    "type": "boolean"
                },
                "IsSingleRow": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                }
            }
        },
        "ContactPermissionType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DefaultValueForAdd": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Presenter": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/ContactPermissionCategory"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "Language": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ObjectPermission": {
            "type": "object",
            "properties": {
                "CanCreate": {
                    "type": "string"
                },
                "CanView": {
                    "type": "string"
                },
                "CanDelete": {
                    "type": "string"
                },
                "CanEdit": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Constituency": {
                    "$ref": "#/definitions/ConstituencyTypeSummary"
                },
                "ApplicationObject": {
                    "$ref": "#/definitions/ApplicationObject"
                },
                "UserGroup": {
                    "$ref": "#/definitions/UserGroup"
                }
            }
        },
        "ApplicationObject": {
            "type": "object",
            "properties": {
                "ConstituencyBased": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "ObjectType": {
                    "type": "string"
                }
            }
        },
        "UserGroup": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "IsAdmin": {
                    "type": "boolean"
                },
                "AllowApp": {
                    "type": "boolean"
                },
                "AllowTablet": {
                    "type": "boolean"
                },
                "AllowOnTheGo": {
                    "type": "boolean"
                },
                "AllowAnalytics": {
                    "type": "boolean"
                },
                "Division": {
                    "$ref": "#/definitions/Division"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Division": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Organization": {
                    "$ref": "#/definitions/OrganizationSummary"
                }
            }
        },
        "WorkerRole": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ShowInPortfolioDefault": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "SurveyResponse": {
            "type": "object",
            "properties": {
                "Answer": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "QuestionId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "SeatStatus": {
            "type": "object",
            "properties": {
                "BackColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "ForeColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "StatusCode": {
                    "type": "string"
                },
                "StatusLegend": {
                    "type": "string"
                },
                "StatusPriority": {
                    "format": "int32",
                    "type": "integer"
                },
                "Tck": {
                    "type": "string"
                }
            }
        },
        "CustomDefaultCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "Era": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PackageType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ResourceType": {
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/ResourceCategorySummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "RequireAvailability": {
                    "type": "boolean"
                },
                "CanBeShared": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "HasCapacity": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "IssueAction": {
            "type": "object",
            "properties": {
                "ActionType": {
                    "$ref": "#/definitions/ActionTypeSummary"
                },
                "ActionDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Issue": {
                    "$ref": "#/definitions/Entity"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "Notes": {
                    "type": "string"
                },
                "Resolved": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "LetterPrintedDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "ActionTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ExpiredReportRequest": {
            "type": "object",
            "properties": {
                "RequestId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SnapshotId": {
                    "type": "string"
                },
                "ReportUrl": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "RequestType": {
                    "type": "string"
                }
            }
        },
        "EmarketIndicator": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PriceTemplate": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DefaultDesignationCode": {
                    "$ref": "#/definitions/DesignationCodeSummary"
                },
                "DefaultGlAccount": {
                    "$ref": "#/definitions/GlAccountSummary"
                },
                "DefaultPriceLayerType": {
                    "$ref": "#/definitions/PriceLayerTypeSummary"
                },
                "DefaultResaleAccount": {
                    "$ref": "#/definitions/GlAccountSummary"
                },
                "Name": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PriceCategory": {
                    "$ref": "#/definitions/PriceCategorySummary"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/ZoneMapSummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "TemplatePriceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TemplatePriceType"
                    }
                }
            }
        },
        "PriceLayerTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "PriceCategory": {
                    "$ref": "#/definitions/PriceCategorySummary"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ResearchEntry": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ResearchDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ResearchSource": {
                    "type": "string"
                },
                "Researcher": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "ResearchType": {
                    "$ref": "#/definitions/ResearchTypeSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                }
            }
        },
        "ResearchTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Interest": {
            "type": "object",
            "properties": {
                "InterestType": {
                    "$ref": "#/definitions/InterestTypeSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Selected": {
                    "type": "boolean"
                },
                "Weight": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "InterestTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UsedIn": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/InterestCategorySummary"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "InterestCategorySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PerformancePriceType": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DesignationCodeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EffectiveDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ResaleAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsWithinDateRange": {
                    "type": "boolean"
                },
                "GlAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformancePriceLayerId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TicketDesignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BaseIndicator": {
                    "type": "boolean"
                },
                "PerformancePrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformancePrice"
                    }
                }
            }
        },
        "PerformancePriceTypeUpdateRequest": {
            "type": "object",
            "properties": {
                "PerformanceIds": {
                    "type": "string"
                },
                "PriceLayerTypeIds": {
                    "type": "string"
                },
                "PriceTypeIds": {
                    "type": "string"
                },
                "DesignationCodeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ResaleAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "GlAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "TicketDesignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BaseIndicator": {
                    "type": "boolean"
                }
            }
        },
        "Affiliation": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AffiliationType": {
                    "$ref": "#/definitions/AffiliationTypeSummary"
                },
                "AffiliatedName": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "GroupConstituent": {
                    "$ref": "#/definitions/Entity"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "IndividualConstituent": {
                    "$ref": "#/definitions/Entity"
                },
                "IsAllowedToTransact": {
                    "type": "boolean"
                },
                "IsIncludedInSearchResults": {
                    "type": "boolean"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "Note": {
                    "type": "string"
                },
                "IndividualConstituentName": {
                    "type": "string"
                },
                "GroupConstituentName": {
                    "type": "string"
                },
                "IndividualConstituentSortName": {
                    "type": "string"
                },
                "GroupConstituentSortName": {
                    "type": "string"
                },
                "Salary": {
                    "format": "double",
                    "type": "number"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Title": {
                    "type": "string"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "NameIndicator": {
                    "format": "int32",
                    "type": "integer"
                },
                "AddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SalutationId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ContactPointCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ContactPointKey": {
                    "type": "string"
                },
                "ContactPointTable": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "CampaignDesignation": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "Designation": {
                    "$ref": "#/definitions/ContributionDesignationSummary"
                },
                "GoalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "HoldCodeUserGroup": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldCode": {
                    "$ref": "#/definitions/HoldCodeSummary"
                },
                "UserGroupId": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "HoldCodeSummary": {
            "type": "object",
            "properties": {
                "BlackoutIndicator": {
                    "type": "boolean"
                },
                "Description": {
                    "type": "string"
                },
                "Legend": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PhilanthropyEntry": {
            "type": "object",
            "properties": {
                "Activity": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DonatedTo": {
                    "type": "string"
                },
                "DonationDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "DonatedToConstituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "PhilanthropyType": {
                    "$ref": "#/definitions/PhilanthropyTypeSummary"
                }
            }
        },
        "PhilanthropyTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PaymentType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ContactPointPurpose": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PurposeCategory": {
                    "$ref": "#/definitions/PurposeCategorySummary"
                }
            }
        },
        "PhoneType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DayEveningIndicator": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "AllowMarketing": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "PerformancePriceLayer": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EffectiveDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "DefaultDesignationCodeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultGlAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultResaleAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceLayerType": {
                    "$ref": "#/definitions/PriceLayerTypeSummary"
                },
                "TemplateId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformancePriceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformancePriceType"
                    }
                }
            }
        },
        "ResearchType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "Composer": {
            "type": "object",
            "properties": {
                "Bio": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "MiddleName": {
                    "type": "string"
                }
            }
        },
        "PortfolioCustomElement": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DataType": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "SqlQuery": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "Alias": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AliasFirstName": {
                    "type": "string"
                },
                "AliasLastName": {
                    "type": "string"
                },
                "AliasType": {
                    "$ref": "#/definitions/AliasTypeSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "AliasTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Ranking": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "RankType": {
                    "$ref": "#/definitions/RankTypeSummary"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "RankTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ConstituentGroupSummary"
                }
            }
        },
        "PlanType": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "MediaType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "GenerateCost": {
                    "format": "double",
                    "type": "number"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "ConstituentProtectionType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                }
            }
        },
        "PhilanthropyType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "Salutation": {
            "type": "object",
            "properties": {
                "BusinessTitle": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "EnvelopeSalutation1": {
                    "type": "string"
                },
                "EnvelopeSalutation2": {
                    "type": "string"
                },
                "Label": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LetterSalutation": {
                    "type": "string"
                },
                "SalutationType": {
                    "$ref": "#/definitions/SalutationTypeSummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "IsFromAffiliation": {
                    "type": "boolean"
                }
            }
        },
        "GiftAidStatus": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Asset": {
            "type": "object",
            "properties": {
                "AcquisitionDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "EstimatedValue": {
                    "format": "double",
                    "type": "number"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "SaleDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "AssetType": {
                    "$ref": "#/definitions/AssetTypeSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                }
            }
        },
        "AssetTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ReceiptSetting": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EmailFooter": {
                    "type": "string"
                },
                "ReceiptEmailProfile": {
                    "$ref": "#/definitions/EmailProfileSummary"
                },
                "EmailHeader": {
                    "type": "string"
                },
                "EmailSubject": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "TicketEmailSubject": {
                    "type": "string"
                },
                "TicketEmailProfile": {
                    "$ref": "#/definitions/EmailProfileSummary"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PrintFooter": {
                    "type": "string"
                },
                "PrintHeader": {
                    "type": "string"
                }
            }
        },
        "EmailProfileSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "KeywordCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Plan": {
            "type": "object",
            "properties": {
                "AskAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "CompleteByDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ContributionAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ContributionDesignation": {
                    "$ref": "#/definitions/ContributionDesignationSummary"
                },
                "HasSteps": {
                    "type": "boolean"
                },
                "HasOpenSteps": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CustomDataItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomDataItem"
                    }
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Fund": {
                    "$ref": "#/definitions/FundSummary"
                },
                "GoalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "Priority": {
                    "$ref": "#/definitions/PlanPrioritySummary"
                },
                "Probability": {
                    "format": "double",
                    "type": "number"
                },
                "RecordedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "PlanAssociates": {
                    "type": "string"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Status": {
                    "$ref": "#/definitions/PlanStatusSummary"
                },
                "Type": {
                    "$ref": "#/definitions/PlanTypeSummary"
                },
                "OriginalSource": {
                    "$ref": "#/definitions/PlanSourceSummary"
                },
                "PrimaryWorker": {
                    "$ref": "#/definitions/ConstituentShortDisplayNameSummary"
                },
                "LastStepType": {
                    "$ref": "#/definitions/StepTypeSummary"
                },
                "LastStepDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "NextStepType": {
                    "$ref": "#/definitions/StepTypeSummary"
                },
                "NextStepDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastWorkerDisplayName": {
                    "type": "string"
                }
            }
        },
        "PlanPrioritySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Ranking": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PlanStatusSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PlanTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PlanSourceSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Zone": {
            "type": "object",
            "properties": {
                "Abbreviation": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "ZoneGroup": {
                    "$ref": "#/definitions/ZoneGroupSummary"
                },
                "ZoneTime": {
                    "type": "string"
                },
                "StartTime": {
                    "type": "string"
                },
                "EndTime": {
                    "type": "string"
                },
                "ZoneLegend": {
                    "type": "string"
                },
                "ZoneMapId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PricingRuleSet": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "Rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PricingRuleSetMap"
                    }
                }
            }
        },
        "PricingRuleSetMap": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "PricingRule": {
                    "$ref": "#/definitions/PricingRuleSummary"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PricingRuleSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "RuleAction": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "RuleType": {
                    "$ref": "#/definitions/PricingRuleTypeSummary"
                },
                "RuleCategory": {
                    "$ref": "#/definitions/PricingRuleCategorySummary"
                }
            }
        },
        "BusinessUnit": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "DocumentCategory": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ParentTableName": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "AnalyticsReport": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ReportPath": {
                    "type": "string"
                },
                "Division": {
                    "$ref": "#/definitions/Division"
                }
            }
        },
        "Integration": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "InterestType": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/InterestCategorySummary"
                },
                "UsedIn": {
                    "type": "string"
                },
                "SearchIndicator": {
                    "type": "boolean"
                }
            }
        },
        "SeatCode": {
            "type": "object",
            "properties": {
                "BackColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "Context": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "DisplayLetter": {
                    "type": "string"
                },
                "ForeColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "IsSeat": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "TicketText": {
                    "type": "string"
                }
            }
        },
        "NotificationEvent": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Topic": {
                    "type": "string"
                },
                "ReceivedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EventType": {
                    "type": "string"
                },
                "Reference": {
                    "type": "string"
                },
                "Payload": {
                    "type": "string"
                },
                "ProcessedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "Attribute": {
            "type": "object",
            "properties": {
                "Keyword": {
                    "$ref": "#/definitions/KeywordSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Value": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "KeywordConstituentType": {
                    "$ref": "#/definitions/KeywordConstituentType"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "KeywordConstituentType": {
            "type": "object",
            "properties": {
                "Inactive": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Theater": {
            "type": "object",
            "properties": {
                "City": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "DrivingDirections": {
                    "type": "string"
                },
                "DataWindowDefinition": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MaximumNumberOfSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "Phone": {
                    "type": "string"
                },
                "PostalCode": {
                    "type": "string"
                },
                "State": {
                    "type": "string"
                },
                "Street": {
                    "type": "string"
                }
            }
        },
        "PlanSource": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "OrderCategory": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PaymentSignature": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Signature": {
                    "format": "byte",
                    "type": "string"
                }
            }
        },
        "InventoryContactPermissionType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ContactPermissionType": {
                    "$ref": "#/definitions/ContactPermissionTypeSummary"
                },
                "ProductionElementId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PerformancePackageModeOfSale": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ETicketReleaseDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PrintIndicator": {
                    "type": "boolean"
                },
                "SeatIndicator": {
                    "type": "boolean"
                },
                "AutoAttend": {
                    "type": "string"
                },
                "PrintOnAutoAttend": {
                    "type": "boolean"
                }
            }
        },
        "ModeOfSaleCategory": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Sequence": {
                    "format": "int32",
                    "type": "integer"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "BatchTypeGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "ActionType": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LetterIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ConstituentGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PaymentMethodGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "MerchantId": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroup"
                }
            }
        },
        "Address": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AffiliatedConstituent": {
                    "$ref": "#/definitions/Entity"
                },
                "AltSalutationType": {
                    "$ref": "#/definitions/SalutationTypeSummary"
                },
                "AddressType": {
                    "$ref": "#/definitions/AddressTypeSummary"
                },
                "City": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "DeliveryPoint": {
                    "type": "string"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "GeoArea": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Label": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Months": {
                    "type": "string"
                },
                "NcoaAction": {
                    "format": "int32",
                    "type": "integer"
                },
                "NcoaSession": {
                    "format": "int32",
                    "type": "integer"
                },
                "PostalCode": {
                    "type": "string"
                },
                "PostalCodeFormatted": {
                    "type": "string"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "State": {
                    "$ref": "#/definitions/StateSummary"
                },
                "Street1": {
                    "type": "string"
                },
                "Street1Address": {
                    "$ref": "#/definitions/StreetAddress"
                },
                "Street2": {
                    "type": "string"
                },
                "Street3": {
                    "type": "string"
                },
                "Country": {
                    "$ref": "#/definitions/CountrySummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "IsFromAffiliation": {
                    "type": "boolean"
                }
            }
        },
        "AddressTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "StateSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "StateCode": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Country": {
                    "$ref": "#/definitions/CountrySummary"
                }
            }
        },
        "StreetAddress": {
            "type": "object",
            "properties": {
                "Number": {
                    "type": "string"
                },
                "Street": {
                    "type": "string"
                }
            }
        },
        "Premiere": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ReportUserGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "RunRight": {
                    "type": "string"
                },
                "ViewRight": {
                    "type": "string"
                },
                "UserGroupId": {
                    "type": "string"
                },
                "ReportId": {
                    "type": "string"
                }
            }
        },
        "Phone": {
            "type": "object",
            "properties": {
                "Address": {
                    "$ref": "#/definitions/AddressSummary"
                },
                "AllowTelemarketing": {
                    "type": "boolean"
                },
                "DayEveningIndicator": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "PhoneNumber": {
                    "type": "string"
                },
                "PhoneFormatted": {
                    "type": "string"
                },
                "PhoneSearch": {
                    "type": "string"
                },
                "PhoneType": {
                    "$ref": "#/definitions/PhoneTypeSummary"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "AddressSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AddressType": {
                    "$ref": "#/definitions/AddressTypeSummary"
                }
            }
        },
        "PhoneTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "CreditResult": {
            "type": "object",
            "properties": {
                "RequestedOwner": {
                    "$ref": "#/definitions/Owner"
                },
                "Credits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Credit"
                    }
                }
            }
        },
        "Owner": {
            "type": "object",
            "properties": {
                "ElementId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Type": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "type": "integer"
                }
            }
        },
        "Credit": {
            "type": "object",
            "properties": {
                "Owner": {
                    "$ref": "#/definitions/Owner"
                },
                "Role": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Artist": {
                    "$ref": "#/definitions/ArtistSummary"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ArtistSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "MiddleName": {
                    "type": "string"
                },
                "Voice": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Biography": {
                    "type": "string"
                }
            }
        },
        "AttachedToLogin": {
            "type": "object",
            "properties": {
                "IsAttachedToLogin": {
                    "type": "boolean"
                }
            }
        },
        "ReferenceTableUserGroupSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReferenceTable": {
                    "$ref": "#/definitions/ReferenceTableSummary"
                },
                "UserGroupId": {
                    "type": "string"
                },
                "CanEdit": {
                    "type": "boolean"
                }
            }
        },
        "ReferenceTableSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "TableName": {
                    "type": "string"
                }
            }
        },
        "ProductionSeason": {
            "type": "object",
            "properties": {
                "Premiere": {
                    "$ref": "#/definitions/PremiereSummary"
                },
                "Production": {
                    "$ref": "#/definitions/ProductionSummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Fulltext": {
                    "type": "string"
                },
                "FulltextCompleteDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FulltextRequestDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ShortName": {
                    "type": "string"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                },
                "InventoryType": {
                    "type": "string"
                },
                "FirstPerformanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastPerformanceDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "PremiereSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "AutomatedBillingStatus": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "BillCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProcessedCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsComplete": {
                    "type": "boolean"
                },
                "HasErrors": {
                    "type": "boolean"
                },
                "Message": {
                    "type": "string"
                }
            }
        },
        "OrderBillingResponse": {
            "type": "object",
            "properties": {
                "OrderBillingId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CurrentDueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PastDueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "BillAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Comment": {
                    "type": "string"
                },
                "CampaignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AppealId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SourceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MediaTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "GlAccount": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "AccountNumber": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "EventControlResponse": {
            "type": "object",
            "properties": {
                "EventControlSet": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EventControl"
                    }
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "EventControl": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "TicketNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "CustomerNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceCode": {
                    "type": "string"
                },
                "PackageNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "Entrance": {
                    "type": "string"
                },
                "SubLineItemNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserId": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "ErrorText": {
                    "type": "string"
                },
                "UpdateDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "TicketOk": {
                    "type": "string"
                },
                "TicketMessage": {
                    "type": "string"
                },
                "TicketUpdated": {
                    "type": "string"
                },
                "ScanString": {
                    "type": "string"
                },
                "DeviceName": {
                    "type": "string"
                },
                "CompositeNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "CustomerMembershipNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "MembershipLevelNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "NScanAccessAreaSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "NameStatusSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "InventoryWebContentSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Value": {
                    "type": "string"
                },
                "ContentType": {
                    "$ref": "#/definitions/WebContentTypeSummary"
                },
                "ProductionElementId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PhoneIndicatorSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ConstituentDetail": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ConstituentType": {
                    "$ref": "#/definitions/ConstituentTypeSummary"
                },
                "DisplayName": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EmarketIndicator": {
                    "$ref": "#/definitions/EmarketIndicatorSummary"
                },
                "FirstName": {
                    "type": "string"
                },
                "Inactive": {
                    "$ref": "#/definitions/ConstituentInactiveSummary"
                },
                "InactiveReason": {
                    "$ref": "#/definitions/InactiveReasonSummary"
                },
                "LastActivityDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastGiftDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastTicketDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "SortName": {
                    "type": "string"
                },
                "MailIndicator": {
                    "$ref": "#/definitions/MailIndicatorSummary"
                },
                "MiddleName": {
                    "type": "string"
                },
                "NameStatus": {
                    "$ref": "#/definitions/NameStatusSummary"
                },
                "OriginalSource": {
                    "$ref": "#/definitions/OriginalSourceSummary"
                },
                "PhoneIndicator": {
                    "$ref": "#/definitions/PhoneIndicatorSummary"
                },
                "Prefix": {
                    "$ref": "#/definitions/PrefixSummary"
                },
                "Gender": {
                    "$ref": "#/definitions/GenderSummary"
                },
                "Suffix": {
                    "$ref": "#/definitions/SuffixSummary"
                },
                "Addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Address"
                    }
                },
                "ElectronicAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ElectronicAddress"
                    }
                },
                "Salutations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Salutation"
                    }
                },
                "PhoneNumbers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Phone"
                    }
                },
                "ProtectionType": {
                    "$ref": "#/definitions/ConstituentProtectionTypeSummary"
                }
            }
        },
        "EmarketIndicatorSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "InactiveReasonSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "MailIndicatorSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ConstituentProtectionTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "FlexHeader": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FullName1": {
                    "type": "string"
                },
                "FullName2": {
                    "type": "string"
                },
                "AllConst": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "string"
                },
                "ConstituentTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Ico09": {
                    "type": "string"
                },
                "Ico10": {
                    "type": "string"
                },
                "Ico11": {
                    "type": "string"
                },
                "Ico12": {
                    "type": "string"
                },
                "WorkerInd": {
                    "type": "string"
                },
                "Values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NameValue"
                    }
                }
            }
        },
        "NameValue": {
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "ConstituentHeader": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FullName1": {
                    "type": "string"
                },
                "FullName2": {
                    "type": "string"
                },
                "AllConstituencies": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "string"
                },
                "ConstituentTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "WorkerIndicator": {
                    "type": "boolean"
                },
                "HeaderElementValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HeaderElementValue"
                    }
                }
            }
        },
        "HeaderElementValue": {
            "type": "object",
            "properties": {
                "Position": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                },
                "Icon": {
                    "type": "string"
                }
            }
        },
        "ConstituentSearchResponse": {
            "type": "object",
            "properties": {
                "ConstituentSummaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConstituentSummary"
                    }
                },
                "SearchMetadata": {
                    "$ref": "#/definitions/SearchMetadata"
                }
            }
        },
        "ConstituentSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DisplayName": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "MiddleName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "Street1": {
                    "type": "string"
                },
                "Street2": {
                    "type": "string"
                },
                "Street3": {
                    "type": "string"
                },
                "City": {
                    "type": "string"
                },
                "State": {
                    "type": "string"
                },
                "PostalCode": {
                    "type": "string"
                },
                "Country": {
                    "type": "string"
                },
                "FullNameAlias": {
                    "type": "string"
                },
                "ConstituentType": {
                    "type": "string"
                },
                "TypeDescription": {
                    "type": "string"
                },
                "ConstituentGroup": {
                    "type": "string"
                },
                "A12Indicator": {
                    "type": "string"
                },
                "ForSort": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "string"
                },
                "Prefix": {
                    "type": "string"
                },
                "Suffix": {
                    "type": "string"
                },
                "NumberOfAffiliates": {
                    "format": "int32",
                    "type": "integer"
                },
                "AffiliationId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ResultGrouping": {
                    "format": "int32",
                    "type": "integer"
                },
                "Totals": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsPrimaryAffiliation": {
                    "type": "boolean"
                },
                "IsSearchMatch": {
                    "type": "boolean"
                },
                "GroupSort": {
                    "type": "string"
                },
                "IsPotentialDuplicate": {
                    "type": "boolean"
                }
            }
        },
        "SearchMetadata": {
            "type": "object",
            "properties": {
                "SearchTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SearchToken"
                    }
                },
                "Total": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SearchToken": {
            "type": "object",
            "properties": {
                "Key": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "ConstituentSnapshot": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "ConstituentType": {
                    "$ref": "#/definitions/ConstituentTypeSummary"
                },
                "DisplayName": {
                    "type": "string"
                },
                "ShortDisplayName": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "Inactive": {
                    "$ref": "#/definitions/ConstituentInactiveSummary"
                },
                "InactiveReason": {
                    "$ref": "#/definitions/InactiveReasonSummary"
                },
                "LastActivityDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "MailIndicator": {
                    "$ref": "#/definitions/MailIndicatorSummary"
                },
                "EmarketIndicator": {
                    "$ref": "#/definitions/EmarketIndicatorSummary"
                },
                "MiddleName": {
                    "type": "string"
                },
                "NameStatus": {
                    "$ref": "#/definitions/NameStatusSummary"
                },
                "OriginalSource": {
                    "$ref": "#/definitions/OriginalSourceSummary"
                },
                "PhoneIndicator": {
                    "$ref": "#/definitions/PhoneIndicatorSummary"
                },
                "Prefix": {
                    "$ref": "#/definitions/PrefixSummary"
                },
                "Gender": {
                    "$ref": "#/definitions/GenderSummary"
                },
                "Suffix": {
                    "$ref": "#/definitions/SuffixSummary"
                },
                "Salutation": {
                    "$ref": "#/definitions/Salutation"
                },
                "Address": {
                    "$ref": "#/definitions/Address"
                },
                "ElectronicAddress": {
                    "$ref": "#/definitions/ElectronicAddress"
                },
                "PrimaryPhoneNumbers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Phone"
                    }
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "SortName": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Affiliates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffiliationInfo"
                    }
                },
                "ProtectionType": {
                    "$ref": "#/definitions/ConstituentProtectionTypeSummary"
                }
            }
        },
        "AffiliationInfo": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AffiliationType": {
                    "$ref": "#/definitions/AffiliationTypeSummary"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "IsAllowedToTransact": {
                    "type": "boolean"
                },
                "IsIncludedInSearchResults": {
                    "type": "boolean"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "NameIndicator": {
                    "format": "int32",
                    "type": "integer"
                },
                "Note": {
                    "type": "string"
                },
                "Salary": {
                    "format": "double",
                    "type": "number"
                },
                "Title": {
                    "type": "string"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RelatedConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RelatedConstituentInactive": {
                    "type": "boolean"
                },
                "RelatedConstituentLastName": {
                    "type": "string"
                },
                "RelatedConstituentShortDisplayName": {
                    "type": "string"
                },
                "RelatedConstituentMiddleName": {
                    "type": "string"
                },
                "RelatedConstituentFirstName": {
                    "type": "string"
                },
                "RelatedConstituentNameStatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RelatedConstituentNameStatusDescription": {
                    "type": "string"
                },
                "RelatedConstituentPrefix": {
                    "$ref": "#/definitions/PrefixSummary"
                },
                "RelatedConstituentSuffix": {
                    "$ref": "#/definitions/SuffixSummary"
                },
                "RelatedConstituentGender": {
                    "$ref": "#/definitions/GenderSummary"
                },
                "RelatedConstituentSortName": {
                    "type": "string"
                },
                "RelatedConstituentType": {
                    "$ref": "#/definitions/ConstituentTypeSummary"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProtectionType": {
                    "$ref": "#/definitions/ConstituentProtectionTypeSummary"
                }
            }
        },
        "ConstituentDevelopmentInfo": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Constituencies": {
                    "type": "string"
                },
                "MembershipLevel": {
                    "type": "string"
                },
                "CurrentStatus": {
                    "type": "string"
                },
                "MembershipExpiration": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastContributionAmount": {
                    "format": "double",
                    "type": "number"
                },
                "LastContributionReceived": {
                    "format": "double",
                    "type": "number"
                },
                "LastContributionDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastContributionFund": {
                    "type": "string"
                },
                "LastYearContribution": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "Constituent": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ConstituentType": {
                    "$ref": "#/definitions/ConstituentTypeSummary"
                },
                "DisplayName": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EmarketIndicator": {
                    "$ref": "#/definitions/EmarketIndicatorSummary"
                },
                "FirstName": {
                    "type": "string"
                },
                "Inactive": {
                    "$ref": "#/definitions/ConstituentInactiveSummary"
                },
                "InactiveReason": {
                    "$ref": "#/definitions/InactiveReasonSummary"
                },
                "LastActivityDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastGiftDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastTicketDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "SortName": {
                    "type": "string"
                },
                "MailIndicator": {
                    "$ref": "#/definitions/MailIndicatorSummary"
                },
                "MiddleName": {
                    "type": "string"
                },
                "NameStatus": {
                    "$ref": "#/definitions/NameStatusSummary"
                },
                "OriginalSource": {
                    "$ref": "#/definitions/OriginalSourceSummary"
                },
                "PhoneIndicator": {
                    "$ref": "#/definitions/PhoneIndicatorSummary"
                },
                "Prefix": {
                    "$ref": "#/definitions/PrefixSummary"
                },
                "Gender": {
                    "$ref": "#/definitions/GenderSummary"
                },
                "Suffix": {
                    "$ref": "#/definitions/SuffixSummary"
                },
                "ProtectionType": {
                    "$ref": "#/definitions/ConstituentProtectionTypeSummary"
                }
            }
        },
        "BookingSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/BookingCategorySummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "DocumentSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "FileName": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FileSize": {
                    "format": "int32",
                    "type": "integer"
                },
                "NotesSummary": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/DocumentCategorySummary"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "Production": {
            "type": "object",
            "properties": {
                "Cost": {
                    "format": "double",
                    "type": "number"
                },
                "Duration": {
                    "format": "int32",
                    "type": "integer"
                },
                "Language": {
                    "$ref": "#/definitions/LanguageSummary"
                },
                "NumberOfActs": {
                    "format": "int32",
                    "type": "integer"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Synopsis": {
                    "type": "string"
                },
                "Title": {
                    "$ref": "#/definitions/TitleSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Fulltext": {
                    "type": "string"
                },
                "FulltextCompleteDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FulltextRequestDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ShortName": {
                    "type": "string"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                },
                "InventoryType": {
                    "type": "string"
                }
            }
        },
        "LanguageSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "TitleSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PriceTypeDetail": {
            "type": "object",
            "properties": {
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AliasDescription": {
                    "type": "string"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SuperPackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ReasonIndicator": {
                    "type": "boolean"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "IsBest": {
                    "type": "boolean"
                },
                "Offer": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "Terms": {
                    "type": "string"
                },
                "Zones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ZoneSummary"
                    }
                }
            }
        },
        "PriceTypeReasonMap": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeReason": {
                    "$ref": "#/definitions/PriceTypeReason"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "Payment": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "TransactionId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "PaymentDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PaymentAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethod": {
                    "$ref": "#/definitions/PaymentMethod"
                },
                "AccountNumber": {
                    "type": "string"
                },
                "CheckNumber": {
                    "type": "string"
                },
                "CheckName": {
                    "type": "string"
                },
                "GiftCertificate": {
                    "$ref": "#/definitions/GiftCertificateSummary"
                },
                "CardExpiryDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "AuthorizationIndicator": {
                    "type": "string"
                },
                "AuthorizationNumber": {
                    "type": "string"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RefundDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CCReferenceNumber": {
                    "type": "string"
                },
                "CCIssueNumber": {
                    "type": "string"
                },
                "CCStartDateTime": {
                    "type": "string"
                },
                "TenderedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Notes": {
                    "type": "string"
                },
                "PaymentSignatureId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "IsMirrorRecord": {
                    "type": "boolean"
                }
            }
        },
        "GiftCertificateSummary": {
            "type": "object",
            "properties": {
                "Number": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PaymentAvailableForRefund": {
            "type": "object",
            "properties": {
                "AccountLastFour": {
                    "type": "string"
                },
                "ProcessorReferenceId": {
                    "type": "string"
                },
                "PaymentMethod": {
                    "format": "int32",
                    "type": "integer"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AvailableForRefundAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "OrderIdOrContributionId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsLockedInControlledBatch": {
                    "type": "boolean"
                },
                "PaymentAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethodDescription": {
                    "type": "string"
                },
                "MerchantId": {
                    "type": "string"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ConstituentOnAccountBalance": {
            "type": "object",
            "properties": {
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "PaymentGatewayTransactionTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "MembershipDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "IsCurrent": {
                    "type": "boolean"
                },
                "IsDefault": {
                    "type": "boolean"
                },
                "InitiationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ExpirationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "InceptionDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "BenefitProvidingConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LapseDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "RenewalDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "DeclinedBenefits": {
                    "type": "boolean"
                },
                "MacroTrend": {
                    "type": "string"
                },
                "MicroTrend": {
                    "type": "string"
                },
                "MembershipLevel": {
                    "$ref": "#/definitions/MembershipLevelSummary"
                },
                "CurrentStatus": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "MembershipLevelSummary": {
            "type": "object",
            "properties": {
                "MembershipOrganization": {
                    "$ref": "#/definitions/MembershipOrganizationSummary"
                },
                "Code": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "StartAmount": {
                    "format": "double",
                    "type": "number"
                },
                "EndAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituencyType": {
                    "$ref": "#/definitions/ConstituencyTypeSummary"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PricingRuleType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "AnalyticsCube": {
            "type": "object",
            "properties": {
                "BuildOrder": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Title": {
                    "type": "string"
                },
                "ApplicationSecurityObject": {
                    "$ref": "#/definitions/ApplicationObject"
                },
                "DataSecurity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AnalyticsCubeDataSecurity"
                    }
                }
            }
        },
        "AnalyticsCubeDataSecurity": {
            "type": "object",
            "properties": {
                "Column": {
                    "type": "string"
                },
                "Table": {
                    "type": "string"
                },
                "CubeColumnType": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ReferenceColumn": {
            "type": "object",
            "properties": {
                "ReferenceTable": {
                    "$ref": "#/definitions/ReferenceTableSummary"
                },
                "Checkbox": {
                    "type": "string"
                },
                "ColValid": {
                    "type": "string"
                },
                "ColumnName": {
                    "type": "string"
                },
                "ColumnType": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DropDownDescription": {
                    "type": "string"
                },
                "IsDropDownNullable": {
                    "type": "boolean"
                },
                "DropDownTable": {
                    "type": "string"
                },
                "DropDownValue": {
                    "type": "string"
                },
                "DropDownWhereClause": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "OrderAcross": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ReferenceColumnSummary": {
            "type": "object",
            "properties": {
                "ReferenceTable": {
                    "$ref": "#/definitions/ReferenceTableSummary"
                },
                "Checkbox": {
                    "type": "string"
                },
                "ColValid": {
                    "type": "string"
                },
                "ColumnName": {
                    "type": "string"
                },
                "ColumnType": {
                    "type": "string"
                },
                "DropDownDescription": {
                    "type": "string"
                },
                "IsDropDownNullable": {
                    "type": "boolean"
                },
                "DropDownTable": {
                    "type": "string"
                },
                "DropDownValue": {
                    "type": "string"
                },
                "DropDownWhereClause": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "OrderAcross": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ProductionSeasonMembershipOrganizationSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AllowMultipleEntry": {
                    "type": "boolean"
                },
                "ProductionSeason": {
                    "$ref": "#/definitions/ProductionSeasonSummary"
                },
                "MembershipOrganization": {
                    "$ref": "#/definitions/MembershipOrganizationSummary"
                }
            }
        },
        "AppealCategorySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "WindowsAuthenticationRequest": {
            "type": "object",
            "properties": {
                "UserGroup": {
                    "type": "string"
                },
                "MachineLocation": {
                    "type": "string"
                },
                "Application": {
                    "type": "string"
                }
            }
        },
        "AuthenticationResponse": {
            "type": "object",
            "properties": {
                "IsAuthenticated": {
                    "type": "boolean"
                },
                "UserGroup": {
                    "$ref": "#/definitions/UserGroupSummary"
                },
                "User": {
                    "$ref": "#/definitions/User"
                },
                "MustChangePassword": {
                    "type": "boolean"
                },
                "MachineLocation": {
                    "type": "string"
                },
                "CurrentLoginCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "Message": {
                    "type": "string"
                }
            }
        },
        "UserGroupSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "IsAdmin": {
                    "type": "boolean"
                },
                "AllowApp": {
                    "type": "boolean"
                },
                "AllowTablet": {
                    "type": "boolean"
                },
                "AllowOnTheGo": {
                    "type": "boolean"
                },
                "AllowAnalytics": {
                    "type": "boolean"
                },
                "Division": {
                    "$ref": "#/definitions/Division"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "EmailAddress": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "WorkerConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Locked": {
                    "type": "boolean"
                },
                "ActiveDirectoryUserName": {
                    "type": "string"
                },
                "LoginCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxLogins": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AuditLogResponse": {
            "type": "object",
            "properties": {
                "AuditLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuditLog"
                    }
                },
                "Total": {
                    "format": "int32",
                    "type": "integer"
                },
                "PageIndex": {
                    "format": "int32",
                    "type": "integer"
                },
                "PageSize": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AuditLog": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserName": {
                    "type": "string"
                },
                "ActionDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "AuditDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuditDetail"
                    }
                }
            }
        },
        "AuditDetail": {
            "type": "object",
            "properties": {
                "Action": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AuditTable": {
                    "type": "string"
                },
                "EntityId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ParentEntityId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "AuditEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuditEntry"
                    }
                }
            }
        },
        "AuditEntry": {
            "type": "object",
            "properties": {
                "Property": {
                    "type": "string"
                },
                "Old": {
                    "type": "string"
                },
                "New": {
                    "type": "string"
                }
            }
        },
        "AuditEntryDetail": {
            "type": "object",
            "properties": {
                "AuditLogId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserName": {
                    "type": "string"
                },
                "ActionDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/Entity"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "Action": {
                    "type": "string"
                },
                "AuditDetail": {
                    "format": "int32",
                    "type": "integer"
                },
                "AuditTable": {
                    "type": "string"
                },
                "EntityId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ParentEntityId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Property": {
                    "type": "string"
                },
                "Old": {
                    "type": "string"
                },
                "New": {
                    "type": "string"
                }
            }
        },
        "Contribution": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AppealId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BillingAccount": {
                    "type": "string"
                },
                "BillingTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "Cancel": {
                    "type": "string"
                },
                "Channel": {
                    "$ref": "#/definitions/SalesChannelSummary"
                },
                "ContributionAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ContributionDesignation": {
                    "format": "int32",
                    "type": "integer"
                },
                "ContributionDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Custom0": {
                    "type": "string"
                },
                "Custom1": {
                    "type": "string"
                },
                "Custom2": {
                    "type": "string"
                },
                "Custom3": {
                    "type": "string"
                },
                "Custom4": {
                    "type": "string"
                },
                "Custom5": {
                    "type": "string"
                },
                "Custom6": {
                    "type": "string"
                },
                "Custom7": {
                    "type": "string"
                },
                "Custom8": {
                    "type": "string"
                },
                "Custom9": {
                    "type": "string"
                },
                "Initiator": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Fund": {
                    "$ref": "#/definitions/FundSummary"
                },
                "Plan": {
                    "$ref": "#/definitions/PlanSummary"
                },
                "KindGiftTransferDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "KindGiftDescription": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MatchIndicator": {
                    "type": "string"
                },
                "MatchingContributionId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MediaType": {
                    "$ref": "#/definitions/MediaTypeSummary"
                },
                "MirrorLock": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                },
                "PaymentEndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PledgeStatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentStartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ReceivedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Solicitor": {
                    "type": "string"
                },
                "SourceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "MediaTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "CriterionOperator": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Symbol": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "DeliveryMethodSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "MembershipLevel": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "MembershipOrganization": {
                    "$ref": "#/definitions/MembershipOrganizationSummary"
                },
                "Description": {
                    "type": "string"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartAmount": {
                    "format": "double",
                    "type": "number"
                },
                "EndAmount": {
                    "format": "double",
                    "type": "number"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Initiation": {
                    "type": "string"
                },
                "Expiry": {
                    "format": "int32",
                    "type": "integer"
                },
                "Renewal": {
                    "format": "int32",
                    "type": "integer"
                },
                "LapseSuspended": {
                    "format": "int32",
                    "type": "integer"
                },
                "Reinstate": {
                    "format": "int32",
                    "type": "integer"
                },
                "GoodsAndServicesValue": {
                    "format": "double",
                    "type": "number"
                },
                "NumberOfIssues": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinimumPaymentAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Cancel": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituencyType": {
                    "$ref": "#/definitions/ConstituencyType"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Category": {
                    "$ref": "#/definitions/MembershipLevelCategory"
                },
                "Suspend": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ExpiresEndOfMonth": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "CheckPaymentMethodResponse": {
            "type": "object",
            "properties": {
                "SetupIsCorrect": {
                    "type": "boolean"
                },
                "PaymentMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentMethod"
                    }
                }
            }
        },
        "AttendanceHistory": {
            "type": "object",
            "properties": {
                "AdmissionAdult": {
                    "format": "int32",
                    "type": "integer"
                },
                "AdmissionChild": {
                    "format": "int32",
                    "type": "integer"
                },
                "AdmissionOther": {
                    "format": "int32",
                    "type": "integer"
                },
                "AttendDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CompositeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Device": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MembershipLevel": {
                    "$ref": "#/definitions/HistoryMembershipLevelSummary"
                },
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScanSource": {
                    "type": "string"
                },
                "TicketId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Area": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Membership": {
                    "format": "int32",
                    "type": "integer"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "Recipient": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Performance": {
                    "$ref": "#/definitions/HistoryPerformanceSummary"
                },
                "Zone": {
                    "$ref": "#/definitions/HistoryZoneSummary"
                }
            }
        },
        "HistoryMembershipLevelSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "HistoryPerformanceSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceCode": {
                    "type": "string"
                },
                "PerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                }
            }
        },
        "HistoryZoneSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "ZoneTime": {
                    "type": "string"
                }
            }
        },
        "WorkerSummary": {
            "type": "object",
            "properties": {
                "Inactive": {
                    "type": "boolean"
                },
                "WorkerTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkerTypeSummary"
                    }
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SortName": {
                    "type": "string"
                },
                "ShortDisplayName": {
                    "type": "string"
                }
            }
        },
        "ColorSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ColorValue": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "KeywordResult": {
            "type": "object",
            "properties": {
                "RequestedOwner": {
                    "$ref": "#/definitions/Owner"
                },
                "Keywords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeywordResultKeyword"
                    }
                }
            }
        },
        "KeywordResultKeyword": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Owner": {
                    "$ref": "#/definitions/Owner"
                },
                "Category": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "WebContentResult": {
            "type": "object",
            "properties": {
                "RequestedOwner": {
                    "$ref": "#/definitions/Owner"
                },
                "WebContents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WebContent"
                    }
                }
            }
        },
        "WebContent": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Owner": {
                    "$ref": "#/definitions/Owner"
                },
                "Type": {
                    "$ref": "#/definitions/WebContentTypeSummary"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "CustomDefaultSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "Portfolio": {
            "type": "object",
            "properties": {
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Plans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortfolioPlan"
                    }
                },
                "TotalPlans": {
                    "format": "int32",
                    "type": "integer"
                },
                "Page": {
                    "format": "int32",
                    "type": "integer"
                },
                "PageSize": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PortfolioPlan": {
            "type": "object",
            "properties": {
                "ActiveWorkers": {
                    "type": "string"
                },
                "LastStepType": {
                    "$ref": "#/definitions/StepTypeSummary"
                },
                "LastStepDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "NextStepType": {
                    "$ref": "#/definitions/StepTypeSummary"
                },
                "NextStepDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "AskAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "CompleteByDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ContributionAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ContributionDesignation": {
                    "$ref": "#/definitions/ContributionDesignationSummary"
                },
                "HasSteps": {
                    "type": "boolean"
                },
                "HasOpenSteps": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CustomPlanElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortfolioCustomDataItem"
                    }
                },
                "CustomPortfolioElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortfolioCustomDataItem"
                    }
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Fund": {
                    "$ref": "#/definitions/FundSummary"
                },
                "GoalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "Priority": {
                    "$ref": "#/definitions/PlanPrioritySummary"
                },
                "Probability": {
                    "format": "double",
                    "type": "number"
                },
                "RecordedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Status": {
                    "$ref": "#/definitions/PlanStatusSummary"
                },
                "Type": {
                    "$ref": "#/definitions/PlanTypeSummary"
                },
                "OriginalSource": {
                    "$ref": "#/definitions/PlanSourceSummary"
                },
                "PrimaryWorker": {
                    "$ref": "#/definitions/ConstituentShortDisplayNameSummary"
                },
                "LastWorkerDisplayName": {
                    "type": "string"
                }
            }
        },
        "PortfolioCustomDataItem": {
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                },
                "Index": {
                    "format": "int32",
                    "type": "integer"
                },
                "CustomElementId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Value": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "DataType": {
                    "type": "string"
                },
                "IsDropdown": {
                    "type": "boolean"
                }
            }
        },
        "SalesLayoutSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                }
            }
        },
        "PrinterSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                }
            }
        },
        "ContributionImportSetSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "ProgramSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Title": {
            "type": "object",
            "properties": {
                "Author": {
                    "type": "string"
                },
                "Composer": {
                    "$ref": "#/definitions/ComposerSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Era": {
                    "$ref": "#/definitions/EraSummary"
                },
                "Lib": {
                    "type": "string"
                },
                "OriginalLanguage": {
                    "$ref": "#/definitions/LanguageSummary"
                },
                "OriginalSynopsis": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Fulltext": {
                    "type": "string"
                },
                "FulltextCompleteDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FulltextRequestDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ShortName": {
                    "type": "string"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                },
                "InventoryType": {
                    "type": "string"
                }
            }
        },
        "ComposerSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "EraSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "MachineSettingSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PaymentGatewayConfiguration": {
            "type": "object",
            "properties": {
                "Provider": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "type": "integer"
                },
                "HasMultipleAccounts": {
                    "type": "boolean"
                },
                "CanTokenize": {
                    "type": "boolean"
                },
                "TokenizeCards": {
                    "type": "boolean"
                },
                "StoreCreditCardOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "type": "integer"
                },
                "CanRefundByReference": {
                    "type": "boolean"
                },
                "CanRefundUsingCardDetails": {
                    "type": "boolean"
                },
                "CanRefundEMVByReference": {
                    "type": "boolean"
                },
                "CanReverseCardReaderPayments": {
                    "type": "boolean"
                },
                "CanForceAuth": {
                    "type": "boolean"
                },
                "CanReverseCreditByReference": {
                    "type": "boolean"
                },
                "MustFilterTokens": {
                    "type": "boolean"
                },
                "CanReversePaymentByReference": {
                    "type": "boolean"
                },
                "BypassExpiryDateValidationForTokens": {
                    "type": "boolean"
                },
                "DeleteDuplicateTokens": {
                    "type": "boolean"
                },
                "P2PeOnly": {
                    "type": "boolean"
                },
                "HasEncryptedSwiper": {
                    "type": "boolean"
                },
                "RequireTokenShopperReference": {
                    "type": "boolean"
                },
                "EmvRequiresSpecificMotoMode": {
                    "type": "boolean"
                },
                "SupportsPayByLink": {
                    "type": "boolean"
                },
                "IsProduction": {
                    "type": "boolean"
                },
                "HasTessituraMerchantServicesConfigured": {
                    "type": "boolean"
                }
            }
        },
        "Package": {
            "type": "object",
            "properties": {
                "BestSeatMap": {
                    "$ref": "#/definitions/BestSeatMapSummary"
                },
                "Description": {
                    "type": "string"
                },
                "TicketDesign": {
                    "$ref": "#/definitions/TicketDesign"
                },
                "Facility": {
                    "$ref": "#/definitions/FacilitySummary"
                },
                "FixedSeatIndicator": {
                    "type": "boolean"
                },
                "FlexIndicator": {
                    "type": "boolean"
                },
                "MaximumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinimumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/definitions/PackageTypeSummary"
                },
                "RankType": {
                    "$ref": "#/definitions/RankTypeSummary"
                },
                "SubPackageIndicator": {
                    "type": "boolean"
                },
                "SubPackageOrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SuperPackageIndicator": {
                    "type": "boolean"
                },
                "SuperPackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/ZoneMapSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "BestSeatMapSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "GaIndicator": {
                    "type": "string"
                },
                "IsGA": {
                    "type": "boolean"
                }
            }
        },
        "PackageTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PackageSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/ZoneMapSummary"
                },
                "Type": {
                    "$ref": "#/definitions/PackageTypeSummary"
                },
                "Code": {
                    "type": "string"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                }
            }
        },
        "PriceSummary": {
            "type": "object",
            "properties": {
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Price": {
                    "format": "double",
                    "type": "number"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "IsEditable": {
                    "type": "boolean"
                },
                "LayerTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsEditableForWeb": {
                    "type": "boolean"
                },
                "EditableMinPrice": {
                    "format": "double",
                    "type": "number"
                },
                "IsBase": {
                    "type": "boolean"
                },
                "ParentPackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformancePriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinPrice": {
                    "format": "double",
                    "type": "number"
                },
                "IsBest": {
                    "type": "boolean"
                },
                "Offer": {
                    "type": "boolean"
                },
                "ModeOfSaleOfferId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PackageDetail": {
            "type": "object",
            "properties": {
                "BestSeatMap": {
                    "$ref": "#/definitions/BestSeatMapSummary"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "Code": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "Description": {
                    "type": "string"
                },
                "Facility": {
                    "$ref": "#/definitions/FacilitySummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsFixedSeatPackage": {
                    "type": "boolean"
                },
                "IsFlexSeatPackage": {
                    "type": "boolean"
                },
                "IsSuperPackage": {
                    "type": "boolean"
                },
                "MaximumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinimumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceGroupDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceGroupDetail"
                    }
                },
                "RankType": {
                    "$ref": "#/definitions/RankTypeSummary"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "SubPackages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubPackageDetail"
                    }
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                },
                "TicketDesign": {
                    "$ref": "#/definitions/TicketDesign"
                },
                "Type": {
                    "$ref": "#/definitions/PackageTypeSummary"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/ZoneMapSummary"
                }
            }
        },
        "PerformanceGroupDetail": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaximumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinimumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceGroupPerformanceDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceGroupPerformanceDetail"
                    }
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SubPackageDetail": {
            "type": "object",
            "properties": {
                "BestSeatMap": {
                    "$ref": "#/definitions/BestSeatMapSummary"
                },
                "Code": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "Description": {
                    "type": "string"
                },
                "Facility": {
                    "$ref": "#/definitions/FacilitySummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsFixedSeatPackage": {
                    "type": "boolean"
                },
                "IsFlexSeatPackage": {
                    "type": "boolean"
                },
                "MaximumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinimumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceGroupDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceGroupDetail"
                    }
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "Type": {
                    "$ref": "#/definitions/PackageTypeSummary"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/ZoneMapSummary"
                }
            }
        },
        "PerformanceGroupPerformanceDetail": {
            "type": "object",
            "properties": {
                "AvailableIndicator": {
                    "type": "boolean"
                },
                "DisplayByZone": {
                    "type": "boolean"
                },
                "Facility": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "PerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceDescription": {
                    "type": "string"
                },
                "PerformanceCode": {
                    "type": "string"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SalesNotes": {
                    "type": "string"
                },
                "ZoneMapId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Zones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceZoneAvailability"
                    }
                }
            }
        },
        "PerformanceZoneAvailability": {
            "type": "object",
            "properties": {
                "Zone": {
                    "$ref": "#/definitions/ZoneSummary"
                },
                "SectionSummaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SectionSummary"
                    }
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AvailableCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "SectionSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PackagePerformanceGroupDetail": {
            "type": "object",
            "properties": {
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageDescription": {
                    "type": "string"
                },
                "MinPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "FlexIndicator": {
                    "type": "boolean"
                },
                "FixedSeatIndicator": {
                    "type": "boolean"
                },
                "GroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "GroupDescription": {
                    "type": "string"
                },
                "GroupMinPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "GroupMaxPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "GroupRanking": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceDescription": {
                    "type": "string"
                },
                "PerformanceCode": {
                    "type": "string"
                },
                "Facility": {
                    "type": "string"
                },
                "ZoneMapId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DisplayByZone": {
                    "type": "boolean"
                },
                "Zones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceZoneAvailability"
                    }
                },
                "AvailableIndicator": {
                    "type": "boolean"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "SalesNotes": {
                    "type": "string"
                },
                "SalesNotesReadIndicator": {
                    "type": "boolean"
                }
            }
        },
        "Seat": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SectionId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatRow": {
                    "type": "string"
                },
                "SeatNumber": {
                    "type": "string"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AllocationId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LogicalSeatRow": {
                    "format": "int32",
                    "type": "integer"
                },
                "LogicalSeatNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "XPosition": {
                    "format": "int32",
                    "type": "integer"
                },
                "YPosition": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsSeat": {
                    "type": "boolean"
                },
                "SeatStatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AisleIndicator": {
                    "type": "string"
                },
                "HasStairs": {
                    "type": "boolean"
                },
                "ScreenId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DisplayLetter": {
                    "type": "string"
                },
                "HoldCodeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SeatSummary": {
            "type": "object",
            "properties": {
                "SectionId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScreenId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AvailableCount": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ProductSeatFee": {
            "type": "object",
            "properties": {
                "Fee": {
                    "$ref": "#/definitions/SeatFeeSummary"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Price": {
                    "format": "double",
                    "type": "number"
                },
                "FeeAmount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "SeatFeeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "LoginCredentials": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PasswordToken": {
                    "type": "string"
                },
                "EmailAddress": {
                    "type": "string"
                },
                "AllowHtmlFormat": {
                    "type": "boolean"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "DisplayName": {
                    "type": "string"
                },
                "Login": {
                    "type": "string"
                },
                "IsTemporary": {
                    "type": "boolean"
                },
                "EnvelopeSalutation1": {
                    "type": "string"
                },
                "EnvelopeSalutation2": {
                    "type": "string"
                },
                "LetterSalutation": {
                    "type": "string"
                },
                "BusinessTitle": {
                    "type": "string"
                }
            }
        },
        "ReportSchedule": {
            "type": "object",
            "properties": {
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "DayOfWeek": {
                    "format": "int32",
                    "type": "integer"
                },
                "DayWeekNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Interval": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "HeaderRequest": {
                    "$ref": "#/definitions/ReportRequest"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "StartTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "AsOfDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ReportRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DeletedIndicator": {
                    "type": "boolean"
                },
                "EmailBody": {
                    "type": "string"
                },
                "EmailRecipients": {
                    "type": "string"
                },
                "EmailSubject": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "OutputOption": {
                    "type": "string"
                },
                "PublicIndicator": {
                    "type": "boolean"
                },
                "ReportId": {
                    "type": "string"
                },
                "ReportType": {
                    "format": "int32",
                    "type": "integer"
                },
                "RequestDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ResultCode": {
                    "type": "string"
                },
                "ResultText": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                },
                "QueueStatus": {
                    "type": "string"
                },
                "ScheduleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserGroupId": {
                    "type": "string"
                },
                "UserId": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReportRequestParameter"
                    }
                }
            }
        },
        "ReportRequestParameter": {
            "type": "object",
            "properties": {
                "RequestId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReportId": {
                    "type": "string"
                },
                "ParameterId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "ConstituentContribution": {
            "type": "object",
            "properties": {
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "ContributionDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ReceivedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ContributionAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ContributionType": {
                    "type": "string"
                },
                "Campaign": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Appeal": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "MediaType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Fund": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ReferenceNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CurrentConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BillAccountNumber": {
                    "type": "string"
                },
                "CreditedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "MatchReferenceNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsMatchingGift": {
                    "type": "boolean"
                },
                "Designation": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "CrediteeTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BillingType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Channel": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "BalanceAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Source": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "NoteIndicator": {
                    "type": "string"
                },
                "SortOrder": {
                    "format": "int32",
                    "type": "integer"
                },
                "Owner": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Initiator": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Creditee": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Worker": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "MirrorLock": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsEditable": {
                    "type": "boolean"
                },
                "Plan": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "PerformanceGroupSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AddressDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AffiliatedConstituent": {
                    "$ref": "#/definitions/Entity"
                },
                "AltSalutationType": {
                    "$ref": "#/definitions/SalutationTypeSummary"
                },
                "AddressType": {
                    "$ref": "#/definitions/AddressTypeSummary"
                },
                "City": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "DeliveryPoint": {
                    "type": "string"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "GeoArea": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Label": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Months": {
                    "type": "string"
                },
                "NcoaAction": {
                    "format": "int32",
                    "type": "integer"
                },
                "NcoaSession": {
                    "format": "int32",
                    "type": "integer"
                },
                "PostalCode": {
                    "type": "string"
                },
                "PostalCodeFormatted": {
                    "type": "string"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "State": {
                    "$ref": "#/definitions/StateSummary"
                },
                "Street1": {
                    "type": "string"
                },
                "Street2": {
                    "type": "string"
                },
                "Street3": {
                    "type": "string"
                },
                "Country": {
                    "$ref": "#/definitions/CountrySummary"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "PhoneId1": {
                    "format": "int32",
                    "type": "integer"
                },
                "PhoneNumber1": {
                    "type": "string"
                },
                "PhoneNumber1Formatted": {
                    "type": "string"
                },
                "AllowTelemarketing1": {
                    "type": "boolean"
                },
                "DayEveningIndicator1": {
                    "type": "string"
                },
                "PhoneSearch1": {
                    "type": "string"
                },
                "EditIndicator1": {
                    "type": "boolean"
                },
                "UpdatedDateTime1": {
                    "format": "date-time",
                    "type": "string"
                },
                "PhoneId2": {
                    "format": "int32",
                    "type": "integer"
                },
                "PhoneNumber2": {
                    "type": "string"
                },
                "PhoneNumber2Formatted": {
                    "type": "string"
                },
                "AllowTelemarketing2": {
                    "type": "boolean"
                },
                "DayEveningIndicator2": {
                    "type": "string"
                },
                "PhoneSearch2": {
                    "type": "string"
                },
                "EditIndicator2": {
                    "type": "boolean"
                },
                "UpdatedDateTime2": {
                    "format": "date-time",
                    "type": "string"
                },
                "PhoneId3": {
                    "format": "int32",
                    "type": "integer"
                },
                "PhoneNumber3": {
                    "type": "string"
                },
                "PhoneNumber3Formatted": {
                    "type": "string"
                },
                "AllowTelemarketing3": {
                    "type": "boolean"
                },
                "DayEveningIndicator3": {
                    "type": "string"
                },
                "PhoneSearch3": {
                    "type": "string"
                },
                "EditIndicator3": {
                    "type": "boolean"
                },
                "UpdatedDateTime3": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "ConstituentMiniSnapshot": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "ConstituentType": {
                    "$ref": "#/definitions/ConstituentTypeSummary"
                },
                "FirstName": {
                    "type": "string"
                },
                "Inactive": {
                    "$ref": "#/definitions/ConstituentInactiveSummary"
                },
                "InactiveReason": {
                    "$ref": "#/definitions/InactiveReasonSummary"
                },
                "LastActivityDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "MailIndicator": {
                    "$ref": "#/definitions/MailIndicatorSummary"
                },
                "EmarketIndicator": {
                    "$ref": "#/definitions/EmarketIndicatorSummary"
                },
                "MiddleName": {
                    "type": "string"
                },
                "NameStatus": {
                    "$ref": "#/definitions/NameStatusSummary"
                },
                "OriginalSource": {
                    "$ref": "#/definitions/OriginalSourceSummary"
                },
                "PhoneIndicator": {
                    "$ref": "#/definitions/PhoneIndicatorSummary"
                },
                "Prefix": {
                    "$ref": "#/definitions/PrefixSummary"
                },
                "Gender": {
                    "$ref": "#/definitions/GenderSummary"
                },
                "Suffix": {
                    "$ref": "#/definitions/SuffixSummary"
                },
                "Affiliates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffiliationInfo"
                    }
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "SortName": {
                    "type": "string"
                }
            }
        },
        "SurveyQuestionSummary": {
            "type": "object",
            "properties": {
                "Question": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "SurveyQuestionDataItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "BookingTemplateSummary": {
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/BookingCategorySummary"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "UserInformation": {
            "type": "object",
            "properties": {
                "User": {
                    "$ref": "#/definitions/User"
                },
                "UserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserGroup"
                    }
                },
                "DefaultUserGroupId": {
                    "type": "string"
                }
            }
        },
        "Performance": {
            "type": "object",
            "properties": {
                "AvailSaleIndicator": {
                    "type": "boolean"
                },
                "BestSeatMap": {
                    "$ref": "#/definitions/BestSeatMapSummary"
                },
                "BudgetAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Campaign": {
                    "$ref": "#/definitions/Campaign"
                },
                "DefaultEndSaleDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "DefaultStartSaleDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "DoorsClose": {
                    "format": "date-time",
                    "type": "string"
                },
                "DoorsOpen": {
                    "format": "date-time",
                    "type": "string"
                },
                "Duration": {
                    "format": "int32",
                    "type": "integer"
                },
                "Facility": {
                    "$ref": "#/definitions/FacilitySummary"
                },
                "Code": {
                    "type": "string"
                },
                "Date": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Status": {
                    "$ref": "#/definitions/PerformanceStatusSummary"
                },
                "Type": {
                    "$ref": "#/definitions/PerformanceTypeSummary"
                },
                "ProductionSeason": {
                    "$ref": "#/definitions/ProductionSeasonSummary"
                },
                "PublishClientEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PublishClientStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PublishWebApiEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PublishWebApiStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "RankType": {
                    "$ref": "#/definitions/RankTypeSummary"
                },
                "SalesNotes": {
                    "type": "string"
                },
                "SalesNotesRequired": {
                    "type": "boolean"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "TimeSlot": {
                    "$ref": "#/definitions/TimeSlotSummary"
                },
                "TvIndicator": {
                    "type": "boolean"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/ZoneMapSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Description": {
                    "type": "string"
                },
                "ShortName": {
                    "type": "string"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                }
            }
        },
        "Campaign": {
            "type": "object",
            "properties": {
                "AutoRestrictContributionsBeforeStartDate": {
                    "type": "boolean"
                },
                "Type": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CategoryId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EventDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EventExpense": {
                    "format": "double",
                    "type": "number"
                },
                "EventMinimumAmount": {
                    "format": "double",
                    "type": "number"
                },
                "FYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "GiftAmount": {
                    "format": "double",
                    "type": "number"
                },
                "GoalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MembershipIncludesMatchingGifts": {
                    "type": "string"
                },
                "MinimumPledgeAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Notes": {
                    "type": "string"
                },
                "NumSuccessCust": {
                    "format": "int32",
                    "type": "integer"
                },
                "NumTargetCust": {
                    "format": "int32",
                    "type": "integer"
                },
                "NumTickets": {
                    "format": "int32",
                    "type": "integer"
                },
                "PledgeReceivedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PledgeAmount": {
                    "format": "double",
                    "type": "number"
                },
                "SingleOpenPledgeIndicator": {
                    "type": "string"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "TotalTicketIncome": {
                    "format": "double",
                    "type": "number"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "PerformanceStatusSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PerformanceTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "TimeSlotSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PerformanceSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "DefaultEndSaleDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "DefaultStartSaleDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ProductionSeason": {
                    "$ref": "#/definitions/Entity"
                },
                "Duration": {
                    "format": "int32",
                    "type": "integer"
                },
                "TimeSlot": {
                    "$ref": "#/definitions/TimeSlotSummary"
                },
                "ZoneMapId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FacilityId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                }
            }
        },
        "PerformanceAuditResponse": {
            "type": "object",
            "properties": {
                "TotalCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "Page": {
                    "format": "int32",
                    "type": "integer"
                },
                "PageSize": {
                    "format": "int32",
                    "type": "integer"
                },
                "Items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceAuditEntry"
                    }
                }
            }
        },
        "PerformanceAuditEntry": {
            "type": "object",
            "properties": {
                "Action": {
                    "type": "string"
                },
                "AlternateKey": {
                    "type": "string"
                },
                "Column": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "NewValue": {
                    "type": "string"
                },
                "OldValue": {
                    "type": "string"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Table": {
                    "type": "string"
                }
            }
        },
        "PerformanceZoneAvailabilityWithConstituent": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Zone": {
                    "$ref": "#/definitions/ZoneSummary"
                },
                "SectionSummaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SectionSummary"
                    }
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AvailableCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentAvailableCount": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SeatHoldDetail": {
            "type": "object",
            "properties": {
                "SeatId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Priority": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldCodeDetail": {
                    "$ref": "#/definitions/HoldCodeDetail"
                }
            }
        },
        "HoldCodeDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Legend": {
                    "type": "string"
                },
                "IsBlackout": {
                    "type": "boolean"
                }
            }
        },
        "UpdateSeatHoldRequest": {
            "type": "object",
            "properties": {
                "HoldUntilDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "OnlyAffectAvailable": {
                    "type": "boolean"
                },
                "ReplaceMode": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatHolds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SeatHoldRequest"
                    }
                }
            }
        },
        "SeatHoldRequest": {
            "type": "object",
            "properties": {
                "SeatId": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldCodeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SeatHold": {
            "type": "object",
            "properties": {
                "SeatId": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldCodeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "BulkCopySetSummary": {
            "type": "object",
            "properties": {
                "Inactive": {
                    "type": "boolean"
                },
                "SetDescription": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SetType": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "BulkCopyDayForCopy": {
            "type": "object",
            "properties": {
                "Packages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BulkCopyDayForCopyPackage"
                    }
                },
                "Performances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BulkCopyDayForCopyPerformance"
                    }
                }
            }
        },
        "BulkCopyDayForCopyPackage": {
            "type": "object",
            "properties": {
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Performances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BulkCopyDayForCopyPerformance"
                    }
                }
            }
        },
        "BulkCopyDayForCopyPerformance": {
            "type": "object",
            "properties": {
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "PerformanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "IncludeWithoutCopy": {
                    "type": "string"
                }
            }
        },
        "Session": {
            "type": "object",
            "properties": {
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsLoggedIn": {
                    "type": "boolean"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OriginalModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SourceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LoginInfo": {
                    "$ref": "#/definitions/SessionLoginInfo"
                },
                "CartInfo": {
                    "$ref": "#/definitions/CartInfo"
                },
                "BusinessFacing": {
                    "type": "boolean"
                },
                "IsGuest": {
                    "type": "boolean"
                },
                "CheckoutStatus": {
                    "$ref": "#/definitions/CheckoutStatus"
                },
                "HasLockedSeats": {
                    "type": "boolean"
                },
                "SeatsExpired": {
                    "type": "boolean"
                }
            }
        },
        "SessionLoginInfo": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OriginalConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserId": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "FailedAttempts": {
                    "format": "int32",
                    "type": "integer"
                },
                "LockedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ElectronicAddress": {
                    "type": "string"
                }
            }
        },
        "CartInfo": {
            "type": "object",
            "properties": {
                "PerformanceCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "ContributionCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "MembershipCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserDefinedFeeCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "GiftCertificateCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "FirstSeatAddedDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "CheckoutStatus": {
            "type": "object",
            "properties": {
                "Status": {
                    "type": "string"
                },
                "Date": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "SessionExpirationResponse": {
            "type": "object",
            "properties": {
                "Expiration": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "SetSessionExpirationRequest": {
            "type": "object",
            "properties": {
                "Expiration": {
                    "format": "date-time",
                    "type": "string"
                },
                "TimeOffset": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "WebDeliveryMethod": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Restricted": {
                    "type": "string"
                },
                "Default": {
                    "type": "string"
                },
                "PrintAtHome": {
                    "type": "string"
                },
                "RequireAddress": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "SystemDefaultSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Value": {
                    "type": "string"
                },
                "ParentTable": {
                    "type": "string"
                },
                "FieldName": {
                    "type": "string"
                }
            }
        },
        "OnAccountBalance": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Balance": {
                    "format": "double",
                    "type": "number"
                },
                "UsedInSession": {
                    "format": "double",
                    "type": "number"
                },
                "CurrentBalance": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "WebOrderSearchResponse": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TotalDueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TotalPaidAmount": {
                    "format": "double",
                    "type": "number"
                },
                "LockedInBatch": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsRolloverOrder": {
                    "type": "boolean"
                },
                "CreateDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LockedBySessionKey": {
                    "type": "string"
                },
                "IsOkToPrint": {
                    "type": "boolean"
                },
                "NumberOfUnprintedSeats": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "MembershipLevelCategorySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "TicketHistory": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "Title": {
                    "$ref": "#/definitions/TitleSummary"
                },
                "Production": {
                    "$ref": "#/definitions/ProductionSummary"
                },
                "ProductionSeason": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Performance": {
                    "$ref": "#/definitions/HistoryPerformanceSummary"
                },
                "Package": {
                    "$ref": "#/definitions/HistoryPackageSummary"
                },
                "Theater": {
                    "$ref": "#/definitions/TheaterSummary"
                },
                "Order": {
                    "$ref": "#/definitions/HistoryOrderSummary"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/ModeOfSaleSummary"
                },
                "Zone": {
                    "$ref": "#/definitions/ZoneSummary"
                },
                "PriceType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Rule": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Role": {
                    "type": "string"
                },
                "TicketType": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "NumberOfSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "Locations": {
                    "type": "string"
                }
            }
        },
        "HistoryPackageSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "PackageType": {
                    "$ref": "#/definitions/PackageTypeSummary"
                }
            }
        },
        "HistoryOrderSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Source": {
            "type": "object",
            "properties": {
                "AcquisitionCost": {
                    "format": "double",
                    "type": "number"
                },
                "AcquisitionDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PromotionStatus": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DeliveryCost": {
                    "format": "double",
                    "type": "number"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FulfillCost": {
                    "format": "double",
                    "type": "number"
                },
                "HotlistStatus": {
                    "type": "string"
                },
                "Segment": {
                    "type": "string"
                },
                "NumContacts": {
                    "format": "int32",
                    "type": "integer"
                },
                "NumSuccessConstituents": {
                    "format": "int32",
                    "type": "integer"
                },
                "Provider": {
                    "type": "string"
                },
                "RestrictedUsage": {
                    "type": "string"
                },
                "SourceType": {
                    "type": "string"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Appeal": {
                    "$ref": "#/definitions/AppealSummary"
                },
                "List": {
                    "$ref": "#/definitions/ListSummary"
                },
                "MediaType": {
                    "$ref": "#/definitions/MediaTypeSummary"
                },
                "SourceGroup": {
                    "$ref": "#/definitions/SourceGroupSummary"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "SourceGroupSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "WebExpiringResponse": {
            "type": "object",
            "properties": {
                "Message": {
                    "type": "string"
                },
                "Sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SourceSummary"
                    }
                }
            }
        },
        "CartSummary": {
            "type": "object",
            "properties": {
                "SessionKey": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Solicitor": {
                    "type": "string"
                },
                "OrderCategory": {
                    "$ref": "#/definitions/OrderCategorySummary"
                },
                "OrderDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FirstSeatAddedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Initiator": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "DeliveryMethod": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Source": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Appeal": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "CartAmount": {
                    "format": "double",
                    "type": "number"
                },
                "AmountPaidNow": {
                    "format": "double",
                    "type": "number"
                },
                "BalanceToCharge": {
                    "format": "double",
                    "type": "number"
                },
                "SubTotal": {
                    "format": "double",
                    "type": "number"
                },
                "FeesAmount": {
                    "format": "double",
                    "type": "number"
                },
                "CartWasPriced": {
                    "type": "boolean"
                },
                "OrderNotes": {
                    "type": "string"
                },
                "BookingId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RuleBasedFees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuleBasedFee"
                    }
                },
                "Payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartPayment"
                    }
                },
                "Messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartPricingRuleMessage"
                    }
                },
                "Products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartProductSummary"
                    }
                },
                "DeliveryDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "RuleBasedFee": {
            "type": "object",
            "properties": {
                "CategoryDescription": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "CartProductSummary": {
            "type": "object",
            "properties": {
                "ProductClass": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Performance": {
                    "$ref": "#/definitions/CartProductPerformanceSummary"
                },
                "Package": {
                    "$ref": "#/definitions/CartProductPackageSummary"
                },
                "Contribution": {
                    "$ref": "#/definitions/CartContributionSummary"
                },
                "Membership": {
                    "$ref": "#/definitions/CartMembershipSummary"
                },
                "GiftCertificate": {
                    "$ref": "#/definitions/CartGiftCertificate"
                },
                "UserDefinedFee": {
                    "$ref": "#/definitions/UserDefinedFee"
                },
                "ProductGrouping": {
                    "type": "string"
                }
            }
        },
        "CartProductPerformanceSummary": {
            "type": "object",
            "properties": {
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceCode": {
                    "type": "string"
                },
                "PerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceDescription": {
                    "type": "string"
                },
                "TotalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "HasZoneTime": {
                    "type": "boolean"
                },
                "Source": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "DisplayLines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DisplayLine"
                    }
                }
            }
        },
        "CartProductPackageSummary": {
            "type": "object",
            "properties": {
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageCode": {
                    "type": "string"
                },
                "PackageDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PackageDescription": {
                    "type": "string"
                },
                "TotalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "FixedPackage": {
                    "type": "boolean"
                },
                "NFSPackage": {
                    "type": "boolean"
                },
                "SuperPackage": {
                    "type": "boolean"
                },
                "Source": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "SubPackage": {
                    "type": "boolean"
                },
                "Performances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartProductPerformanceSummary"
                    }
                }
            }
        },
        "CartContributionSummary": {
            "type": "object",
            "properties": {
                "ReferenceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "FundDescription": {
                    "type": "string"
                }
            }
        },
        "CartMembershipSummary": {
            "type": "object",
            "properties": {
                "ReferenceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "FundDescription": {
                    "type": "string"
                },
                "MembershipOrganization": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "MembershipLevelDescription": {
                    "type": "string"
                }
            }
        },
        "UserDefinedFee": {
            "type": "object",
            "properties": {
                "ItemFeeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "CategoryDescription": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "DisplayLine": {
            "type": "object",
            "properties": {
                "PriceTypeDescription": {
                    "type": "string"
                },
                "PriceTypeReasonShortDescription": {
                    "type": "string"
                },
                "ZoneShortDescription": {
                    "type": "string"
                },
                "SeatLocationDescription": {
                    "type": "string"
                },
                "Count": {
                    "format": "int32",
                    "type": "integer"
                },
                "Price": {
                    "format": "double",
                    "type": "number"
                },
                "Total": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "CartProperties": {
            "type": "object",
            "properties": {
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SourceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Solicitor": {
                    "type": "string"
                },
                "CategoryId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ChannelId": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldUntilDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                },
                "InitiatorId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PhoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DeliveryMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "ReceiptStringResponse": {
            "type": "object",
            "properties": {
                "ReceiptString": {
                    "type": "string"
                }
            }
        },
        "Batch": {
            "type": "object",
            "properties": {
                "AmtPosted": {
                    "format": "double",
                    "type": "number"
                },
                "BatchType": {
                    "$ref": "#/definitions/BatchTypeSummary"
                },
                "CloseDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ClosedBy": {
                    "type": "string"
                },
                "CntlIndicator": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                },
                "NumAccCc": {
                    "format": "int32",
                    "type": "integer"
                },
                "NumRejCc": {
                    "format": "int32",
                    "type": "integer"
                },
                "OpenLoc": {
                    "type": "string"
                },
                "Owner": {
                    "type": "string"
                },
                "PostId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PostedBy": {
                    "type": "string"
                },
                "PostedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "TallyPlAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TallyReAmount": {
                    "format": "double",
                    "type": "number"
                },
                "UniqueTag": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "CoreIdentityTokenResponse": {
            "type": "object",
            "properties": {
                "Licensee": {
                    "type": "string"
                },
                "IdToken": {
                    "type": "string"
                },
                "Environment": {
                    "type": "string"
                }
            }
        },
        "ResourceUsage": {
            "type": "object",
            "properties": {
                "HasSchedules": {
                    "type": "boolean"
                },
                "HasAssignments": {
                    "type": "boolean"
                }
            }
        },
        "ResourceDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ResourceType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ResourceCategory": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Qualifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EntitySummary"
                    }
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScheduleOccurrences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceScheduleOccurrence"
                    }
                }
            }
        },
        "ResourceScheduleOccurrence": {
            "type": "object",
            "properties": {
                "ScheduleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScheduleDescription": {
                    "type": "string"
                },
                "ScheduleTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "RecurrencePattern": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsShared": {
                    "type": "boolean"
                },
                "Count": {
                    "format": "int32",
                    "type": "integer"
                },
                "BookingAssignmentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Booking": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "MembershipOrganization": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "SubLineItemSummary": {
            "type": "object",
            "properties": {
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "SubLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaidAmountDecimal": {
                    "format": "double",
                    "type": "number"
                },
                "TicketNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "Seat": {
                    "$ref": "#/definitions/SLISeatSummary"
                },
                "Performance": {
                    "$ref": "#/definitions/SLIPerformanceSummary"
                },
                "Owner": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Initiator": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Recipient": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Season": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Package": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Facility": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PriceType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "LineItemCategory": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "SubLineItemStatus": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "SeatStatus": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "SLISeatSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Row": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Section": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "SLIPerformanceSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "PerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ProductionSeasonId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ConstituentTypeAffiliateSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentType": {
                    "$ref": "#/definitions/Entity"
                },
                "AffiliationType": {
                    "$ref": "#/definitions/Entity"
                },
                "HouseholdPrimary": {
                    "type": "boolean"
                },
                "ShowWithGroup": {
                    "type": "boolean"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "DefaultUserGroup": {
            "type": "object",
            "properties": {
                "UserGroup": {
                    "type": "string"
                }
            }
        },
        "CurrencyTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Rate": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "GiftAidRateSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Rate": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "ScreenMap": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Screens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Screen"
                    }
                }
            }
        },
        "Screen": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "RowCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "ColumnCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScreenUp": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScreenDown": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScreenLeft": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScreenRight": {
                    "format": "int32",
                    "type": "integer"
                },
                "HouseMapRectangles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HouseMapRectangle"
                    }
                }
            }
        },
        "HouseMapRectangle": {
            "type": "object",
            "properties": {
                "XCoordinate": {
                    "format": "int32",
                    "type": "integer"
                },
                "YCoordinate": {
                    "format": "int32",
                    "type": "integer"
                },
                "Height": {
                    "format": "int32",
                    "type": "integer"
                },
                "Width": {
                    "format": "int32",
                    "type": "integer"
                },
                "BrushColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "PenColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "TextColor": {
                    "format": "int32",
                    "type": "integer"
                },
                "TextXCoordinate": {
                    "format": "int32",
                    "type": "integer"
                },
                "TextYCoordinate": {
                    "format": "int32",
                    "type": "integer"
                },
                "TextText": {
                    "type": "string"
                }
            }
        },
        "Fee": {
            "type": "object",
            "properties": {
                "AllowNegativePercent": {
                    "type": "boolean"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "Category": {
                    "$ref": "#/definitions/FeeCategorySummary"
                },
                "Description": {
                    "type": "string"
                },
                "DesignationCode": {
                    "$ref": "#/definitions/DesignationCodeSummary"
                },
                "UserEditIndicator": {
                    "type": "boolean"
                },
                "EndAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ExchangeFeeInd": {
                    "type": "boolean"
                },
                "FeeAmount": {
                    "format": "double",
                    "type": "number"
                },
                "FeeFrequency": {
                    "type": "string"
                },
                "GlAccount": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "FiscalYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "NeverDelete": {
                    "type": "boolean"
                },
                "PercentIndicator": {
                    "type": "boolean"
                },
                "PercentRound": {
                    "format": "int32",
                    "type": "integer"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "StartAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "UserDefinedIndicator": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "FeeCategorySummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "FeeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "FeeAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "Category": {
                    "$ref": "#/definitions/FeeCategorySummary"
                },
                "UserDefinedIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "Report": {
            "type": "object",
            "properties": {
                "AllowSchedule": {
                    "type": "boolean"
                },
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "type": "string"
                },
                "ParameterWindowIndicator": {
                    "type": "boolean"
                },
                "ParameterWindow": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "LastRequestId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "ReportPath": {
                    "type": "string"
                },
                "PublicIndicator": {
                    "type": "boolean"
                },
                "ReportType": {
                    "format": "int32",
                    "type": "integer"
                },
                "UtilityIndicator": {
                    "type": "boolean"
                },
                "WarningIndicator": {
                    "type": "boolean"
                },
                "Window": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ReportCustomData": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "ReportCategory": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "DescriptionText": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ReportDefaults": {
            "type": "object",
            "properties": {
                "SSRSUrl": {
                    "type": "string"
                },
                "CompanyName": {
                    "type": "string"
                },
                "FileSaveReportPath": {
                    "type": "string"
                },
                "EmailReportPath": {
                    "type": "string"
                },
                "SSRSStandardPath": {
                    "type": "string"
                },
                "SSRSCustomPath": {
                    "type": "string"
                }
            }
        },
        "ReportParameter": {
            "type": "object",
            "properties": {
                "DataColumn": {
                    "type": "string"
                },
                "DataType": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultValue": {
                    "type": "string"
                },
                "DisableClause": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "DisplayColumn": {
                    "type": "string"
                },
                "EditStyle": {
                    "type": "string"
                },
                "EditStyleFlag": {
                    "type": "string"
                },
                "EndOfDay": {
                    "type": "boolean"
                },
                "Length": {
                    "format": "int32",
                    "type": "integer"
                },
                "MultiSelect": {
                    "type": "boolean"
                },
                "IsDependentOnOtherParameters": {
                    "type": "boolean"
                },
                "OrderClause": {
                    "type": "string"
                },
                "ParameterName": {
                    "type": "string"
                },
                "ParameterType": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReportId": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Required": {
                    "type": "boolean"
                },
                "SequenceNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "TableName": {
                    "type": "string"
                },
                "Validation": {
                    "type": "string"
                },
                "WhereClause": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "PackageWebContentSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Value": {
                    "type": "string"
                },
                "ContentType": {
                    "$ref": "#/definitions/WebContentTypeSummary"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PriceTypeReasonSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "BatchTypeUserGroup": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "BatchType": {
                    "$ref": "#/definitions/BatchTypeSummary"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "PronounSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "ServiceResourceUserGroupSummary": {
            "type": "object",
            "properties": {
                "CanCreate": {
                    "type": "boolean"
                },
                "CanDelete": {
                    "type": "boolean"
                },
                "CanRead": {
                    "type": "boolean"
                },
                "CanUpdate": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ServiceResource": {
                    "$ref": "#/definitions/ServiceResourceSummary"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "ServiceResourceSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                }
            }
        },
        "UpgradeCategorySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "PackageHistory": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "Package": {
                    "$ref": "#/definitions/HistoryPackageSummary"
                },
                "Order": {
                    "$ref": "#/definitions/HistoryOrderSummary"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/ModeOfSaleSummary"
                },
                "Zone": {
                    "$ref": "#/definitions/ZoneSummary"
                },
                "PriceType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Role": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "NumberOfSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "Locations": {
                    "type": "string"
                }
            }
        },
        "DiscountTypeSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "CumulativeGivingReceipt": {
            "type": "object",
            "properties": {
                "AttachPdf": {
                    "type": "boolean"
                },
                "ContributionTotalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "DateSent": {
                    "format": "date-time",
                    "type": "string"
                },
                "EmailAddress": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Funds": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "SessionId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "TaxReceiptId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Year": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Format": {
                    "$ref": "#/definitions/Entity"
                }
            }
        },
        "EncryptionKeyCheckResponse": {
            "type": "object",
            "properties": {
                "IsExpired": {
                    "type": "boolean"
                },
                "IsWithinWarningPeriod": {
                    "type": "boolean"
                },
                "ExpirationDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Status": {
            "type": "object",
            "properties": {
                "Success": {
                    "type": "boolean"
                },
                "TimeStamp": {
                    "format": "date-time",
                    "type": "string"
                },
                "TimeZone": {
                    "type": "string"
                },
                "Dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Dependency"
                    }
                }
            }
        },
        "Dependency": {
            "type": "object",
            "properties": {
                "Success": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "SeatServerStatus": {
            "type": "object",
            "properties": {
                "IsListening": {
                    "type": "boolean"
                },
                "ConnectionsCount": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ApiPluginConfiguration": {
            "type": "object",
            "properties": {
                "Registrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApiPluginRegistration"
                    }
                },
                "ReloadAlways": {
                    "type": "boolean"
                },
                "Enabled": {
                    "type": "boolean"
                }
            }
        },
        "ApiPluginRegistration": {
            "type": "object",
            "properties": {
                "FullPluginName": {
                    "type": "string"
                },
                "Verb": {
                    "type": "string"
                },
                "UriMatch": {
                    "type": "string"
                },
                "PluginPlacement": {
                    "type": "string"
                }
            }
        },
        "TransactionHistoryResponse": {
            "type": "object",
            "properties": {
                "TotalCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "Page": {
                    "format": "int32",
                    "type": "integer"
                },
                "PageSize": {
                    "format": "int32",
                    "type": "integer"
                },
                "Items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionHistory"
                    }
                }
            }
        },
        "TransactionHistory": {
            "type": "object",
            "properties": {
                "TransactionId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TransactionDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "TransactionTypeDescription": {
                    "type": "string"
                },
                "ReferenceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TransactionAmount": {
                    "format": "double",
                    "type": "number"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CampaignDescription": {
                    "type": "string"
                },
                "AppealDescription": {
                    "type": "string"
                },
                "Source": {
                    "type": "string"
                },
                "MediaTypeDescription": {
                    "type": "string"
                },
                "FundDescription": {
                    "type": "string"
                },
                "AdjustedReasonDescription": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PostId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SchedulePatternTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "TemplateType": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "ControlGroupUserGroupSummary": {
            "type": "object",
            "properties": {
                "DefaultIndicator": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "PaymentHistoryResponse": {
            "type": "object",
            "properties": {
                "TotalCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "Page": {
                    "format": "int32",
                    "type": "integer"
                },
                "PageSize": {
                    "format": "int32",
                    "type": "integer"
                },
                "Items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentHistory"
                    }
                }
            }
        },
        "PaymentHistory": {
            "type": "object",
            "properties": {
                "PaymentDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentMethod": {
                    "type": "string"
                },
                "PaymentAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TransactionId": {
                    "format": "int32",
                    "type": "integer"
                },
                "GiftCertificateNumber": {
                    "type": "string"
                },
                "AccountNumber": {
                    "type": "string"
                },
                "CheckNumber": {
                    "type": "string"
                },
                "NameOnPayment": {
                    "type": "string"
                },
                "CardExpiration": {
                    "format": "date-time",
                    "type": "string"
                },
                "ReferenceNumber": {
                    "type": "string"
                },
                "ParentPaymentNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "TemplateSummary": {
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/TemplateCategorySummary"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "WebContentTypeDataItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "TableMetadata": {
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                },
                "SingularName": {
                    "type": "string"
                }
            }
        },
        "MembershipStanding": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "MembershipStandingSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "MerchantReference": {
            "type": "object",
            "properties": {
                "Reference": {
                    "type": "string"
                }
            }
        },
        "IntegrationDefaultSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "ListContent": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ListImportRequest": {
            "type": "object",
            "properties": {
                "ConstituentIds": {
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            }
        },
        "ListImportResponse": {
            "type": "object",
            "properties": {
                "SuccessfulImports": {
                    "format": "int32",
                    "type": "integer"
                },
                "Errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ListImportError"
                    }
                }
            }
        },
        "ListImportError": {
            "type": "object",
            "properties": {
                "Row": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Message": {
                    "type": "string"
                }
            }
        },
        "ListContentDetail": {
            "type": "object",
            "properties": {
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                }
            }
        },
        "ContextInformation": {
            "type": "object",
            "properties": {
                "DefaultBatchTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultControlGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrganizationId": {
                    "format": "int32",
                    "type": "integer"
                },
                "WorkerConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrganizationName": {
                    "type": "string"
                },
                "User": {
                    "$ref": "#/definitions/User"
                },
                "UserGroup": {
                    "$ref": "#/definitions/UserGroupSummary"
                },
                "P2PeOnly": {
                    "type": "boolean"
                }
            }
        },
        "UpgradeLog": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScriptId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Version": {
                    "type": "string"
                },
                "UpgradeCategorySummary": {
                    "$ref": "#/definitions/UpgradeCategorySummary"
                },
                "HotFixNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReleaseDescription": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "SubLineItemStatusSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "TriPOSCloudConfigurationSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "Design": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "DesignCategory": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DesignType": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MaxCol": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxRow": {
                    "format": "int32",
                    "type": "integer"
                },
                "Printer": {
                    "$ref": "#/definitions/PrinterSummary"
                },
                "X2val": {
                    "format": "int32",
                    "type": "integer"
                },
                "Y2val": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZebraDesignNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "DigitalDesignNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "TemplateId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "DesignSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "Fund": {
            "type": "object",
            "properties": {
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituencyId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "GiftAidTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "TicketingIndicator": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "ControlGroupDivision": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "DivisionId": {
                    "type": "string"
                }
            }
        },
        "GiftCertificateInfo": {
            "type": "object",
            "properties": {
                "GiftCertificateNumber": {
                    "type": "string"
                },
                "OriginalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "UsedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Balance": {
                    "format": "double",
                    "type": "number"
                },
                "OriginalDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PrintCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "LastPrintDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SessionKey": {
                    "type": "string"
                },
                "RecipientName": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "PerformancePriceAuditEntry": {
            "type": "object",
            "properties": {
                "PerformanceCode": {
                    "type": "string"
                },
                "PriceLayerTypeDescription": {
                    "type": "string"
                },
                "PriceTypeDescription": {
                    "type": "string"
                },
                "ZoneDescription": {
                    "type": "string"
                },
                "EventDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "User": {
                    "type": "string"
                },
                "Date": {
                    "format": "date-time",
                    "type": "string"
                },
                "Location": {
                    "type": "string"
                },
                "Action": {
                    "type": "string"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Price": {
                    "format": "double",
                    "type": "number"
                },
                "MinPrice": {
                    "format": "double",
                    "type": "number"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceLayerId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformancePriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PerformancePriceDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "EffectiveDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EditIndicator": {
                    "type": "boolean"
                },
                "MinPrice": {
                    "format": "double",
                    "type": "number"
                },
                "PerformancePriceType": {
                    "format": "int32",
                    "type": "integer"
                },
                "Price": {
                    "format": "double",
                    "type": "number"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "HasEvents": {
                    "type": "boolean"
                },
                "IsPriceBasedOnCurrentEvent": {
                    "type": "boolean"
                },
                "Zone": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceEvents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PriceEvent"
                    }
                }
            }
        },
        "ContactPointCategoryPurposeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Purpose": {
                    "$ref": "#/definitions/ContactPointPurposeSummary"
                }
            }
        },
        "ObjectPermissionSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CanCreate": {
                    "type": "string"
                },
                "CanView": {
                    "type": "string"
                },
                "CanEdit": {
                    "type": "string"
                },
                "CanDelete": {
                    "type": "string"
                },
                "Constituency": {
                    "$ref": "#/definitions/ConstituencyTypeSummary"
                },
                "ApplicationObject": {
                    "$ref": "#/definitions/ApplicationObject"
                },
                "UserGroup": {
                    "$ref": "#/definitions/UserGroup"
                }
            }
        },
        "SeatStatusSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "DocumentSettings": {
            "type": "object",
            "properties": {
                "MaxRequestLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxAllowedContentLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxReceivedMessageSize": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxStringContentLength": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxArrayLength": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Appeal": {
            "type": "object",
            "properties": {
                "AppealItemizedCost": {
                    "format": "double",
                    "type": "number"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "GiftAmount": {
                    "format": "double",
                    "type": "number"
                },
                "GoalAmount": {
                    "format": "double",
                    "type": "number"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "NumSuccessConstituents": {
                    "format": "int32",
                    "type": "integer"
                },
                "NumTargetConstituents": {
                    "format": "int32",
                    "type": "integer"
                },
                "PledgeReceivedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PledgeAmount": {
                    "format": "double",
                    "type": "number"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Campaign": {
                    "$ref": "#/definitions/CampaignSummary"
                },
                "Category": {
                    "$ref": "#/definitions/AppealCategorySummary"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "UserPreference": {
            "type": "object",
            "properties": {
                "Key": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Value": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "HoldCodeUserGroupSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldCode": {
                    "$ref": "#/definitions/HoldCodeSummary"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "PerformancePriceLayerCount": {
            "type": "object",
            "properties": {
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LayerCount": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PerformancePriceCount": {
            "type": "object",
            "properties": {
                "Count": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Relationship": {
            "type": "object",
            "properties": {
                "AssociatedConstituentName": {
                    "type": "string"
                },
                "AssociatedConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AssociatedConstituentSortName": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "IsAllowedToTransact": {
                    "type": "boolean"
                },
                "IsIncludedInSearchResults": {
                    "type": "boolean"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Note": {
                    "type": "string"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "RelationshipCategoryDescription": {
                    "type": "string"
                },
                "RelationshipCategoryId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RelationshipContext": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "RelationshipTypeDescription": {
                    "type": "string"
                },
                "RelationshipTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReciprocalRelationshipId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Salary": {
                    "format": "double",
                    "type": "number"
                },
                "Title": {
                    "type": "string"
                },
                "BirthDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "GenderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsEditable": {
                    "type": "boolean"
                },
                "NameIndicator": {
                    "format": "int32",
                    "type": "integer"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PortfolioCustomElementSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "OrderProductView": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Solicitor": {
                    "type": "string"
                },
                "OrderDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "HoldUntilDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "TotalPurchaseAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TotalReturnAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TotalContributionAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TotalContributionPaidAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TotalFeeAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TotalFeePaidAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TotalDueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TotalPaidAmount": {
                    "format": "double",
                    "type": "number"
                },
                "AddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PhoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BookingId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderNotes": {
                    "type": "string"
                },
                "CustomDataItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomDataItem"
                    }
                },
                "DeliveryMethod": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "BusinessUnit": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Category": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "Initiator": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Source": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Appeal": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PaymentPlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewPaymentPlan"
                    }
                },
                "OrderFees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewFeeDetail"
                    }
                },
                "Payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewPayment"
                    }
                },
                "Messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PricingRuleMessage"
                    }
                },
                "Products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewProduct"
                    }
                }
            }
        },
        "OrderProductViewPaymentPlan": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AmountDue": {
                    "format": "double",
                    "type": "number"
                },
                "DateDue": {
                    "format": "date-time",
                    "type": "string"
                },
                "BillingType": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "OrderProductViewFeeDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SubLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FeeSummary": {
                    "$ref": "#/definitions/OrderProductViewFeeSummary"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "OverrideIndicator": {
                    "type": "string"
                },
                "OverrideAmount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "OrderProductViewPayment": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "TenderedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethod": {
                    "$ref": "#/definitions/OrderProductViewPaymentMethod"
                },
                "LastFourCreditCardNumber": {
                    "type": "string"
                },
                "PayerName": {
                    "type": "string"
                },
                "CheckNumber": {
                    "type": "string"
                },
                "GiftCertificateNumber": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "OrderProductViewProduct": {
            "type": "object",
            "properties": {
                "ProductClass": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Performance": {
                    "$ref": "#/definitions/OrderProductViewProductPerformance"
                },
                "Package": {
                    "$ref": "#/definitions/OrderProductViewProductPackage"
                },
                "Contribution": {
                    "$ref": "#/definitions/OrderProductViewContribution"
                },
                "Membership": {
                    "$ref": "#/definitions/OrderProductViewMembership"
                },
                "GiftCertificate": {
                    "$ref": "#/definitions/OrderProductViewGiftCertificate"
                },
                "UserDefinedFee": {
                    "$ref": "#/definitions/OrderProductViewFeeDetail"
                },
                "ProductGrouping": {
                    "type": "string"
                }
            }
        },
        "OrderProductViewFeeSummary": {
            "type": "object",
            "properties": {
                "FeeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "OrderProductViewPaymentMethod": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "AccountType": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "OrderProductViewProductPerformance": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItem": {
                    "$ref": "#/definitions/OrderProductViewLineItem"
                }
            }
        },
        "OrderProductViewProductPackage": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewLineItem"
                    }
                }
            }
        },
        "OrderProductViewContribution": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "Fund": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Notes": {
                    "type": "string"
                },
                "CustomDataItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomDataItem"
                    }
                }
            }
        },
        "OrderProductViewMembership": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "Fund": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "MembershipOrganization": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "MembershipLevel": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "CustomDataItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomDataItem"
                    }
                }
            }
        },
        "OrderProductViewGiftCertificate": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "GiftCertificateNumber": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "Notes": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                }
            }
        },
        "OrderProductViewLineItem": {
            "type": "object",
            "properties": {
                "AlternateLineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewAlternateLineItem"
                    }
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SuperPackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AlternateUpgrade": {
                    "type": "string"
                },
                "Primary": {
                    "type": "boolean"
                },
                "Source": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Package": {
                    "$ref": "#/definitions/OrderProductViewPackage"
                },
                "Performance": {
                    "$ref": "#/definitions/OrderProductViewPerformance"
                },
                "PerformanceGroup": {
                    "$ref": "#/definitions/OrderProductViewPerformanceGroup"
                },
                "SubLineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewSubLineItem"
                    }
                },
                "SpecialRequest": {
                    "$ref": "#/definitions/SpecialRequest"
                },
                "TotalDue": {
                    "format": "double",
                    "type": "number"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "OrderProductViewAlternateLineItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SuperPackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AlternateUpgrade": {
                    "type": "string"
                },
                "Primary": {
                    "type": "boolean"
                },
                "Package": {
                    "$ref": "#/definitions/OrderProductViewPackage"
                },
                "Performance": {
                    "$ref": "#/definitions/OrderProductViewPerformance"
                },
                "SubLineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewSubLineItem"
                    }
                },
                "SpecialRequest": {
                    "$ref": "#/definitions/SpecialRequest"
                },
                "TotalDue": {
                    "format": "double",
                    "type": "number"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "OrderProductViewPackage": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Season": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Type": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "FixedPackage": {
                    "type": "boolean"
                },
                "NFSPackage": {
                    "type": "boolean"
                },
                "SuperPackage": {
                    "type": "boolean"
                },
                "SubPackage": {
                    "type": "boolean"
                },
                "Date": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "OrderProductViewPerformance": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Facility": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Duration": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductionSeason": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Season": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "TimeSlot": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Type": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/OrderProductViewZoneMap"
                },
                "BestSeatMap": {
                    "$ref": "#/definitions/OrderProductViewBestSeatMap"
                }
            }
        },
        "OrderProductViewPerformanceGroup": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "OrderProductViewSubLineItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceType": {
                    "$ref": "#/definitions/OrderProductViewPriceType"
                },
                "OriginalPriceType": {
                    "$ref": "#/definitions/OrderProductViewPriceType"
                },
                "StatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SubLineItemDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewSubLineItemDetail"
                    }
                },
                "Zone": {
                    "$ref": "#/definitions/OrderProductViewZone"
                },
                "Seat": {
                    "$ref": "#/definitions/OrderProductViewSeat"
                },
                "Recipient": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaidAmount": {
                    "format": "double",
                    "type": "number"
                },
                "TicketNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "CompositeTicketNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "SubLineItemFees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductViewFeeDetail"
                    }
                },
                "RuleIndicator": {
                    "type": "string"
                },
                "PricingRule": {
                    "$ref": "#/definitions/OrderPricingRuleSummary"
                }
            }
        },
        "OrderProductViewZoneMap": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "SeatMap": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "OrderProductViewBestSeatMap": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "IsGA": {
                    "type": "boolean"
                }
            }
        },
        "OrderProductViewPriceType": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Category": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PriceTypeReason": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "AliasDescription": {
                    "type": "string"
                }
            }
        },
        "OrderProductViewSubLineItemDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "BenevolentIndicator": {
                    "type": "boolean"
                },
                "CampaignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DiscountType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaidAmount": {
                    "format": "double",
                    "type": "number"
                },
                "OriginalPrice": {
                    "format": "double",
                    "type": "number"
                },
                "PerformancePriceTypeLayerId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "OrderProductViewZone": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ZoneGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "Abbreviation": {
                    "type": "string"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneTime": {
                    "type": "string"
                }
            }
        },
        "OrderProductViewSeat": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Row": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Section": {
                    "$ref": "#/definitions/OrderProductViewSeatSection"
                }
            }
        },
        "OrderPricingRuleSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "RuleAction": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "OrderProductViewSeatSection": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "PrintDescription": {
                    "type": "string"
                }
            }
        },
        "Merchant": {
            "type": "object",
            "properties": {
                "MerchantId": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "SalutationResponse": {
            "type": "object",
            "properties": {
                "EnvelopeSalutation1": {
                    "type": "string"
                },
                "EnvelopeSalutation2": {
                    "type": "string"
                },
                "LetterSalutation": {
                    "type": "string"
                },
                "GroupName": {
                    "type": "string"
                },
                "SortName": {
                    "type": "string"
                }
            }
        },
        "GiftAidStatusSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "ReceiptSettingSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ConstituentGroupSummary"
                }
            }
        },
        "AppScreenText": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                }
            }
        },
        "AppScreenTextSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "Format": {
            "type": "object",
            "properties": {
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "GooesoftReportId": {
                    "type": "string"
                },
                "FormName": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ReceiptCounter": {
                    "format": "int32",
                    "type": "integer"
                },
                "DataObject": {
                    "type": "string"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                },
                "TemplateId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EmailIndicator": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                }
            }
        },
        "FormatSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                }
            }
        },
        "PricingRuleSetSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "ControlGroup": {
                    "$ref": "#/definitions/ControlGroupSummary"
                }
            }
        },
        "SystemDefault": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                },
                "ParentTable": {
                    "type": "string"
                },
                "FieldName": {
                    "type": "string"
                }
            }
        },
        "SeatCodeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                }
            }
        },
        "TessituraPaymentsNotification": {
            "type": "object",
            "properties": {
                "MerchantReference": {
                    "type": "string"
                },
                "MerchantAccountCode": {
                    "type": "string"
                },
                "EventDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CurrencyType": {
                    "type": "string"
                },
                "Amount": {
                    "format": "int32",
                    "type": "integer"
                },
                "EventCode": {
                    "type": "string"
                },
                "OriginalReference": {
                    "type": "string"
                },
                "PspReference": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Success": {
                    "type": "boolean"
                },
                "PaymentMethod": {
                    "type": "string"
                },
                "AdditionalData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NameValue"
                    }
                },
                "Expiration": {
                    "type": "string"
                }
            }
        },
        "ReportUserGroupSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReportId": {
                    "type": "string"
                },
                "RunRight": {
                    "type": "string"
                },
                "ViewRight": {
                    "type": "string"
                },
                "UserGroupId": {
                    "type": "string"
                }
            }
        },
        "EmailPromotionUpdateRequest": {
            "type": "object",
            "properties": {
                "DownloadNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EventName": {
                    "type": "string"
                },
                "EventDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "BatchRequest": {
            "type": "object",
            "properties": {
                "Requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Request"
                    }
                }
            }
        },
        "Request": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "HttpMethod": {
                    "type": "string"
                },
                "Uri": {
                    "type": "string"
                },
                "ContinueOnError": {
                    "type": "boolean"
                },
                "Content": {
                    "type": "object"
                },
                "DependsOnRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DependsOnRequest"
                    }
                },
                "ReturnTypeString": {
                    "type": "string"
                }
            }
        },
        "DependsOnRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "SourcePath": {
                    "type": "string"
                },
                "TargetPath": {
                    "type": "string"
                },
                "IsUrlDependency": {
                    "type": "boolean"
                }
            }
        },
        "BatchResponse": {
            "type": "object",
            "properties": {
                "Responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Response"
                    }
                },
                "BatchFailed": {
                    "type": "boolean"
                }
            }
        },
        "Response": {
            "type": "object",
            "properties": {
                "RequestId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ResponseObject": {
                    "type": "object"
                },
                "StatusCode": {
                    "format": "int32",
                    "enum": [
                        100,
                        101,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        300,
                        300,
                        301,
                        301,
                        302,
                        302,
                        303,
                        303,
                        304,
                        305,
                        306,
                        307,
                        307,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        426,
                        500,
                        501,
                        502,
                        503,
                        504,
                        505
                    ],
                    "type": "integer"
                },
                "ErrorMessages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ErrorMessage"
                    }
                }
            }
        },
        "ErrorMessage": {
            "type": "object",
            "properties": {
                "Code": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Details": {
                    "type": "string"
                },
                "ErrorPath": {
                    "type": "string"
                }
            }
        },
        "ProductionSeasonSearchRequest": {
            "type": "object",
            "properties": {
                "ArtistIds": {
                    "type": "string"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FacilityIds": {
                    "type": "string"
                },
                "FullTextSearch": {
                    "type": "string"
                },
                "KeywordAndOr": {
                    "type": "string"
                },
                "KeywordIds": {
                    "type": "string"
                },
                "PerformanceEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "SeasonIds": {
                    "type": "string"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MatchAllPerformances": {
                    "type": "boolean"
                }
            }
        },
        "ProductionSeasonSearchResponse": {
            "type": "object",
            "properties": {
                "ProductionSeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductionSeasonDescription": {
                    "type": "string"
                },
                "FirstPerformanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastPerformanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PremiereDescription": {
                    "type": "string"
                },
                "Production": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ConstituentInterestWeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "ShortName": {
                    "type": "string"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                }
            }
        },
        "OrderBillingRequest": {
            "type": "object",
            "properties": {
                "OrderStartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "OrderEndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ModesOfSale": {
                    "type": "string"
                },
                "Seasons": {
                    "type": "string"
                },
                "PerformanceStartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceEndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "BillingTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CutoffDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "MinAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ShouldUpdate": {
                    "type": "boolean"
                },
                "AppealId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NewSourceDescription": {
                    "type": "string"
                },
                "MediaTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinNumberOfBillsToPrint": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxNumberOfBillsToPrint": {
                    "format": "int32",
                    "type": "integer"
                },
                "ListId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserId": {
                    "type": "string"
                },
                "BatchTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentMethodGroupId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AutomatedBillingRunResponse": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "BillCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsComplete": {
                    "type": "boolean"
                }
            }
        },
        "SearchRequest": {
            "type": "object",
            "properties": {
                "CardNumber": {
                    "type": "string"
                }
            }
        },
        "GroupToIndividualRequest": {
            "type": "object",
            "properties": {
                "Merge": {
                    "$ref": "#/definitions/Merge"
                },
                "IndividualConstituent": {
                    "$ref": "#/definitions/IndividualConstituent"
                },
                "AssociationIdsToBeDeleted": {
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "AffiliationIdsToBeDeleted": {
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "AffiliationsToAssociationsInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffiliationToAssociationInfo"
                    }
                },
                "AssociationsToAffiliationsInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AssociationToAffiliationInfo"
                    }
                }
            }
        },
        "Merge": {
            "type": "object",
            "properties": {
                "ConstituentIdToKeep": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentIdToDelete": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "IndividualConstituent": {
            "type": "object",
            "properties": {
                "FirstName": {
                    "type": "string"
                },
                "MiddleName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "PrefixId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SuffixId": {
                    "format": "int32",
                    "type": "integer"
                },
                "GenderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentType": {
                    "$ref": "#/definitions/ConstituentType"
                }
            }
        },
        "AffiliationToAssociationInfo": {
            "type": "object",
            "properties": {
                "AffiliationId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AssociationTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AssociationToAffiliationInfo": {
            "type": "object",
            "properties": {
                "AssociationId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AffiliationTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "IndividualToOrganizationRequest": {
            "type": "object",
            "properties": {
                "LastName": {
                    "type": "string"
                },
                "ConstituentTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AssociationIdsToBeDeleted": {
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "AffiliationIdsToBeDeleted": {
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "AffiliationsToAssociationsInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffiliationToAssociationInfo"
                    }
                },
                "AssociationsToAffiliationsInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AssociationToAffiliationInfo"
                    }
                }
            }
        },
        "IndividualToHouseholdRequest": {
            "type": "object",
            "properties": {
                "ConstituentTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AffiliationTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SchedulePurgeRequest": {
            "type": "object",
            "properties": {
                "IgnoreWarnings": {
                    "type": "boolean"
                }
            }
        },
        "BookingFromTemplateRequest": {
            "type": "object",
            "properties": {
                "BookingTemplateId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BookingSource": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConfirmationText": {
                    "type": "string"
                },
                "DefaultCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "DefaultDuration": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "PaymentReserveIdRequest": {
            "type": "object",
            "properties": {
                "Increment": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PaymentReserveIdResponse": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CalculateMembershipRequest": {
            "type": "object",
            "properties": {
                "MembershipOrganizationId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RealOrMirror": {
                    "type": "string"
                },
                "DeclineBenefits": {
                    "type": "string"
                },
                "MembershipLevelOverride": {
                    "type": "string"
                },
                "RenewUpgradeIndicator": {
                    "type": "string"
                },
                "CrediteeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CalcContributionDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CalcContributionAmount": {
                    "format": "double",
                    "type": "number"
                },
                "CalcInitialDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CalcExpirationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CalcConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CalcCampaignId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CalculateMembershipResponse": {
            "type": "object",
            "properties": {
                "CalculatedMembership": {
                    "$ref": "#/definitions/CalculatedMembership"
                },
                "CurrentMembershipSummary": {
                    "$ref": "#/definitions/CurrentMembership"
                }
            }
        },
        "CalculatedMembership": {
            "type": "object",
            "properties": {
                "MembershipLevel": {
                    "type": "string"
                },
                "MembershipLevelId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MembershipAmount": {
                    "format": "double",
                    "type": "number"
                },
                "CurrentMembershipAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ContributionAmount": {
                    "format": "double",
                    "type": "number"
                },
                "AVCAmount": {
                    "format": "double",
                    "type": "number"
                },
                "InitialDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ExpirationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "InceptionDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CurrentStatus": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "CurrentRecord": {
                    "type": "string"
                },
                "Trend": {
                    "format": "int32",
                    "type": "integer"
                },
                "MacroTrend": {
                    "format": "int32",
                    "type": "integer"
                },
                "NRRStatus": {
                    "type": "string"
                },
                "ParentConstituentMembershipId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DeclineBenefits": {
                    "type": "string"
                },
                "CampaignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MembershipMode": {
                    "format": "int32",
                    "type": "integer"
                },
                "RenewUpgradeOverride": {
                    "type": "string"
                }
            }
        },
        "CurrentMembership": {
            "type": "object",
            "properties": {
                "InitialDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ExpirationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "MembershipOrg": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "MembershipLevel": {
                    "$ref": "#/definitions/CurrentMembershipLevelSummary"
                },
                "CurrentStatus": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "CurrentRecord": {
                    "type": "string"
                },
                "ConstituentMembershipId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreateDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "CurrentMembershipLevelSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "StartAmount": {
                    "format": "double",
                    "type": "number"
                },
                "EndAmount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "AuthenticationRequest": {
            "type": "object",
            "properties": {
                "UserName": {
                    "type": "string"
                },
                "UserGroup": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "MachineLocation": {
                    "type": "string"
                },
                "Application": {
                    "type": "string"
                }
            }
        },
        "AuthenticationTokenRequest": {
            "type": "object",
            "properties": {
                "Token": {
                    "type": "string"
                }
            }
        },
        "AuthenticationTokenResponse": {
            "type": "object",
            "properties": {
                "Token": {
                    "type": "string"
                }
            }
        },
        "InvoiceBillingRequest": {
            "type": "object",
            "properties": {
                "InvoiceStartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "InvoiceEndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BillingTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CutoffDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "MinAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ShouldUpdate": {
                    "type": "boolean"
                },
                "AppealId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NewSourceDescription": {
                    "type": "string"
                },
                "MediaTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinNumberOfBillsToPrint": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxNumberOfBillsToPrint": {
                    "format": "int32",
                    "type": "integer"
                },
                "ListId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserId": {
                    "type": "string"
                },
                "BatchTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ShouldCollectAll": {
                    "type": "boolean"
                },
                "MailDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "MailTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsLabel": {
                    "type": "boolean"
                },
                "SalutationTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddressTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddressPurposeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RespectElectronicAddressMarketingFlag": {
                    "type": "boolean"
                },
                "PaymentMethodGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AuthorizationRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Card": {
                    "$ref": "#/definitions/CardData"
                },
                "ThreeDSecureData": {
                    "$ref": "#/definitions/ThreeDSecureData"
                },
                "BillingAddress": {
                    "$ref": "#/definitions/BillingAddress"
                },
                "AuthorizationCode": {
                    "type": "string"
                },
                "ReferenceNumber": {
                    "type": "string"
                },
                "TransactionOrigin": {
                    "type": "string"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsECommerce": {
                    "type": "boolean"
                },
                "IsRecurring": {
                    "type": "boolean"
                },
                "AllowPartialAuth": {
                    "type": "boolean"
                },
                "UserData": {
                    "type": "string"
                },
                "StoreAccount": {
                    "type": "boolean"
                },
                "ReturnUrl": {
                    "type": "string"
                },
                "ShopperIp": {
                    "type": "string"
                },
                "DeliveryDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "CardData": {
            "type": "object",
            "properties": {
                "CardHolderName": {
                    "type": "string"
                },
                "CardNumber": {
                    "type": "string"
                },
                "Cvv2": {
                    "type": "string"
                },
                "ExpirationDate": {
                    "type": "string"
                },
                "Track1": {
                    "type": "string"
                },
                "Track2": {
                    "type": "string"
                },
                "VantivEncryptedCard": {
                    "$ref": "#/definitions/VantivEncryptedCard"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TessituraMerchantServicesData": {
                    "type": "string"
                }
            }
        },
        "ThreeDSecureData": {
            "type": "object",
            "properties": {
                "EciIndicatorType": {
                    "type": "string"
                },
                "SecureTransactionId": {
                    "type": "string"
                },
                "SecureTransactionSecurity": {
                    "type": "string"
                },
                "VerAuthValue": {
                    "type": "string"
                },
                "VerCertificateSerialCardHolder": {
                    "type": "string"
                },
                "VerCertificateSerialCardAcceptor": {
                    "type": "string"
                },
                "VerHashResult": {
                    "type": "string"
                },
                "MpiSessionId": {
                    "type": "string"
                }
            }
        },
        "BillingAddress": {
            "type": "object",
            "properties": {
                "PostalCode": {
                    "type": "string"
                },
                "Street1": {
                    "type": "string"
                },
                "AddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Country": {
                    "type": "string"
                }
            }
        },
        "VantivEncryptedCard": {
            "type": "object",
            "properties": {
                "Version": {
                    "type": "string"
                },
                "vantivDevice": {
                    "$ref": "#/definitions/VantivDevice"
                },
                "vantivCard": {
                    "$ref": "#/definitions/VantivCard"
                },
                "vantivAddr": {
                    "$ref": "#/definitions/VantivAddr"
                },
                "vantivTran": {
                    "$ref": "#/definitions/VantivTran"
                }
            }
        },
        "VantivDevice": {
            "type": "object",
            "properties": {
                "DvcType": {
                    "type": "string"
                },
                "DvcSN": {
                    "type": "string"
                },
                "Entry": {
                    "type": "string"
                }
            }
        },
        "VantivCard": {
            "type": "object",
            "properties": {
                "ECData": {
                    "type": "string"
                },
                "ETrk1": {
                    "type": "string"
                },
                "ETrk2": {
                    "type": "string"
                },
                "CDataKSN": {
                    "type": "string"
                },
                "DbtKSN": {
                    "type": "string"
                },
                "DbtPINB": {
                    "type": "string"
                },
                "Exp": {
                    "type": "string"
                },
                "MskPAN": {
                    "type": "string"
                },
                "CHolder": {
                    "type": "string"
                },
                "EFormat": {
                    "type": "string"
                }
            }
        },
        "VantivAddr": {
            "type": "object",
            "properties": {
                "AvsAddr": {
                    "type": "string"
                },
                "AvsZip": {
                    "type": "string"
                }
            }
        },
        "VantivTran": {
            "type": "object",
            "properties": {
                "TranType": {
                    "type": "string"
                }
            }
        },
        "AuthorizationResponse": {
            "type": "object",
            "properties": {
                "ResponseCode": {
                    "type": "string"
                },
                "ResponseMessage": {
                    "type": "string"
                },
                "AuthorizationCode": {
                    "type": "string"
                },
                "ReferenceNumber": {
                    "type": "string"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CVVResponseCode": {
                    "type": "string"
                },
                "AVSResponseCode": {
                    "type": "string"
                },
                "Succeeded": {
                    "type": "boolean"
                },
                "IsPartialAuth": {
                    "type": "boolean"
                },
                "AuthorizedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "BalanceAmount": {
                    "format": "double",
                    "type": "number"
                },
                "BalanceCurrencyCode": {
                    "type": "string"
                },
                "PaymentMethod": {
                    "$ref": "#/definitions/PaymentMethod"
                },
                "TessituraMerchantServicesAction": {
                    "type": "string"
                },
                "ShopperIp": {
                    "type": "string"
                },
                "MaskedCardNumber": {
                    "type": "string"
                }
            }
        },
        "ConfirmAuthorizationRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TransactionOrigin": {
                    "type": "string"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsECommerce": {
                    "type": "boolean"
                },
                "UserData": {
                    "type": "string"
                }
            }
        },
        "ConfirmAuthorizationResponse": {
            "type": "object",
            "properties": {
                "ResponseMessage": {
                    "type": "string"
                },
                "ResponseCode": {
                    "type": "string"
                },
                "Succeeded": {
                    "type": "boolean"
                }
            }
        },
        "ReversalRequest": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TransactionOrigin": {
                    "type": "string"
                },
                "Card": {
                    "$ref": "#/definitions/CardData"
                },
                "IsECommerce": {
                    "type": "boolean"
                },
                "IsSwiped": {
                    "type": "boolean"
                },
                "IsElementDebit": {
                    "type": "boolean"
                },
                "UserData": {
                    "type": "string"
                }
            }
        },
        "ReversalResponse": {
            "type": "object",
            "properties": {
                "ResponseMessage": {
                    "type": "string"
                },
                "ResponseCode": {
                    "type": "string"
                },
                "Succeeded": {
                    "type": "boolean"
                }
            }
        },
        "FinalizeRequest": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StoreAccount": {
                    "type": "boolean"
                },
                "ActionData": {
                    "type": "string"
                },
                "RedirectResult": {
                    "type": "string"
                }
            }
        },
        "PayByLinkRequest": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MerchantId": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "Currency": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "CountryCode": {
                    "type": "string"
                },
                "Locale": {
                    "type": "string"
                },
                "AllowedPaymentMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "LinkExpiry": {
                    "format": "date-time",
                    "type": "string"
                },
                "StoreAccount": {
                    "type": "boolean"
                },
                "TransactionOrigin": {
                    "type": "string"
                },
                "IsECommerce": {
                    "type": "boolean"
                }
            }
        },
        "PayByLinkResponse": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MerchantId": {
                    "type": "string"
                },
                "MerchantReference": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "Description": {
                    "type": "string"
                },
                "CountryCode": {
                    "type": "string"
                },
                "AllowedPaymentMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Url": {
                    "type": "string"
                },
                "LinkId": {
                    "type": "string"
                },
                "LinkExpiry": {
                    "format": "date-time",
                    "type": "string"
                },
                "StoreAccount": {
                    "type": "boolean"
                }
            }
        },
        "PayByLinkAuthorizationRequest": {
            "type": "object",
            "properties": {
                "BypassNotificationEventCheck": {
                    "type": "boolean"
                }
            }
        },
        "PayByLinkAuthorizationResponse": {
            "type": "object",
            "properties": {
                "IsPending": {
                    "type": "boolean"
                },
                "CardNumber": {
                    "type": "string"
                },
                "CardHolderName": {
                    "type": "string"
                },
                "ResponseCode": {
                    "type": "string"
                },
                "ResponseMessage": {
                    "type": "string"
                },
                "AuthorizationCode": {
                    "type": "string"
                },
                "ReferenceNumber": {
                    "type": "string"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CVVResponseCode": {
                    "type": "string"
                },
                "AVSResponseCode": {
                    "type": "string"
                },
                "Succeeded": {
                    "type": "boolean"
                },
                "IsPartialAuth": {
                    "type": "boolean"
                },
                "AuthorizedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "BalanceAmount": {
                    "format": "double",
                    "type": "number"
                },
                "BalanceCurrencyCode": {
                    "type": "string"
                },
                "PaymentMethod": {
                    "$ref": "#/definitions/PaymentMethod"
                },
                "TessituraMerchantServicesAction": {
                    "type": "string"
                },
                "ShopperIp": {
                    "type": "string"
                },
                "MaskedCardNumber": {
                    "type": "string"
                }
            }
        },
        "PackageSearchRequest": {
            "type": "object",
            "properties": {
                "ArtistIds": {
                    "type": "string"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageFacilityIds": {
                    "type": "string"
                },
                "PerformanceFacilityIds": {
                    "type": "string"
                },
                "FullTextSearch": {
                    "type": "string"
                },
                "PerformanceKeywordAndOr": {
                    "type": "string"
                },
                "PerformanceKeywordIds": {
                    "type": "string"
                },
                "PackageKeywordAndOr": {
                    "type": "string"
                },
                "PackageKeywordIds": {
                    "type": "string"
                },
                "MatchAllPerformances": {
                    "type": "boolean"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PackageStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PackageTypeIds": {
                    "type": "string"
                },
                "PerformanceEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "SeasonIds": {
                    "type": "string"
                }
            }
        },
        "PackageSearchResponse": {
            "type": "object",
            "properties": {
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageCode": {
                    "type": "string"
                },
                "PackageDescription": {
                    "type": "string"
                },
                "PackageType": {
                    "$ref": "#/definitions/PackageTypeSummary"
                },
                "PackageDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Facility": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "FacilityDescription": {
                    "type": "string"
                },
                "FirstPerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastPerformanceDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FixedSeatIndicator": {
                    "type": "boolean"
                },
                "FlexIndicator": {
                    "type": "boolean"
                },
                "MinimumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaximumPerformances": {
                    "format": "int32",
                    "type": "integer"
                },
                "RankType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "RankTypeDescription": {
                    "type": "string"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "SuperPackageIndicator": {
                    "type": "boolean"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                },
                "ConstituentInterestWeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ZoneMapDescription": {
                    "type": "string"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ModeOfSaleDescription": {
                    "type": "string"
                },
                "ModeOfSaleStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ModeOfSaleEndDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "ReportScheduleNextRequest": {
            "type": "object",
            "properties": {
                "DayOfWeek": {
                    "format": "int32",
                    "type": "integer"
                },
                "DayWeekNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Interval": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "StartTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                }
            }
        },
        "ReportScheduleNextRun": {
            "type": "object",
            "properties": {
                "NextDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "PaymentGatewayCredentialRequest": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MerchantId": {
                    "type": "string"
                }
            }
        },
        "PaymentGatewayCredential": {
            "type": "object",
            "properties": {
                "Profile": {
                    "$ref": "#/definitions/PaymentProfile"
                },
                "ApiKey": {
                    "type": "string"
                },
                "ClientKey": {
                    "type": "string"
                },
                "ShopperReferenceId": {
                    "type": "string"
                },
                "PaymentUrlPrefix": {
                    "type": "string"
                }
            }
        },
        "PaymentProfile": {
            "type": "object",
            "properties": {
                "Environment": {
                    "type": "string"
                },
                "Region": {
                    "type": "string"
                },
                "MerchantAccount": {
                    "type": "string"
                },
                "Currency": {
                    "type": "string"
                },
                "StoreReference": {
                    "type": "string"
                }
            }
        },
        "PasswordChangeRequest": {
            "type": "object",
            "properties": {
                "OldPassword": {
                    "type": "string"
                },
                "NewPassword": {
                    "type": "string"
                }
            }
        },
        "PerformanceCopyRequest": {
            "type": "object",
            "properties": {
                "AvailSaleIndicator": {
                    "type": "boolean"
                },
                "Code": {
                    "type": "string"
                },
                "CopyCredits": {
                    "type": "boolean"
                },
                "CopyNotes": {
                    "type": "boolean"
                },
                "CopyOffers": {
                    "type": "boolean"
                },
                "CopyPriceLayers": {
                    "type": "boolean"
                },
                "CopyPriceEvents": {
                    "type": "boolean"
                },
                "DateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "DefaultSaleDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ModeOfSaleDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "type": "integer"
                },
                "PriceTypeDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "type": "integer"
                },
                "PriceEventDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1
                    ],
                    "type": "integer"
                },
                "PublishDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "type": "integer"
                },
                "SourcePerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductionSeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ShortName": {
                    "type": "string"
                },
                "TimeSlotId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PerformanceRescheduleRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "TimeSlotId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Campaign": {
                    "$ref": "#/definitions/Campaign"
                },
                "Code": {
                    "type": "string"
                },
                "ProductionSeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModeOfSaleDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "type": "integer"
                },
                "PriceTypeDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "type": "integer"
                },
                "PriceEventDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1
                    ],
                    "type": "integer"
                },
                "DefaultSaleDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "type": "integer"
                },
                "PublishDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "type": "integer"
                },
                "OffersDateOption": {
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "type": "integer"
                }
            }
        },
        "ApplySingleHoldRequest": {
            "type": "object",
            "properties": {
                "HoldCodeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReplaceMode": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldUntilDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "ApplySingleHoldResponse": {
            "type": "object",
            "properties": {
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatId": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldCodeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldUntilDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "SeatStatus": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PerformanceSearchRequest": {
            "type": "object",
            "properties": {
                "PerformanceStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "KeywordIds": {
                    "type": "string"
                },
                "KeywordAndOr": {
                    "type": "string"
                },
                "ArtistIds": {
                    "type": "string"
                },
                "SeasonIds": {
                    "type": "string"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductionSeasonIds": {
                    "type": "string"
                },
                "FullTextSearch": {
                    "type": "string"
                },
                "FacilityIds": {
                    "type": "string"
                },
                "PerformanceTypeIds": {
                    "type": "string"
                }
            }
        },
        "PerformanceSearchResponse": {
            "type": "object",
            "properties": {
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceCode": {
                    "type": "string"
                },
                "PerformanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Facility": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "FacilityDescription": {
                    "type": "string"
                },
                "PerformanceDescription": {
                    "type": "string"
                },
                "PerformanceShortName": {
                    "type": "string"
                },
                "ProductionSeason": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneMap": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ZoneMapDescription": {
                    "type": "string"
                },
                "AvailSaleIndicator": {
                    "type": "string"
                },
                "ConstituentInterestWeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "Season": {
                    "$ref": "#/definitions/SeasonSummary"
                },
                "PublishClientStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PublishClientEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PublishWebApiStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PublishWebApiEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "DoorsOpen": {
                    "format": "date-time",
                    "type": "string"
                },
                "DoorsClose": {
                    "format": "date-time",
                    "type": "string"
                },
                "Duration": {
                    "format": "int32",
                    "type": "integer"
                },
                "SalesNotes": {
                    "type": "string"
                },
                "SalesNotesRequired": {
                    "type": "boolean"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                },
                "RankType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "RankTypeDescription": {
                    "type": "string"
                },
                "PerformanceType": {
                    "$ref": "#/definitions/PerformanceTypeSummary"
                },
                "PerformanceStatus": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "PerformanceStatusDescription": {
                    "type": "string"
                },
                "TimeSlot": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "TimeSlotDescription": {
                    "type": "string"
                },
                "ModeOfSale": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ModeOfSaleDescription": {
                    "type": "string"
                },
                "ModeOfSaleStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ModeOfSaleEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "IsRestricted": {
                    "type": "boolean"
                },
                "ValidCountries": {
                    "type": "string"
                }
            }
        },
        "BulkCopyDayRequest": {
            "type": "object",
            "properties": {
                "PerformanceCodeCounter": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageCodeCounter": {
                    "format": "int32",
                    "type": "integer"
                },
                "CopyToDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "BulkCopyEventRequest": {
            "type": "object",
            "properties": {
                "CopyToDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceCodeCounter": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SessionRequest": {
            "type": "object",
            "properties": {
                "IpAddress": {
                    "type": "string"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Organization": {
                    "type": "string"
                },
                "PromotionCode": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SessionResponse": {
            "type": "object",
            "properties": {
                "SessionKey": {
                    "type": "string"
                }
            }
        },
        "BusinessFacingSessionRequest": {
            "type": "object",
            "properties": {
                "IpAddress": {
                    "type": "string"
                },
                "BusinessUnit": {
                    "format": "int32",
                    "type": "integer"
                },
                "Organization": {
                    "type": "string"
                },
                "SessionInfo": {
                    "$ref": "#/definitions/SessionInfo"
                }
            }
        },
        "SessionInfo": {
            "type": "object",
            "properties": {
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PromotionCode": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "LoginRequest": {
            "type": "object",
            "properties": {
                "UserName": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PromotionCode": {
                    "format": "int32",
                    "type": "integer"
                },
                "PersistSessionOnFailure": {
                    "type": "boolean"
                }
            }
        },
        "LoginAsGuestRequest": {
            "type": "object",
            "properties": {
                "EmailAddress": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddressTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "LoginEmailRequest": {
            "type": "object",
            "properties": {
                "EmailAddress": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PromotionCode": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "LoginConstituentInfoRequest": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EmailAddress": {
                    "type": "string"
                },
                "PhoneNumber": {
                    "type": "string"
                },
                "PostalCode": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PromotionCode": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "LoginTokenRequest": {
            "type": "object",
            "properties": {
                "EmailAddress": {
                    "type": "string"
                },
                "ForgotLoginToken": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PromotionCode": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "LoginExternalRequest": {
            "type": "object",
            "properties": {
                "UserName": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PromotionCode": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SessionWebLogin": {
            "type": "object",
            "properties": {
                "ConstituentUpdateDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Constituent": {
                    "$ref": "#/definitions/Entity"
                },
                "Email": {
                    "$ref": "#/definitions/Entity"
                },
                "FailedAttempts": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "LastLoginDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LockedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Login": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "LoginType": {
                    "$ref": "#/definitions/LoginTypeSummary"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "TemporaryIndicator": {
                    "type": "boolean"
                },
                "EditIndicator": {
                    "type": "boolean"
                }
            }
        },
        "WebLoginUpdateRequest": {
            "type": "object",
            "properties": {
                "LoginName": {
                    "type": "string"
                },
                "NewLoginName": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "NewPassword": {
                    "type": "string"
                },
                "EmailAddress": {
                    "type": "string"
                },
                "NewEmailAddress": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PromotionCode": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SendCredentialsRequest": {
            "type": "object",
            "properties": {
                "EmailAddress": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TemplateFormatId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "TransferSessionRequest": {
            "type": "object",
            "properties": {
                "NewSessionKey": {
                    "type": "string"
                }
            }
        },
        "WebPromoCodeRequest": {
            "type": "object",
            "properties": {
                "PromoCodeString": {
                    "type": "string"
                },
                "PromoCode": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "WebPromoCode": {
            "type": "object",
            "properties": {
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OverrideRankIndicator": {
                    "type": "string"
                },
                "PromoCode": {
                    "type": "string"
                },
                "PromotionDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Source": {
                    "$ref": "#/definitions/SourceSummary"
                },
                "Text1": {
                    "type": "string"
                },
                "Text2": {
                    "type": "string"
                },
                "Text3": {
                    "type": "string"
                },
                "Text4": {
                    "type": "string"
                },
                "Text5": {
                    "type": "string"
                },
                "Text6": {
                    "type": "string"
                }
            }
        },
        "ReprintRequest": {
            "type": "object",
            "properties": {
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EmailAddressId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ReturnTicketWithNumberRequest": {
            "type": "object",
            "properties": {
                "Checksum": {
                    "type": "string"
                },
                "TicketNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReturnOrDonate": {
                    "type": "string"
                }
            }
        },
        "ReturnTicketWithSeatRequest": {
            "type": "object",
            "properties": {
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "Checksum": {
                    "type": "string"
                },
                "ReturnOrDonate": {
                    "type": "string"
                }
            }
        },
        "ReserveTicketsRequest": {
            "type": "object",
            "properties": {
                "PriceType": {
                    "type": "string"
                },
                "PriceTypeReason": {
                    "type": "string"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NumberOfSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SpecialRequests": {
                    "type": "string"
                },
                "Unseated": {
                    "type": "boolean"
                },
                "RequestedSeats": {
                    "type": "string"
                }
            }
        },
        "ReserveTicketsResponse": {
            "type": "object",
            "properties": {
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatsReserved": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AddContributionRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "FundId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Upgrade": {
                    "type": "boolean"
                },
                "Renew": {
                    "type": "boolean"
                },
                "MembershipLevelId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                },
                "CustomDataItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomDataItem"
                    }
                }
            }
        },
        "AddContributionResponse": {
            "type": "object",
            "properties": {
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AddSubPackageItemRequest": {
            "type": "object",
            "properties": {
                "ParentSuperPackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SuperPackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceType": {
                    "type": "string"
                },
                "PriceTypeReason": {
                    "type": "string"
                },
                "SubPackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NumberOfSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RequestedSeats": {
                    "type": "string"
                },
                "LeaveSingleSeats": {
                    "type": "boolean"
                },
                "Unseated": {
                    "type": "boolean"
                }
            }
        },
        "AddSubPackageItemResponse": {
            "type": "object",
            "properties": {
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SuperPackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AddNFSPackagePerformanceItemRequest": {
            "type": "object",
            "properties": {
                "NFSPackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceType": {
                    "type": "string"
                },
                "PriceTypeReason": {
                    "type": "string"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NumberOfSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RequestedSeats": {
                    "type": "string"
                },
                "LeaveSingleSeats": {
                    "type": "boolean"
                },
                "SpecialRequests": {
                    "type": "string"
                },
                "Unseated": {
                    "type": "boolean"
                }
            }
        },
        "AddNFSPackagePerformanceItemResponse": {
            "type": "object",
            "properties": {
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NFSPackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatsReserved": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AddPackageItemRequest": {
            "type": "object",
            "properties": {
                "PriceType": {
                    "type": "string"
                },
                "PriceTypeReason": {
                    "type": "string"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NumberOfSeats": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RequestedSeats": {
                    "type": "string"
                },
                "LeaveSingleSeats": {
                    "type": "boolean"
                },
                "ParentPackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Unseated": {
                    "type": "boolean"
                }
            }
        },
        "AddPackageItemResponse": {
            "type": "object",
            "properties": {
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatsReserved": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AddUpdateFeeRequest": {
            "type": "object",
            "properties": {
                "Action": {
                    "type": "string"
                },
                "ItemFeeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FeeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "AddUpdateFeeResponse": {
            "type": "object",
            "properties": {
                "ItemFeeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CheckoutWithCardRequest": {
            "type": "object",
            "properties": {
                "CreditCardType": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "AllowUnderPayment": {
                    "type": "boolean"
                },
                "Authorize": {
                    "type": "boolean"
                },
                "AuthorizationCode": {
                    "type": "string"
                },
                "ECommerce": {
                    "type": "boolean"
                },
                "CreditCardTrack1": {
                    "type": "string"
                },
                "CreditCardTrack2": {
                    "type": "string"
                },
                "ZipCode": {
                    "type": "string"
                },
                "StoreAccount": {
                    "type": "boolean"
                },
                "DeliveryDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "CheckoutResponse": {
            "type": "object",
            "properties": {
                "Status": {
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                }
            }
        },
        "CheckoutRequest": {
            "type": "object",
            "properties": {
                "CreditCardOwner": {
                    "type": "string"
                },
                "CreditCardNumber": {
                    "type": "string"
                },
                "CreditCardType": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreditCardMonth": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreditCardYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "AllowUnderPayment": {
                    "type": "boolean"
                },
                "CreditCardAuthenticationCode": {
                    "type": "string"
                },
                "Authorize": {
                    "type": "boolean"
                },
                "AuthorizationCode": {
                    "type": "string"
                },
                "SecureValues": {
                    "type": "string"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZipCode": {
                    "type": "string"
                },
                "Address": {
                    "type": "string"
                },
                "PaymentReference": {
                    "type": "string"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ECommerce": {
                    "type": "boolean"
                },
                "StoreAccount": {
                    "type": "boolean"
                },
                "DeliveryDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "PrintOrderRequest": {
            "type": "object",
            "properties": {
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "HeaderDesignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IncludeReceipts": {
                    "type": "boolean"
                },
                "ReprintTickets": {
                    "type": "boolean"
                },
                "TicketDesignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Mode": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItems": {
                    "type": "string"
                },
                "SubLineItems": {
                    "type": "string"
                },
                "NewTicketNoForReprints": {
                    "type": "boolean"
                },
                "PrinterType": {
                    "type": "string"
                }
            }
        },
        "TicketElement": {
            "type": "object",
            "properties": {
                "SliNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "Val": {
                    "type": "string"
                },
                "EleNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "EleSlNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "EleType": {
                    "type": "string"
                },
                "EleX1": {
                    "format": "int32",
                    "type": "integer"
                },
                "EleY1": {
                    "format": "int32",
                    "type": "integer"
                },
                "Mask": {
                    "type": "string"
                },
                "FontNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "FontRotation": {
                    "type": "string"
                },
                "FontX": {
                    "format": "int32",
                    "type": "integer"
                },
                "FontY": {
                    "format": "int32",
                    "type": "integer"
                },
                "BoxX": {
                    "format": "int32",
                    "type": "integer"
                },
                "BoxY": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineWidth": {
                    "format": "int32",
                    "type": "integer"
                },
                "NegPrintInd": {
                    "type": "string"
                },
                "DataLen": {
                    "format": "int32",
                    "type": "integer"
                },
                "DataType": {
                    "type": "string"
                },
                "RectHeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "RectWidth": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineHeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineThick": {
                    "format": "int32",
                    "type": "integer"
                },
                "TextWidth": {
                    "format": "int32",
                    "type": "integer"
                },
                "TextHeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReprintInd": {
                    "type": "string"
                },
                "EleHeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "EleWidth": {
                    "format": "int32",
                    "type": "integer"
                },
                "JustifyText": {
                    "type": "string"
                },
                "BarcodeInd": {
                    "type": "string"
                },
                "BarcodeTypeNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "BarcodeInterpInd": {
                    "type": "string"
                },
                "BarcodeExpand": {
                    "format": "int32",
                    "type": "integer"
                },
                "BarcodeHeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "BarcodeImage": {
                    "format": "byte",
                    "type": "string"
                },
                "DesignNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ElementType": {
                    "type": "string"
                },
                "OrderNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "IdentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CompositeTicketNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "QrScaling": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PrintOrderResponse": {
            "type": "object",
            "properties": {
                "PrintStrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "EmailTicketsResponse": {
            "type": "object",
            "properties": {
                "TicketsString": {
                    "type": "string"
                }
            }
        },
        "CartValidationRequest": {
            "type": "object",
            "properties": {
                "ValidateSuperPackages": {
                    "type": "boolean"
                },
                "ValidateFSPackages": {
                    "type": "boolean"
                },
                "ValidateNFSPackages": {
                    "type": "boolean"
                },
                "ValidatePaymentPlan": {
                    "type": "boolean"
                }
            }
        },
        "CartValidationResponse": {
            "type": "object",
            "properties": {
                "SuperPackageErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SuperPackageError"
                    }
                },
                "FSPackageErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FSPackageError"
                    }
                },
                "NFSPackageErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NFSPackageError"
                    }
                },
                "PaymentPlanError": {
                    "$ref": "#/definitions/PaymentPlanError"
                }
            }
        },
        "SuperPackageError": {
            "type": "object",
            "properties": {
                "SuperPackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Error": {
                    "type": "string"
                }
            }
        },
        "FSPackageError": {
            "type": "object",
            "properties": {
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Error": {
                    "type": "string"
                }
            }
        },
        "NFSPackageError": {
            "type": "object",
            "properties": {
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Error": {
                    "type": "string"
                }
            }
        },
        "PaymentPlanError": {
            "type": "object",
            "properties": {
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Error": {
                    "type": "string"
                }
            }
        },
        "PaymentPlanRequest": {
            "type": "object",
            "properties": {
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "NumberOfPayments": {
                    "format": "int32",
                    "type": "integer"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Card": {
                    "$ref": "#/definitions/PaymentPlanCard"
                },
                "BillingTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PaymentPlanSchedulePreviewRequest": {
            "type": "object",
            "properties": {
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "BillingScheduleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OverrideAmountToSchedule": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "PaymentPlanPreview": {
            "type": "object",
            "properties": {
                "AmountDue": {
                    "format": "double",
                    "type": "number"
                },
                "DateDue": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "PaymentPlanScheduleRequest": {
            "type": "object",
            "properties": {
                "StartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "BillingScheduleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Card": {
                    "$ref": "#/definitions/PaymentPlanCard"
                },
                "BillingTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OverrideAmountToSchedule": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "PaymentPlanInstallmentRequest": {
            "type": "object",
            "properties": {
                "PaymentPlanInstallments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentPlanInstallment"
                    }
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Card": {
                    "$ref": "#/definitions/PaymentPlanCard"
                },
                "BillingTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PaymentPlanInstallment": {
            "type": "object",
            "properties": {
                "DueDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "ApplyOtherPaymentRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "ApplyPaymentResponse": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ApplyInvoicePaymentRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "ApplyCashPaymentRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "TenderedAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "ApplyCheckPaymentRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PayerName": {
                    "type": "string"
                },
                "CheckNumber": {
                    "type": "string"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "ApplyOnAccountPaymentRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "AddOnAccountRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "AddOnAccountResponse": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "WebEmvAuthorizationRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "TransactionOrigin": {
                    "type": "string"
                },
                "UserData": {
                    "type": "string"
                },
                "MachineId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsMoto": {
                    "type": "boolean"
                }
            }
        },
        "WebEmvAuthorizationResponse": {
            "type": "object",
            "properties": {
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AuthorizationResponse": {
                    "$ref": "#/definitions/AuthorizationResponse"
                },
                "EmvStatus": {
                    "$ref": "#/definitions/EMVStatus"
                }
            }
        },
        "EMVStatus": {
            "type": "object",
            "properties": {
                "Status": {
                    "type": "string"
                },
                "CardMnemonic": {
                    "type": "string"
                },
                "SignatureRequired": {
                    "type": "boolean"
                },
                "AccountNumber": {
                    "type": "string"
                },
                "CardHolderName": {
                    "type": "string"
                },
                "DpsTxnRef": {
                    "type": "string"
                },
                "AuthCode": {
                    "type": "string"
                },
                "Succeeded": {
                    "type": "boolean"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AddGiftCertificateRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                }
            }
        },
        "CartProductResponse": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ParentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ItemCount": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ApplyGiftCertificatePaymentRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "GiftCertificateNumber": {
                    "type": "string"
                },
                "Notes": {
                    "type": "string"
                }
            }
        },
        "ValidateLimitsRequest": {
            "type": "object",
            "properties": {
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatCount": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CoreIdentitySignRequest": {
            "type": "object",
            "properties": {
                "Method": {
                    "type": "string"
                },
                "Path": {
                    "type": "string"
                },
                "Headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NameValue"
                    }
                },
                "QueryParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NameValue"
                    }
                },
                "Body": {
                    "type": "string"
                }
            }
        },
        "CoreIdentitySignResponse": {
            "type": "object",
            "properties": {
                "Username": {
                    "type": "string"
                },
                "Token": {
                    "type": "string"
                },
                "Body": {
                    "type": "string"
                },
                "Signature": {
                    "type": "string"
                },
                "LicenseeAccountCode": {
                    "type": "string"
                }
            }
        },
        "ScheduleOccurrencesRequest": {
            "type": "object",
            "properties": {
                "ResourceIds": {
                    "type": "string"
                },
                "ConstituentIds": {
                    "type": "string"
                },
                "ResourceTypeIds": {
                    "type": "string"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ExpandWorkerAssignments": {
                    "type": "boolean"
                }
            }
        },
        "ScheduleOccurrence": {
            "type": "object",
            "properties": {
                "ScheduleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ScheduleDescription": {
                    "type": "string"
                },
                "ScheduleTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "RecurrencePattern": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsShared": {
                    "type": "boolean"
                },
                "Count": {
                    "format": "int32",
                    "type": "integer"
                },
                "BookingAssignmentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Resource": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "Booking": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ResourceType": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "ResourceCategory": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "FindAvailableResourcesRequest": {
            "type": "object",
            "properties": {
                "ResourceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ResourceCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "QualificationIds": {
                    "type": "string"
                }
            }
        },
        "ResourceSearchSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "Capacity": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                },
                "WorkerConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultConfirmationText": {
                    "type": "string"
                }
            }
        },
        "ContactPermissionsTransactionRequest": {
            "type": "object",
            "properties": {
                "OwnerId": {
                    "format": "int32",
                    "type": "integer"
                },
                "InitiatorId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductionSeasonIds": {
                    "type": "string"
                },
                "ReturnRequiredOnly": {
                    "type": "boolean"
                }
            }
        },
        "ParameterValuesRequest": {
            "type": "object",
            "properties": {
                "ReportId": {
                    "type": "string"
                },
                "ParameterName": {
                    "type": "string"
                },
                "WhereDependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParameterValueWhereDependencies"
                    }
                }
            }
        },
        "ParameterValueWhereDependencies": {
            "type": "object",
            "properties": {
                "ParameterId": {
                    "type": "string"
                },
                "Values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ParameterOption": {
            "type": "object",
            "properties": {
                "Inactive": {
                    "type": "boolean"
                },
                "DisplayText": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "PaymentComponentRequest": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "CardBrandsToInclude": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ShowStoredCards": {
                    "type": "boolean"
                },
                "MerchantId": {
                    "type": "string"
                },
                "ComponentVersion": {
                    "type": "string"
                }
            }
        },
        "PaymentComponentResponse": {
            "type": "object",
            "properties": {
                "Payload": {
                    "type": "string"
                },
                "Url": {
                    "type": "string"
                },
                "Checksum": {
                    "type": "string"
                },
                "ComponentVersion": {
                    "type": "string"
                }
            }
        },
        "EmailSendRequest": {
            "type": "object",
            "properties": {
                "RecipientAddress": {
                    "type": "string"
                },
                "HtmlBody": {
                    "type": "string"
                },
                "PlainTextBody": {
                    "type": "string"
                },
                "FromAddress": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "DuplicateBodyAsAttachment": {
                    "type": "boolean"
                },
                "DuplicateBodyAttachmentName": {
                    "type": "string"
                },
                "EmailProfileId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EmailAttachment"
                    }
                },
                "EmbeddedImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EmailEmbeddedImage"
                    }
                }
            }
        },
        "EmailAttachment": {
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                },
                "AttachmentBytes": {
                    "format": "byte",
                    "type": "string"
                }
            }
        },
        "EmailEmbeddedImage": {
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                },
                "ImageBytes": {
                    "format": "byte",
                    "type": "string"
                },
                "MediaType": {
                    "type": "string"
                }
            }
        },
        "SendTemplateEmailRequest": {
            "type": "object",
            "properties": {
                "TemplateId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EmailAddress": {
                    "type": "string"
                },
                "EmailProfileId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NameValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NameValue"
                    }
                }
            }
        },
        "SendTicketTemplateEmailRequest": {
            "type": "object",
            "properties": {
                "TemplateId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EmailAddress": {
                    "type": "string"
                },
                "EmailProfileId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PrintOrderTicketsRequest": {
                    "$ref": "#/definitions/PrintOrderTicketsRequest"
                }
            }
        },
        "PrintOrderTicketsRequest": {
            "type": "object",
            "properties": {
                "HeaderDesignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IncludeReceipts": {
                    "type": "boolean"
                },
                "ReprintTickets": {
                    "type": "boolean"
                },
                "TicketDesignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItems": {
                    "type": "string"
                },
                "SubLineItems": {
                    "type": "string"
                },
                "NewTicketNoForReprints": {
                    "type": "boolean"
                },
                "PrinterType": {
                    "type": "string"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CreateCardNumberAccountRequest": {
            "type": "object",
            "properties": {
                "AccountNumber": {
                    "type": "string"
                },
                "CardExpiryMonth": {
                    "format": "int32",
                    "type": "integer"
                },
                "CardExpiryYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                },
                "PaymentMethodGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TransactionOrigin": {
                    "type": "string"
                },
                "ExclusiveToControlledBatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "VantivEncryptedCard": {
                    "$ref": "#/definitions/VantivEncryptedCard"
                },
                "ReturnAccountIfAccountExists": {
                    "type": "boolean"
                }
            }
        },
        "CreateVantivEncryptedCardAccountRequest": {
            "type": "object",
            "properties": {
                "VantivEncryptedCard": {
                    "$ref": "#/definitions/VantivEncryptedCard"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                },
                "PaymentMethodGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ExclusiveToControlledBatchId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CreateDirectDebitAccountRequest": {
            "type": "object",
            "properties": {
                "AccountNumber": {
                    "type": "string"
                },
                "CardExpiryMonth": {
                    "format": "int32",
                    "type": "integer"
                },
                "CardExpiryYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                },
                "DirectDebitAccountType": {
                    "$ref": "#/definitions/DirectDebitAccountTypeSummary"
                }
            }
        },
        "CreateSepaAccountRequest": {
            "type": "object",
            "properties": {
                "AccountNumber": {
                    "type": "string"
                },
                "BankIdentifierCode": {
                    "type": "string"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "MandateNumber": {
                    "type": "string"
                },
                "MandateType": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "SignatureDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "DatabaseCheckRequest": {
            "type": "object",
            "properties": {
                "ServerName": {
                    "type": "string"
                }
            }
        },
        "DatabaseCheckResponse": {
            "type": "object",
            "properties": {
                "Match": {
                    "type": "boolean"
                }
            }
        },
        "TemplateBody": {
            "type": "object",
            "properties": {
                "Body": {
                    "type": "string"
                },
                "IsHtmlBody": {
                    "type": "boolean"
                }
            }
        },
        "RenderRequest": {
            "type": "object",
            "properties": {
                "Body": {
                    "type": "string"
                },
                "NameValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NameValue"
                    }
                }
            }
        },
        "RenderResponse": {
            "type": "object",
            "properties": {
                "Body": {
                    "type": "string"
                }
            }
        },
        "TicketsRenderRequest": {
            "type": "object",
            "properties": {
                "Body": {
                    "type": "string"
                },
                "PrintOrderTicketsRequest": {
                    "$ref": "#/definitions/PrintOrderTicketsRequest"
                }
            }
        },
        "LocalProcedureRequest": {
            "type": "object",
            "properties": {
                "ProcedureId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProcedureName": {
                    "type": "string"
                },
                "Parameters": {
                    "type": "string"
                },
                "ParameterValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParameterValue"
                    }
                }
            }
        },
        "ParameterValue": {
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            }
        },
        "OutputResultRequest": {
            "type": "object",
            "properties": {
                "OutputSetId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MailingDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "AddressPurposeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UseLabelAddress": {
                    "type": "boolean"
                },
                "SalutationTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddressTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddressPurposeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EMarketingIndicator": {
                    "type": "boolean"
                },
                "MembershipOrganizationId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SearchText": {
                    "type": "string"
                },
                "SortBy": {
                    "type": "string"
                },
                "Page": {
                    "format": "int32",
                    "type": "integer"
                },
                "PageSize": {
                    "format": "int32",
                    "type": "integer"
                },
                "DisableListGenerate": {
                    "type": "boolean"
                },
                "FormatDate": {
                    "type": "boolean"
                }
            }
        },
        "ListSearchRequest": {
            "type": "object",
            "properties": {
                "MyListsOnly": {
                    "type": "boolean"
                },
                "ShowEmpty": {
                    "type": "boolean"
                },
                "CategoryId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Page": {
                    "format": "int32",
                    "type": "integer"
                },
                "PageSize": {
                    "format": "int32",
                    "type": "integer"
                },
                "SearchText": {
                    "type": "string"
                }
            }
        },
        "RegisterConstituent": {
            "type": "object",
            "properties": {
                "Address": {
                    "$ref": "#/definitions/RegisterAddress"
                },
                "Affiliates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RegisterAffiliate"
                    }
                },
                "ConstituentTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ElectronicAddress": {
                    "$ref": "#/definitions/RegisterElectronicAddress"
                },
                "EmarketIndicatorId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FirstName": {
                    "type": "string"
                },
                "GenderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LastName": {
                    "type": "string"
                },
                "MailIndicatorId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MiddleName": {
                    "type": "string"
                },
                "NameStatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OriginalSourceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PhoneIndicatorId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Phones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RegisterPhone"
                    }
                },
                "PrefixId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Salutation": {
                    "$ref": "#/definitions/RegisterSalutationRequest"
                },
                "SortName": {
                    "type": "string"
                },
                "SuffixId": {
                    "format": "int32",
                    "type": "integer"
                },
                "WebLogin": {
                    "$ref": "#/definitions/RegisterWebLogin"
                },
                "SourceId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "RegisterAddress": {
            "type": "object",
            "properties": {
                "AddressTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "City": {
                    "type": "string"
                },
                "PostalCode": {
                    "type": "string"
                },
                "StateId": {
                    "type": "string"
                },
                "Street1": {
                    "type": "string"
                },
                "Street2": {
                    "type": "string"
                },
                "Street3": {
                    "type": "string"
                },
                "CountryId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "RegisterAffiliate": {
            "type": "object",
            "properties": {
                "AffiliationTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NameIndicator": {
                    "format": "int32",
                    "type": "integer"
                },
                "Note": {
                    "type": "string"
                },
                "Title": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                },
                "MiddleName": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "NameStatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Prefix": {
                    "$ref": "#/definitions/PrefixSummary"
                },
                "Suffix": {
                    "$ref": "#/definitions/SuffixSummary"
                },
                "Gender": {
                    "$ref": "#/definitions/GenderSummary"
                },
                "SortName": {
                    "type": "string"
                },
                "ConstituentTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "RegisterElectronicAddress": {
            "type": "object",
            "properties": {
                "Address": {
                    "type": "string"
                },
                "ElectronicAddressTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AllowHtmlFormat": {
                    "type": "boolean"
                },
                "AllowMarketing": {
                    "type": "boolean"
                }
            }
        },
        "RegisterPhone": {
            "type": "object",
            "properties": {
                "AllowTelemarketing": {
                    "type": "boolean"
                },
                "DayEveningIndicator": {
                    "type": "string"
                },
                "PhoneNumber": {
                    "type": "string"
                },
                "PhoneTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "RegisterSalutationRequest": {
            "type": "object",
            "properties": {
                "BusinessTitle": {
                    "type": "string"
                },
                "EnvelopeSalutation1": {
                    "type": "string"
                },
                "EnvelopeSalutation2": {
                    "type": "string"
                },
                "LetterSalutation": {
                    "type": "string"
                },
                "SalutationTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "RegisterWebLogin": {
            "type": "object",
            "properties": {
                "Login": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Password": {
                    "type": "string"
                }
            }
        },
        "AccountTokenRequest": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentMethodGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Card": {
                    "$ref": "#/definitions/CardData"
                },
                "Token": {
                    "type": "string"
                },
                "IsECommerce": {
                    "type": "boolean"
                },
                "NetworkTransactionId": {
                    "type": "string"
                },
                "DateUsed": {
                    "format": "date-time",
                    "type": "string"
                },
                "ShopperReference": {
                    "type": "string"
                }
            }
        },
        "PaymentAccountResponse": {
            "type": "object",
            "properties": {
                "ResponseCode": {
                    "type": "string"
                },
                "ResponseMessage": {
                    "type": "string"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AccountReferenceNumberRequest": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReferenceNumber": {
                    "type": "string"
                }
            }
        },
        "GiftCertificateRedemptionRequest": {
            "type": "object",
            "properties": {
                "Number": {
                    "type": "string"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LockForBatch": {
                    "type": "boolean"
                },
                "PaymentMethodId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "GiftCertificateTransaction": {
            "type": "object",
            "properties": {
                "Action": {
                    "type": "string"
                },
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "TransactionDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "EMVAuthorizationRequest": {
            "type": "object",
            "properties": {
                "Amount": {
                    "format": "double",
                    "type": "number"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BillingAddress": {
                    "$ref": "#/definitions/BillingAddress"
                },
                "TransactionOrigin": {
                    "type": "string"
                },
                "UserData": {
                    "type": "string"
                },
                "StoreAccount": {
                    "type": "boolean"
                },
                "MachineId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsMoto": {
                    "type": "boolean"
                }
            }
        },
        "EMVAuthorizationResponse": {
            "type": "object",
            "properties": {
                "AuthorizationResponse": {
                    "$ref": "#/definitions/AuthorizationResponse"
                },
                "EMVStatus": {
                    "$ref": "#/definitions/EMVStatus"
                }
            }
        },
        "EMVSignatureRequest": {
            "type": "object",
            "properties": {
                "SignatureMatches": {
                    "type": "boolean"
                },
                "MachineId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StoreAccount": {
                    "type": "boolean"
                }
            }
        },
        "EMVTokenCreateRequest": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TransactionOrigin": {
                    "type": "string"
                },
                "MachineId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsMoto": {
                    "type": "boolean"
                }
            }
        },
        "LaneCreate": {
            "type": "object",
            "properties": {
                "LaneId": {
                    "type": "string"
                },
                "TerminalId": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "ActivationCode": {
                    "type": "string"
                },
                "MarketCode": {
                    "type": "string"
                }
            }
        },
        "ProductSearchRequest": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TitleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateRange": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateRange": {
                    "format": "date-time",
                    "type": "string"
                },
                "TimeSlotId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ComposerId": {
                    "format": "int32",
                    "type": "integer"
                },
                "LanguageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ArtistId": {
                    "format": "int32",
                    "type": "integer"
                },
                "KeywordId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FacilityId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OneOrAllPerformancesInPackage": {
                    "type": "string"
                },
                "DayOfWeek": {
                    "type": "string"
                },
                "SeasonIds": {
                    "type": "string"
                },
                "SeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OnSaleOnly": {
                    "type": "boolean"
                },
                "ShowGrossAvailability": {
                    "type": "boolean"
                },
                "ShowConstituentAvailability": {
                    "type": "boolean"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductionSeasonIds": {
                    "type": "string"
                },
                "ProductionSeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceIds": {
                    "type": "string"
                },
                "PackageSeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageIds": {
                    "type": "string"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateRangePackage": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateRangePackage": {
                    "format": "date-time",
                    "type": "string"
                },
                "Keywords": {
                    "type": "string"
                },
                "KeywordAndOr": {
                    "format": "int32",
                    "type": "integer"
                },
                "KeywordDescriptions": {
                    "type": "string"
                },
                "ShowAll": {
                    "type": "boolean"
                },
                "FullText": {
                    "type": "string"
                },
                "FullTextType": {
                    "type": "string"
                },
                "IsWebSearch": {
                    "type": "boolean"
                }
            }
        },
        "ProductSearchResponse": {
            "type": "object",
            "properties": {
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageCode": {
                    "type": "string"
                },
                "PerformanceCode": {
                    "type": "string"
                },
                "PerformanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "GrossAvailability": {
                    "format": "int32",
                    "type": "integer"
                },
                "AvailabilityByConstituent": {
                    "format": "int32",
                    "type": "integer"
                },
                "FacilityId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TimeSlotId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "IsOnSale": {
                    "type": "boolean"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductionSeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsFixedSeatPackage": {
                    "type": "boolean"
                },
                "ZoneMapId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "FirstDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "LastDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "SearchWeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsSuperPackage": {
                    "type": "boolean"
                },
                "IsFlexPackage": {
                    "type": "boolean"
                },
                "ProductTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductTypeDescription": {
                    "type": "string"
                },
                "PerformanceStatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SearchRelevance": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeasonDescription": {
                    "type": "string"
                },
                "ProductionSeasonDescription": {
                    "type": "string"
                },
                "ProductShortDescription": {
                    "type": "string"
                },
                "PackageDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "ProductDescribeRequest": {
            "type": "object",
            "properties": {
                "ProductionSeasonIds": {
                    "type": "string"
                },
                "PerformanceIds": {
                    "type": "string"
                },
                "PackageTypeIds": {
                    "type": "string"
                },
                "PackageIds": {
                    "type": "string"
                }
            }
        },
        "ProductDescribeResponse": {
            "type": "object",
            "properties": {
                "ProductTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeasonDescription": {
                    "type": "string"
                },
                "ProductId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductDescription": {
                    "type": "string"
                },
                "ProductDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ProductCode": {
                    "type": "string"
                }
            }
        },
        "GenerateScheduledRequest": {
            "type": "object",
            "properties": {}
        },
        "GenerateScheduledResponse": {
            "type": "object",
            "properties": {
                "GeneratedCount": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PerformancePriceLayerSearchRequest": {
            "type": "object",
            "properties": {
                "PerformanceIds": {
                    "type": "string"
                },
                "AsOfDateTime": {
                    "type": "string"
                },
                "AsOfRelativeDate": {
                    "type": "string"
                }
            }
        },
        "PerformancePriceResponse": {
            "type": "object",
            "properties": {
                "PerformancePriceLayers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformancePriceLayerSummary"
                    }
                },
                "LayerTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PriceLayerTypeSummary"
                    }
                }
            }
        },
        "PerformancePriceLayerSummary": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "EffectiveDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultDesignationCodeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultGlAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DefaultResaleAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceLayerTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TemplateId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformancePriceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformancePriceTypeSummary"
                    }
                }
            }
        },
        "PerformancePriceTypeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DesignationCodeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "EffectiveDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ResaleAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsWithinDateRange": {
                    "type": "boolean"
                },
                "GlAccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformancePriceLayerId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TicketDesignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BaseIndicator": {
                    "type": "boolean"
                },
                "Prices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "PledgeBillingRequest": {
            "type": "object",
            "properties": {
                "CampaignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FundIds": {
                    "type": "string"
                },
                "BillingTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "EndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CutoffDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "MinAmount": {
                    "format": "double",
                    "type": "number"
                },
                "ShouldUpdate": {
                    "type": "boolean"
                },
                "AppealId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NewSourceDescription": {
                    "type": "string"
                },
                "MediaTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MinNumberOfBillsToPrint": {
                    "format": "int32",
                    "type": "integer"
                },
                "MaxNumberOfBillsToPrint": {
                    "format": "int32",
                    "type": "integer"
                },
                "ListId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MailDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "MailTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsLabel": {
                    "type": "boolean"
                },
                "SalutationTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "UserId": {
                    "type": "string"
                },
                "BatchTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PaymentMethodGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AcknowledgementLetterId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Order": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "InitiatorId": {
                    "format": "int32",
                    "type": "integer"
                },
                "VirtualConstituencies": {
                    "type": "string"
                },
                "TotalDue": {
                    "format": "double",
                    "type": "number"
                },
                "Messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PricingRuleMessageSummary"
                    }
                },
                "CategoryId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AcceptingRollovers": {
                    "type": "boolean"
                },
                "AccountId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AltAddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AppliedMessageRules": {
                    "type": "string"
                },
                "BatchId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BusinessUnitId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "Custom0": {
                    "type": "string"
                },
                "Custom1": {
                    "type": "string"
                },
                "Custom2": {
                    "type": "string"
                },
                "Custom3": {
                    "type": "string"
                },
                "Custom4": {
                    "type": "string"
                },
                "Custom5": {
                    "type": "string"
                },
                "Custom6": {
                    "type": "string"
                },
                "Custom7": {
                    "type": "string"
                },
                "Custom8": {
                    "type": "string"
                },
                "Custom9": {
                    "type": "string"
                },
                "DeliveryMethodId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AltElectronicAddressId": {
                    "format": "int32",
                    "type": "integer"
                },
                "HoldUntilDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "MirrorLock": {
                    "format": "int32",
                    "type": "integer"
                },
                "Notes": {
                    "type": "string"
                },
                "OrderDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "Solicitor": {
                    "type": "string"
                },
                "SourceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AppealId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ChannelId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModeOfSaleId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReloadPricingRules": {
                    "type": "boolean"
                },
                "LineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LineItem"
                    }
                },
                "DeliveryDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "PricingRuleMessageSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Message": {
                    "type": "string"
                },
                "MessageType": {
                    "$ref": "#/definitions/PricingRuleMessageTypeSummary"
                },
                "PricingRule": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "IsFromMessageOnlyRule": {
                    "type": "boolean"
                }
            }
        },
        "LineItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Package": {
                    "$ref": "#/definitions/LineItemPackage"
                },
                "Performance": {
                    "$ref": "#/definitions/LineItemPerformance"
                },
                "Source": {
                    "$ref": "#/definitions/LineItemSource"
                },
                "SuperPackage": {
                    "$ref": "#/definitions/LineItemPackage"
                },
                "TotalDue": {
                    "format": "double",
                    "type": "number"
                },
                "PrimaryIndicator": {
                    "type": "boolean"
                },
                "SubLineItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubLineItem"
                    }
                },
                "AltUpgradeIndicator": {
                    "type": "string"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "PrimaryLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "MirrorLock": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Priority": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "LineItemPackage": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "TypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeasonId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "LineItemPerformance": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "ProductionSeasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeasonId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "LineItemSource": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "AppealId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SubLineItem": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OriginalPriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "AppliedRule": {
                    "$ref": "#/definitions/SubLineItemPricingRule"
                },
                "RuleIndicator": {
                    "type": "string"
                },
                "TotalDue": {
                    "format": "double",
                    "type": "number"
                },
                "ApplyPricing": {
                    "type": "boolean"
                },
                "UnAllocatedDiscount": {
                    "format": "double",
                    "type": "number"
                },
                "SubLineItemDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubLineItemDetail"
                    }
                },
                "PriceTypeReasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "UpdatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "UpdatedBy": {
                    "type": "string"
                },
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ReturnParentSubLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatId": {
                    "format": "int32",
                    "type": "integer"
                },
                "StatusId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TicketNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "UnseatableReasonId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "RecipientId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SubLineItemPricingRule": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SubLineItemDetail": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "CampaignId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PerformancePriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "DiscountTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "BenevolentIndicator": {
                    "type": "boolean"
                },
                "CreatedDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "CreateLocation": {
                    "type": "string"
                },
                "CreatedBy": {
                    "type": "string"
                },
                "NonDiscountPrice": {
                    "format": "double",
                    "type": "number"
                },
                "PaidAmount": {
                    "format": "double",
                    "type": "number"
                },
                "SubLineItemId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "OrdersForDeliveryRequest": {
            "type": "object",
            "properties": {
                "ModesOfSale": {
                    "type": "string"
                },
                "PerformanceStartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PerformanceEndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "OrderStartDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "OrderEndDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "OrderDaysInPast": {
                    "format": "int32",
                    "type": "integer"
                },
                "DeliveryMethods": {
                    "type": "string"
                },
                "MaxRowsToReturn": {
                    "format": "int32",
                    "type": "integer"
                },
                "UsePrimaryEmail": {
                    "type": "boolean"
                },
                "OrganizationName": {
                    "type": "string"
                }
            }
        },
        "OrdersForDeliveryResponse": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OrderDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "ModeOfSale": {
                    "format": "int32",
                    "type": "integer"
                },
                "DeliveryMethod": {
                    "format": "int32",
                    "type": "integer"
                },
                "EmailAddress": {
                    "type": "string"
                },
                "ElectronicAddressId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PrintOrderTicketsResponse": {
            "type": "object",
            "properties": {
                "OrderNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "Header": {
                    "$ref": "#/definitions/TicketHeader"
                },
                "Receipts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TicketReceipt"
                    }
                },
                "Tickets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PrintTicket"
                    }
                }
            }
        },
        "TicketHeader": {
            "type": "object",
            "properties": {
                "TicketElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TicketElement"
                    }
                }
            }
        },
        "TicketReceipt": {
            "type": "object",
            "properties": {
                "PaymentNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "TicketElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TicketElement"
                    }
                }
            }
        },
        "PrintTicket": {
            "type": "object",
            "properties": {
                "TicketNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "IsComposite": {
                    "type": "boolean"
                },
                "TicketElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TicketElement"
                    }
                },
                "Seats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TicketSeat"
                    }
                }
            }
        },
        "TicketSeat": {
            "type": "object",
            "properties": {
                "PackageLineNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "LineItemNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "SubLineItemNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "TicketNumber": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PrintOrderHtmlTicketsRequest": {
            "type": "object",
            "properties": {
                "PrintOrderTicketsRequest": {
                    "$ref": "#/definitions/PrintOrderTicketsRequest"
                },
                "TemplateId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "PrintOrderHtmlTicketsResponse": {
            "type": "object",
            "properties": {
                "OrderId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Tickets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HtmlTicket"
                    }
                }
            }
        },
        "HtmlTicket": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "Html": {
                    "type": "string"
                },
                "Seat": {
                    "$ref": "#/definitions/CartSeat"
                }
            }
        },
        "ZoneSearchRequest": {
            "type": "object",
            "properties": {
                "ProductionSeasonIds": {
                    "type": "string"
                },
                "PerformanceIds": {
                    "type": "string"
                },
                "PackageTypeIds": {
                    "type": "string"
                },
                "PackageIds": {
                    "type": "string"
                },
                "ZoneIds": {
                    "type": "string"
                }
            }
        },
        "ZoneSearchResponse": {
            "type": "object",
            "properties": {
                "FacilityId": {
                    "format": "int32",
                    "type": "integer"
                },
                "FacilityDescription": {
                    "type": "string"
                },
                "ZoneMapId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneMapDescription": {
                    "type": "string"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneDescription": {
                    "type": "string"
                },
                "Rank": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "RecordAttendanceTicketRequest": {
            "type": "object",
            "properties": {
                "ProfileId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TicketNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "OverrideDoorsOpen": {
                    "type": "boolean"
                }
            }
        },
        "RecordAttendanceResponse": {
            "type": "object",
            "properties": {
                "NscanControlStatus": {
                    "$ref": "#/definitions/NscanControlStatus"
                },
                "AttendanceStatus": {
                    "$ref": "#/definitions/AttendanceStatus"
                },
                "SubLineItemRecordStatus": {
                    "$ref": "#/definitions/SubLineItemRecordStatus"
                }
            }
        },
        "NscanControlStatus": {
            "type": "object",
            "properties": {
                "NscanControlTableEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ControlTableEntry"
                    }
                },
                "Updated": {
                    "type": "boolean"
                },
                "FailureReason": {
                    "type": "string"
                }
            }
        },
        "AttendanceStatus": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "TotalCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "AdultCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "ChildCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "OtherCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "Updated": {
                    "type": "boolean"
                },
                "FailureReason": {
                    "type": "string"
                }
            }
        },
        "SubLineItemRecordStatus": {
            "type": "object",
            "properties": {
                "SubLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TicketNo": {
                    "format": "int32",
                    "type": "integer"
                },
                "Updated": {
                    "type": "boolean"
                },
                "FailureReason": {
                    "type": "string"
                }
            }
        },
        "ControlTableEntry": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "WebLoginValidationRequest": {
            "type": "object",
            "properties": {
                "LoginName": {
                    "type": "string"
                },
                "LoginTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Password": {
                    "type": "string"
                }
            }
        },
        "WebLoginValidationResponse": {
            "type": "object",
            "properties": {
                "IsAuthenticated": {
                    "type": "boolean"
                },
                "Constituent": {
                    "$ref": "#/definitions/ConstituentDisplaySummary"
                }
            }
        },
        "PriceEventMoveRequest": {
            "type": "object",
            "properties": {
                "EventIds": {
                    "type": "string"
                },
                "EventDateTime": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "ExpirePayByLinkResponse": {
            "type": "object",
            "properties": {
                "ExpiresAt": {
                    "format": "date-time",
                    "type": "string"
                },
                "Id": {
                    "type": "string"
                },
                "Reference": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Url": {
                    "type": "string"
                },
                "IsSuccessful": {
                    "type": "boolean"
                }
            }
        },
        "ExpireSeatHoldRequest": {
            "type": "object",
            "properties": {
                "ExpireAsOfDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "SeatIds": {
                    "type": "string"
                }
            }
        },
        "SetConstituentRequest": {
            "type": "object",
            "properties": {
                "ConstituentId": {
                    "format": "int32",
                    "type": "integer"
                },
                "OverridePrompt": {
                    "type": "boolean"
                }
            }
        },
        "WebConstituentDisplaySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "format": "int32",
                    "type": "integer"
                },
                "DisplayName": {
                    "type": "string"
                }
            }
        },
        "CartFlags": {
            "type": "object",
            "properties": {
                "ShouldCalculatePrices": {
                    "type": "boolean"
                },
                "ShouldCalculateFees": {
                    "type": "boolean"
                }
            }
        },
        "SourceRequest": {
            "type": "object",
            "properties": {
                "SourceId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SourceResponse": {
            "type": "object",
            "properties": {
                "OldSource": {
                    "$ref": "#/definitions/EntitySummary"
                },
                "NewSource": {
                    "$ref": "#/definitions/EntitySummary"
                }
            }
        },
        "UpdatePriceTypeRequest": {
            "type": "object",
            "properties": {
                "OriginalPriceType": {
                    "format": "int32",
                    "type": "integer"
                },
                "NewPriceType": {
                    "format": "int32",
                    "type": "integer"
                },
                "NewPriceTypeReason": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "UpdatePriceRequest": {
            "type": "object",
            "properties": {
                "NewPrice": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "UpdatePriceResponse": {
            "type": "object",
            "properties": {
                "LineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SubLineItemId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PerformanceId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PackageId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "SeatNumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "DueAmount": {
                    "format": "double",
                    "type": "number"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "NonDiscountPrice": {
                    "format": "double",
                    "type": "number"
                },
                "Status": {
                    "type": "string"
                },
                "Error": {
                    "type": "string"
                }
            }
        },
        "ApplyDiscountRequest": {
            "type": "object",
            "properties": {
                "DiscountTypeId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "UpdateRecipientRequest": {
            "type": "object",
            "properties": {
                "RecipientId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "UpdateCardNumberAccountRequest": {
            "type": "object",
            "properties": {
                "CardExpiryMonth": {
                    "format": "int32",
                    "type": "integer"
                },
                "CardExpiryYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                },
                "PaymentMethodGroupId": {
                    "format": "int32",
                    "type": "integer"
                },
                "TransactionOrigin": {
                    "type": "string"
                }
            }
        },
        "UpdateDirectDebitAccountRequest": {
            "type": "object",
            "properties": {
                "CardExpiryMonth": {
                    "format": "int32",
                    "type": "integer"
                },
                "CardExpiryYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "DirectDebitAccountType": {
                    "$ref": "#/definitions/DirectDebitAccountTypeSummary"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                }
            }
        },
        "UpdateSepaAccountRequest": {
            "type": "object",
            "properties": {
                "BankIdentifierCode": {
                    "type": "string"
                },
                "Inactive": {
                    "type": "boolean"
                },
                "MandateType": {
                    "format": "int32",
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "SignatureDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "PriceUpdateRequest": {
            "type": "object",
            "properties": {
                "PerformanceIds": {
                    "type": "string"
                },
                "EffectiveDateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "PriceLayerTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "PriceTypeId": {
                    "format": "int32",
                    "type": "integer"
                },
                "ZoneId": {
                    "format": "int32",
                    "type": "integer"
                },
                "Price": {
                    "format": "double",
                    "type": "number"
                },
                "MinPrice": {
                    "format": "double",
                    "type": "number"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "Editable": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "basic": {
            "type": "basic",
            "description": "Basic HTTP Authentication"
        }
    }
}