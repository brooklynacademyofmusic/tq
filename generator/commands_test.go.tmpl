{{ print "// Code generated by tq/generator; DO NOT EDIT." }}

package cmd

import (
	"testing"
    "regexp"
    "strings"

	"github.com/stretchr/testify/assert"
    "github.com/skysyzygy/tq/tq"
    "github.com/spf13/viper"
)

{{ $op := .op }}
{{- range $key, $commands := .commands }}
{{- range $commands }}
func Test_{{ print $op "_" $key "_" .Variant "_cmd" }}(t *testing.T) {
        command := {{ print $op "_" $key "_cmd" }}
        use := command.Use

        {{ if ne .Variant "" -}}
        flag := command.Flag("{{ .Variant }}")
        if flag != nil {
            flag.Value.Set("true")
            defer flag.Value.Set("false")
            use = flag.Usage
        }
        {{ end -}}

		input := regexp.MustCompile(`\{.+\}$`).FindString(
                            strings.ReplaceAll(use,",...",""))

        out, err := tq.CaptureOutput(func(){
            viper.Set("login",authString)
            // PreRun: tqInit
            if err := command.PreRunE(command, nil); err != nil {
                panic(err)
            }
            {{`//Use: {{ print $key " " $command.Usage `}}
            if err := command.RunE(command, []string{input}); err != nil {
                _tq.Log.Error(err.Error())
            }
        })
    
        assert.Empty(t, string(err))
        // Note need to test output better
        assert.NotEmpty(t, string(out))
        
}
{{ end }}
{{- end }}