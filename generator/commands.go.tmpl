{{ print "// Code generated by tq/generator; DO NOT EDIT." }}

package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/skysyzygy/tq/tq"
)

{{ $op := .op }}
{{- $makeAliases := .makeAliases}}

{{- range $key, $commands := .commands }}
{{- $command := index $commands 0 }}
var {{ print $op "_" $key "_cmd" }} = &cobra.Command{
		Aliases: []string{ {{ range call $makeAliases $command.Thing }} "{{ . }}", {{end}} },
		Use: `{{ print $key " " $command.Usage }}`,
		Short: `{{ $command.Short }}`,
		Long:  `{{ $command.Long }}`,
		PreRunE: tqInit,
		RunE: func(cmd *cobra.Command, args []string) error {
			var out []byte
			var err error
			if len(args) == 0 {
				args = make([]string,1)
			}
			{{ if gt (len $commands) 1 }}
			{{- range slice $commands 1 -}}
			if test, _ := cmd.Flags().GetBool("{{ .Variant }}"); test {
				out, err = tq.Do(*_tq, {{ print "_tq." $op "." .Name }} , []byte(args[0]))
			} else{{ " " }} 
			{{- end -}}
			{
				out, err = tq.Do(*_tq, {{ print "_tq." $op "." $command.Name }} , []byte(args[0]))
			}
			{{- else }}
			out, err = tq.Do(*_tq, {{ print "_tq." $op "." $command.Name }} , []byte(args[0]))
			{{- end }}
			if err == nil {
				fmt.Println(out)
			} 
			return err
		},
	}
{{ end }}

func init() {
	{{- range $key, $commands := .commands }}
		{{ $op }}_cmd.AddCommand({{ print $op "_" $key "_cmd" }})
		{{- if gt (len $commands) 1 }}
			{{- range slice $commands 1 }} 
				{{ print $op "_" $key "_cmd" }}.Flags().Bool("{{ .Variant }}", false, 
					`{{ printf "%v\n%v" .Long .Usage }}`)
			{{- end }} 
		{{- end }}
	{{ end }}
}


